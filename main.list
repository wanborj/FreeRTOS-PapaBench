
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 ad 38 01 00 f1 38 01 00 f1 38 01 00     ... .8...8...8..
      10:	f1 38 01 00 f1 38 01 00 f1 38 01 00 00 00 00 00     .8...8...8......
	...
      2c:	bd 45 00 00 f1 38 01 00 00 00 00 00 c9 46 00 00     .E...8.......F..
      3c:	05 47 00 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .G...8...8...8..
      4c:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      5c:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      6c:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      7c:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      8c:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      9c:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      ac:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      bc:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      cc:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
      dc:	f1 38 01 00 f1 38 01 00 f1 38 01 00 f1 38 01 00     .8...8...8...8..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000139d4 	.word	0x000139d4
     6d0:	20000000 	.word	0x20000000
     6d4:	200001a0 	.word	0x200001a0
     6d8:	200001a0 	.word	0x200001a0
     6dc:	2000ae6c 	.word	0x2000ae6c

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f9b5 	bl	4768 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 230c 	movw	r3, #524	; 0x20c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 230c 	movw	r3, #524	; 0x20c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 2310 	movw	r3, #528	; 0x210
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 2310 	movw	r3, #528	; 0x210
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 12a0 	movw	r2, #416	; 0x1a0
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 2314 	movw	r3, #532	; 0x214
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 230c 	movw	r3, #524	; 0x20c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 230c 	movw	r3, #524	; 0x20c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 2314 	movw	r3, #532	; 0x214
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 13f4 	movw	r3, #500	; 0x1f4
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 230c 	movw	r3, #524	; 0x20c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 13f0 	movw	r3, #496	; 0x1f0
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 230c 	movw	r3, #524	; 0x20c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 230c 	movw	r3, #524	; 0x20c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 13f8 	movw	r3, #504	; 0x1f8
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 2310 	movw	r3, #528	; 0x210
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 2310 	movw	r3, #528	; 0x210
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 12a0 	movw	r2, #416	; 0x1a0
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 13f8 	movw	r3, #504	; 0x1f8
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fb0d 	bl	3c24 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 2318 	movw	r3, #536	; 0x218
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 231c 	movw	r3, #540	; 0x21c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 2314 	movw	r3, #532	; 0x214
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 2314 	movw	r3, #532	; 0x214
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 231c 	movw	r3, #540	; 0x21c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 231c 	movw	r3, #540	; 0x21c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 2314 	movw	r3, #532	; 0x214
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 13f4 	movw	r3, #500	; 0x1f4
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 13f0 	movw	r3, #496	; 0x1f0
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 13f4 	movw	r3, #500	; 0x1f4
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 2314 	movw	r3, #532	; 0x214
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 2310 	movw	r3, #528	; 0x210
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 2310 	movw	r3, #528	; 0x210
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 12a0 	movw	r2, #416	; 0x1a0
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 13f0 	movw	r3, #496	; 0x1f0
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 231c 	movw	r3, #540	; 0x21c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 2314 	movw	r3, #532	; 0x214
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 2318 	movw	r3, #536	; 0x218
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 2310 	movw	r3, #528	; 0x210
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 2310 	movw	r3, #528	; 0x210
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 2310 	movw	r3, #528	; 0x210
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 2310 	movw	r3, #528	; 0x210
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 12a0 	movw	r2, #416	; 0x1a0
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 2310 	movw	r3, #528	; 0x210
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 12a0 	movw	r2, #416	; 0x1a0
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 230c 	movw	r3, #524	; 0x20c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 230c 	movw	r3, #524	; 0x20c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 230c 	movw	r3, #524	; 0x20c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 230c 	movw	r3, #524	; 0x20c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 12a0 	movw	r2, #416	; 0x1a0
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 10c8 	movw	r0, #456	; 0x1c8
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 10dc 	movw	r0, #476	; 0x1dc
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 10f8 	movw	r0, #504	; 0x1f8
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 13f0 	movw	r3, #496	; 0x1f0
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 12c8 	movw	r2, #456	; 0x1c8
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 13f4 	movw	r3, #500	; 0x1f4
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 12dc 	movw	r2, #476	; 0x1dc
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 10f8 	movw	r0, #504	; 0x1f8
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 230c 	movw	r3, #524	; 0x20c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <vTask_0>:
extern void  send_mode();
extern void  send_debug();
extern void  send_nav_ref();

void vTask_0()
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2a74:	f00e fa5c 	bl	10f30 <last_radio_from_ppm>
}
    2a78:	bd80      	pop	{r7, pc}
    2a7a:	bf00      	nop

00002a7c <vTask_1>:

void  vTask_1()
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2a80:	f00e fe10 	bl	116a4 <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2a84:	f00e fd4c 	bl	11520 <spi_reset>
}
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	bf00      	nop

00002a8c <vTask_2>:

void  vTask_2()
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2a90:	f00e ff50 	bl	11934 <check_mega128_values_task>
}
    2a94:	bd80      	pop	{r7, pc}
    2a96:	bf00      	nop

00002a98 <vTask_3>:

void vTask_3()
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2a9c:	f00f f822 	bl	11ae4 <servo_transmit>
}
    2aa0:	bd80      	pop	{r7, pc}
    2aa2:	bf00      	nop

00002aa4 <vTask_4>:

void vTask_4()
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2aa8:	f00e ff3a 	bl	11920 <check_failsafe_task>
}
    2aac:	bd80      	pop	{r7, pc}
    2aae:	bf00      	nop

00002ab0 <vTask_5>:

void vTask_5()
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2ab4:	f007 fe2a 	bl	a70c <radio_control_task>
    ir_gain_calib();
    2ab8:	f00a f87e 	bl	cbb8 <ir_gain_calib>
}
    2abc:	bd80      	pop	{r7, pc}
    2abe:	bf00      	nop

00002ac0 <vTask_6>:

void vTask_6()
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	af00      	add	r7, sp, #0
    ir_update();
    2ac4:	f00a f83a 	bl	cb3c <ir_update>
    estimator_update_state_infrared();
    2ac8:	f00d fac0 	bl	1004c <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2acc:	f00a f8a4 	bl	cc18 <roll_pitch_pid_run>
}
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop

00002ad4 <vTask_7>:

void vTask_7()
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2ad8:	f009 faa2 	bl	c020 <link_fbw_send>
}
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop

00002ae0 <vTask_8>:

void vTask_8()
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2ae4:	f009 fd74 	bl	c5d0 <parse_gps_msg>
    send_gps_pos();
    2ae8:	f009 f91e 	bl	bd28 <send_gps_pos>
    send_radIR();
    2aec:	f009 f92e 	bl	bd4c <send_radIR>
    send_takeOff();
    2af0:	f009 f932 	bl	bd58 <send_takeOff>
}
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop

00002af8 <vTask_9>:

void vTask_9()
{
    2af8:	b580      	push	{r7, lr}
    2afa:	af00      	add	r7, sp, #0
    nav_home();
    2afc:	f00d f828 	bl	fb50 <nav_home>
    nav_update();
    2b00:	f00d f84c 	bl	fb9c <nav_update>
    course_pid_run();
    2b04:	f00a f974 	bl	cdf0 <course_pid_run>
}
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop

00002b0c <vTask_10>:

void vTask_10()
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
    altitude_pid_run();
    2b10:	f00a fbf6 	bl	d300 <altitude_pid_run>
}
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop

00002b18 <vTask_11>:

void vTask_11()
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
    climb_pid_run();
    2b1c:	f00a fa20 	bl	cf60 <climb_pid_run>
}
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop

00002b24 <vTask_12>:

void vTask_12()
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    send_boot();
    2b28:	f002 f8b8 	bl	4c9c <send_boot>
    send_attitude();
    2b2c:	f003 f886 	bl	5c3c <send_attitude>
    send_adc();
    2b30:	f003 fd78 	bl	6624 <send_adc>
    send_settings();
    2b34:	f003 fffe 	bl	6b34 <send_settings>
    send_desired();
    2b38:	f004 fc00 	bl	733c <send_desired>
    send_bat();
    2b3c:	f005 fb2e 	bl	819c <send_bat>
    send_climb();
    2b40:	f005 fee2 	bl	8908 <send_climb>
    send_mode();
    2b44:	f006 fc52 	bl	93ec <send_mode>
    send_debug();
    2b48:	f006 ff24 	bl	9994 <send_debug>
    send_nav_ref();
    2b4c:	f007 f9f8 	bl	9f40 <send_nav_ref>
}
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop

00002b54 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2b5e:	2301      	movs	r3, #1
    2b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	2b01      	cmp	r3, #1
    2b66:	d00b      	beq.n	2b80 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d001      	beq.n	2b74 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2b70:	2300      	movs	r3, #0
    2b72:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	691b      	ldr	r3, [r3, #16]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d001      	beq.n	2b80 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2b7c:	2300      	movs	r3, #0
    2b7e:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	2b01      	cmp	r3, #1
    2b84:	d12f      	bne.n	2be6 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	681a      	ldr	r2, [r3, #0]
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b8e:	6879      	ldr	r1, [r7, #4]
    2b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2b92:	fb01 f303 	mul.w	r3, r1, r3
    2b96:	441a      	add	r2, r3
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	2200      	movs	r2, #0
    2ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	681a      	ldr	r2, [r3, #0]
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bb2:	3b01      	subs	r3, #1
    2bb4:	6879      	ldr	r1, [r7, #4]
    2bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2bb8:	fb01 f303 	mul.w	r3, r1, r3
    2bbc:	441a      	add	r2, r3
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	f04f 32ff 	mov.w	r2, #4294967295
    2bc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	f04f 32ff 	mov.w	r2, #4294967295
    2bd0:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	3310      	adds	r3, #16
    2bd6:	4618      	mov	r0, r3
    2bd8:	f7ff fe96 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	3324      	adds	r3, #36	; 0x24
    2be0:	4618      	mov	r0, r3
    2be2:	f7ff fe91 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2be6:	68fb      	ldr	r3, [r7, #12]
}
    2be8:	4618      	mov	r0, r3
    2bea:	3710      	adds	r7, #16
    2bec:	46bd      	mov	sp, r7
    2bee:	bd80      	pop	{r7, pc}

00002bf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b088      	sub	sp, #32
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	60f8      	str	r0, [r7, #12]
    2bf8:	60b9      	str	r1, [r7, #8]
    2bfa:	4613      	mov	r3, r2
    2bfc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2bfe:	2300      	movs	r3, #0
    2c00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d026      	beq.n	2c56 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c08:	204c      	movs	r0, #76	; 0x4c
    2c0a:	f001 fdad 	bl	4768 <pvPortMalloc>
    2c0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c10:	69bb      	ldr	r3, [r7, #24]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d01f      	beq.n	2c56 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	68ba      	ldr	r2, [r7, #8]
    2c1a:	fb02 f303 	mul.w	r3, r2, r3
    2c1e:	3301      	adds	r3, #1
    2c20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c22:	6978      	ldr	r0, [r7, #20]
    2c24:	f001 fda0 	bl	4768 <pvPortMalloc>
    2c28:	4602      	mov	r2, r0
    2c2a:	69bb      	ldr	r3, [r7, #24]
    2c2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c2e:	69bb      	ldr	r3, [r7, #24]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d00c      	beq.n	2c50 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c36:	69bb      	ldr	r3, [r7, #24]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2c3c:	69bb      	ldr	r3, [r7, #24]
    2c3e:	68ba      	ldr	r2, [r7, #8]
    2c40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c42:	69b8      	ldr	r0, [r7, #24]
    2c44:	2101      	movs	r1, #1
    2c46:	f7ff ff85 	bl	2b54 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c4a:	69bb      	ldr	r3, [r7, #24]
    2c4c:	61fb      	str	r3, [r7, #28]
    2c4e:	e002      	b.n	2c56 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c50:	69b8      	ldr	r0, [r7, #24]
    2c52:	f001 fe4d 	bl	48f0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c56:	69fb      	ldr	r3, [r7, #28]
}
    2c58:	4618      	mov	r0, r3
    2c5a:	3720      	adds	r7, #32
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2c60:	b580      	push	{r7, lr}
    2c62:	b084      	sub	sp, #16
    2c64:	af00      	add	r7, sp, #0
    2c66:	4603      	mov	r3, r0
    2c68:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c6a:	204c      	movs	r0, #76	; 0x4c
    2c6c:	f001 fd7c 	bl	4768 <pvPortMalloc>
    2c70:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d02c      	beq.n	2cd2 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	2200      	movs	r2, #0
    2c7c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2c7e:	68fb      	ldr	r3, [r7, #12]
    2c80:	2200      	movs	r2, #0
    2c82:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	2200      	movs	r2, #0
    2c88:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	2200      	movs	r2, #0
    2c8e:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	2200      	movs	r2, #0
    2c94:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	2201      	movs	r2, #1
    2c9a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	2200      	movs	r2, #0
    2ca0:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2ca2:	68fb      	ldr	r3, [r7, #12]
    2ca4:	f04f 32ff 	mov.w	r2, #4294967295
    2ca8:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2caa:	68fb      	ldr	r3, [r7, #12]
    2cac:	f04f 32ff 	mov.w	r2, #4294967295
    2cb0:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	3310      	adds	r3, #16
    2cb6:	4618      	mov	r0, r3
    2cb8:	f7ff fe26 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	3324      	adds	r3, #36	; 0x24
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff fe21 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2cc6:	68f8      	ldr	r0, [r7, #12]
    2cc8:	2100      	movs	r1, #0
    2cca:	2200      	movs	r2, #0
    2ccc:	2300      	movs	r3, #0
    2cce:	f000 f81d 	bl	2d0c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2cd2:	68fb      	ldr	r3, [r7, #12]
	}
    2cd4:	4618      	mov	r0, r3
    2cd6:	3710      	adds	r7, #16
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}

00002cdc <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2ce4:	f001 fcbe 	bl	4664 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d103      	bne.n	2cf8 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	685b      	ldr	r3, [r3, #4]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e001      	b.n	2cfc <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2cf8:	2300      	movs	r3, #0
    2cfa:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2cfc:	f001 fcc8 	bl	4690 <vPortExitCritical>
		
		return pxReturn;
    2d00:	68fb      	ldr	r3, [r7, #12]
	}
    2d02:	4618      	mov	r0, r3
    2d04:	3710      	adds	r7, #16
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop

00002d0c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b088      	sub	sp, #32
    2d10:	af00      	add	r7, sp, #0
    2d12:	60f8      	str	r0, [r7, #12]
    2d14:	60b9      	str	r1, [r7, #8]
    2d16:	607a      	str	r2, [r7, #4]
    2d18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d1a:	2300      	movs	r3, #0
    2d1c:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d1e:	f001 fca1 	bl	4664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d22:	68fb      	ldr	r3, [r7, #12]
    2d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d26:	68fb      	ldr	r3, [r7, #12]
    2d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d2a:	429a      	cmp	r2, r3
    2d2c:	d216      	bcs.n	2d5c <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d2e:	68f8      	ldr	r0, [r7, #12]
    2d30:	68b9      	ldr	r1, [r7, #8]
    2d32:	683a      	ldr	r2, [r7, #0]
    2d34:	f000 f9d6 	bl	30e4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d009      	beq.n	2d54 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d40:	68fb      	ldr	r3, [r7, #12]
    2d42:	3324      	adds	r3, #36	; 0x24
    2d44:	4618      	mov	r0, r3
    2d46:	f001 f92f 	bl	3fa8 <xTaskRemoveFromEventList>
    2d4a:	4603      	mov	r3, r0
    2d4c:	2b01      	cmp	r3, #1
    2d4e:	d101      	bne.n	2d54 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d50:	f001 fc7a 	bl	4648 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d54:	f001 fc9c 	bl	4690 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d58:	2301      	movs	r3, #1
    2d5a:	e059      	b.n	2e10 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d103      	bne.n	2d6a <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d62:	f001 fc95 	bl	4690 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2d66:	2300      	movs	r3, #0
    2d68:	e052      	b.n	2e10 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d6a:	69fb      	ldr	r3, [r7, #28]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d106      	bne.n	2d7e <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2d70:	f107 0314 	add.w	r3, r7, #20
    2d74:	4618      	mov	r0, r3
    2d76:	f001 f96f 	bl	4058 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2d7a:	2301      	movs	r3, #1
    2d7c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2d7e:	f001 fc87 	bl	4690 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2d82:	f000 fe93 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2d86:	f001 fc6d 	bl	4664 <vPortEnterCritical>
    2d8a:	68fb      	ldr	r3, [r7, #12]
    2d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d92:	d102      	bne.n	2d9a <xQueueGenericSend+0x8e>
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	2200      	movs	r2, #0
    2d98:	645a      	str	r2, [r3, #68]	; 0x44
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2da2:	d102      	bne.n	2daa <xQueueGenericSend+0x9e>
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	2200      	movs	r2, #0
    2da8:	649a      	str	r2, [r3, #72]	; 0x48
    2daa:	f001 fc71 	bl	4690 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dae:	f107 0214 	add.w	r2, r7, #20
    2db2:	1d3b      	adds	r3, r7, #4
    2db4:	4610      	mov	r0, r2
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f966 	bl	4088 <xTaskCheckForTimeOut>
    2dbc:	4603      	mov	r3, r0
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d11e      	bne.n	2e00 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f000 fa86 	bl	32d4 <prvIsQueueFull>
    2dc8:	4603      	mov	r3, r0
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d012      	beq.n	2df4 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	f103 0210 	add.w	r2, r3, #16
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	4610      	mov	r0, r2
    2dd8:	4619      	mov	r1, r3
    2dda:	f001 f8ad 	bl	3f38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2dde:	68f8      	ldr	r0, [r7, #12]
    2de0:	f000 fa02 	bl	31e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2de4:	f000 fe74 	bl	3ad0 <xTaskResumeAll>
    2de8:	4603      	mov	r3, r0
    2dea:	2b00      	cmp	r3, #0
    2dec:	d10f      	bne.n	2e0e <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2dee:	f001 fc2b 	bl	4648 <vPortYieldFromISR>
    2df2:	e00c      	b.n	2e0e <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2df4:	68f8      	ldr	r0, [r7, #12]
    2df6:	f000 f9f7 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2dfa:	f000 fe69 	bl	3ad0 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2dfe:	e78e      	b.n	2d1e <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e00:	68f8      	ldr	r0, [r7, #12]
    2e02:	f000 f9f1 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e06:	f000 fe63 	bl	3ad0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e0a:	2300      	movs	r3, #0
    2e0c:	e000      	b.n	2e10 <xQueueGenericSend+0x104>
		}
	}
    2e0e:	e786      	b.n	2d1e <xQueueGenericSend+0x12>
}
    2e10:	4618      	mov	r0, r3
    2e12:	3720      	adds	r7, #32
    2e14:	46bd      	mov	sp, r7
    2e16:	bd80      	pop	{r7, pc}

00002e18 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b086      	sub	sp, #24
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	60f8      	str	r0, [r7, #12]
    2e20:	60b9      	str	r1, [r7, #8]
    2e22:	607a      	str	r2, [r7, #4]
    2e24:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e26:	2300      	movs	r3, #0
    2e28:	613b      	str	r3, [r7, #16]
    2e2a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e2e:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e3a:	429a      	cmp	r2, r3
    2e3c:	d221      	bcs.n	2e82 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e3e:	68f8      	ldr	r0, [r7, #12]
    2e40:	68b9      	ldr	r1, [r7, #8]
    2e42:	683a      	ldr	r2, [r7, #0]
    2e44:	f000 f94e 	bl	30e4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e48:	68fb      	ldr	r3, [r7, #12]
    2e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e50:	d10f      	bne.n	2e72 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e52:	68fb      	ldr	r3, [r7, #12]
    2e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e56:	2b00      	cmp	r3, #0
    2e58:	d010      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	3324      	adds	r3, #36	; 0x24
    2e5e:	4618      	mov	r0, r3
    2e60:	f001 f8a2 	bl	3fa8 <xTaskRemoveFromEventList>
    2e64:	4603      	mov	r3, r0
    2e66:	2b00      	cmp	r3, #0
    2e68:	d008      	beq.n	2e7c <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	2201      	movs	r2, #1
    2e6e:	601a      	str	r2, [r3, #0]
    2e70:	e004      	b.n	2e7c <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2e72:	68fb      	ldr	r3, [r7, #12]
    2e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e76:	1c5a      	adds	r2, r3, #1
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2e7c:	2301      	movs	r3, #1
    2e7e:	617b      	str	r3, [r7, #20]
    2e80:	e001      	b.n	2e86 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2e82:	2300      	movs	r3, #0
    2e84:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2e86:	f04f 0000 	mov.w	r0, #0
    2e8a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2e8e:	697b      	ldr	r3, [r7, #20]
}
    2e90:	4618      	mov	r0, r3
    2e92:	3718      	adds	r7, #24
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}

00002e98 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b088      	sub	sp, #32
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	60f8      	str	r0, [r7, #12]
    2ea0:	60b9      	str	r1, [r7, #8]
    2ea2:	607a      	str	r2, [r7, #4]
    2ea4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2ea6:	2300      	movs	r3, #0
    2ea8:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2eaa:	f001 fbdb 	bl	4664 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d03b      	beq.n	2f2e <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2eb6:	68fb      	ldr	r3, [r7, #12]
    2eb8:	68db      	ldr	r3, [r3, #12]
    2eba:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ebc:	68f8      	ldr	r0, [r7, #12]
    2ebe:	68b9      	ldr	r1, [r7, #8]
    2ec0:	f000 f96c 	bl	319c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d11c      	bne.n	2f04 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ece:	1e5a      	subs	r2, r3, #1
    2ed0:	68fb      	ldr	r3, [r7, #12]
    2ed2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d104      	bne.n	2ee6 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2edc:	f001 fa8e 	bl	43fc <xTaskGetCurrentTaskHandle>
    2ee0:	4602      	mov	r2, r0
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ee6:	68fb      	ldr	r3, [r7, #12]
    2ee8:	691b      	ldr	r3, [r3, #16]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d01b      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2eee:	68fb      	ldr	r3, [r7, #12]
    2ef0:	3310      	adds	r3, #16
    2ef2:	4618      	mov	r0, r3
    2ef4:	f001 f858 	bl	3fa8 <xTaskRemoveFromEventList>
    2ef8:	4603      	mov	r3, r0
    2efa:	2b01      	cmp	r3, #1
    2efc:	d113      	bne.n	2f26 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2efe:	f001 fba3 	bl	4648 <vPortYieldFromISR>
    2f02:	e010      	b.n	2f26 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	69ba      	ldr	r2, [r7, #24]
    2f08:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d009      	beq.n	2f26 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	3324      	adds	r3, #36	; 0x24
    2f16:	4618      	mov	r0, r3
    2f18:	f001 f846 	bl	3fa8 <xTaskRemoveFromEventList>
    2f1c:	4603      	mov	r3, r0
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d001      	beq.n	2f26 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f22:	f001 fb91 	bl	4648 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f26:	f001 fbb3 	bl	4690 <vPortExitCritical>
				return pdPASS;
    2f2a:	2301      	movs	r3, #1
    2f2c:	e066      	b.n	2ffc <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d103      	bne.n	2f3c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f34:	f001 fbac 	bl	4690 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f38:	2300      	movs	r3, #0
    2f3a:	e05f      	b.n	2ffc <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f3c:	69fb      	ldr	r3, [r7, #28]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d106      	bne.n	2f50 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f42:	f107 0310 	add.w	r3, r7, #16
    2f46:	4618      	mov	r0, r3
    2f48:	f001 f886 	bl	4058 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f4c:	2301      	movs	r3, #1
    2f4e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f50:	f001 fb9e 	bl	4690 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f54:	f000 fdaa 	bl	3aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2f58:	f001 fb84 	bl	4664 <vPortEnterCritical>
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f60:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f64:	d102      	bne.n	2f6c <xQueueGenericReceive+0xd4>
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	2200      	movs	r2, #0
    2f6a:	645a      	str	r2, [r3, #68]	; 0x44
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2f70:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f74:	d102      	bne.n	2f7c <xQueueGenericReceive+0xe4>
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	2200      	movs	r2, #0
    2f7a:	649a      	str	r2, [r3, #72]	; 0x48
    2f7c:	f001 fb88 	bl	4690 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2f80:	f107 0210 	add.w	r2, r7, #16
    2f84:	1d3b      	adds	r3, r7, #4
    2f86:	4610      	mov	r0, r2
    2f88:	4619      	mov	r1, r3
    2f8a:	f001 f87d 	bl	4088 <xTaskCheckForTimeOut>
    2f8e:	4603      	mov	r3, r0
    2f90:	2b00      	cmp	r3, #0
    2f92:	d12b      	bne.n	2fec <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f94:	68f8      	ldr	r0, [r7, #12]
    2f96:	f000 f973 	bl	3280 <prvIsQueueEmpty>
    2f9a:	4603      	mov	r3, r0
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d01f      	beq.n	2fe0 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d108      	bne.n	2fba <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2fa8:	f001 fb5c 	bl	4664 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	685b      	ldr	r3, [r3, #4]
    2fb0:	4618      	mov	r0, r3
    2fb2:	f001 fa33 	bl	441c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2fb6:	f001 fb6b 	bl	4690 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fba:	68fb      	ldr	r3, [r7, #12]
    2fbc:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	4610      	mov	r0, r2
    2fc4:	4619      	mov	r1, r3
    2fc6:	f000 ffb7 	bl	3f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2fca:	68f8      	ldr	r0, [r7, #12]
    2fcc:	f000 f90c 	bl	31e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2fd0:	f000 fd7e 	bl	3ad0 <xTaskResumeAll>
    2fd4:	4603      	mov	r3, r0
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d10f      	bne.n	2ffa <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2fda:	f001 fb35 	bl	4648 <vPortYieldFromISR>
    2fde:	e00c      	b.n	2ffa <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2fe0:	68f8      	ldr	r0, [r7, #12]
    2fe2:	f000 f901 	bl	31e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2fe6:	f000 fd73 	bl	3ad0 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2fea:	e75e      	b.n	2eaa <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2fec:	68f8      	ldr	r0, [r7, #12]
    2fee:	f000 f8fb 	bl	31e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2ff2:	f000 fd6d 	bl	3ad0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2ff6:	2300      	movs	r3, #0
    2ff8:	e000      	b.n	2ffc <xQueueGenericReceive+0x164>
		}
	}
    2ffa:	e756      	b.n	2eaa <xQueueGenericReceive+0x12>
}
    2ffc:	4618      	mov	r0, r3
    2ffe:	3720      	adds	r7, #32
    3000:	46bd      	mov	sp, r7
    3002:	bd80      	pop	{r7, pc}

00003004 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3004:	b580      	push	{r7, lr}
    3006:	b086      	sub	sp, #24
    3008:	af00      	add	r7, sp, #0
    300a:	60f8      	str	r0, [r7, #12]
    300c:	60b9      	str	r1, [r7, #8]
    300e:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3010:	2300      	movs	r3, #0
    3012:	613b      	str	r3, [r7, #16]
    3014:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3018:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    301c:	68fb      	ldr	r3, [r7, #12]
    301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3020:	2b00      	cmp	r3, #0
    3022:	d025      	beq.n	3070 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3024:	68f8      	ldr	r0, [r7, #12]
    3026:	68b9      	ldr	r1, [r7, #8]
    3028:	f000 f8b8 	bl	319c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    302c:	68fb      	ldr	r3, [r7, #12]
    302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3030:	1e5a      	subs	r2, r3, #1
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    303a:	f1b3 3fff 	cmp.w	r3, #4294967295
    303e:	d10f      	bne.n	3060 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3040:	68fb      	ldr	r3, [r7, #12]
    3042:	691b      	ldr	r3, [r3, #16]
    3044:	2b00      	cmp	r3, #0
    3046:	d010      	beq.n	306a <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3048:	68fb      	ldr	r3, [r7, #12]
    304a:	3310      	adds	r3, #16
    304c:	4618      	mov	r0, r3
    304e:	f000 ffab 	bl	3fa8 <xTaskRemoveFromEventList>
    3052:	4603      	mov	r3, r0
    3054:	2b00      	cmp	r3, #0
    3056:	d008      	beq.n	306a <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	2201      	movs	r2, #1
    305c:	601a      	str	r2, [r3, #0]
    305e:	e004      	b.n	306a <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3064:	1c5a      	adds	r2, r3, #1
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    306a:	2301      	movs	r3, #1
    306c:	617b      	str	r3, [r7, #20]
    306e:	e001      	b.n	3074 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3070:	2300      	movs	r3, #0
    3072:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3074:	f04f 0000 	mov.w	r0, #0
    3078:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    307c:	697b      	ldr	r3, [r7, #20]
}
    307e:	4618      	mov	r0, r3
    3080:	3718      	adds	r7, #24
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop

00003088 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3090:	f001 fae8 	bl	4664 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3098:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    309a:	f001 faf9 	bl	4690 <vPortExitCritical>

	return uxReturn;
    309e:	68fb      	ldr	r3, [r7, #12]
}
    30a0:	4618      	mov	r0, r3
    30a2:	3710      	adds	r7, #16
    30a4:	46bd      	mov	sp, r7
    30a6:	bd80      	pop	{r7, pc}

000030a8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30a8:	b480      	push	{r7}
    30aa:	b085      	sub	sp, #20
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30b4:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30b6:	68fb      	ldr	r3, [r7, #12]
}
    30b8:	4618      	mov	r0, r3
    30ba:	3714      	adds	r7, #20
    30bc:	46bd      	mov	sp, r7
    30be:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c2:	4770      	bx	lr

000030c4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b082      	sub	sp, #8
    30c8:	af00      	add	r7, sp, #0
    30ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	4618      	mov	r0, r3
    30d2:	f001 fc0d 	bl	48f0 <vPortFree>
	vPortFree( pxQueue );
    30d6:	6878      	ldr	r0, [r7, #4]
    30d8:	f001 fc0a 	bl	48f0 <vPortFree>
}
    30dc:	3708      	adds	r7, #8
    30de:	46bd      	mov	sp, r7
    30e0:	bd80      	pop	{r7, pc}
    30e2:	bf00      	nop

000030e4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b084      	sub	sp, #16
    30e8:	af00      	add	r7, sp, #0
    30ea:	60f8      	str	r0, [r7, #12]
    30ec:	60b9      	str	r1, [r7, #8]
    30ee:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f4:	2b00      	cmp	r3, #0
    30f6:	d10c      	bne.n	3112 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d145      	bne.n	318c <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	685b      	ldr	r3, [r3, #4]
    3104:	4618      	mov	r0, r3
    3106:	f001 f9ed 	bl	44e4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	2200      	movs	r2, #0
    310e:	605a      	str	r2, [r3, #4]
    3110:	e03c      	b.n	318c <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	2b00      	cmp	r3, #0
    3116:	d11a      	bne.n	314e <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	689a      	ldr	r2, [r3, #8]
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3120:	4610      	mov	r0, r2
    3122:	68b9      	ldr	r1, [r7, #8]
    3124:	461a      	mov	r2, r3
    3126:	f010 fae9 	bl	136fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	689a      	ldr	r2, [r3, #8]
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3132:	441a      	add	r2, r3
    3134:	68fb      	ldr	r3, [r7, #12]
    3136:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	689a      	ldr	r2, [r3, #8]
    313c:	68fb      	ldr	r3, [r7, #12]
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	429a      	cmp	r2, r3
    3142:	d323      	bcc.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	681a      	ldr	r2, [r3, #0]
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	609a      	str	r2, [r3, #8]
    314c:	e01e      	b.n	318c <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	68da      	ldr	r2, [r3, #12]
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3156:	4610      	mov	r0, r2
    3158:	68b9      	ldr	r1, [r7, #8]
    315a:	461a      	mov	r2, r3
    315c:	f010 face 	bl	136fc <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	68da      	ldr	r2, [r3, #12]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3168:	425b      	negs	r3, r3
    316a:	441a      	add	r2, r3
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	68da      	ldr	r2, [r3, #12]
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	429a      	cmp	r2, r3
    317a:	d207      	bcs.n	318c <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	685a      	ldr	r2, [r3, #4]
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3184:	425b      	negs	r3, r3
    3186:	441a      	add	r2, r3
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3190:	1c5a      	adds	r2, r3, #1
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	639a      	str	r2, [r3, #56]	; 0x38
}
    3196:	3710      	adds	r7, #16
    3198:	46bd      	mov	sp, r7
    319a:	bd80      	pop	{r7, pc}

0000319c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
    31a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	681b      	ldr	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d019      	beq.n	31e2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	68da      	ldr	r2, [r3, #12]
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31b6:	441a      	add	r2, r3
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	68da      	ldr	r2, [r3, #12]
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	685b      	ldr	r3, [r3, #4]
    31c4:	429a      	cmp	r2, r3
    31c6:	d303      	bcc.n	31d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	68da      	ldr	r2, [r3, #12]
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31d8:	6838      	ldr	r0, [r7, #0]
    31da:	4611      	mov	r1, r2
    31dc:	461a      	mov	r2, r3
    31de:	f010 fa8d 	bl	136fc <memcpy>
	}
}
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}

000031e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31f0:	f001 fa38 	bl	4664 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    31f4:	e014      	b.n	3220 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31fa:	2b00      	cmp	r3, #0
    31fc:	d00f      	beq.n	321e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	3324      	adds	r3, #36	; 0x24
    3202:	4618      	mov	r0, r3
    3204:	f000 fed0 	bl	3fa8 <xTaskRemoveFromEventList>
    3208:	4603      	mov	r3, r0
    320a:	2b00      	cmp	r3, #0
    320c:	d001      	beq.n	3212 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    320e:	f000 ff87 	bl	4120 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3216:	1e5a      	subs	r2, r3, #1
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	649a      	str	r2, [r3, #72]	; 0x48
    321c:	e000      	b.n	3220 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    321e:	e003      	b.n	3228 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3224:	2b00      	cmp	r3, #0
    3226:	dce6      	bgt.n	31f6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	f04f 32ff 	mov.w	r2, #4294967295
    322e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3230:	f001 fa2e 	bl	4690 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3234:	f001 fa16 	bl	4664 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3238:	e014      	b.n	3264 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	691b      	ldr	r3, [r3, #16]
    323e:	2b00      	cmp	r3, #0
    3240:	d00f      	beq.n	3262 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	3310      	adds	r3, #16
    3246:	4618      	mov	r0, r3
    3248:	f000 feae 	bl	3fa8 <xTaskRemoveFromEventList>
    324c:	4603      	mov	r3, r0
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    3252:	f000 ff65 	bl	4120 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    325a:	1e5a      	subs	r2, r3, #1
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	645a      	str	r2, [r3, #68]	; 0x44
    3260:	e000      	b.n	3264 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    3262:	e003      	b.n	326c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3268:	2b00      	cmp	r3, #0
    326a:	dce6      	bgt.n	323a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	f04f 32ff 	mov.w	r2, #4294967295
    3272:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3274:	f001 fa0c 	bl	4690 <vPortExitCritical>
}
    3278:	3708      	adds	r7, #8
    327a:	46bd      	mov	sp, r7
    327c:	bd80      	pop	{r7, pc}
    327e:	bf00      	nop

00003280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3280:	b580      	push	{r7, lr}
    3282:	b084      	sub	sp, #16
    3284:	af00      	add	r7, sp, #0
    3286:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3288:	f001 f9ec 	bl	4664 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3290:	2b00      	cmp	r3, #0
    3292:	bf14      	ite	ne
    3294:	2300      	movne	r3, #0
    3296:	2301      	moveq	r3, #1
    3298:	b2db      	uxtb	r3, r3
    329a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    329c:	f001 f9f8 	bl	4690 <vPortExitCritical>

	return xReturn;
    32a0:	68fb      	ldr	r3, [r7, #12]
}
    32a2:	4618      	mov	r0, r3
    32a4:	3710      	adds	r7, #16
    32a6:	46bd      	mov	sp, r7
    32a8:	bd80      	pop	{r7, pc}
    32aa:	bf00      	nop

000032ac <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32ac:	b480      	push	{r7}
    32ae:	b085      	sub	sp, #20
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32b8:	2b00      	cmp	r3, #0
    32ba:	bf14      	ite	ne
    32bc:	2300      	movne	r3, #0
    32be:	2301      	moveq	r3, #1
    32c0:	b2db      	uxtb	r3, r3
    32c2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    32c4:	68fb      	ldr	r3, [r7, #12]
}
    32c6:	4618      	mov	r0, r3
    32c8:	3714      	adds	r7, #20
    32ca:	46bd      	mov	sp, r7
    32cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop

000032d4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32dc:	f001 f9c2 	bl	4664 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    32e8:	429a      	cmp	r2, r3
    32ea:	bf14      	ite	ne
    32ec:	2300      	movne	r3, #0
    32ee:	2301      	moveq	r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32f4:	f001 f9cc 	bl	4690 <vPortExitCritical>

	return xReturn;
    32f8:	68fb      	ldr	r3, [r7, #12]
}
    32fa:	4618      	mov	r0, r3
    32fc:	3710      	adds	r7, #16
    32fe:	46bd      	mov	sp, r7
    3300:	bd80      	pop	{r7, pc}
    3302:	bf00      	nop

00003304 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3304:	b480      	push	{r7}
    3306:	b085      	sub	sp, #20
    3308:	af00      	add	r7, sp, #0
    330a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3314:	429a      	cmp	r2, r3
    3316:	bf14      	ite	ne
    3318:	2300      	movne	r3, #0
    331a:	2301      	moveq	r3, #1
    331c:	b2db      	uxtb	r3, r3
    331e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3320:	68fb      	ldr	r3, [r7, #12]
}
    3322:	4618      	mov	r0, r3
    3324:	3714      	adds	r7, #20
    3326:	46bd      	mov	sp, r7
    3328:	f85d 7b04 	ldr.w	r7, [sp], #4
    332c:	4770      	bx	lr
    332e:	bf00      	nop

00003330 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3330:	b580      	push	{r7, lr}
    3332:	b08a      	sub	sp, #40	; 0x28
    3334:	af02      	add	r7, sp, #8
    3336:	60f8      	str	r0, [r7, #12]
    3338:	60b9      	str	r1, [r7, #8]
    333a:	603b      	str	r3, [r7, #0]
    333c:	4613      	mov	r3, r2
    333e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3340:	88fb      	ldrh	r3, [r7, #6]
    3342:	4618      	mov	r0, r3
    3344:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3346:	f001 f817 	bl	4378 <prvAllocateTCBAndStack>
    334a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    334c:	69bb      	ldr	r3, [r7, #24]
    334e:	2b00      	cmp	r3, #0
    3350:	f000 80a1 	beq.w	3496 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3354:	69bb      	ldr	r3, [r7, #24]
    3356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3358:	88fb      	ldrh	r3, [r7, #6]
    335a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    335e:	3b01      	subs	r3, #1
    3360:	009b      	lsls	r3, r3, #2
    3362:	4413      	add	r3, r2
    3364:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    3366:	697b      	ldr	r3, [r7, #20]
    3368:	f023 0307 	bic.w	r3, r3, #7
    336c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    336e:	88fb      	ldrh	r3, [r7, #6]
    3370:	9300      	str	r3, [sp, #0]
    3372:	69b8      	ldr	r0, [r7, #24]
    3374:	68b9      	ldr	r1, [r7, #8]
    3376:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    337a:	f000 feef 	bl	415c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    337e:	6978      	ldr	r0, [r7, #20]
    3380:	68f9      	ldr	r1, [r7, #12]
    3382:	683a      	ldr	r2, [r7, #0]
    3384:	f001 f8f0 	bl	4568 <pxPortInitialiseStack>
    3388:	4602      	mov	r2, r0
    338a:	69bb      	ldr	r3, [r7, #24]
    338c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3390:	2b00      	cmp	r3, #0
    3392:	d002      	beq.n	339a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3396:	69ba      	ldr	r2, [r7, #24]
    3398:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    339a:	f001 f963 	bl	4664 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    339e:	f240 4358 	movw	r3, #1112	; 0x458
    33a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	1c5a      	adds	r2, r3, #1
    33aa:	f240 4358 	movw	r3, #1112	; 0x458
    33ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33b4:	f240 2354 	movw	r3, #596	; 0x254
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	2b00      	cmp	r3, #0
    33c0:	d10f      	bne.n	33e2 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    33c2:	f240 2354 	movw	r3, #596	; 0x254
    33c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ca:	69ba      	ldr	r2, [r7, #24]
    33cc:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    33ce:	f240 4358 	movw	r3, #1112	; 0x458
    33d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	2b01      	cmp	r3, #1
    33da:	d118      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    33dc:	f000 fef4 	bl	41c8 <prvInitialiseTaskLists>
    33e0:	e015      	b.n	340e <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    33e2:	f240 4368 	movw	r3, #1128	; 0x468
    33e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d10e      	bne.n	340e <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    33f0:	f240 2354 	movw	r3, #596	; 0x254
    33f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33fe:	429a      	cmp	r2, r3
    3400:	d805      	bhi.n	340e <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    3402:	f240 2354 	movw	r3, #596	; 0x254
    3406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340a:	69ba      	ldr	r2, [r7, #24]
    340c:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    340e:	69bb      	ldr	r3, [r7, #24]
    3410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3412:	f240 4360 	movw	r3, #1120	; 0x460
    3416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	429a      	cmp	r2, r3
    341e:	d906      	bls.n	342e <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3420:	69bb      	ldr	r3, [r7, #24]
    3422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3424:	f240 4360 	movw	r3, #1120	; 0x460
    3428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342c:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    342e:	f240 437c 	movw	r3, #1148	; 0x47c
    3432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	1c5a      	adds	r2, r3, #1
    343a:	f240 437c 	movw	r3, #1148	; 0x47c
    343e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3442:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3444:	69bb      	ldr	r3, [r7, #24]
    3446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3448:	f240 4364 	movw	r3, #1124	; 0x464
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	429a      	cmp	r2, r3
    3454:	d906      	bls.n	3464 <xTaskGenericCreate+0x134>
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345a:	f240 4364 	movw	r3, #1124	; 0x464
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	601a      	str	r2, [r3, #0]
    3464:	69bb      	ldr	r3, [r7, #24]
    3466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3468:	4613      	mov	r3, r2
    346a:	009b      	lsls	r3, r3, #2
    346c:	4413      	add	r3, r2
    346e:	009b      	lsls	r3, r3, #2
    3470:	f240 2258 	movw	r2, #600	; 0x258
    3474:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3478:	441a      	add	r2, r3
    347a:	69bb      	ldr	r3, [r7, #24]
    347c:	3304      	adds	r3, #4
    347e:	4610      	mov	r0, r2
    3480:	4619      	mov	r1, r3
    3482:	f7ff fa6d 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    3486:	2301      	movs	r3, #1
    3488:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    348a:	69b8      	ldr	r0, [r7, #24]
    348c:	f00f f900 	bl	12690 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    3490:	f001 f8fe 	bl	4690 <vPortExitCritical>
    3494:	e002      	b.n	349c <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3496:	f04f 33ff 	mov.w	r3, #4294967295
    349a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    349c:	69fb      	ldr	r3, [r7, #28]
    349e:	2b01      	cmp	r3, #1
    34a0:	d111      	bne.n	34c6 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    34a2:	f240 4368 	movw	r3, #1128	; 0x468
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d00a      	beq.n	34c6 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34b0:	f240 2354 	movw	r3, #596	; 0x254
    34b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34be:	429a      	cmp	r2, r3
    34c0:	d201      	bcs.n	34c6 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    34c2:	f001 f8c1 	bl	4648 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    34c6:	69fb      	ldr	r3, [r7, #28]
}
    34c8:	4618      	mov	r0, r3
    34ca:	3720      	adds	r7, #32
    34cc:	46bd      	mov	sp, r7
    34ce:	bd80      	pop	{r7, pc}

000034d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    34d8:	f001 f8c4 	bl	4664 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    34dc:	f240 2354 	movw	r3, #596	; 0x254
    34e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	429a      	cmp	r2, r3
    34ea:	d101      	bne.n	34f0 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    34ec:	2300      	movs	r3, #0
    34ee:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d105      	bne.n	3502 <vTaskDelete+0x32>
    34f6:	f240 2354 	movw	r3, #596	; 0x254
    34fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	e000      	b.n	3504 <vTaskDelete+0x34>
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	3304      	adds	r3, #4
    350a:	4618      	mov	r0, r3
    350c:	f7ff fa88 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3514:	2b00      	cmp	r3, #0
    3516:	d004      	beq.n	3522 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	3318      	adds	r3, #24
    351c:	4618      	mov	r0, r3
    351e:	f7ff fa7f 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	3304      	adds	r3, #4
    3526:	f240 402c 	movw	r0, #1068	; 0x42c
    352a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    352e:	4619      	mov	r1, r3
    3530:	f7ff fa16 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3534:	f240 4340 	movw	r3, #1088	; 0x440
    3538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	1c5a      	adds	r2, r3, #1
    3540:	f240 4340 	movw	r3, #1088	; 0x440
    3544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3548:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    354a:	f240 437c 	movw	r3, #1148	; 0x47c
    354e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	1c5a      	adds	r2, r3, #1
    3556:	f240 437c 	movw	r3, #1148	; 0x47c
    355a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    355e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3560:	f001 f896 	bl	4690 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3564:	f240 4368 	movw	r3, #1128	; 0x468
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	d004      	beq.n	357c <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	2b00      	cmp	r3, #0
    3576:	d101      	bne.n	357c <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    3578:	f001 f866 	bl	4648 <vPortYieldFromISR>
			}
		}
	}
    357c:	3710      	adds	r7, #16
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	bf00      	nop

00003584 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3584:	b580      	push	{r7, lr}
    3586:	b086      	sub	sp, #24
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
    358c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    358e:	2300      	movs	r3, #0
    3590:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3592:	f000 fa8b 	bl	3aac <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	681a      	ldr	r2, [r3, #0]
    359a:	683b      	ldr	r3, [r7, #0]
    359c:	4413      	add	r3, r2
    359e:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	681a      	ldr	r2, [r3, #0]
    35a4:	f240 435c 	movw	r3, #1116	; 0x45c
    35a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	429a      	cmp	r2, r3
    35b0:	d90f      	bls.n	35d2 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	693b      	ldr	r3, [r7, #16]
    35b8:	429a      	cmp	r2, r3
    35ba:	d919      	bls.n	35f0 <vTaskDelayUntil+0x6c>
    35bc:	f240 435c 	movw	r3, #1116	; 0x45c
    35c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	693a      	ldr	r2, [r7, #16]
    35c8:	429a      	cmp	r2, r3
    35ca:	d911      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35cc:	2301      	movs	r3, #1
    35ce:	617b      	str	r3, [r7, #20]
    35d0:	e00e      	b.n	35f0 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681a      	ldr	r2, [r3, #0]
    35d6:	693b      	ldr	r3, [r7, #16]
    35d8:	429a      	cmp	r2, r3
    35da:	d807      	bhi.n	35ec <vTaskDelayUntil+0x68>
    35dc:	f240 435c 	movw	r3, #1116	; 0x45c
    35e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	693a      	ldr	r2, [r7, #16]
    35e8:	429a      	cmp	r2, r3
    35ea:	d901      	bls.n	35f0 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    35ec:	2301      	movs	r3, #1
    35ee:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	693a      	ldr	r2, [r7, #16]
    35f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    35f6:	697b      	ldr	r3, [r7, #20]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d00b      	beq.n	3614 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35fc:	f240 2354 	movw	r3, #596	; 0x254
    3600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	3304      	adds	r3, #4
    3608:	4618      	mov	r0, r3
    360a:	f7ff fa09 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    360e:	6938      	ldr	r0, [r7, #16]
    3610:	f000 fe6e 	bl	42f0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3614:	f000 fa5c 	bl	3ad0 <xTaskResumeAll>
    3618:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	2b00      	cmp	r3, #0
    361e:	d101      	bne.n	3624 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3620:	f001 f812 	bl	4648 <vPortYieldFromISR>
		}
	}
    3624:	3718      	adds	r7, #24
    3626:	46bd      	mov	sp, r7
    3628:	bd80      	pop	{r7, pc}
    362a:	bf00      	nop

0000362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    362c:	b580      	push	{r7, lr}
    362e:	b084      	sub	sp, #16
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3634:	2300      	movs	r3, #0
    3636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	2b00      	cmp	r3, #0
    363c:	d018      	beq.n	3670 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    363e:	f000 fa35 	bl	3aac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3642:	f240 435c 	movw	r3, #1116	; 0x45c
    3646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	4413      	add	r3, r2
    3650:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3652:	f240 2354 	movw	r3, #596	; 0x254
    3656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	3304      	adds	r3, #4
    365e:	4618      	mov	r0, r3
    3660:	f7ff f9de 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3664:	68b8      	ldr	r0, [r7, #8]
    3666:	f000 fe43 	bl	42f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    366a:	f000 fa31 	bl	3ad0 <xTaskResumeAll>
    366e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	2b00      	cmp	r3, #0
    3674:	d101      	bne.n	367a <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    3676:	f000 ffe7 	bl	4648 <vPortYieldFromISR>
		}
	}
    367a:	3710      	adds	r7, #16
    367c:	46bd      	mov	sp, r7
    367e:	bd80      	pop	{r7, pc}

00003680 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3688:	f000 ffec 	bl	4664 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d105      	bne.n	369e <uxTaskPriorityGet+0x1e>
    3692:	f240 2354 	movw	r3, #596	; 0x254
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	e000      	b.n	36a0 <uxTaskPriorityGet+0x20>
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36a6:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36a8:	f000 fff2 	bl	4690 <vPortExitCritical>

		return uxReturn;
    36ac:	68bb      	ldr	r3, [r7, #8]
	}
    36ae:	4618      	mov	r0, r3
    36b0:	3710      	adds	r7, #16
    36b2:	46bd      	mov	sp, r7
    36b4:	bd80      	pop	{r7, pc}
    36b6:	bf00      	nop

000036b8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    36b8:	b580      	push	{r7, lr}
    36ba:	b086      	sub	sp, #24
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
    36c0:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    36c2:	2300      	movs	r3, #0
    36c4:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	2b13      	cmp	r3, #19
    36ca:	d901      	bls.n	36d0 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    36cc:	2313      	movs	r3, #19
    36ce:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    36d0:	f000 ffc8 	bl	4664 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    36d4:	f240 2354 	movw	r3, #596	; 0x254
    36d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	687a      	ldr	r2, [r7, #4]
    36e0:	429a      	cmp	r2, r3
    36e2:	d101      	bne.n	36e8 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    36e4:	2300      	movs	r3, #0
    36e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d105      	bne.n	36fa <vTaskPrioritySet+0x42>
    36ee:	f240 2354 	movw	r3, #596	; 0x254
    36f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	e000      	b.n	36fc <vTaskPrioritySet+0x44>
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3702:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3704:	68fa      	ldr	r2, [r7, #12]
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	429a      	cmp	r2, r3
    370a:	d058      	beq.n	37be <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    370c:	683a      	ldr	r2, [r7, #0]
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	429a      	cmp	r2, r3
    3712:	d905      	bls.n	3720 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2b00      	cmp	r3, #0
    3718:	d007      	beq.n	372a <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    371a:	2301      	movs	r3, #1
    371c:	617b      	str	r3, [r7, #20]
    371e:	e004      	b.n	372a <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d101      	bne.n	372a <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3726:	2301      	movs	r3, #1
    3728:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    372a:	693b      	ldr	r3, [r7, #16]
    372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    372e:	693b      	ldr	r3, [r7, #16]
    3730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3732:	429a      	cmp	r2, r3
    3734:	d102      	bne.n	373c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	683a      	ldr	r2, [r7, #0]
    373a:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    373c:	693b      	ldr	r3, [r7, #16]
    373e:	683a      	ldr	r2, [r7, #0]
    3740:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	f1c3 0214 	rsb	r2, r3, #20
    3748:	693b      	ldr	r3, [r7, #16]
    374a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    374c:	693b      	ldr	r3, [r7, #16]
    374e:	6959      	ldr	r1, [r3, #20]
    3750:	68fa      	ldr	r2, [r7, #12]
    3752:	4613      	mov	r3, r2
    3754:	009b      	lsls	r3, r3, #2
    3756:	4413      	add	r3, r2
    3758:	009b      	lsls	r3, r3, #2
    375a:	f240 2258 	movw	r2, #600	; 0x258
    375e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3762:	4413      	add	r3, r2
    3764:	4299      	cmp	r1, r3
    3766:	d125      	bne.n	37b4 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3768:	693b      	ldr	r3, [r7, #16]
    376a:	3304      	adds	r3, #4
    376c:	4618      	mov	r0, r3
    376e:	f7ff f957 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3772:	693b      	ldr	r3, [r7, #16]
    3774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3776:	f240 4364 	movw	r3, #1124	; 0x464
    377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	429a      	cmp	r2, r3
    3782:	d906      	bls.n	3792 <vTaskPrioritySet+0xda>
    3784:	693b      	ldr	r3, [r7, #16]
    3786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3788:	f240 4364 	movw	r3, #1124	; 0x464
    378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3790:	601a      	str	r2, [r3, #0]
    3792:	693b      	ldr	r3, [r7, #16]
    3794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3796:	4613      	mov	r3, r2
    3798:	009b      	lsls	r3, r3, #2
    379a:	4413      	add	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	f240 2258 	movw	r2, #600	; 0x258
    37a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a6:	441a      	add	r2, r3
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	3304      	adds	r3, #4
    37ac:	4610      	mov	r0, r2
    37ae:	4619      	mov	r1, r3
    37b0:	f7ff f8d6 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37b4:	697b      	ldr	r3, [r7, #20]
    37b6:	2b01      	cmp	r3, #1
    37b8:	d101      	bne.n	37be <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    37ba:	f000 ff45 	bl	4648 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    37be:	f000 ff67 	bl	4690 <vPortExitCritical>
	}
    37c2:	3718      	adds	r7, #24
    37c4:	46bd      	mov	sp, r7
    37c6:	bd80      	pop	{r7, pc}

000037c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    37c8:	b580      	push	{r7, lr}
    37ca:	b084      	sub	sp, #16
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37d0:	f000 ff48 	bl	4664 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    37d4:	f240 2354 	movw	r3, #596	; 0x254
    37d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	687a      	ldr	r2, [r7, #4]
    37e0:	429a      	cmp	r2, r3
    37e2:	d101      	bne.n	37e8 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    37e4:	2300      	movs	r3, #0
    37e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d105      	bne.n	37fa <vTaskSuspend+0x32>
    37ee:	f240 2354 	movw	r3, #596	; 0x254
    37f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	e000      	b.n	37fc <vTaskSuspend+0x34>
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	3304      	adds	r3, #4
    3802:	4618      	mov	r0, r3
    3804:	f7ff f90c 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    380c:	2b00      	cmp	r3, #0
    380e:	d004      	beq.n	381a <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3810:	68fb      	ldr	r3, [r7, #12]
    3812:	3318      	adds	r3, #24
    3814:	4618      	mov	r0, r3
    3816:	f7ff f903 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	3304      	adds	r3, #4
    381e:	f240 4044 	movw	r0, #1092	; 0x444
    3822:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3826:	4619      	mov	r1, r3
    3828:	f7ff f89a 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    382c:	f000 ff30 	bl	4690 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d11e      	bne.n	3874 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    3836:	f240 4368 	movw	r3, #1128	; 0x468
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d002      	beq.n	384a <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3844:	f000 ff00 	bl	4648 <vPortYieldFromISR>
    3848:	e014      	b.n	3874 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    384a:	f240 4344 	movw	r3, #1092	; 0x444
    384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3852:	681a      	ldr	r2, [r3, #0]
    3854:	f240 4358 	movw	r3, #1112	; 0x458
    3858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	429a      	cmp	r2, r3
    3860:	d106      	bne.n	3870 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3862:	f240 2354 	movw	r3, #596	; 0x254
    3866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386a:	2200      	movs	r2, #0
    386c:	601a      	str	r2, [r3, #0]
    386e:	e001      	b.n	3874 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    3870:	f000 fb06 	bl	3e80 <vTaskSwitchContext>
				}
			}
		}
	}
    3874:	3710      	adds	r7, #16
    3876:	46bd      	mov	sp, r7
    3878:	bd80      	pop	{r7, pc}
    387a:	bf00      	nop

0000387c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3884:	2300      	movs	r3, #0
    3886:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    388c:	68bb      	ldr	r3, [r7, #8]
    388e:	695a      	ldr	r2, [r3, #20]
    3890:	f240 4344 	movw	r3, #1092	; 0x444
    3894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3898:	429a      	cmp	r2, r3
    389a:	d10d      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    389c:	68bb      	ldr	r3, [r7, #8]
    389e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38a0:	f240 4318 	movw	r3, #1048	; 0x418
    38a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a8:	429a      	cmp	r2, r3
    38aa:	d005      	beq.n	38b8 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38ac:	68bb      	ldr	r3, [r7, #8]
    38ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38b0:	2b00      	cmp	r3, #0
    38b2:	d101      	bne.n	38b8 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38b4:	2301      	movs	r3, #1
    38b6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    38b8:	68fb      	ldr	r3, [r7, #12]
	}
    38ba:	4618      	mov	r0, r3
    38bc:	3714      	adds	r7, #20
    38be:	46bd      	mov	sp, r7
    38c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c4:	4770      	bx	lr
    38c6:	bf00      	nop

000038c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    38c8:	b580      	push	{r7, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	af00      	add	r7, sp, #0
    38ce:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d043      	beq.n	3962 <vTaskResume+0x9a>
    38da:	f240 2354 	movw	r3, #596	; 0x254
    38de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	68fa      	ldr	r2, [r7, #12]
    38e6:	429a      	cmp	r2, r3
    38e8:	d03b      	beq.n	3962 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    38ea:	f000 febb 	bl	4664 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38ee:	68f8      	ldr	r0, [r7, #12]
    38f0:	f7ff ffc4 	bl	387c <xTaskIsTaskSuspended>
    38f4:	4603      	mov	r3, r0
    38f6:	2b01      	cmp	r3, #1
    38f8:	d131      	bne.n	395e <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	3304      	adds	r3, #4
    38fe:	4618      	mov	r0, r3
    3900:	f7ff f88e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3908:	f240 4364 	movw	r3, #1124	; 0x464
    390c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	429a      	cmp	r2, r3
    3914:	d906      	bls.n	3924 <vTaskResume+0x5c>
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    391a:	f240 4364 	movw	r3, #1124	; 0x464
    391e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3922:	601a      	str	r2, [r3, #0]
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3928:	4613      	mov	r3, r2
    392a:	009b      	lsls	r3, r3, #2
    392c:	4413      	add	r3, r2
    392e:	009b      	lsls	r3, r3, #2
    3930:	f240 2258 	movw	r2, #600	; 0x258
    3934:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3938:	441a      	add	r2, r3
    393a:	68fb      	ldr	r3, [r7, #12]
    393c:	3304      	adds	r3, #4
    393e:	4610      	mov	r0, r2
    3940:	4619      	mov	r1, r3
    3942:	f7ff f80d 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    394a:	f240 2354 	movw	r3, #596	; 0x254
    394e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3956:	429a      	cmp	r2, r3
    3958:	d301      	bcc.n	395e <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    395a:	f000 fe75 	bl	4648 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    395e:	f000 fe97 	bl	4690 <vPortExitCritical>
		}
	}
    3962:	3710      	adds	r7, #16
    3964:	46bd      	mov	sp, r7
    3966:	bd80      	pop	{r7, pc}

00003968 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3968:	b580      	push	{r7, lr}
    396a:	b086      	sub	sp, #24
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3970:	2300      	movs	r3, #0
    3972:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3978:	2300      	movs	r3, #0
    397a:	60fb      	str	r3, [r7, #12]
    397c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3980:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3984:	6938      	ldr	r0, [r7, #16]
    3986:	f7ff ff79 	bl	387c <xTaskIsTaskSuspended>
    398a:	4603      	mov	r3, r0
    398c:	2b01      	cmp	r3, #1
    398e:	d144      	bne.n	3a1a <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3990:	f240 436c 	movw	r3, #1132	; 0x46c
    3994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2b00      	cmp	r3, #0
    399c:	d134      	bne.n	3a08 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    399e:	693b      	ldr	r3, [r7, #16]
    39a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a2:	f240 2354 	movw	r3, #596	; 0x254
    39a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39ae:	429a      	cmp	r2, r3
    39b0:	bf34      	ite	cc
    39b2:	2300      	movcc	r3, #0
    39b4:	2301      	movcs	r3, #1
    39b6:	b2db      	uxtb	r3, r3
    39b8:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    39ba:	693b      	ldr	r3, [r7, #16]
    39bc:	3304      	adds	r3, #4
    39be:	4618      	mov	r0, r3
    39c0:	f7ff f82e 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    39c4:	693b      	ldr	r3, [r7, #16]
    39c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39c8:	f240 4364 	movw	r3, #1124	; 0x464
    39cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	429a      	cmp	r2, r3
    39d4:	d906      	bls.n	39e4 <xTaskResumeFromISR+0x7c>
    39d6:	693b      	ldr	r3, [r7, #16]
    39d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39da:	f240 4364 	movw	r3, #1124	; 0x464
    39de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e2:	601a      	str	r2, [r3, #0]
    39e4:	693b      	ldr	r3, [r7, #16]
    39e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39e8:	4613      	mov	r3, r2
    39ea:	009b      	lsls	r3, r3, #2
    39ec:	4413      	add	r3, r2
    39ee:	009b      	lsls	r3, r3, #2
    39f0:	f240 2258 	movw	r2, #600	; 0x258
    39f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39f8:	441a      	add	r2, r3
    39fa:	693b      	ldr	r3, [r7, #16]
    39fc:	3304      	adds	r3, #4
    39fe:	4610      	mov	r0, r2
    3a00:	4619      	mov	r1, r3
    3a02:	f7fe ffad 	bl	2960 <vListInsertEnd>
    3a06:	e008      	b.n	3a1a <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	3318      	adds	r3, #24
    3a0c:	f240 4018 	movw	r0, #1048	; 0x418
    3a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a14:	4619      	mov	r1, r3
    3a16:	f7fe ffa3 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a1a:	f04f 0000 	mov.w	r0, #0
    3a1e:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a22:	697b      	ldr	r3, [r7, #20]
	}
    3a24:	4618      	mov	r0, r3
    3a26:	3718      	adds	r7, #24
    3a28:	46bd      	mov	sp, r7
    3a2a:	bd80      	pop	{r7, pc}

00003a2c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b086      	sub	sp, #24
    3a30:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3a32:	2300      	movs	r3, #0
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	2300      	movs	r3, #0
    3a38:	9301      	str	r3, [sp, #4]
    3a3a:	2300      	movs	r3, #0
    3a3c:	9302      	str	r3, [sp, #8]
    3a3e:	2300      	movs	r3, #0
    3a40:	9303      	str	r3, [sp, #12]
    3a42:	f244 1039 	movw	r0, #16697	; 0x4139
    3a46:	f2c0 0000 	movt	r0, #0
    3a4a:	f643 1128 	movw	r1, #14632	; 0x3928
    3a4e:	f2c0 0101 	movt	r1, #1
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	2300      	movs	r3, #0
    3a56:	f7ff fc6b 	bl	3330 <xTaskGenericCreate>
    3a5a:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d111      	bne.n	3a86 <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3a62:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a66:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3a6a:	f240 4368 	movw	r3, #1128	; 0x468
    3a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a72:	2201      	movs	r2, #1
    3a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3a76:	f240 435c 	movw	r3, #1116	; 0x45c
    3a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a7e:	2200      	movs	r2, #0
    3a80:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3a82:	f000 fdb3 	bl	45ec <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3a86:	3708      	adds	r7, #8
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}

00003a8c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3a90:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a94:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3a98:	f240 4368 	movw	r3, #1128	; 0x468
    3a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa0:	2200      	movs	r2, #0
    3aa2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3aa4:	f000 fdca 	bl	463c <vPortEndScheduler>
}
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	bf00      	nop

00003aac <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3aac:	b480      	push	{r7}
    3aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ab0:	f240 436c 	movw	r3, #1132	; 0x46c
    3ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	1c5a      	adds	r2, r3, #1
    3abc:	f240 436c 	movw	r3, #1132	; 0x46c
    3ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac4:	601a      	str	r2, [r3, #0]
}
    3ac6:	46bd      	mov	sp, r7
    3ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop

00003ad0 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3ad0:	b590      	push	{r4, r7, lr}
    3ad2:	b083      	sub	sp, #12
    3ad4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ad6:	2300      	movs	r3, #0
    3ad8:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ada:	f000 fdc3 	bl	4664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ade:	f240 436c 	movw	r3, #1132	; 0x46c
    3ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	1e5a      	subs	r2, r3, #1
    3aea:	f240 436c 	movw	r3, #1132	; 0x46c
    3aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3af4:	f240 436c 	movw	r3, #1132	; 0x46c
    3af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	2b00      	cmp	r3, #0
    3b00:	f040 8089 	bne.w	3c16 <xTaskResumeAll+0x146>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b04:	f240 4358 	movw	r3, #1112	; 0x458
    3b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	f000 8081 	beq.w	3c16 <xTaskResumeAll+0x146>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b14:	2300      	movs	r3, #0
    3b16:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b18:	e036      	b.n	3b88 <xTaskResumeAll+0xb8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b1a:	f240 4318 	movw	r3, #1048	; 0x418
    3b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b22:	68db      	ldr	r3, [r3, #12]
    3b24:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b26:	f104 0318 	add.w	r3, r4, #24
    3b2a:	4618      	mov	r0, r3
    3b2c:	f7fe ff78 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b30:	1d23      	adds	r3, r4, #4
    3b32:	4618      	mov	r0, r3
    3b34:	f7fe ff74 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b3a:	f240 4364 	movw	r3, #1124	; 0x464
    3b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b42:	681b      	ldr	r3, [r3, #0]
    3b44:	429a      	cmp	r2, r3
    3b46:	d905      	bls.n	3b54 <xTaskResumeAll+0x84>
    3b48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b4a:	f240 4364 	movw	r3, #1124	; 0x464
    3b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b52:	601a      	str	r2, [r3, #0]
    3b54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b56:	4613      	mov	r3, r2
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	4413      	add	r3, r2
    3b5c:	009b      	lsls	r3, r3, #2
    3b5e:	f240 2258 	movw	r2, #600	; 0x258
    3b62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b66:	441a      	add	r2, r3
    3b68:	1d23      	adds	r3, r4, #4
    3b6a:	4610      	mov	r0, r2
    3b6c:	4619      	mov	r1, r3
    3b6e:	f7fe fef7 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b74:	f240 2354 	movw	r3, #596	; 0x254
    3b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b80:	429a      	cmp	r2, r3
    3b82:	d301      	bcc.n	3b88 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    3b84:	2301      	movs	r3, #1
    3b86:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b88:	f240 4318 	movw	r3, #1048	; 0x418
    3b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b90:	681b      	ldr	r3, [r3, #0]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d1c1      	bne.n	3b1a <xTaskResumeAll+0x4a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b96:	f240 4370 	movw	r3, #1136	; 0x470
    3b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d024      	beq.n	3bee <xTaskResumeAll+0x11e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ba4:	e01a      	b.n	3bdc <xTaskResumeAll+0x10c>
					{
						vTaskIncrementTick();
    3ba6:	f000 f88d 	bl	3cc4 <vTaskIncrementTick>
						--uxMissedTicks;
    3baa:	f240 4370 	movw	r3, #1136	; 0x470
    3bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	1e5a      	subs	r2, r3, #1
    3bb6:	f240 4370 	movw	r3, #1136	; 0x470
    3bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bbe:	601a      	str	r2, [r3, #0]
                        // added by wanbo
                        if (uxMissedTicks > (unsigned portBASE_TYPE) 1<<31)
    3bc0:	f240 4370 	movw	r3, #1136	; 0x470
    3bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3bce:	d905      	bls.n	3bdc <xTaskResumeAll+0x10c>
                        {
                            uxMissedTicks = 0;
    3bd0:	f240 4370 	movw	r3, #1136	; 0x470
    3bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd8:	2200      	movs	r2, #0
    3bda:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bdc:	f240 4370 	movw	r3, #1136	; 0x470
    3be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d1dd      	bne.n	3ba6 <xTaskResumeAll+0xd6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3bea:	2301      	movs	r3, #1
    3bec:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3bee:	683b      	ldr	r3, [r7, #0]
    3bf0:	2b01      	cmp	r3, #1
    3bf2:	d006      	beq.n	3c02 <xTaskResumeAll+0x132>
    3bf4:	f240 4374 	movw	r3, #1140	; 0x474
    3bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfc:	681b      	ldr	r3, [r3, #0]
    3bfe:	2b01      	cmp	r3, #1
    3c00:	d109      	bne.n	3c16 <xTaskResumeAll+0x146>
				{
					xAlreadyYielded = pdTRUE;
    3c02:	2301      	movs	r3, #1
    3c04:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3c06:	f240 4374 	movw	r3, #1140	; 0x474
    3c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c0e:	2200      	movs	r2, #0
    3c10:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3c12:	f000 fd19 	bl	4648 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3c16:	f000 fd3b 	bl	4690 <vPortExitCritical>

	return xAlreadyYielded;
    3c1a:	687b      	ldr	r3, [r7, #4]
}
    3c1c:	4618      	mov	r0, r3
    3c1e:	370c      	adds	r7, #12
    3c20:	46bd      	mov	sp, r7
    3c22:	bd90      	pop	{r4, r7, pc}

00003c24 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c24:	b580      	push	{r7, lr}
    3c26:	b082      	sub	sp, #8
    3c28:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c2a:	f000 fd1b 	bl	4664 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c2e:	f240 435c 	movw	r3, #1116	; 0x45c
    3c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c36:	681b      	ldr	r3, [r3, #0]
    3c38:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c3a:	f000 fd29 	bl	4690 <vPortExitCritical>

	return xTicks;
    3c3e:	687b      	ldr	r3, [r7, #4]
}
    3c40:	4618      	mov	r0, r3
    3c42:	3708      	adds	r7, #8
    3c44:	46bd      	mov	sp, r7
    3c46:	bd80      	pop	{r7, pc}

00003c48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c48:	b480      	push	{r7}
    3c4a:	b083      	sub	sp, #12
    3c4c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c4e:	2300      	movs	r3, #0
    3c50:	607b      	str	r3, [r7, #4]
    3c52:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3c56:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3c5a:	f240 435c 	movw	r3, #1116	; 0x45c
    3c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3c66:	f04f 0000 	mov.w	r0, #0
    3c6a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3c6e:	683b      	ldr	r3, [r7, #0]
}
    3c70:	4618      	mov	r0, r3
    3c72:	370c      	adds	r7, #12
    3c74:	46bd      	mov	sp, r7
    3c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7a:	4770      	bx	lr

00003c7c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3c7c:	b480      	push	{r7}
    3c7e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3c80:	f240 4358 	movw	r3, #1112	; 0x458
    3c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c88:	681b      	ldr	r3, [r3, #0]
}
    3c8a:	4618      	mov	r0, r3
    3c8c:	46bd      	mov	sp, r7
    3c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c92:	4770      	bx	lr

00003c94 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3c94:	b480      	push	{r7}
    3c96:	b085      	sub	sp, #20
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d105      	bne.n	3cae <pcTaskGetTaskName+0x1a>
    3ca2:	f240 2354 	movw	r3, #596	; 0x254
    3ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	e000      	b.n	3cb0 <pcTaskGetTaskName+0x1c>
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	3334      	adds	r3, #52	; 0x34
	}
    3cb6:	4618      	mov	r0, r3
    3cb8:	3714      	adds	r7, #20
    3cba:	46bd      	mov	sp, r7
    3cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop

00003cc4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b084      	sub	sp, #16
    3cc8:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3cca:	f240 436c 	movw	r3, #1132	; 0x46c
    3cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	f040 80b9 	bne.w	3e4c <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3cda:	f240 435c 	movw	r3, #1116	; 0x45c
    3cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	1c5a      	adds	r2, r3, #1
    3ce6:	f240 435c 	movw	r3, #1116	; 0x45c
    3cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cee:	601a      	str	r2, [r3, #0]
        //vPrintNumber(xTickCount);
		if( xTickCount == ( portTickType ) 0U )
    3cf0:	f240 435c 	movw	r3, #1116	; 0x45c
    3cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d13f      	bne.n	3d7e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3cfe:	f240 4310 	movw	r3, #1040	; 0x410
    3d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3d0a:	f240 4314 	movw	r3, #1044	; 0x414
    3d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d12:	681a      	ldr	r2, [r3, #0]
    3d14:	f240 4310 	movw	r3, #1040	; 0x410
    3d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d1c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3d1e:	f240 4314 	movw	r3, #1044	; 0x414
    3d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d26:	68fa      	ldr	r2, [r7, #12]
    3d28:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3d2a:	f240 4378 	movw	r3, #1144	; 0x478
    3d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d32:	681b      	ldr	r3, [r3, #0]
    3d34:	1c5a      	adds	r2, r3, #1
    3d36:	f240 4378 	movw	r3, #1144	; 0x478
    3d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3d40:	f240 4310 	movw	r3, #1040	; 0x410
    3d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d107      	bne.n	3d60 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3d50:	f240 03f8 	movw	r3, #248	; 0xf8
    3d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d58:	f04f 32ff 	mov.w	r2, #4294967295
    3d5c:	601a      	str	r2, [r3, #0]
    3d5e:	e00e      	b.n	3d7e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3d60:	f240 4310 	movw	r3, #1040	; 0x410
    3d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d68:	681b      	ldr	r3, [r3, #0]
    3d6a:	68db      	ldr	r3, [r3, #12]
    3d6c:	68db      	ldr	r3, [r3, #12]
    3d6e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3d70:	68bb      	ldr	r3, [r7, #8]
    3d72:	685a      	ldr	r2, [r3, #4]
    3d74:	f240 03f8 	movw	r3, #248	; 0xf8
    3d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d7c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3d7e:	f240 435c 	movw	r3, #1116	; 0x45c
    3d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d86:	681a      	ldr	r2, [r3, #0]
    3d88:	f240 03f8 	movw	r3, #248	; 0xf8
    3d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d90:	681b      	ldr	r3, [r3, #0]
    3d92:	429a      	cmp	r2, r3
    3d94:	d359      	bcc.n	3e4a <vTaskIncrementTick+0x186>
    3d96:	f240 4310 	movw	r3, #1040	; 0x410
    3d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	681b      	ldr	r3, [r3, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d107      	bne.n	3db6 <vTaskIncrementTick+0xf2>
    3da6:	f240 03f8 	movw	r3, #248	; 0xf8
    3daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dae:	f04f 32ff 	mov.w	r2, #4294967295
    3db2:	601a      	str	r2, [r3, #0]
    3db4:	e049      	b.n	3e4a <vTaskIncrementTick+0x186>
    3db6:	f240 4310 	movw	r3, #1040	; 0x410
    3dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	68db      	ldr	r3, [r3, #12]
    3dc2:	68db      	ldr	r3, [r3, #12]
    3dc4:	60bb      	str	r3, [r7, #8]
    3dc6:	68bb      	ldr	r3, [r7, #8]
    3dc8:	685b      	ldr	r3, [r3, #4]
    3dca:	607b      	str	r3, [r7, #4]
    3dcc:	f240 435c 	movw	r3, #1116	; 0x45c
    3dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd4:	681a      	ldr	r2, [r3, #0]
    3dd6:	687b      	ldr	r3, [r7, #4]
    3dd8:	429a      	cmp	r2, r3
    3dda:	d206      	bcs.n	3dea <vTaskIncrementTick+0x126>
    3ddc:	f240 03f8 	movw	r3, #248	; 0xf8
    3de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3de4:	687a      	ldr	r2, [r7, #4]
    3de6:	601a      	str	r2, [r3, #0]
    3de8:	e02f      	b.n	3e4a <vTaskIncrementTick+0x186>
    3dea:	68bb      	ldr	r3, [r7, #8]
    3dec:	3304      	adds	r3, #4
    3dee:	4618      	mov	r0, r3
    3df0:	f7fe fe16 	bl	2a20 <vListRemove>
    3df4:	68bb      	ldr	r3, [r7, #8]
    3df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d004      	beq.n	3e06 <vTaskIncrementTick+0x142>
    3dfc:	68bb      	ldr	r3, [r7, #8]
    3dfe:	3318      	adds	r3, #24
    3e00:	4618      	mov	r0, r3
    3e02:	f7fe fe0d 	bl	2a20 <vListRemove>
    3e06:	68bb      	ldr	r3, [r7, #8]
    3e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e0a:	f240 4364 	movw	r3, #1124	; 0x464
    3e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e12:	681b      	ldr	r3, [r3, #0]
    3e14:	429a      	cmp	r2, r3
    3e16:	d906      	bls.n	3e26 <vTaskIncrementTick+0x162>
    3e18:	68bb      	ldr	r3, [r7, #8]
    3e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e1c:	f240 4364 	movw	r3, #1124	; 0x464
    3e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e24:	601a      	str	r2, [r3, #0]
    3e26:	68bb      	ldr	r3, [r7, #8]
    3e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e2a:	4613      	mov	r3, r2
    3e2c:	009b      	lsls	r3, r3, #2
    3e2e:	4413      	add	r3, r2
    3e30:	009b      	lsls	r3, r3, #2
    3e32:	f240 2258 	movw	r2, #600	; 0x258
    3e36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e3a:	441a      	add	r2, r3
    3e3c:	68bb      	ldr	r3, [r7, #8]
    3e3e:	3304      	adds	r3, #4
    3e40:	4610      	mov	r0, r2
    3e42:	4619      	mov	r1, r3
    3e44:	f7fe fd8c 	bl	2960 <vListInsertEnd>
    3e48:	e7a5      	b.n	3d96 <vTaskIncrementTick+0xd2>
    3e4a:	e00c      	b.n	3e66 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3e4c:	f240 4370 	movw	r3, #1136	; 0x470
    3e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e54:	681b      	ldr	r3, [r3, #0]
    3e56:	1c5a      	adds	r2, r3, #1
    3e58:	f240 4370 	movw	r3, #1136	; 0x470
    3e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e60:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3e62:	f00e fc37 	bl	126d4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3e66:	f240 4370 	movw	r3, #1136	; 0x470
    3e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e6e:	681b      	ldr	r3, [r3, #0]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d101      	bne.n	3e78 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3e74:	f00e fc2e 	bl	126d4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3e78:	3710      	adds	r7, #16
    3e7a:	46bd      	mov	sp, r7
    3e7c:	bd80      	pop	{r7, pc}
    3e7e:	bf00      	nop

00003e80 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b082      	sub	sp, #8
    3e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3e86:	f240 436c 	movw	r3, #1132	; 0x46c
    3e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d006      	beq.n	3ea2 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e94:	f240 4374 	movw	r3, #1140	; 0x474
    3e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e9c:	2201      	movs	r2, #1
    3e9e:	601a      	str	r2, [r3, #0]
    3ea0:	e047      	b.n	3f32 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3ea2:	f00e fc01 	bl	126a8 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3ea6:	e00a      	b.n	3ebe <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3ea8:	f240 4364 	movw	r3, #1124	; 0x464
    3eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	1e5a      	subs	r2, r3, #1
    3eb4:	f240 4364 	movw	r3, #1124	; 0x464
    3eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ebc:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3ebe:	f240 4364 	movw	r3, #1124	; 0x464
    3ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ec6:	6819      	ldr	r1, [r3, #0]
    3ec8:	f240 2258 	movw	r2, #600	; 0x258
    3ecc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ed0:	460b      	mov	r3, r1
    3ed2:	009b      	lsls	r3, r3, #2
    3ed4:	440b      	add	r3, r1
    3ed6:	009b      	lsls	r3, r3, #2
    3ed8:	4413      	add	r3, r2
    3eda:	681b      	ldr	r3, [r3, #0]
    3edc:	2b00      	cmp	r3, #0
    3ede:	d0e3      	beq.n	3ea8 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3ee0:	f240 4364 	movw	r3, #1124	; 0x464
    3ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee8:	681a      	ldr	r2, [r3, #0]
    3eea:	4613      	mov	r3, r2
    3eec:	009b      	lsls	r3, r3, #2
    3eee:	4413      	add	r3, r2
    3ef0:	009b      	lsls	r3, r3, #2
    3ef2:	f240 2258 	movw	r2, #600	; 0x258
    3ef6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3efa:	4413      	add	r3, r2
    3efc:	607b      	str	r3, [r7, #4]
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	685b      	ldr	r3, [r3, #4]
    3f02:	685a      	ldr	r2, [r3, #4]
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	605a      	str	r2, [r3, #4]
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	685a      	ldr	r2, [r3, #4]
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	3308      	adds	r3, #8
    3f10:	429a      	cmp	r2, r3
    3f12:	d104      	bne.n	3f1e <vTaskSwitchContext+0x9e>
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	685b      	ldr	r3, [r3, #4]
    3f18:	685a      	ldr	r2, [r3, #4]
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	605a      	str	r2, [r3, #4]
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	685b      	ldr	r3, [r3, #4]
    3f22:	68da      	ldr	r2, [r3, #12]
    3f24:	f240 2354 	movw	r3, #596	; 0x254
    3f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f2c:	601a      	str	r2, [r3, #0]
        //vPrintString(pcTaskGetTaskName(pxCurrentTCB));
	
		traceTASK_SWITCHED_IN();
    3f2e:	f00e fbb5 	bl	1269c <myTraceSwitchedIn>
	}
}
    3f32:	3708      	adds	r7, #8
    3f34:	46bd      	mov	sp, r7
    3f36:	bd80      	pop	{r7, pc}

00003f38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b084      	sub	sp, #16
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    3f40:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f42:	f240 2354 	movw	r3, #596	; 0x254
    3f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f4a:	681b      	ldr	r3, [r3, #0]
    3f4c:	3318      	adds	r3, #24
    3f4e:	6878      	ldr	r0, [r7, #4]
    3f50:	4619      	mov	r1, r3
    3f52:	f7fe fd2d 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f56:	f240 2354 	movw	r3, #596	; 0x254
    3f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	3304      	adds	r3, #4
    3f62:	4618      	mov	r0, r3
    3f64:	f7fe fd5c 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f68:	683b      	ldr	r3, [r7, #0]
    3f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f6e:	d10d      	bne.n	3f8c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f70:	f240 2354 	movw	r3, #596	; 0x254
    3f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	3304      	adds	r3, #4
    3f7c:	f240 4044 	movw	r0, #1092	; 0x444
    3f80:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f84:	4619      	mov	r1, r3
    3f86:	f7fe fceb 	bl	2960 <vListInsertEnd>
    3f8a:	e00a      	b.n	3fa2 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f8c:	f240 435c 	movw	r3, #1116	; 0x45c
    3f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f94:	681a      	ldr	r2, [r3, #0]
    3f96:	683b      	ldr	r3, [r7, #0]
    3f98:	4413      	add	r3, r2
    3f9a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3f9c:	68f8      	ldr	r0, [r7, #12]
    3f9e:	f000 f9a7 	bl	42f0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3fa2:	3710      	adds	r7, #16
    3fa4:	46bd      	mov	sp, r7
    3fa6:	bd80      	pop	{r7, pc}

00003fa8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3fa8:	b580      	push	{r7, lr}
    3faa:	b084      	sub	sp, #16
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	68db      	ldr	r3, [r3, #12]
    3fb4:	68db      	ldr	r3, [r3, #12]
    3fb6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3fb8:	68bb      	ldr	r3, [r7, #8]
    3fba:	3318      	adds	r3, #24
    3fbc:	4618      	mov	r0, r3
    3fbe:	f7fe fd2f 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fc2:	f240 436c 	movw	r3, #1132	; 0x46c
    3fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d126      	bne.n	401e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3fd0:	68bb      	ldr	r3, [r7, #8]
    3fd2:	3304      	adds	r3, #4
    3fd4:	4618      	mov	r0, r3
    3fd6:	f7fe fd23 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fda:	68bb      	ldr	r3, [r7, #8]
    3fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fde:	f240 4364 	movw	r3, #1124	; 0x464
    3fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	429a      	cmp	r2, r3
    3fea:	d906      	bls.n	3ffa <xTaskRemoveFromEventList+0x52>
    3fec:	68bb      	ldr	r3, [r7, #8]
    3fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ff0:	f240 4364 	movw	r3, #1124	; 0x464
    3ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff8:	601a      	str	r2, [r3, #0]
    3ffa:	68bb      	ldr	r3, [r7, #8]
    3ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ffe:	4613      	mov	r3, r2
    4000:	009b      	lsls	r3, r3, #2
    4002:	4413      	add	r3, r2
    4004:	009b      	lsls	r3, r3, #2
    4006:	f240 2258 	movw	r2, #600	; 0x258
    400a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    400e:	441a      	add	r2, r3
    4010:	68bb      	ldr	r3, [r7, #8]
    4012:	3304      	adds	r3, #4
    4014:	4610      	mov	r0, r2
    4016:	4619      	mov	r1, r3
    4018:	f7fe fca2 	bl	2960 <vListInsertEnd>
    401c:	e008      	b.n	4030 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    401e:	68bb      	ldr	r3, [r7, #8]
    4020:	3318      	adds	r3, #24
    4022:	f240 4018 	movw	r0, #1048	; 0x418
    4026:	f2c2 0000 	movt	r0, #8192	; 0x2000
    402a:	4619      	mov	r1, r3
    402c:	f7fe fc98 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4030:	68bb      	ldr	r3, [r7, #8]
    4032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4034:	f240 2354 	movw	r3, #596	; 0x254
    4038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    403c:	681b      	ldr	r3, [r3, #0]
    403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4040:	429a      	cmp	r2, r3
    4042:	d302      	bcc.n	404a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4044:	2301      	movs	r3, #1
    4046:	60fb      	str	r3, [r7, #12]
    4048:	e001      	b.n	404e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    404a:	2300      	movs	r3, #0
    404c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    404e:	68fb      	ldr	r3, [r7, #12]
}
    4050:	4618      	mov	r0, r3
    4052:	3710      	adds	r7, #16
    4054:	46bd      	mov	sp, r7
    4056:	bd80      	pop	{r7, pc}

00004058 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4058:	b480      	push	{r7}
    405a:	b083      	sub	sp, #12
    405c:	af00      	add	r7, sp, #0
    405e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4060:	f240 4378 	movw	r3, #1144	; 0x478
    4064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4068:	681a      	ldr	r2, [r3, #0]
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    406e:	f240 435c 	movw	r3, #1116	; 0x45c
    4072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4076:	681a      	ldr	r2, [r3, #0]
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	605a      	str	r2, [r3, #4]
}
    407c:	370c      	adds	r7, #12
    407e:	46bd      	mov	sp, r7
    4080:	f85d 7b04 	ldr.w	r7, [sp], #4
    4084:	4770      	bx	lr
    4086:	bf00      	nop

00004088 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4088:	b580      	push	{r7, lr}
    408a:	b084      	sub	sp, #16
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
    4090:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4092:	f000 fae7 	bl	4664 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4096:	683b      	ldr	r3, [r7, #0]
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	f1b3 3fff 	cmp.w	r3, #4294967295
    409e:	d102      	bne.n	40a6 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    40a0:	2300      	movs	r3, #0
    40a2:	60fb      	str	r3, [r7, #12]
    40a4:	e035      	b.n	4112 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	681a      	ldr	r2, [r3, #0]
    40aa:	f240 4378 	movw	r3, #1144	; 0x478
    40ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	429a      	cmp	r2, r3
    40b6:	d00b      	beq.n	40d0 <xTaskCheckForTimeOut+0x48>
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	685a      	ldr	r2, [r3, #4]
    40bc:	f240 435c 	movw	r3, #1116	; 0x45c
    40c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40c4:	681b      	ldr	r3, [r3, #0]
    40c6:	429a      	cmp	r2, r3
    40c8:	d802      	bhi.n	40d0 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    40ca:	2301      	movs	r3, #1
    40cc:	60fb      	str	r3, [r7, #12]
    40ce:	e020      	b.n	4112 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    40d0:	f240 435c 	movw	r3, #1116	; 0x45c
    40d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d8:	681a      	ldr	r2, [r3, #0]
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	685b      	ldr	r3, [r3, #4]
    40de:	1ad2      	subs	r2, r2, r3
    40e0:	683b      	ldr	r3, [r7, #0]
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	429a      	cmp	r2, r3
    40e6:	d212      	bcs.n	410e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    40e8:	683b      	ldr	r3, [r7, #0]
    40ea:	681a      	ldr	r2, [r3, #0]
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	6859      	ldr	r1, [r3, #4]
    40f0:	f240 435c 	movw	r3, #1116	; 0x45c
    40f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	1acb      	subs	r3, r1, r3
    40fc:	441a      	add	r2, r3
    40fe:	683b      	ldr	r3, [r7, #0]
    4100:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    4102:	6878      	ldr	r0, [r7, #4]
    4104:	f7ff ffa8 	bl	4058 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4108:	2300      	movs	r3, #0
    410a:	60fb      	str	r3, [r7, #12]
    410c:	e001      	b.n	4112 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    410e:	2301      	movs	r3, #1
    4110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4112:	f000 fabd 	bl	4690 <vPortExitCritical>

	return xReturn;
    4116:	68fb      	ldr	r3, [r7, #12]
}
    4118:	4618      	mov	r0, r3
    411a:	3710      	adds	r7, #16
    411c:	46bd      	mov	sp, r7
    411e:	bd80      	pop	{r7, pc}

00004120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4120:	b480      	push	{r7}
    4122:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4124:	f240 4374 	movw	r3, #1140	; 0x474
    4128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    412c:	2201      	movs	r2, #1
    412e:	601a      	str	r2, [r3, #0]
}
    4130:	46bd      	mov	sp, r7
    4132:	f85d 7b04 	ldr.w	r7, [sp], #4
    4136:	4770      	bx	lr

00004138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4138:	b580      	push	{r7, lr}
    413a:	b082      	sub	sp, #8
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4140:	f000 f88e 	bl	4260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    4144:	f240 2358 	movw	r3, #600	; 0x258
    4148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    414c:	681b      	ldr	r3, [r3, #0]
    414e:	2b01      	cmp	r3, #1
    4150:	d902      	bls.n	4158 <prvIdleTask+0x20>
			{
				taskYIELD();
    4152:	f000 fa79 	bl	4648 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4156:	e7f3      	b.n	4140 <prvIdleTask+0x8>
    4158:	e7f2      	b.n	4140 <prvIdleTask+0x8>
    415a:	bf00      	nop

0000415c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    415c:	b580      	push	{r7, lr}
    415e:	b084      	sub	sp, #16
    4160:	af00      	add	r7, sp, #0
    4162:	60f8      	str	r0, [r7, #12]
    4164:	60b9      	str	r1, [r7, #8]
    4166:	607a      	str	r2, [r7, #4]
    4168:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    416a:	68fb      	ldr	r3, [r7, #12]
    416c:	3334      	adds	r3, #52	; 0x34
    416e:	4618      	mov	r0, r3
    4170:	68b9      	ldr	r1, [r7, #8]
    4172:	2210      	movs	r2, #16
    4174:	f00f fb66 	bl	13844 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4178:	68fb      	ldr	r3, [r7, #12]
    417a:	2200      	movs	r2, #0
    417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	2b13      	cmp	r3, #19
    4184:	d901      	bls.n	418a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4186:	2313      	movs	r3, #19
    4188:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	687a      	ldr	r2, [r7, #4]
    418e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	687a      	ldr	r2, [r7, #4]
    4194:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	3304      	adds	r3, #4
    419a:	4618      	mov	r0, r3
    419c:	f7fe fbd4 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	3318      	adds	r3, #24
    41a4:	4618      	mov	r0, r3
    41a6:	f7fe fbcf 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    41aa:	68fb      	ldr	r3, [r7, #12]
    41ac:	68fa      	ldr	r2, [r7, #12]
    41ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	f1c3 0214 	rsb	r2, r3, #20
    41b6:	68fb      	ldr	r3, [r7, #12]
    41b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    41ba:	68fb      	ldr	r3, [r7, #12]
    41bc:	68fa      	ldr	r2, [r7, #12]
    41be:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    41c0:	3710      	adds	r7, #16
    41c2:	46bd      	mov	sp, r7
    41c4:	bd80      	pop	{r7, pc}
    41c6:	bf00      	nop

000041c8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    41c8:	b580      	push	{r7, lr}
    41ca:	b082      	sub	sp, #8
    41cc:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41ce:	2300      	movs	r3, #0
    41d0:	607b      	str	r3, [r7, #4]
    41d2:	e00f      	b.n	41f4 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    41d4:	687a      	ldr	r2, [r7, #4]
    41d6:	4613      	mov	r3, r2
    41d8:	009b      	lsls	r3, r3, #2
    41da:	4413      	add	r3, r2
    41dc:	009b      	lsls	r3, r3, #2
    41de:	f240 2258 	movw	r2, #600	; 0x258
    41e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    41e6:	4413      	add	r3, r2
    41e8:	4618      	mov	r0, r3
    41ea:	f7fe fb8d 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	3301      	adds	r3, #1
    41f2:	607b      	str	r3, [r7, #4]
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	2b13      	cmp	r3, #19
    41f8:	d9ec      	bls.n	41d4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    41fa:	f240 30e8 	movw	r0, #1000	; 0x3e8
    41fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4202:	f7fe fb81 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    4206:	f240 30fc 	movw	r0, #1020	; 0x3fc
    420a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    420e:	f7fe fb7b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    4212:	f240 4018 	movw	r0, #1048	; 0x418
    4216:	f2c2 0000 	movt	r0, #8192	; 0x2000
    421a:	f7fe fb75 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    421e:	f240 402c 	movw	r0, #1068	; 0x42c
    4222:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4226:	f7fe fb6f 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    422a:	f240 4044 	movw	r0, #1092	; 0x444
    422e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4232:	f7fe fb69 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4236:	f240 4310 	movw	r3, #1040	; 0x410
    423a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    423e:	f240 32e8 	movw	r2, #1000	; 0x3e8
    4242:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4248:	f240 4314 	movw	r3, #1044	; 0x414
    424c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4250:	f240 32fc 	movw	r2, #1020	; 0x3fc
    4254:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4258:	601a      	str	r2, [r3, #0]
}
    425a:	3708      	adds	r7, #8
    425c:	46bd      	mov	sp, r7
    425e:	bd80      	pop	{r7, pc}

00004260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4260:	b580      	push	{r7, lr}
    4262:	b082      	sub	sp, #8
    4264:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4266:	f240 4340 	movw	r3, #1088	; 0x440
    426a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	2b00      	cmp	r3, #0
    4272:	d03a      	beq.n	42ea <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4274:	f7ff fc1a 	bl	3aac <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4278:	f240 432c 	movw	r3, #1068	; 0x42c
    427c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	bf14      	ite	ne
    4286:	2300      	movne	r3, #0
    4288:	2301      	moveq	r3, #1
    428a:	b2db      	uxtb	r3, r3
    428c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    428e:	f7ff fc1f 	bl	3ad0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	2b00      	cmp	r3, #0
    4296:	d128      	bne.n	42ea <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4298:	f000 f9e4 	bl	4664 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    429c:	f240 432c 	movw	r3, #1068	; 0x42c
    42a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a4:	68db      	ldr	r3, [r3, #12]
    42a6:	68db      	ldr	r3, [r3, #12]
    42a8:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    42aa:	683b      	ldr	r3, [r7, #0]
    42ac:	3304      	adds	r3, #4
    42ae:	4618      	mov	r0, r3
    42b0:	f7fe fbb6 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    42b4:	f240 4358 	movw	r3, #1112	; 0x458
    42b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	1e5a      	subs	r2, r3, #1
    42c0:	f240 4358 	movw	r3, #1112	; 0x458
    42c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42c8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    42ca:	f240 4340 	movw	r3, #1088	; 0x440
    42ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d2:	681b      	ldr	r3, [r3, #0]
    42d4:	1e5a      	subs	r2, r3, #1
    42d6:	f240 4340 	movw	r3, #1088	; 0x440
    42da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42de:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    42e0:	f000 f9d6 	bl	4690 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    42e4:	6838      	ldr	r0, [r7, #0]
    42e6:	f000 f879 	bl	43dc <prvDeleteTCB>
			}
		}
	}
	#endif
}
    42ea:	3708      	adds	r7, #8
    42ec:	46bd      	mov	sp, r7
    42ee:	bd80      	pop	{r7, pc}

000042f0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    42f0:	b580      	push	{r7, lr}
    42f2:	b082      	sub	sp, #8
    42f4:	af00      	add	r7, sp, #0
    42f6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    42f8:	f240 2354 	movw	r3, #596	; 0x254
    42fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4300:	681b      	ldr	r3, [r3, #0]
    4302:	687a      	ldr	r2, [r7, #4]
    4304:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    4306:	f240 435c 	movw	r3, #1116	; 0x45c
    430a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	687a      	ldr	r2, [r7, #4]
    4312:	429a      	cmp	r2, r3
    4314:	d20f      	bcs.n	4336 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4316:	f240 4314 	movw	r3, #1044	; 0x414
    431a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    431e:	681a      	ldr	r2, [r3, #0]
    4320:	f240 2354 	movw	r3, #596	; 0x254
    4324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	3304      	adds	r3, #4
    432c:	4610      	mov	r0, r2
    432e:	4619      	mov	r1, r3
    4330:	f7fe fb3e 	bl	29b0 <vListInsert>
    4334:	e01c      	b.n	4370 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4336:	f240 4310 	movw	r3, #1040	; 0x410
    433a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433e:	681a      	ldr	r2, [r3, #0]
    4340:	f240 2354 	movw	r3, #596	; 0x254
    4344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	3304      	adds	r3, #4
    434c:	4610      	mov	r0, r2
    434e:	4619      	mov	r1, r3
    4350:	f7fe fb2e 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4354:	f240 03f8 	movw	r3, #248	; 0xf8
    4358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	687a      	ldr	r2, [r7, #4]
    4360:	429a      	cmp	r2, r3
    4362:	d205      	bcs.n	4370 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4364:	f240 03f8 	movw	r3, #248	; 0xf8
    4368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    436c:	687a      	ldr	r2, [r7, #4]
    436e:	601a      	str	r2, [r3, #0]
		}
	}
}
    4370:	3708      	adds	r7, #8
    4372:	46bd      	mov	sp, r7
    4374:	bd80      	pop	{r7, pc}
    4376:	bf00      	nop

00004378 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4378:	b580      	push	{r7, lr}
    437a:	b084      	sub	sp, #16
    437c:	af00      	add	r7, sp, #0
    437e:	4603      	mov	r3, r0
    4380:	6039      	str	r1, [r7, #0]
    4382:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4384:	2048      	movs	r0, #72	; 0x48
    4386:	f000 f9ef 	bl	4768 <pvPortMalloc>
    438a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	2b00      	cmp	r3, #0
    4390:	d01f      	beq.n	43d2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4392:	683b      	ldr	r3, [r7, #0]
    4394:	2b00      	cmp	r3, #0
    4396:	d106      	bne.n	43a6 <prvAllocateTCBAndStack+0x2e>
    4398:	88fb      	ldrh	r3, [r7, #6]
    439a:	009b      	lsls	r3, r3, #2
    439c:	4618      	mov	r0, r3
    439e:	f000 f9e3 	bl	4768 <pvPortMalloc>
    43a2:	4603      	mov	r3, r0
    43a4:	e000      	b.n	43a8 <prvAllocateTCBAndStack+0x30>
    43a6:	683b      	ldr	r3, [r7, #0]
    43a8:	68fa      	ldr	r2, [r7, #12]
    43aa:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    43b0:	2b00      	cmp	r3, #0
    43b2:	d105      	bne.n	43c0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    43b4:	68f8      	ldr	r0, [r7, #12]
    43b6:	f000 fa9b 	bl	48f0 <vPortFree>
			pxNewTCB = NULL;
    43ba:	2300      	movs	r3, #0
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e008      	b.n	43d2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    43c0:	68fb      	ldr	r3, [r7, #12]
    43c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    43c4:	88fb      	ldrh	r3, [r7, #6]
    43c6:	009b      	lsls	r3, r3, #2
    43c8:	4610      	mov	r0, r2
    43ca:	21a5      	movs	r1, #165	; 0xa5
    43cc:	461a      	mov	r2, r3
    43ce:	f00f f9e9 	bl	137a4 <memset>
		}
	}

	return pxNewTCB;
    43d2:	68fb      	ldr	r3, [r7, #12]
}
    43d4:	4618      	mov	r0, r3
    43d6:	3710      	adds	r7, #16
    43d8:	46bd      	mov	sp, r7
    43da:	bd80      	pop	{r7, pc}

000043dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    43dc:	b580      	push	{r7, lr}
    43de:	b082      	sub	sp, #8
    43e0:	af00      	add	r7, sp, #0
    43e2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    43e8:	4618      	mov	r0, r3
    43ea:	f000 fa81 	bl	48f0 <vPortFree>
		vPortFree( pxTCB );
    43ee:	6878      	ldr	r0, [r7, #4]
    43f0:	f000 fa7e 	bl	48f0 <vPortFree>
	}
    43f4:	3708      	adds	r7, #8
    43f6:	46bd      	mov	sp, r7
    43f8:	bd80      	pop	{r7, pc}
    43fa:	bf00      	nop

000043fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    43fc:	b480      	push	{r7}
    43fe:	b083      	sub	sp, #12
    4400:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4402:	f240 2354 	movw	r3, #596	; 0x254
    4406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    440a:	681b      	ldr	r3, [r3, #0]
    440c:	607b      	str	r3, [r7, #4]

		return xReturn;
    440e:	687b      	ldr	r3, [r7, #4]
	}
    4410:	4618      	mov	r0, r3
    4412:	370c      	adds	r7, #12
    4414:	46bd      	mov	sp, r7
    4416:	f85d 7b04 	ldr.w	r7, [sp], #4
    441a:	4770      	bx	lr

0000441c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    441c:	b580      	push	{r7, lr}
    441e:	b084      	sub	sp, #16
    4420:	af00      	add	r7, sp, #0
    4422:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4428:	68fb      	ldr	r3, [r7, #12]
    442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    442c:	f240 2354 	movw	r3, #596	; 0x254
    4430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4434:	681b      	ldr	r3, [r3, #0]
    4436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4438:	429a      	cmp	r2, r3
    443a:	d24f      	bcs.n	44dc <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    443c:	f240 2354 	movw	r3, #596	; 0x254
    4440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4448:	f1c3 0214 	rsb	r2, r3, #20
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4450:	68fb      	ldr	r3, [r7, #12]
    4452:	6959      	ldr	r1, [r3, #20]
    4454:	68fb      	ldr	r3, [r7, #12]
    4456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4458:	4613      	mov	r3, r2
    445a:	009b      	lsls	r3, r3, #2
    445c:	4413      	add	r3, r2
    445e:	009b      	lsls	r3, r3, #2
    4460:	f240 2258 	movw	r2, #600	; 0x258
    4464:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4468:	4413      	add	r3, r2
    446a:	4299      	cmp	r1, r3
    446c:	d12e      	bne.n	44cc <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	3304      	adds	r3, #4
    4472:	4618      	mov	r0, r3
    4474:	f7fe fad4 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4478:	f240 2354 	movw	r3, #596	; 0x254
    447c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    448c:	f240 4364 	movw	r3, #1124	; 0x464
    4490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4494:	681b      	ldr	r3, [r3, #0]
    4496:	429a      	cmp	r2, r3
    4498:	d906      	bls.n	44a8 <vTaskPriorityInherit+0x8c>
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    449e:	f240 4364 	movw	r3, #1124	; 0x464
    44a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44a6:	601a      	str	r2, [r3, #0]
    44a8:	68fb      	ldr	r3, [r7, #12]
    44aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44ac:	4613      	mov	r3, r2
    44ae:	009b      	lsls	r3, r3, #2
    44b0:	4413      	add	r3, r2
    44b2:	009b      	lsls	r3, r3, #2
    44b4:	f240 2258 	movw	r2, #600	; 0x258
    44b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    44bc:	441a      	add	r2, r3
    44be:	68fb      	ldr	r3, [r7, #12]
    44c0:	3304      	adds	r3, #4
    44c2:	4610      	mov	r0, r2
    44c4:	4619      	mov	r1, r3
    44c6:	f7fe fa4b 	bl	2960 <vListInsertEnd>
    44ca:	e007      	b.n	44dc <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    44cc:	f240 2354 	movw	r3, #596	; 0x254
    44d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44d8:	68fb      	ldr	r3, [r7, #12]
    44da:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    44dc:	3710      	adds	r7, #16
    44de:	46bd      	mov	sp, r7
    44e0:	bd80      	pop	{r7, pc}
    44e2:	bf00      	nop

000044e4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    44e4:	b580      	push	{r7, lr}
    44e6:	b084      	sub	sp, #16
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d035      	beq.n	4562 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    44f6:	68fb      	ldr	r3, [r7, #12]
    44f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44fa:	68fb      	ldr	r3, [r7, #12]
    44fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44fe:	429a      	cmp	r2, r3
    4500:	d02f      	beq.n	4562 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4502:	68fb      	ldr	r3, [r7, #12]
    4504:	3304      	adds	r3, #4
    4506:	4618      	mov	r0, r3
    4508:	f7fe fa8a 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4518:	f1c3 0214 	rsb	r2, r3, #20
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4520:	68fb      	ldr	r3, [r7, #12]
    4522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4524:	f240 4364 	movw	r3, #1124	; 0x464
    4528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	429a      	cmp	r2, r3
    4530:	d906      	bls.n	4540 <vTaskPriorityDisinherit+0x5c>
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4536:	f240 4364 	movw	r3, #1124	; 0x464
    453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    453e:	601a      	str	r2, [r3, #0]
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4544:	4613      	mov	r3, r2
    4546:	009b      	lsls	r3, r3, #2
    4548:	4413      	add	r3, r2
    454a:	009b      	lsls	r3, r3, #2
    454c:	f240 2258 	movw	r2, #600	; 0x258
    4550:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4554:	441a      	add	r2, r3
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	3304      	adds	r3, #4
    455a:	4610      	mov	r0, r2
    455c:	4619      	mov	r1, r3
    455e:	f7fe f9ff 	bl	2960 <vListInsertEnd>
			}
		}
	}
    4562:	3710      	adds	r7, #16
    4564:	46bd      	mov	sp, r7
    4566:	bd80      	pop	{r7, pc}

00004568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4568:	b480      	push	{r7}
    456a:	b085      	sub	sp, #20
    456c:	af00      	add	r7, sp, #0
    456e:	60f8      	str	r0, [r7, #12]
    4570:	60b9      	str	r1, [r7, #8]
    4572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	3b04      	subs	r3, #4
    4578:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    457a:	68fb      	ldr	r3, [r7, #12]
    457c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	3b04      	subs	r3, #4
    4586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4588:	68ba      	ldr	r2, [r7, #8]
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	3b04      	subs	r3, #4
    4592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	2200      	movs	r2, #0
    4598:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    459a:	68fb      	ldr	r3, [r7, #12]
    459c:	3b14      	subs	r3, #20
    459e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	3b20      	subs	r3, #32
    45aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    45ac:	68fb      	ldr	r3, [r7, #12]
}
    45ae:	4618      	mov	r0, r3
    45b0:	3714      	adds	r7, #20
    45b2:	46bd      	mov	sp, r7
    45b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b8:	4770      	bx	lr
    45ba:	bf00      	nop

000045bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    45bc:	4b06      	ldr	r3, [pc, #24]	; (45d8 <pxCurrentTCBConst2>)
    45be:	6819      	ldr	r1, [r3, #0]
    45c0:	6808      	ldr	r0, [r1, #0]
    45c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45c6:	f380 8809 	msr	PSP, r0
    45ca:	f04f 0000 	mov.w	r0, #0
    45ce:	f380 8811 	msr	BASEPRI, r0
    45d2:	f04e 0e0d 	orr.w	lr, lr, #13
    45d6:	4770      	bx	lr

000045d8 <pxCurrentTCBConst2>:
    45d8:	20000254 	.word	0x20000254

000045dc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    45dc:	4861      	ldr	r0, [pc, #388]	; (4764 <prvSetupTimerInterrupt+0x2c>)
    45de:	6800      	ldr	r0, [r0, #0]
    45e0:	6800      	ldr	r0, [r0, #0]
    45e2:	f380 8808 	msr	MSP, r0
    45e6:	b662      	cpsie	i
    45e8:	df00      	svc	0
    45ea:	bf00      	nop

000045ec <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    45ec:	b580      	push	{r7, lr}
    45ee:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    45f0:	f64e 5320 	movw	r3, #60704	; 0xed20
    45f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    45f8:	f64e 5220 	movw	r2, #60704	; 0xed20
    45fc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4600:	6812      	ldr	r2, [r2, #0]
    4602:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    4606:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4608:	f64e 5320 	movw	r3, #60704	; 0xed20
    460c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4610:	f64e 5220 	movw	r2, #60704	; 0xed20
    4614:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4618:	6812      	ldr	r2, [r2, #0]
    461a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    461e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4620:	f000 f88a 	bl	4738 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4624:	f240 03fc 	movw	r3, #252	; 0xfc
    4628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    462c:	2200      	movs	r2, #0
    462e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4630:	f7ff ffd4 	bl	45dc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4634:	2300      	movs	r3, #0
}
    4636:	4618      	mov	r0, r3
    4638:	bd80      	pop	{r7, pc}
    463a:	bf00      	nop

0000463c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    463c:	b480      	push	{r7}
    463e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4640:	46bd      	mov	sp, r7
    4642:	f85d 7b04 	ldr.w	r7, [sp], #4
    4646:	4770      	bx	lr

00004648 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4648:	b480      	push	{r7}
    464a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    464c:	f64e 5304 	movw	r3, #60676	; 0xed04
    4650:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4658:	601a      	str	r2, [r3, #0]
}
    465a:	46bd      	mov	sp, r7
    465c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4660:	4770      	bx	lr
    4662:	bf00      	nop

00004664 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4664:	b480      	push	{r7}
    4666:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4668:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    466c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4670:	f240 03fc 	movw	r3, #252	; 0xfc
    4674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	1c5a      	adds	r2, r3, #1
    467c:	f240 03fc 	movw	r3, #252	; 0xfc
    4680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4684:	601a      	str	r2, [r3, #0]
}
    4686:	46bd      	mov	sp, r7
    4688:	f85d 7b04 	ldr.w	r7, [sp], #4
    468c:	4770      	bx	lr
    468e:	bf00      	nop

00004690 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4690:	b480      	push	{r7}
    4692:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4694:	f240 03fc 	movw	r3, #252	; 0xfc
    4698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	1e5a      	subs	r2, r3, #1
    46a0:	f240 03fc 	movw	r3, #252	; 0xfc
    46a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    46aa:	f240 03fc 	movw	r3, #252	; 0xfc
    46ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d103      	bne.n	46c0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    46b8:	f04f 0000 	mov.w	r0, #0
    46bc:	f380 8811 	msr	BASEPRI, r0
	}
}
    46c0:	46bd      	mov	sp, r7
    46c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c6:	4770      	bx	lr

000046c8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    46c8:	f3ef 8009 	mrs	r0, PSP
    46cc:	4b0c      	ldr	r3, [pc, #48]	; (4700 <pxCurrentTCBConst>)
    46ce:	681a      	ldr	r2, [r3, #0]
    46d0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46d4:	6010      	str	r0, [r2, #0]
    46d6:	e92d 4008 	stmdb	sp!, {r3, lr}
    46da:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46de:	f380 8811 	msr	BASEPRI, r0
    46e2:	f7ff fbcd 	bl	3e80 <vTaskSwitchContext>
    46e6:	f04f 0000 	mov.w	r0, #0
    46ea:	f380 8811 	msr	BASEPRI, r0
    46ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46f2:	6819      	ldr	r1, [r3, #0]
    46f4:	6808      	ldr	r0, [r1, #0]
    46f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    46fa:	f380 8809 	msr	PSP, r0
    46fe:	4770      	bx	lr

00004700 <pxCurrentTCBConst>:
    4700:	20000254 	.word	0x20000254

00004704 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4704:	b580      	push	{r7, lr}
    4706:	b082      	sub	sp, #8
    4708:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    470a:	f64e 5304 	movw	r3, #60676	; 0xed04
    470e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4716:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4718:	2300      	movs	r3, #0
    471a:	607b      	str	r3, [r7, #4]
    471c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4720:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4724:	f7ff face 	bl	3cc4 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4728:	f04f 0000 	mov.w	r0, #0
    472c:	f380 8811 	msr	BASEPRI, r0
}
    4730:	3708      	adds	r7, #8
    4732:	46bd      	mov	sp, r7
    4734:	bd80      	pop	{r7, pc}
    4736:	bf00      	nop

00004738 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4738:	b480      	push	{r7}
    473a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    473c:	f24e 0314 	movw	r3, #57364	; 0xe014
    4740:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4744:	f641 123f 	movw	r2, #6463	; 0x193f
    4748:	f2c0 0201 	movt	r2, #1
    474c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    474e:	f24e 0310 	movw	r3, #57360	; 0xe010
    4752:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4756:	2207      	movs	r2, #7
    4758:	601a      	str	r2, [r3, #0]
}
    475a:	46bd      	mov	sp, r7
    475c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4760:	4770      	bx	lr
    4762:	0000      	.short	0x0000
    4764:	e000ed08 	.word	0xe000ed08

00004768 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4768:	b580      	push	{r7, lr}
    476a:	b08a      	sub	sp, #40	; 0x28
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    4770:	2300      	movs	r3, #0
    4772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4774:	f7ff f99a 	bl	3aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4778:	f24a 4390 	movw	r3, #42128	; 0xa490
    477c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	2b00      	cmp	r3, #0
    4784:	d130      	bne.n	47e8 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    4786:	f24a 4380 	movw	r3, #42112	; 0xa480
    478a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    478e:	f240 4280 	movw	r2, #1152	; 0x480
    4792:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4796:	601a      	str	r2, [r3, #0]
    4798:	f24a 4380 	movw	r3, #42112	; 0xa480
    479c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a0:	2200      	movs	r2, #0
    47a2:	605a      	str	r2, [r3, #4]
    47a4:	f24a 4388 	movw	r3, #42120	; 0xa488
    47a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ac:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    47b0:	605a      	str	r2, [r3, #4]
    47b2:	f24a 4388 	movw	r3, #42120	; 0xa488
    47b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ba:	2200      	movs	r2, #0
    47bc:	601a      	str	r2, [r3, #0]
    47be:	f240 4380 	movw	r3, #1152	; 0x480
    47c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47c6:	617b      	str	r3, [r7, #20]
    47c8:	697b      	ldr	r3, [r7, #20]
    47ca:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    47ce:	605a      	str	r2, [r3, #4]
    47d0:	697a      	ldr	r2, [r7, #20]
    47d2:	f24a 4388 	movw	r3, #42120	; 0xa488
    47d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47da:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    47dc:	f24a 4390 	movw	r3, #42128	; 0xa490
    47e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47e4:	2201      	movs	r2, #1
    47e6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	2b00      	cmp	r3, #0
    47ec:	d00d      	beq.n	480a <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    47ee:	2310      	movs	r3, #16
    47f0:	687a      	ldr	r2, [r7, #4]
    47f2:	4413      	add	r3, r2
    47f4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    47f6:	687b      	ldr	r3, [r7, #4]
    47f8:	f003 0307 	and.w	r3, r3, #7
    47fc:	2b00      	cmp	r3, #0
    47fe:	d004      	beq.n	480a <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	f023 0307 	bic.w	r3, r3, #7
    4806:	3308      	adds	r3, #8
    4808:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	2b00      	cmp	r3, #0
    480e:	d068      	beq.n	48e2 <pvPortMalloc+0x17a>
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    4816:	d264      	bcs.n	48e2 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    4818:	f24a 4380 	movw	r3, #42112	; 0xa480
    481c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4820:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    4822:	f24a 4380 	movw	r3, #42112	; 0xa480
    4826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    482a:	681b      	ldr	r3, [r3, #0]
    482c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    482e:	e004      	b.n	483a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    4830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4832:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    4834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4836:	681b      	ldr	r3, [r3, #0]
    4838:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    483c:	685a      	ldr	r2, [r3, #4]
    483e:	687b      	ldr	r3, [r7, #4]
    4840:	429a      	cmp	r2, r3
    4842:	d203      	bcs.n	484c <pvPortMalloc+0xe4>
    4844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	2b00      	cmp	r3, #0
    484a:	d1f1      	bne.n	4830 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    484e:	f24a 4388 	movw	r3, #42120	; 0xa488
    4852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4856:	429a      	cmp	r2, r3
    4858:	d043      	beq.n	48e2 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    485a:	6a3b      	ldr	r3, [r7, #32]
    485c:	681a      	ldr	r2, [r3, #0]
    485e:	2310      	movs	r3, #16
    4860:	4413      	add	r3, r2
    4862:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4866:	681a      	ldr	r2, [r3, #0]
    4868:	6a3b      	ldr	r3, [r7, #32]
    486a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    486e:	685a      	ldr	r2, [r3, #4]
    4870:	687b      	ldr	r3, [r7, #4]
    4872:	1ad2      	subs	r2, r2, r3
    4874:	2310      	movs	r3, #16
    4876:	005b      	lsls	r3, r3, #1
    4878:	429a      	cmp	r2, r3
    487a:	d925      	bls.n	48c8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    487e:	687b      	ldr	r3, [r7, #4]
    4880:	4413      	add	r3, r2
    4882:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4886:	685a      	ldr	r2, [r3, #4]
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	1ad2      	subs	r2, r2, r3
    488c:	693b      	ldr	r3, [r7, #16]
    488e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    4890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4892:	687a      	ldr	r2, [r7, #4]
    4894:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4896:	693b      	ldr	r3, [r7, #16]
    4898:	685b      	ldr	r3, [r3, #4]
    489a:	60fb      	str	r3, [r7, #12]
    489c:	f24a 4380 	movw	r3, #42112	; 0xa480
    48a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a4:	61bb      	str	r3, [r7, #24]
    48a6:	e002      	b.n	48ae <pvPortMalloc+0x146>
    48a8:	69bb      	ldr	r3, [r7, #24]
    48aa:	681b      	ldr	r3, [r3, #0]
    48ac:	61bb      	str	r3, [r7, #24]
    48ae:	69bb      	ldr	r3, [r7, #24]
    48b0:	681b      	ldr	r3, [r3, #0]
    48b2:	685a      	ldr	r2, [r3, #4]
    48b4:	68fb      	ldr	r3, [r7, #12]
    48b6:	429a      	cmp	r2, r3
    48b8:	d3f6      	bcc.n	48a8 <pvPortMalloc+0x140>
    48ba:	69bb      	ldr	r3, [r7, #24]
    48bc:	681a      	ldr	r2, [r3, #0]
    48be:	693b      	ldr	r3, [r7, #16]
    48c0:	601a      	str	r2, [r3, #0]
    48c2:	69bb      	ldr	r3, [r7, #24]
    48c4:	693a      	ldr	r2, [r7, #16]
    48c6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    48c8:	f240 1300 	movw	r3, #256	; 0x100
    48cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d0:	681a      	ldr	r2, [r3, #0]
    48d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48d4:	685b      	ldr	r3, [r3, #4]
    48d6:	1ad2      	subs	r2, r2, r3
    48d8:	f240 1300 	movw	r3, #256	; 0x100
    48dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    48e2:	f7ff f8f5 	bl	3ad0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    48e6:	69fb      	ldr	r3, [r7, #28]
}
    48e8:	4618      	mov	r0, r3
    48ea:	3728      	adds	r7, #40	; 0x28
    48ec:	46bd      	mov	sp, r7
    48ee:	bd80      	pop	{r7, pc}

000048f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    48f0:	b580      	push	{r7, lr}
    48f2:	b086      	sub	sp, #24
    48f4:	af00      	add	r7, sp, #0
    48f6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	2b00      	cmp	r3, #0
    4900:	d030      	beq.n	4964 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    4902:	2310      	movs	r3, #16
    4904:	425b      	negs	r3, r3
    4906:	693a      	ldr	r2, [r7, #16]
    4908:	4413      	add	r3, r2
    490a:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    490c:	693b      	ldr	r3, [r7, #16]
    490e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    4910:	f7ff f8cc 	bl	3aac <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    4914:	68fb      	ldr	r3, [r7, #12]
    4916:	685b      	ldr	r3, [r3, #4]
    4918:	60bb      	str	r3, [r7, #8]
    491a:	f24a 4380 	movw	r3, #42112	; 0xa480
    491e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4922:	617b      	str	r3, [r7, #20]
    4924:	e002      	b.n	492c <vPortFree+0x3c>
    4926:	697b      	ldr	r3, [r7, #20]
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	617b      	str	r3, [r7, #20]
    492c:	697b      	ldr	r3, [r7, #20]
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	685a      	ldr	r2, [r3, #4]
    4932:	68bb      	ldr	r3, [r7, #8]
    4934:	429a      	cmp	r2, r3
    4936:	d3f6      	bcc.n	4926 <vPortFree+0x36>
    4938:	697b      	ldr	r3, [r7, #20]
    493a:	681a      	ldr	r2, [r3, #0]
    493c:	68fb      	ldr	r3, [r7, #12]
    493e:	601a      	str	r2, [r3, #0]
    4940:	697b      	ldr	r3, [r7, #20]
    4942:	68fa      	ldr	r2, [r7, #12]
    4944:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4946:	68fb      	ldr	r3, [r7, #12]
    4948:	685a      	ldr	r2, [r3, #4]
    494a:	f240 1300 	movw	r3, #256	; 0x100
    494e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	441a      	add	r2, r3
    4956:	f240 1300 	movw	r3, #256	; 0x100
    495a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    495e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4960:	f7ff f8b6 	bl	3ad0 <xTaskResumeAll>
	}
}
    4964:	3718      	adds	r7, #24
    4966:	46bd      	mov	sp, r7
    4968:	bd80      	pop	{r7, pc}
    496a:	bf00      	nop

0000496c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    496c:	b480      	push	{r7}
    496e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4970:	f240 1300 	movw	r3, #256	; 0x100
    4974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4978:	681b      	ldr	r3, [r3, #0]
}
    497a:	4618      	mov	r0, r3
    497c:	46bd      	mov	sp, r7
    497e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4982:	4770      	bx	lr

00004984 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4984:	b480      	push	{r7}
    4986:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4988:	46bd      	mov	sp, r7
    498a:	f85d 7b04 	ldr.w	r7, [sp], #4
    498e:	4770      	bx	lr

00004990 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    4990:	b580      	push	{r7, lr}
    4992:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    4994:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    4998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499c:	781b      	ldrb	r3, [r3, #0]
    499e:	2b00      	cmp	r3, #0
    49a0:	d114      	bne.n	49cc <ground_calibrate+0x3c>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    49a2:	f24a 439a 	movw	r3, #42138	; 0xa49a
    49a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49aa:	881b      	ldrh	r3, [r3, #0]
    49ac:	2b09      	cmp	r3, #9
    49ae:	d838      	bhi.n	4a22 <ground_calibrate+0x92>
    49b0:	f24a 439c 	movw	r3, #42140	; 0xa49c
    49b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b8:	781b      	ldrb	r3, [r3, #0]
    49ba:	2b01      	cmp	r3, #1
    49bc:	d131      	bne.n	4a22 <ground_calibrate+0x92>
      calib_status = WAITING_CALIB_CONTRAST;
    49be:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    49c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c6:	2201      	movs	r2, #1
    49c8:	701a      	strb	r2, [r3, #0]
    49ca:	e02a      	b.n	4a22 <ground_calibrate+0x92>
      //DOWNLINK_SEND_CALIB_START();
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    49cc:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    49d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d4:	781b      	ldrb	r3, [r3, #0]
    49d6:	2b01      	cmp	r3, #1
    49d8:	d123      	bne.n	4a22 <ground_calibrate+0x92>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    49da:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    49de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e2:	885b      	ldrh	r3, [r3, #2]
    49e4:	b21b      	sxth	r3, r3
    49e6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    49ea:	db08      	blt.n	49fe <ground_calibrate+0x6e>
    49ec:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    49f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f4:	885b      	ldrh	r3, [r3, #2]
    49f6:	b21b      	sxth	r3, r3
    49f8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    49fc:	dd11      	ble.n	4a22 <ground_calibrate+0x92>
      ir_gain_calib();
    49fe:	f008 f8db 	bl	cbb8 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    4a02:	f240 1310 	movw	r3, #272	; 0x110
    4a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0a:	681a      	ldr	r2, [r3, #0]
    4a0c:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    4a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a14:	601a      	str	r2, [r3, #0]
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
      calib_status = CALIB_DONE;
    4a16:	f24a 43b2 	movw	r3, #42162	; 0xa4b2
    4a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a1e:	2202      	movs	r2, #2
    4a20:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    4a22:	bd80      	pop	{r7, pc}

00004a24 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    4a24:	b480      	push	{r7}
    4a26:	b083      	sub	sp, #12
    4a28:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    4a2a:	f24a 439c 	movw	r3, #42140	; 0xa49c
    4a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a32:	781b      	ldrb	r3, [r3, #0]
    4a34:	2b03      	cmp	r3, #3
    4a36:	d10c      	bne.n	4a52 <pprz_mode_update+0x2e>
    4a38:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    4a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d032      	beq.n	4aac <pprz_mode_update+0x88>
    4a46:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    4a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a4e:	2200      	movs	r2, #0
    4a50:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    4a52:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a5a:	891b      	ldrh	r3, [r3, #8]
    4a5c:	b21b      	sxth	r3, r3
    4a5e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a62:	dc0f      	bgt.n	4a84 <pprz_mode_update+0x60>
    4a64:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a6c:	891b      	ldrh	r3, [r3, #8]
    4a6e:	b21a      	sxth	r2, r3
    4a70:	f64e 5341 	movw	r3, #60737	; 0xed41
    4a74:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4a78:	429a      	cmp	r2, r3
    4a7a:	bfb4      	ite	lt
    4a7c:	2300      	movlt	r3, #0
    4a7e:	2301      	movge	r3, #1
    4a80:	b2db      	uxtb	r3, r3
    4a82:	e000      	b.n	4a86 <pprz_mode_update+0x62>
    4a84:	2302      	movs	r3, #2
    4a86:	71fb      	strb	r3, [r7, #7]
    4a88:	f24a 439c 	movw	r3, #42140	; 0xa49c
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	781b      	ldrb	r3, [r3, #0]
    4a92:	79fa      	ldrb	r2, [r7, #7]
    4a94:	429a      	cmp	r2, r3
    4a96:	d007      	beq.n	4aa8 <pprz_mode_update+0x84>
    4a98:	f24a 439c 	movw	r3, #42140	; 0xa49c
    4a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa0:	79fa      	ldrb	r2, [r7, #7]
    4aa2:	701a      	strb	r2, [r3, #0]
    4aa4:	2301      	movs	r3, #1
    4aa6:	e002      	b.n	4aae <pprz_mode_update+0x8a>
    4aa8:	2300      	movs	r3, #0
    4aaa:	e000      	b.n	4aae <pprz_mode_update+0x8a>
  } else
    return FALSE;
    4aac:	2300      	movs	r3, #0
}
    4aae:	4618      	mov	r0, r3
    4ab0:	370c      	adds	r7, #12
    4ab2:	46bd      	mov	sp, r7
    4ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab8:	4770      	bx	lr
    4aba:	bf00      	nop

00004abc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    4abc:	b480      	push	{r7}
    4abe:	b083      	sub	sp, #12
    4ac0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    4ac2:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aca:	89db      	ldrh	r3, [r3, #14]
    4acc:	b21a      	sxth	r2, r3
    4ace:	f640 437f 	movw	r3, #3199	; 0xc7f
    4ad2:	429a      	cmp	r2, r3
    4ad4:	bfd4      	ite	le
    4ad6:	2300      	movle	r3, #0
    4ad8:	2301      	movgt	r3, #1
    4ada:	b2db      	uxtb	r3, r3
    4adc:	71fb      	strb	r3, [r7, #7]
    4ade:	f240 1304 	movw	r3, #260	; 0x104
    4ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae6:	781b      	ldrb	r3, [r3, #0]
    4ae8:	79fa      	ldrb	r2, [r7, #7]
    4aea:	429a      	cmp	r2, r3
    4aec:	d007      	beq.n	4afe <ir_estim_mode_update+0x42>
    4aee:	f240 1304 	movw	r3, #260	; 0x104
    4af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af6:	79fa      	ldrb	r2, [r7, #7]
    4af8:	701a      	strb	r2, [r3, #0]
    4afa:	2301      	movs	r3, #1
    4afc:	e000      	b.n	4b00 <ir_estim_mode_update+0x44>
    4afe:	2300      	movs	r3, #0
}
    4b00:	4618      	mov	r0, r3
    4b02:	370c      	adds	r7, #12
    4b04:	46bd      	mov	sp, r7
    4b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b0a:	4770      	bx	lr

00004b0c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    4b0c:	b480      	push	{r7}
    4b0e:	b083      	sub	sp, #12
    4b10:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    4b12:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1a:	7cdb      	ldrb	r3, [r3, #19]
    4b1c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    4b1e:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    4b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	79fa      	ldrb	r2, [r7, #7]
    4b2a:	429a      	cmp	r2, r3
    4b2c:	d017      	beq.n	4b5e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    4b2e:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	781b      	ldrb	r3, [r3, #0]
    4b38:	461a      	mov	r2, r3
    4b3a:	79fb      	ldrb	r3, [r7, #7]
    4b3c:	4053      	eors	r3, r2
    4b3e:	f003 0303 	and.w	r3, r3, #3
    4b42:	2b00      	cmp	r3, #0
    4b44:	bf0c      	ite	eq
    4b46:	2300      	moveq	r3, #0
    4b48:	2301      	movne	r3, #1
    4b4a:	b2db      	uxtb	r3, r3
    4b4c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    4b4e:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    4b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b56:	79fa      	ldrb	r2, [r7, #7]
    4b58:	701a      	strb	r2, [r3, #0]
    return changed;
    4b5a:	79bb      	ldrb	r3, [r7, #6]
    4b5c:	e000      	b.n	4b60 <mcu1_status_update+0x54>
  }
  return FALSE;
    4b5e:	2300      	movs	r3, #0
}
    4b60:	4618      	mov	r0, r3
    4b62:	370c      	adds	r7, #12
    4b64:	46bd      	mov	sp, r7
    4b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6a:	4770      	bx	lr

00004b6c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    4b6c:	b480      	push	{r7}
    4b6e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    4b70:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    4b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d12a      	bne.n	4bd4 <events_update+0x68>
    4b7e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b86:	895b      	ldrh	r3, [r3, #10]
    4b88:	b21b      	sxth	r3, r3
    4b8a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    4b8e:	dd21      	ble.n	4bd4 <events_update+0x68>
    4b90:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    4b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b98:	881b      	ldrh	r3, [r3, #0]
    4b9a:	2b13      	cmp	r3, #19
    4b9c:	d819      	bhi.n	4bd2 <events_update+0x66>
    4b9e:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    4ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba6:	881b      	ldrh	r3, [r3, #0]
    4ba8:	3301      	adds	r3, #1
    4baa:	b29a      	uxth	r2, r3
    4bac:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    4bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb4:	801a      	strh	r2, [r3, #0]
    4bb6:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    4bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bbe:	881b      	ldrh	r3, [r3, #0]
    4bc0:	2b14      	cmp	r3, #20
    4bc2:	d106      	bne.n	4bd2 <events_update+0x66>
    4bc4:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    4bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bcc:	2201      	movs	r2, #1
    4bce:	701a      	strb	r2, [r3, #0]
    4bd0:	e00c      	b.n	4bec <events_update+0x80>
    4bd2:	e00b      	b.n	4bec <events_update+0x80>
    4bd4:	f24a 43b4 	movw	r3, #42164	; 0xa4b4
    4bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bdc:	2200      	movs	r2, #0
    4bde:	801a      	strh	r2, [r3, #0]
    4be0:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    4be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be8:	2200      	movs	r2, #0
    4bea:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    4bec:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    4bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d12a      	bne.n	4c50 <events_update+0xe4>
    4bfa:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c02:	895b      	ldrh	r3, [r3, #10]
    4c04:	b21b      	sxth	r3, r3
    4c06:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    4c0a:	da21      	bge.n	4c50 <events_update+0xe4>
    4c0c:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    4c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c14:	881b      	ldrh	r3, [r3, #0]
    4c16:	2b13      	cmp	r3, #19
    4c18:	d819      	bhi.n	4c4e <events_update+0xe2>
    4c1a:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    4c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c22:	881b      	ldrh	r3, [r3, #0]
    4c24:	3301      	adds	r3, #1
    4c26:	b29a      	uxth	r2, r3
    4c28:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    4c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c30:	801a      	strh	r2, [r3, #0]
    4c32:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    4c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c3a:	881b      	ldrh	r3, [r3, #0]
    4c3c:	2b14      	cmp	r3, #20
    4c3e:	d106      	bne.n	4c4e <events_update+0xe2>
    4c40:	f24a 43a1 	movw	r3, #42145	; 0xa4a1
    4c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c48:	2201      	movs	r2, #1
    4c4a:	701a      	strb	r2, [r3, #0]
    4c4c:	e00c      	b.n	4c68 <events_update+0xfc>
    4c4e:	e00b      	b.n	4c68 <events_update+0xfc>
    4c50:	f24a 43b6 	movw	r3, #42166	; 0xa4b6
    4c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c58:	2200      	movs	r2, #0
    4c5a:	801a      	strh	r2, [r3, #0]
    4c5c:	f24a 43a1 	movw	r3, #42145	; 0xa4a1
    4c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c64:	2200      	movs	r2, #0
    4c66:	701a      	strb	r2, [r3, #0]
}  
    4c68:	46bd      	mov	sp, r7
    4c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6e:	4770      	bx	lr

00004c70 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    4c70:	b480      	push	{r7}
    4c72:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    4c74:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    4c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c7c:	88da      	ldrh	r2, [r3, #6]
    4c7e:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    4c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c86:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    4c88:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    4c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c90:	2200      	movs	r2, #0
    4c92:	74da      	strb	r2, [r3, #19]
}
    4c94:	46bd      	mov	sp, r7
    4c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9a:	4770      	bx	lr

00004c9c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    4c9c:	b480      	push	{r7}
    4c9e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    4ca0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca8:	781a      	ldrb	r2, [r3, #0]
    4caa:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	b2db      	uxtb	r3, r3
    4cb6:	429a      	cmp	r2, r3
    4cb8:	d313      	bcc.n	4ce2 <send_boot+0x46>
    4cba:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	461a      	mov	r2, r3
    4cc8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	1ad3      	subs	r3, r2, r3
    4cd4:	33ff      	adds	r3, #255	; 0xff
    4cd6:	2b06      	cmp	r3, #6
    4cd8:	bfd4      	ite	le
    4cda:	2300      	movle	r3, #0
    4cdc:	2301      	movgt	r3, #1
    4cde:	b2db      	uxtb	r3, r3
    4ce0:	e011      	b.n	4d06 <send_boot+0x6a>
    4ce2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	b2db      	uxtb	r3, r3
    4cee:	461a      	mov	r2, r3
    4cf0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	1ad3      	subs	r3, r2, r3
    4cfc:	2b06      	cmp	r3, #6
    4cfe:	bfd4      	ite	le
    4d00:	2300      	movle	r3, #0
    4d02:	2301      	movgt	r3, #1
    4d04:	b2db      	uxtb	r3, r3
    4d06:	2b00      	cmp	r3, #0
    4d08:	f000 8194 	beq.w	5034 <send_boot+0x398>
    4d0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d14:	781b      	ldrb	r3, [r3, #0]
    4d16:	461a      	mov	r2, r3
    4d18:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d20:	2105      	movs	r1, #5
    4d22:	5499      	strb	r1, [r3, r2]
    4d24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2c:	781b      	ldrb	r3, [r3, #0]
    4d2e:	3301      	adds	r3, #1
    4d30:	b2da      	uxtb	r2, r3
    4d32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d3a:	701a      	strb	r2, [r3, #0]
    4d3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d44:	781b      	ldrb	r3, [r3, #0]
    4d46:	2bff      	cmp	r3, #255	; 0xff
    4d48:	d105      	bne.n	4d56 <send_boot+0xba>
    4d4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d52:	2200      	movs	r2, #0
    4d54:	701a      	strb	r2, [r3, #0]
    4d56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d5e:	781b      	ldrb	r3, [r3, #0]
    4d60:	461a      	mov	r2, r3
    4d62:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6a:	2101      	movs	r1, #1
    4d6c:	5499      	strb	r1, [r3, r2]
    4d6e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d76:	781b      	ldrb	r3, [r3, #0]
    4d78:	3301      	adds	r3, #1
    4d7a:	b2da      	uxtb	r2, r3
    4d7c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d84:	701a      	strb	r2, [r3, #0]
    4d86:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	2bff      	cmp	r3, #255	; 0xff
    4d92:	d105      	bne.n	4da0 <send_boot+0x104>
    4d94:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d9c:	2200      	movs	r2, #0
    4d9e:	701a      	strb	r2, [r3, #0]
    4da0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da8:	2201      	movs	r2, #1
    4daa:	701a      	strb	r2, [r3, #0]
    4dac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db4:	2201      	movs	r2, #1
    4db6:	701a      	strb	r2, [r3, #0]
    4db8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc0:	781b      	ldrb	r3, [r3, #0]
    4dc2:	461a      	mov	r2, r3
    4dc4:	f643 1336 	movw	r3, #14646	; 0x3936
    4dc8:	f2c0 0301 	movt	r3, #1
    4dcc:	7819      	ldrb	r1, [r3, #0]
    4dce:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd6:	5499      	strb	r1, [r3, r2]
    4dd8:	f643 1336 	movw	r3, #14646	; 0x3936
    4ddc:	f2c0 0301 	movt	r3, #1
    4de0:	781a      	ldrb	r2, [r3, #0]
    4de2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dea:	781b      	ldrb	r3, [r3, #0]
    4dec:	4413      	add	r3, r2
    4dee:	b2da      	uxtb	r2, r3
    4df0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df8:	701a      	strb	r2, [r3, #0]
    4dfa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e02:	781a      	ldrb	r2, [r3, #0]
    4e04:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0c:	781b      	ldrb	r3, [r3, #0]
    4e0e:	4413      	add	r3, r2
    4e10:	b2da      	uxtb	r2, r3
    4e12:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1a:	701a      	strb	r2, [r3, #0]
    4e1c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e24:	781b      	ldrb	r3, [r3, #0]
    4e26:	3301      	adds	r3, #1
    4e28:	b2da      	uxtb	r2, r3
    4e2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e32:	701a      	strb	r2, [r3, #0]
    4e34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e3c:	781b      	ldrb	r3, [r3, #0]
    4e3e:	2bff      	cmp	r3, #255	; 0xff
    4e40:	d105      	bne.n	4e4e <send_boot+0x1b2>
    4e42:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4a:	2200      	movs	r2, #0
    4e4c:	701a      	strb	r2, [r3, #0]
    4e4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e56:	781b      	ldrb	r3, [r3, #0]
    4e58:	461a      	mov	r2, r3
    4e5a:	f643 1336 	movw	r3, #14646	; 0x3936
    4e5e:	f2c0 0301 	movt	r3, #1
    4e62:	7859      	ldrb	r1, [r3, #1]
    4e64:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e6c:	5499      	strb	r1, [r3, r2]
    4e6e:	4b88      	ldr	r3, [pc, #544]	; (5090 <send_boot+0x3f4>)
    4e70:	781a      	ldrb	r2, [r3, #0]
    4e72:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7a:	781b      	ldrb	r3, [r3, #0]
    4e7c:	4413      	add	r3, r2
    4e7e:	b2da      	uxtb	r2, r3
    4e80:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e88:	701a      	strb	r2, [r3, #0]
    4e8a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e92:	781a      	ldrb	r2, [r3, #0]
    4e94:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9c:	781b      	ldrb	r3, [r3, #0]
    4e9e:	4413      	add	r3, r2
    4ea0:	b2da      	uxtb	r2, r3
    4ea2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eaa:	701a      	strb	r2, [r3, #0]
    4eac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb4:	781b      	ldrb	r3, [r3, #0]
    4eb6:	3301      	adds	r3, #1
    4eb8:	b2da      	uxtb	r2, r3
    4eba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec2:	701a      	strb	r2, [r3, #0]
    4ec4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ecc:	781b      	ldrb	r3, [r3, #0]
    4ece:	2bff      	cmp	r3, #255	; 0xff
    4ed0:	d105      	bne.n	4ede <send_boot+0x242>
    4ed2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eda:	2200      	movs	r2, #0
    4edc:	701a      	strb	r2, [r3, #0]
    4ede:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee6:	781b      	ldrb	r3, [r3, #0]
    4ee8:	461a      	mov	r2, r3
    4eea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    4eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef2:	7819      	ldrb	r1, [r3, #0]
    4ef4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4efc:	5499      	strb	r1, [r3, r2]
    4efe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f06:	781b      	ldrb	r3, [r3, #0]
    4f08:	3301      	adds	r3, #1
    4f0a:	b2da      	uxtb	r2, r3
    4f0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f14:	701a      	strb	r2, [r3, #0]
    4f16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f1e:	781b      	ldrb	r3, [r3, #0]
    4f20:	2bff      	cmp	r3, #255	; 0xff
    4f22:	d105      	bne.n	4f30 <send_boot+0x294>
    4f24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f2c:	2200      	movs	r2, #0
    4f2e:	701a      	strb	r2, [r3, #0]
    4f30:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f38:	781b      	ldrb	r3, [r3, #0]
    4f3a:	461a      	mov	r2, r3
    4f3c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    4f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f44:	7819      	ldrb	r1, [r3, #0]
    4f46:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4e:	5499      	strb	r1, [r3, r2]
    4f50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f58:	781b      	ldrb	r3, [r3, #0]
    4f5a:	3301      	adds	r3, #1
    4f5c:	b2da      	uxtb	r2, r3
    4f5e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f66:	701a      	strb	r2, [r3, #0]
    4f68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	2bff      	cmp	r3, #255	; 0xff
    4f74:	d105      	bne.n	4f82 <send_boot+0x2e6>
    4f76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    4f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7e:	2200      	movs	r2, #0
    4f80:	701a      	strb	r2, [r3, #0]
    4f82:	f248 0339 	movw	r3, #32825	; 0x8039
    4f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8a:	781b      	ldrb	r3, [r3, #0]
    4f8c:	b2db      	uxtb	r3, r3
    4f8e:	f003 0310 	and.w	r3, r3, #16
    4f92:	2b00      	cmp	r3, #0
    4f94:	d15a      	bne.n	504c <send_boot+0x3b0>
    4f96:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	781b      	ldrb	r3, [r3, #0]
    4fa0:	b2db      	uxtb	r3, r3
    4fa2:	461a      	mov	r2, r3
    4fa4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    4fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fac:	5c9a      	ldrb	r2, [r3, r2]
    4fae:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	701a      	strb	r2, [r3, #0]
    4fb8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    4fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc0:	2200      	movs	r2, #0
    4fc2:	701a      	strb	r2, [r3, #0]
    4fc4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fcc:	781b      	ldrb	r3, [r3, #0]
    4fce:	b2db      	uxtb	r3, r3
    4fd0:	3301      	adds	r3, #1
    4fd2:	b2da      	uxtb	r2, r3
    4fd4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fdc:	701a      	strb	r2, [r3, #0]
    4fde:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	b2db      	uxtb	r3, r3
    4fea:	2bff      	cmp	r3, #255	; 0xff
    4fec:	d105      	bne.n	4ffa <send_boot+0x35e>
    4fee:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    4ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff6:	2200      	movs	r2, #0
    4ff8:	701a      	strb	r2, [r3, #0]
    4ffa:	f248 0338 	movw	r3, #32824	; 0x8038
    4ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5002:	f248 0238 	movw	r2, #32824	; 0x8038
    5006:	f2c2 0200 	movt	r2, #8192	; 0x2000
    500a:	7812      	ldrb	r2, [r2, #0]
    500c:	b2d2      	uxtb	r2, r2
    500e:	f042 0201 	orr.w	r2, r2, #1
    5012:	b2d2      	uxtb	r2, r2
    5014:	701a      	strb	r2, [r3, #0]
    5016:	f248 0339 	movw	r3, #32825	; 0x8039
    501a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501e:	f248 0239 	movw	r2, #32825	; 0x8039
    5022:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5026:	7812      	ldrb	r2, [r2, #0]
    5028:	b2d2      	uxtb	r2, r2
    502a:	f042 0210 	orr.w	r2, r2, #16
    502e:	b2d2      	uxtb	r2, r2
    5030:	701a      	strb	r2, [r3, #0]
    5032:	e00b      	b.n	504c <send_boot+0x3b0>
    5034:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503c:	781b      	ldrb	r3, [r3, #0]
    503e:	3301      	adds	r3, #1
    5040:	b2da      	uxtb	r2, r3
    5042:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    504c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5054:	781a      	ldrb	r2, [r3, #0]
    5056:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    505a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505e:	781b      	ldrb	r3, [r3, #0]
    5060:	b2db      	uxtb	r3, r3
    5062:	429a      	cmp	r2, r3
    5064:	d316      	bcc.n	5094 <send_boot+0x3f8>
    5066:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506e:	781b      	ldrb	r3, [r3, #0]
    5070:	b2db      	uxtb	r3, r3
    5072:	461a      	mov	r2, r3
    5074:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	781b      	ldrb	r3, [r3, #0]
    507e:	1ad3      	subs	r3, r2, r3
    5080:	33ff      	adds	r3, #255	; 0xff
    5082:	2b14      	cmp	r3, #20
    5084:	bfd4      	ite	le
    5086:	2300      	movle	r3, #0
    5088:	2301      	movgt	r3, #1
    508a:	b2db      	uxtb	r3, r3
    508c:	e014      	b.n	50b8 <send_boot+0x41c>
    508e:	bf00      	nop
    5090:	00013937 	.word	0x00013937
    5094:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509c:	781b      	ldrb	r3, [r3, #0]
    509e:	b2db      	uxtb	r3, r3
    50a0:	461a      	mov	r2, r3
    50a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50aa:	781b      	ldrb	r3, [r3, #0]
    50ac:	1ad3      	subs	r3, r2, r3
    50ae:	2b14      	cmp	r3, #20
    50b0:	bfd4      	ite	le
    50b2:	2300      	movle	r3, #0
    50b4:	2301      	movgt	r3, #1
    50b6:	b2db      	uxtb	r3, r3
    50b8:	2b00      	cmp	r3, #0
    50ba:	f000 85a5 	beq.w	5c08 <send_boot+0xf6c>
    50be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	461a      	mov	r2, r3
    50ca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    50ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d2:	2105      	movs	r1, #5
    50d4:	5499      	strb	r1, [r3, r2]
    50d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	3301      	adds	r3, #1
    50e2:	b2da      	uxtb	r2, r3
    50e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ec:	701a      	strb	r2, [r3, #0]
    50ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    50f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f6:	781b      	ldrb	r3, [r3, #0]
    50f8:	2bff      	cmp	r3, #255	; 0xff
    50fa:	d105      	bne.n	5108 <send_boot+0x46c>
    50fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5104:	2200      	movs	r2, #0
    5106:	701a      	strb	r2, [r3, #0]
    5108:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	461a      	mov	r2, r3
    5114:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511c:	2105      	movs	r1, #5
    511e:	5499      	strb	r1, [r3, r2]
    5120:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5128:	781b      	ldrb	r3, [r3, #0]
    512a:	3301      	adds	r3, #1
    512c:	b2da      	uxtb	r2, r3
    512e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5136:	701a      	strb	r2, [r3, #0]
    5138:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5140:	781b      	ldrb	r3, [r3, #0]
    5142:	2bff      	cmp	r3, #255	; 0xff
    5144:	d105      	bne.n	5152 <send_boot+0x4b6>
    5146:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    514a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    514e:	2200      	movs	r2, #0
    5150:	701a      	strb	r2, [r3, #0]
    5152:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515a:	2205      	movs	r2, #5
    515c:	701a      	strb	r2, [r3, #0]
    515e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5166:	2205      	movs	r2, #5
    5168:	701a      	strb	r2, [r3, #0]
    516a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    516e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5172:	781b      	ldrb	r3, [r3, #0]
    5174:	461a      	mov	r2, r3
    5176:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    517a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517e:	7819      	ldrb	r1, [r3, #0]
    5180:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5188:	5499      	strb	r1, [r3, r2]
    518a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    518e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5192:	781a      	ldrb	r2, [r3, #0]
    5194:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519c:	781b      	ldrb	r3, [r3, #0]
    519e:	4413      	add	r3, r2
    51a0:	b2da      	uxtb	r2, r3
    51a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    51a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51aa:	701a      	strb	r2, [r3, #0]
    51ac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    51b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b4:	781a      	ldrb	r2, [r3, #0]
    51b6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    51ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51be:	781b      	ldrb	r3, [r3, #0]
    51c0:	4413      	add	r3, r2
    51c2:	b2da      	uxtb	r2, r3
    51c4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    51c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51cc:	701a      	strb	r2, [r3, #0]
    51ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    51d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	3301      	adds	r3, #1
    51da:	b2da      	uxtb	r2, r3
    51dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    51e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e4:	701a      	strb	r2, [r3, #0]
    51e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    51ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	2bff      	cmp	r3, #255	; 0xff
    51f2:	d105      	bne.n	5200 <send_boot+0x564>
    51f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    51f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fc:	2200      	movs	r2, #0
    51fe:	701a      	strb	r2, [r3, #0]
    5200:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5208:	781b      	ldrb	r3, [r3, #0]
    520a:	461a      	mov	r2, r3
    520c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5214:	7859      	ldrb	r1, [r3, #1]
    5216:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521e:	5499      	strb	r1, [r3, r2]
    5220:	4bd1      	ldr	r3, [pc, #836]	; (5568 <send_boot+0x8cc>)
    5222:	781a      	ldrb	r2, [r3, #0]
    5224:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522c:	781b      	ldrb	r3, [r3, #0]
    522e:	4413      	add	r3, r2
    5230:	b2da      	uxtb	r2, r3
    5232:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    523a:	701a      	strb	r2, [r3, #0]
    523c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5244:	781a      	ldrb	r2, [r3, #0]
    5246:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    524a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524e:	781b      	ldrb	r3, [r3, #0]
    5250:	4413      	add	r3, r2
    5252:	b2da      	uxtb	r2, r3
    5254:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525c:	701a      	strb	r2, [r3, #0]
    525e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5266:	781b      	ldrb	r3, [r3, #0]
    5268:	3301      	adds	r3, #1
    526a:	b2da      	uxtb	r2, r3
    526c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5274:	701a      	strb	r2, [r3, #0]
    5276:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    527a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527e:	781b      	ldrb	r3, [r3, #0]
    5280:	2bff      	cmp	r3, #255	; 0xff
    5282:	d105      	bne.n	5290 <send_boot+0x5f4>
    5284:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528c:	2200      	movs	r2, #0
    528e:	701a      	strb	r2, [r3, #0]
    5290:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5298:	781b      	ldrb	r3, [r3, #0]
    529a:	461a      	mov	r2, r3
    529c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    52a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a4:	7899      	ldrb	r1, [r3, #2]
    52a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    52aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ae:	5499      	strb	r1, [r3, r2]
    52b0:	4bae      	ldr	r3, [pc, #696]	; (556c <send_boot+0x8d0>)
    52b2:	781a      	ldrb	r2, [r3, #0]
    52b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    52b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52bc:	781b      	ldrb	r3, [r3, #0]
    52be:	4413      	add	r3, r2
    52c0:	b2da      	uxtb	r2, r3
    52c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    52c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ca:	701a      	strb	r2, [r3, #0]
    52cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    52d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    52da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	4413      	add	r3, r2
    52e2:	b2da      	uxtb	r2, r3
    52e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    52e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ec:	701a      	strb	r2, [r3, #0]
    52ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    52f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f6:	781b      	ldrb	r3, [r3, #0]
    52f8:	3301      	adds	r3, #1
    52fa:	b2da      	uxtb	r2, r3
    52fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5304:	701a      	strb	r2, [r3, #0]
    5306:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    530a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530e:	781b      	ldrb	r3, [r3, #0]
    5310:	2bff      	cmp	r3, #255	; 0xff
    5312:	d105      	bne.n	5320 <send_boot+0x684>
    5314:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    531c:	2200      	movs	r2, #0
    531e:	701a      	strb	r2, [r3, #0]
    5320:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5328:	781b      	ldrb	r3, [r3, #0]
    532a:	461a      	mov	r2, r3
    532c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5334:	78d9      	ldrb	r1, [r3, #3]
    5336:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    533a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    533e:	5499      	strb	r1, [r3, r2]
    5340:	4b8b      	ldr	r3, [pc, #556]	; (5570 <send_boot+0x8d4>)
    5342:	781a      	ldrb	r2, [r3, #0]
    5344:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	4413      	add	r3, r2
    5350:	b2da      	uxtb	r2, r3
    5352:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535a:	701a      	strb	r2, [r3, #0]
    535c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5364:	781a      	ldrb	r2, [r3, #0]
    5366:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    536a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536e:	781b      	ldrb	r3, [r3, #0]
    5370:	4413      	add	r3, r2
    5372:	b2da      	uxtb	r2, r3
    5374:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537c:	701a      	strb	r2, [r3, #0]
    537e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5386:	781b      	ldrb	r3, [r3, #0]
    5388:	3301      	adds	r3, #1
    538a:	b2da      	uxtb	r2, r3
    538c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5394:	701a      	strb	r2, [r3, #0]
    5396:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    539a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539e:	781b      	ldrb	r3, [r3, #0]
    53a0:	2bff      	cmp	r3, #255	; 0xff
    53a2:	d105      	bne.n	53b0 <send_boot+0x714>
    53a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    53a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ac:	2200      	movs	r2, #0
    53ae:	701a      	strb	r2, [r3, #0]
    53b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    53b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b8:	781b      	ldrb	r3, [r3, #0]
    53ba:	461a      	mov	r2, r3
    53bc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    53c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c4:	7819      	ldrb	r1, [r3, #0]
    53c6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    53ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ce:	5499      	strb	r1, [r3, r2]
    53d0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    53d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d8:	781a      	ldrb	r2, [r3, #0]
    53da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    53de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e2:	781b      	ldrb	r3, [r3, #0]
    53e4:	4413      	add	r3, r2
    53e6:	b2da      	uxtb	r2, r3
    53e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    53ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f0:	701a      	strb	r2, [r3, #0]
    53f2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    53f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fa:	781a      	ldrb	r2, [r3, #0]
    53fc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5404:	781b      	ldrb	r3, [r3, #0]
    5406:	4413      	add	r3, r2
    5408:	b2da      	uxtb	r2, r3
    540a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5412:	701a      	strb	r2, [r3, #0]
    5414:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	3301      	adds	r3, #1
    5420:	b2da      	uxtb	r2, r3
    5422:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	701a      	strb	r2, [r3, #0]
    542c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5434:	781b      	ldrb	r3, [r3, #0]
    5436:	2bff      	cmp	r3, #255	; 0xff
    5438:	d105      	bne.n	5446 <send_boot+0x7aa>
    543a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    543e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5442:	2200      	movs	r2, #0
    5444:	701a      	strb	r2, [r3, #0]
    5446:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    544a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544e:	781b      	ldrb	r3, [r3, #0]
    5450:	461a      	mov	r2, r3
    5452:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545a:	7859      	ldrb	r1, [r3, #1]
    545c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5464:	5499      	strb	r1, [r3, r2]
    5466:	4b43      	ldr	r3, [pc, #268]	; (5574 <send_boot+0x8d8>)
    5468:	781a      	ldrb	r2, [r3, #0]
    546a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5472:	781b      	ldrb	r3, [r3, #0]
    5474:	4413      	add	r3, r2
    5476:	b2da      	uxtb	r2, r3
    5478:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    547c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5480:	701a      	strb	r2, [r3, #0]
    5482:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548a:	781a      	ldrb	r2, [r3, #0]
    548c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	4413      	add	r3, r2
    5498:	b2da      	uxtb	r2, r3
    549a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    549e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a2:	701a      	strb	r2, [r3, #0]
    54a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    54a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ac:	781b      	ldrb	r3, [r3, #0]
    54ae:	3301      	adds	r3, #1
    54b0:	b2da      	uxtb	r2, r3
    54b2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    54b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ba:	701a      	strb	r2, [r3, #0]
    54bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    54c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	2bff      	cmp	r3, #255	; 0xff
    54c8:	d105      	bne.n	54d6 <send_boot+0x83a>
    54ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    54ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d2:	2200      	movs	r2, #0
    54d4:	701a      	strb	r2, [r3, #0]
    54d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    54da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54de:	781b      	ldrb	r3, [r3, #0]
    54e0:	461a      	mov	r2, r3
    54e2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    54e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ea:	7899      	ldrb	r1, [r3, #2]
    54ec:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    54f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f4:	5499      	strb	r1, [r3, r2]
    54f6:	4b20      	ldr	r3, [pc, #128]	; (5578 <send_boot+0x8dc>)
    54f8:	781a      	ldrb	r2, [r3, #0]
    54fa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    54fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5502:	781b      	ldrb	r3, [r3, #0]
    5504:	4413      	add	r3, r2
    5506:	b2da      	uxtb	r2, r3
    5508:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5510:	701a      	strb	r2, [r3, #0]
    5512:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551a:	781a      	ldrb	r2, [r3, #0]
    551c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5524:	781b      	ldrb	r3, [r3, #0]
    5526:	4413      	add	r3, r2
    5528:	b2da      	uxtb	r2, r3
    552a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    552e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5532:	701a      	strb	r2, [r3, #0]
    5534:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	781b      	ldrb	r3, [r3, #0]
    553e:	3301      	adds	r3, #1
    5540:	b2da      	uxtb	r2, r3
    5542:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554a:	701a      	strb	r2, [r3, #0]
    554c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5554:	781b      	ldrb	r3, [r3, #0]
    5556:	2bff      	cmp	r3, #255	; 0xff
    5558:	d110      	bne.n	557c <send_boot+0x8e0>
    555a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    555e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5562:	2200      	movs	r2, #0
    5564:	701a      	strb	r2, [r3, #0]
    5566:	e009      	b.n	557c <send_boot+0x8e0>
    5568:	2000aab1 	.word	0x2000aab1
    556c:	2000aab2 	.word	0x2000aab2
    5570:	2000aab3 	.word	0x2000aab3
    5574:	2000aab5 	.word	0x2000aab5
    5578:	2000aab6 	.word	0x2000aab6
    557c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5584:	781b      	ldrb	r3, [r3, #0]
    5586:	461a      	mov	r2, r3
    5588:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5590:	78d9      	ldrb	r1, [r3, #3]
    5592:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    559a:	5499      	strb	r1, [r3, r2]
    559c:	4bd3      	ldr	r3, [pc, #844]	; (58ec <send_boot+0xc50>)
    559e:	781a      	ldrb	r2, [r3, #0]
    55a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    55a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a8:	781b      	ldrb	r3, [r3, #0]
    55aa:	4413      	add	r3, r2
    55ac:	b2da      	uxtb	r2, r3
    55ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    55b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b6:	701a      	strb	r2, [r3, #0]
    55b8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    55bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c0:	781a      	ldrb	r2, [r3, #0]
    55c2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    55c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ca:	781b      	ldrb	r3, [r3, #0]
    55cc:	4413      	add	r3, r2
    55ce:	b2da      	uxtb	r2, r3
    55d0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    55d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d8:	701a      	strb	r2, [r3, #0]
    55da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e2:	781b      	ldrb	r3, [r3, #0]
    55e4:	3301      	adds	r3, #1
    55e6:	b2da      	uxtb	r2, r3
    55e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f0:	701a      	strb	r2, [r3, #0]
    55f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    55f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55fa:	781b      	ldrb	r3, [r3, #0]
    55fc:	2bff      	cmp	r3, #255	; 0xff
    55fe:	d105      	bne.n	560c <send_boot+0x970>
    5600:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5608:	2200      	movs	r2, #0
    560a:	701a      	strb	r2, [r3, #0]
    560c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	781b      	ldrb	r3, [r3, #0]
    5616:	461a      	mov	r2, r3
    5618:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    561c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5620:	7819      	ldrb	r1, [r3, #0]
    5622:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    562a:	5499      	strb	r1, [r3, r2]
    562c:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    5630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5634:	781a      	ldrb	r2, [r3, #0]
    5636:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    563a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563e:	781b      	ldrb	r3, [r3, #0]
    5640:	4413      	add	r3, r2
    5642:	b2da      	uxtb	r2, r3
    5644:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564c:	701a      	strb	r2, [r3, #0]
    564e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5656:	781a      	ldrb	r2, [r3, #0]
    5658:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    565c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5660:	781b      	ldrb	r3, [r3, #0]
    5662:	4413      	add	r3, r2
    5664:	b2da      	uxtb	r2, r3
    5666:	f24a 53be 	movw	r3, #42430	; 0xa5be
    566a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    566e:	701a      	strb	r2, [r3, #0]
    5670:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	3301      	adds	r3, #1
    567c:	b2da      	uxtb	r2, r3
    567e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5686:	701a      	strb	r2, [r3, #0]
    5688:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    568c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5690:	781b      	ldrb	r3, [r3, #0]
    5692:	2bff      	cmp	r3, #255	; 0xff
    5694:	d105      	bne.n	56a2 <send_boot+0xa06>
    5696:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    569a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    569e:	2200      	movs	r2, #0
    56a0:	701a      	strb	r2, [r3, #0]
    56a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    56a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	461a      	mov	r2, r3
    56ae:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    56b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b6:	7859      	ldrb	r1, [r3, #1]
    56b8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    56bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c0:	5499      	strb	r1, [r3, r2]
    56c2:	4b8b      	ldr	r3, [pc, #556]	; (58f0 <send_boot+0xc54>)
    56c4:	781a      	ldrb	r2, [r3, #0]
    56c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    56ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ce:	781b      	ldrb	r3, [r3, #0]
    56d0:	4413      	add	r3, r2
    56d2:	b2da      	uxtb	r2, r3
    56d4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    56d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56dc:	701a      	strb	r2, [r3, #0]
    56de:	f24a 53be 	movw	r3, #42430	; 0xa5be
    56e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e6:	781a      	ldrb	r2, [r3, #0]
    56e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    56ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f0:	781b      	ldrb	r3, [r3, #0]
    56f2:	4413      	add	r3, r2
    56f4:	b2da      	uxtb	r2, r3
    56f6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    56fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56fe:	701a      	strb	r2, [r3, #0]
    5700:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5708:	781b      	ldrb	r3, [r3, #0]
    570a:	3301      	adds	r3, #1
    570c:	b2da      	uxtb	r2, r3
    570e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5716:	701a      	strb	r2, [r3, #0]
    5718:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    571c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5720:	781b      	ldrb	r3, [r3, #0]
    5722:	2bff      	cmp	r3, #255	; 0xff
    5724:	d105      	bne.n	5732 <send_boot+0xa96>
    5726:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    572a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    572e:	2200      	movs	r2, #0
    5730:	701a      	strb	r2, [r3, #0]
    5732:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    573a:	781b      	ldrb	r3, [r3, #0]
    573c:	461a      	mov	r2, r3
    573e:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    5742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5746:	7899      	ldrb	r1, [r3, #2]
    5748:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    574c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5750:	5499      	strb	r1, [r3, r2]
    5752:	4b68      	ldr	r3, [pc, #416]	; (58f4 <send_boot+0xc58>)
    5754:	781a      	ldrb	r2, [r3, #0]
    5756:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    575a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    575e:	781b      	ldrb	r3, [r3, #0]
    5760:	4413      	add	r3, r2
    5762:	b2da      	uxtb	r2, r3
    5764:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    576c:	701a      	strb	r2, [r3, #0]
    576e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5776:	781a      	ldrb	r2, [r3, #0]
    5778:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    577c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	4413      	add	r3, r2
    5784:	b2da      	uxtb	r2, r3
    5786:	f24a 53be 	movw	r3, #42430	; 0xa5be
    578a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    578e:	701a      	strb	r2, [r3, #0]
    5790:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	3301      	adds	r3, #1
    579c:	b2da      	uxtb	r2, r3
    579e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    57a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a6:	701a      	strb	r2, [r3, #0]
    57a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    57ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57b0:	781b      	ldrb	r3, [r3, #0]
    57b2:	2bff      	cmp	r3, #255	; 0xff
    57b4:	d105      	bne.n	57c2 <send_boot+0xb26>
    57b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    57ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57be:	2200      	movs	r2, #0
    57c0:	701a      	strb	r2, [r3, #0]
    57c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    57c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ca:	781b      	ldrb	r3, [r3, #0]
    57cc:	461a      	mov	r2, r3
    57ce:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    57d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d6:	78d9      	ldrb	r1, [r3, #3]
    57d8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    57dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e0:	5499      	strb	r1, [r3, r2]
    57e2:	4b45      	ldr	r3, [pc, #276]	; (58f8 <send_boot+0xc5c>)
    57e4:	781a      	ldrb	r2, [r3, #0]
    57e6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    57ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ee:	781b      	ldrb	r3, [r3, #0]
    57f0:	4413      	add	r3, r2
    57f2:	b2da      	uxtb	r2, r3
    57f4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    57f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57fc:	701a      	strb	r2, [r3, #0]
    57fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5806:	781a      	ldrb	r2, [r3, #0]
    5808:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    580c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5810:	781b      	ldrb	r3, [r3, #0]
    5812:	4413      	add	r3, r2
    5814:	b2da      	uxtb	r2, r3
    5816:	f24a 53be 	movw	r3, #42430	; 0xa5be
    581a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581e:	701a      	strb	r2, [r3, #0]
    5820:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	3301      	adds	r3, #1
    582c:	b2da      	uxtb	r2, r3
    582e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5836:	701a      	strb	r2, [r3, #0]
    5838:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    583c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5840:	781b      	ldrb	r3, [r3, #0]
    5842:	2bff      	cmp	r3, #255	; 0xff
    5844:	d105      	bne.n	5852 <send_boot+0xbb6>
    5846:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    584a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584e:	2200      	movs	r2, #0
    5850:	701a      	strb	r2, [r3, #0]
    5852:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	461a      	mov	r2, r3
    585e:	f240 130a 	movw	r3, #266	; 0x10a
    5862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5866:	7819      	ldrb	r1, [r3, #0]
    5868:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    586c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5870:	5499      	strb	r1, [r3, r2]
    5872:	f240 130a 	movw	r3, #266	; 0x10a
    5876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587a:	781a      	ldrb	r2, [r3, #0]
    587c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	4413      	add	r3, r2
    5888:	b2da      	uxtb	r2, r3
    588a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    588e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5892:	701a      	strb	r2, [r3, #0]
    5894:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589c:	781a      	ldrb	r2, [r3, #0]
    589e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    58a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a6:	781b      	ldrb	r3, [r3, #0]
    58a8:	4413      	add	r3, r2
    58aa:	b2da      	uxtb	r2, r3
    58ac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    58b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b4:	701a      	strb	r2, [r3, #0]
    58b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58be:	781b      	ldrb	r3, [r3, #0]
    58c0:	3301      	adds	r3, #1
    58c2:	b2da      	uxtb	r2, r3
    58c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58cc:	701a      	strb	r2, [r3, #0]
    58ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d6:	781b      	ldrb	r3, [r3, #0]
    58d8:	2bff      	cmp	r3, #255	; 0xff
    58da:	d10f      	bne.n	58fc <send_boot+0xc60>
    58dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    58e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e4:	2200      	movs	r2, #0
    58e6:	701a      	strb	r2, [r3, #0]
    58e8:	e008      	b.n	58fc <send_boot+0xc60>
    58ea:	bf00      	nop
    58ec:	2000aab7 	.word	0x2000aab7
    58f0:	2000aaad 	.word	0x2000aaad
    58f4:	2000aaae 	.word	0x2000aaae
    58f8:	2000aaaf 	.word	0x2000aaaf
    58fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5904:	781b      	ldrb	r3, [r3, #0]
    5906:	461a      	mov	r2, r3
    5908:	f240 130a 	movw	r3, #266	; 0x10a
    590c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5910:	7859      	ldrb	r1, [r3, #1]
    5912:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    591a:	5499      	strb	r1, [r3, r2]
    591c:	4bc5      	ldr	r3, [pc, #788]	; (5c34 <send_boot+0xf98>)
    591e:	781a      	ldrb	r2, [r3, #0]
    5920:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	4413      	add	r3, r2
    592c:	b2da      	uxtb	r2, r3
    592e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5936:	701a      	strb	r2, [r3, #0]
    5938:	f24a 53be 	movw	r3, #42430	; 0xa5be
    593c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5940:	781a      	ldrb	r2, [r3, #0]
    5942:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594a:	781b      	ldrb	r3, [r3, #0]
    594c:	4413      	add	r3, r2
    594e:	b2da      	uxtb	r2, r3
    5950:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5958:	701a      	strb	r2, [r3, #0]
    595a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    595e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5962:	781b      	ldrb	r3, [r3, #0]
    5964:	3301      	adds	r3, #1
    5966:	b2da      	uxtb	r2, r3
    5968:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    596c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5970:	701a      	strb	r2, [r3, #0]
    5972:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597a:	781b      	ldrb	r3, [r3, #0]
    597c:	2bff      	cmp	r3, #255	; 0xff
    597e:	d105      	bne.n	598c <send_boot+0xcf0>
    5980:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5988:	2200      	movs	r2, #0
    598a:	701a      	strb	r2, [r3, #0]
    598c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5994:	781b      	ldrb	r3, [r3, #0]
    5996:	461a      	mov	r2, r3
    5998:	f240 130c 	movw	r3, #268	; 0x10c
    599c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a0:	7819      	ldrb	r1, [r3, #0]
    59a2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    59a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59aa:	5499      	strb	r1, [r3, r2]
    59ac:	f240 130c 	movw	r3, #268	; 0x10c
    59b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b4:	781a      	ldrb	r2, [r3, #0]
    59b6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    59ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59be:	781b      	ldrb	r3, [r3, #0]
    59c0:	4413      	add	r3, r2
    59c2:	b2da      	uxtb	r2, r3
    59c4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    59c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59cc:	701a      	strb	r2, [r3, #0]
    59ce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    59d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d6:	781a      	ldrb	r2, [r3, #0]
    59d8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    59dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e0:	781b      	ldrb	r3, [r3, #0]
    59e2:	4413      	add	r3, r2
    59e4:	b2da      	uxtb	r2, r3
    59e6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    59ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ee:	701a      	strb	r2, [r3, #0]
    59f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    59f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f8:	781b      	ldrb	r3, [r3, #0]
    59fa:	3301      	adds	r3, #1
    59fc:	b2da      	uxtb	r2, r3
    59fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a06:	701a      	strb	r2, [r3, #0]
    5a08:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a10:	781b      	ldrb	r3, [r3, #0]
    5a12:	2bff      	cmp	r3, #255	; 0xff
    5a14:	d105      	bne.n	5a22 <send_boot+0xd86>
    5a16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a1e:	2200      	movs	r2, #0
    5a20:	701a      	strb	r2, [r3, #0]
    5a22:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a2a:	781b      	ldrb	r3, [r3, #0]
    5a2c:	461a      	mov	r2, r3
    5a2e:	f240 130c 	movw	r3, #268	; 0x10c
    5a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a36:	7859      	ldrb	r1, [r3, #1]
    5a38:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a40:	5499      	strb	r1, [r3, r2]
    5a42:	4b7d      	ldr	r3, [pc, #500]	; (5c38 <send_boot+0xf9c>)
    5a44:	781a      	ldrb	r2, [r3, #0]
    5a46:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a4e:	781b      	ldrb	r3, [r3, #0]
    5a50:	4413      	add	r3, r2
    5a52:	b2da      	uxtb	r2, r3
    5a54:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a5c:	701a      	strb	r2, [r3, #0]
    5a5e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a66:	781a      	ldrb	r2, [r3, #0]
    5a68:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	4413      	add	r3, r2
    5a74:	b2da      	uxtb	r2, r3
    5a76:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7e:	701a      	strb	r2, [r3, #0]
    5a80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a88:	781b      	ldrb	r3, [r3, #0]
    5a8a:	3301      	adds	r3, #1
    5a8c:	b2da      	uxtb	r2, r3
    5a8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a96:	701a      	strb	r2, [r3, #0]
    5a98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa0:	781b      	ldrb	r3, [r3, #0]
    5aa2:	2bff      	cmp	r3, #255	; 0xff
    5aa4:	d105      	bne.n	5ab2 <send_boot+0xe16>
    5aa6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aae:	2200      	movs	r2, #0
    5ab0:	701a      	strb	r2, [r3, #0]
    5ab2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aba:	781b      	ldrb	r3, [r3, #0]
    5abc:	461a      	mov	r2, r3
    5abe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac6:	7819      	ldrb	r1, [r3, #0]
    5ac8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad0:	5499      	strb	r1, [r3, r2]
    5ad2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ada:	781b      	ldrb	r3, [r3, #0]
    5adc:	3301      	adds	r3, #1
    5ade:	b2da      	uxtb	r2, r3
    5ae0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae8:	701a      	strb	r2, [r3, #0]
    5aea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	2bff      	cmp	r3, #255	; 0xff
    5af6:	d105      	bne.n	5b04 <send_boot+0xe68>
    5af8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b00:	2200      	movs	r2, #0
    5b02:	701a      	strb	r2, [r3, #0]
    5b04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	461a      	mov	r2, r3
    5b10:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b18:	7819      	ldrb	r1, [r3, #0]
    5b1a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b22:	5499      	strb	r1, [r3, r2]
    5b24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2c:	781b      	ldrb	r3, [r3, #0]
    5b2e:	3301      	adds	r3, #1
    5b30:	b2da      	uxtb	r2, r3
    5b32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b3a:	701a      	strb	r2, [r3, #0]
    5b3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b44:	781b      	ldrb	r3, [r3, #0]
    5b46:	2bff      	cmp	r3, #255	; 0xff
    5b48:	d105      	bne.n	5b56 <send_boot+0xeba>
    5b4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b52:	2200      	movs	r2, #0
    5b54:	701a      	strb	r2, [r3, #0]
    5b56:	f248 0339 	movw	r3, #32825	; 0x8039
    5b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b5e:	781b      	ldrb	r3, [r3, #0]
    5b60:	b2db      	uxtb	r3, r3
    5b62:	f003 0310 	and.w	r3, r3, #16
    5b66:	2b00      	cmp	r3, #0
    5b68:	d15a      	bne.n	5c20 <send_boot+0xf84>
    5b6a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b72:	781b      	ldrb	r3, [r3, #0]
    5b74:	b2db      	uxtb	r3, r3
    5b76:	461a      	mov	r2, r3
    5b78:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b80:	5c9a      	ldrb	r2, [r3, r2]
    5b82:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    5b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8a:	701a      	strb	r2, [r3, #0]
    5b8c:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    5b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b94:	2200      	movs	r2, #0
    5b96:	701a      	strb	r2, [r3, #0]
    5b98:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	b2db      	uxtb	r3, r3
    5ba4:	3301      	adds	r3, #1
    5ba6:	b2da      	uxtb	r2, r3
    5ba8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb0:	701a      	strb	r2, [r3, #0]
    5bb2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	b2db      	uxtb	r3, r3
    5bbe:	2bff      	cmp	r3, #255	; 0xff
    5bc0:	d105      	bne.n	5bce <send_boot+0xf32>
    5bc2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bca:	2200      	movs	r2, #0
    5bcc:	701a      	strb	r2, [r3, #0]
    5bce:	f248 0338 	movw	r3, #32824	; 0x8038
    5bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd6:	f248 0238 	movw	r2, #32824	; 0x8038
    5bda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bde:	7812      	ldrb	r2, [r2, #0]
    5be0:	b2d2      	uxtb	r2, r2
    5be2:	f042 0201 	orr.w	r2, r2, #1
    5be6:	b2d2      	uxtb	r2, r2
    5be8:	701a      	strb	r2, [r3, #0]
    5bea:	f248 0339 	movw	r3, #32825	; 0x8039
    5bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf2:	f248 0239 	movw	r2, #32825	; 0x8039
    5bf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bfa:	7812      	ldrb	r2, [r2, #0]
    5bfc:	b2d2      	uxtb	r2, r2
    5bfe:	f042 0210 	orr.w	r2, r2, #16
    5c02:	b2d2      	uxtb	r2, r2
    5c04:	701a      	strb	r2, [r3, #0]
    5c06:	e00b      	b.n	5c20 <send_boot+0xf84>
    5c08:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c10:	781b      	ldrb	r3, [r3, #0]
    5c12:	3301      	adds	r3, #1
    5c14:	b2da      	uxtb	r2, r3
    5c16:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    5c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    5c20:	f240 1305 	movw	r3, #261	; 0x105
    5c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c28:	2200      	movs	r2, #0
    5c2a:	701a      	strb	r2, [r3, #0]
  }
}
    5c2c:	46bd      	mov	sp, r7
    5c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c32:	4770      	bx	lr
    5c34:	2000010b 	.word	0x2000010b
    5c38:	2000010d 	.word	0x2000010d

00005c3c <send_attitude>:
void send_attitude(void){ //499ms
    5c3c:	b480      	push	{r7}
    5c3e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    5c40:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    5c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	3301      	adds	r3, #1
    5c4c:	b2da      	uxtb	r2, r3
    5c4e:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    5c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c56:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    5c58:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    5c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	2bfa      	cmp	r3, #250	; 0xfa
    5c64:	d105      	bne.n	5c72 <send_attitude+0x36>
    5c66:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    5c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6e:	2200      	movs	r2, #0
    5c70:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    5c72:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    5c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c7a:	781a      	ldrb	r2, [r3, #0]
    5c7c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5c80:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5c84:	fba3 1302 	umull	r1, r3, r3, r2
    5c88:	0899      	lsrs	r1, r3, #2
    5c8a:	460b      	mov	r3, r1
    5c8c:	009b      	lsls	r3, r3, #2
    5c8e:	440b      	add	r3, r1
    5c90:	1ad3      	subs	r3, r2, r3
    5c92:	b2db      	uxtb	r3, r3
    5c94:	2b00      	cmp	r3, #0
    5c96:	f040 84c1 	bne.w	661c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    5c9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca2:	781a      	ldrb	r2, [r3, #0]
    5ca4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	b2db      	uxtb	r3, r3
    5cb0:	429a      	cmp	r2, r3
    5cb2:	d313      	bcc.n	5cdc <send_attitude+0xa0>
    5cb4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cbc:	781b      	ldrb	r3, [r3, #0]
    5cbe:	b2db      	uxtb	r3, r3
    5cc0:	461a      	mov	r2, r3
    5cc2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cca:	781b      	ldrb	r3, [r3, #0]
    5ccc:	1ad3      	subs	r3, r2, r3
    5cce:	33ff      	adds	r3, #255	; 0xff
    5cd0:	2b10      	cmp	r3, #16
    5cd2:	bfd4      	ite	le
    5cd4:	2300      	movle	r3, #0
    5cd6:	2301      	movgt	r3, #1
    5cd8:	b2db      	uxtb	r3, r3
    5cda:	e011      	b.n	5d00 <send_attitude+0xc4>
    5cdc:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    5ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce4:	781b      	ldrb	r3, [r3, #0]
    5ce6:	b2db      	uxtb	r3, r3
    5ce8:	461a      	mov	r2, r3
    5cea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	1ad3      	subs	r3, r2, r3
    5cf6:	2b10      	cmp	r3, #16
    5cf8:	bfd4      	ite	le
    5cfa:	2300      	movle	r3, #0
    5cfc:	2301      	movgt	r3, #1
    5cfe:	b2db      	uxtb	r3, r3
    5d00:	2b00      	cmp	r3, #0
    5d02:	f000 847f 	beq.w	6604 <send_attitude+0x9c8>
    5d06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d0e:	781b      	ldrb	r3, [r3, #0]
    5d10:	461a      	mov	r2, r3
    5d12:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1a:	2105      	movs	r1, #5
    5d1c:	5499      	strb	r1, [r3, r2]
    5d1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	781b      	ldrb	r3, [r3, #0]
    5d28:	3301      	adds	r3, #1
    5d2a:	b2da      	uxtb	r2, r3
    5d2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d34:	701a      	strb	r2, [r3, #0]
    5d36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d3e:	781b      	ldrb	r3, [r3, #0]
    5d40:	2bff      	cmp	r3, #255	; 0xff
    5d42:	d105      	bne.n	5d50 <send_attitude+0x114>
    5d44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d4c:	2200      	movs	r2, #0
    5d4e:	701a      	strb	r2, [r3, #0]
    5d50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d58:	781b      	ldrb	r3, [r3, #0]
    5d5a:	461a      	mov	r2, r3
    5d5c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d64:	2106      	movs	r1, #6
    5d66:	5499      	strb	r1, [r3, r2]
    5d68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d70:	781b      	ldrb	r3, [r3, #0]
    5d72:	3301      	adds	r3, #1
    5d74:	b2da      	uxtb	r2, r3
    5d76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d7e:	701a      	strb	r2, [r3, #0]
    5d80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	2bff      	cmp	r3, #255	; 0xff
    5d8c:	d105      	bne.n	5d9a <send_attitude+0x15e>
    5d8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d96:	2200      	movs	r2, #0
    5d98:	701a      	strb	r2, [r3, #0]
    5d9a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da2:	2206      	movs	r2, #6
    5da4:	701a      	strb	r2, [r3, #0]
    5da6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dae:	2206      	movs	r2, #6
    5db0:	701a      	strb	r2, [r3, #0]
    5db2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dba:	781b      	ldrb	r3, [r3, #0]
    5dbc:	461a      	mov	r2, r3
    5dbe:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc6:	7819      	ldrb	r1, [r3, #0]
    5dc8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd0:	5499      	strb	r1, [r3, r2]
    5dd2:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dda:	781a      	ldrb	r2, [r3, #0]
    5ddc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de4:	781b      	ldrb	r3, [r3, #0]
    5de6:	4413      	add	r3, r2
    5de8:	b2da      	uxtb	r2, r3
    5dea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	701a      	strb	r2, [r3, #0]
    5df4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dfc:	781a      	ldrb	r2, [r3, #0]
    5dfe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e06:	781b      	ldrb	r3, [r3, #0]
    5e08:	4413      	add	r3, r2
    5e0a:	b2da      	uxtb	r2, r3
    5e0c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e14:	701a      	strb	r2, [r3, #0]
    5e16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e1e:	781b      	ldrb	r3, [r3, #0]
    5e20:	3301      	adds	r3, #1
    5e22:	b2da      	uxtb	r2, r3
    5e24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e2c:	701a      	strb	r2, [r3, #0]
    5e2e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	2bff      	cmp	r3, #255	; 0xff
    5e3a:	d105      	bne.n	5e48 <send_attitude+0x20c>
    5e3c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e44:	2200      	movs	r2, #0
    5e46:	701a      	strb	r2, [r3, #0]
    5e48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e50:	781b      	ldrb	r3, [r3, #0]
    5e52:	461a      	mov	r2, r3
    5e54:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e5c:	7859      	ldrb	r1, [r3, #1]
    5e5e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e66:	5499      	strb	r1, [r3, r2]
    5e68:	4bd1      	ldr	r3, [pc, #836]	; (61b0 <send_attitude+0x574>)
    5e6a:	781a      	ldrb	r2, [r3, #0]
    5e6c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	4413      	add	r3, r2
    5e78:	b2da      	uxtb	r2, r3
    5e7a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e82:	701a      	strb	r2, [r3, #0]
    5e84:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8c:	781a      	ldrb	r2, [r3, #0]
    5e8e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e96:	781b      	ldrb	r3, [r3, #0]
    5e98:	4413      	add	r3, r2
    5e9a:	b2da      	uxtb	r2, r3
    5e9c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea4:	701a      	strb	r2, [r3, #0]
    5ea6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eae:	781b      	ldrb	r3, [r3, #0]
    5eb0:	3301      	adds	r3, #1
    5eb2:	b2da      	uxtb	r2, r3
    5eb4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ebc:	701a      	strb	r2, [r3, #0]
    5ebe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec6:	781b      	ldrb	r3, [r3, #0]
    5ec8:	2bff      	cmp	r3, #255	; 0xff
    5eca:	d105      	bne.n	5ed8 <send_attitude+0x29c>
    5ecc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed4:	2200      	movs	r2, #0
    5ed6:	701a      	strb	r2, [r3, #0]
    5ed8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee0:	781b      	ldrb	r3, [r3, #0]
    5ee2:	461a      	mov	r2, r3
    5ee4:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eec:	7899      	ldrb	r1, [r3, #2]
    5eee:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef6:	5499      	strb	r1, [r3, r2]
    5ef8:	4bae      	ldr	r3, [pc, #696]	; (61b4 <send_attitude+0x578>)
    5efa:	781a      	ldrb	r2, [r3, #0]
    5efc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	4413      	add	r3, r2
    5f08:	b2da      	uxtb	r2, r3
    5f0a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f12:	701a      	strb	r2, [r3, #0]
    5f14:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1c:	781a      	ldrb	r2, [r3, #0]
    5f1e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f26:	781b      	ldrb	r3, [r3, #0]
    5f28:	4413      	add	r3, r2
    5f2a:	b2da      	uxtb	r2, r3
    5f2c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f34:	701a      	strb	r2, [r3, #0]
    5f36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3e:	781b      	ldrb	r3, [r3, #0]
    5f40:	3301      	adds	r3, #1
    5f42:	b2da      	uxtb	r2, r3
    5f44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4c:	701a      	strb	r2, [r3, #0]
    5f4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f56:	781b      	ldrb	r3, [r3, #0]
    5f58:	2bff      	cmp	r3, #255	; 0xff
    5f5a:	d105      	bne.n	5f68 <send_attitude+0x32c>
    5f5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f64:	2200      	movs	r2, #0
    5f66:	701a      	strb	r2, [r3, #0]
    5f68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f70:	781b      	ldrb	r3, [r3, #0]
    5f72:	461a      	mov	r2, r3
    5f74:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f7c:	78d9      	ldrb	r1, [r3, #3]
    5f7e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    5f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f86:	5499      	strb	r1, [r3, r2]
    5f88:	4b8b      	ldr	r3, [pc, #556]	; (61b8 <send_attitude+0x57c>)
    5f8a:	781a      	ldrb	r2, [r3, #0]
    5f8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	4413      	add	r3, r2
    5f98:	b2da      	uxtb	r2, r3
    5f9a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa2:	701a      	strb	r2, [r3, #0]
    5fa4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fac:	781a      	ldrb	r2, [r3, #0]
    5fae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    5fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	4413      	add	r3, r2
    5fba:	b2da      	uxtb	r2, r3
    5fbc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    5fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc4:	701a      	strb	r2, [r3, #0]
    5fc6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	3301      	adds	r3, #1
    5fd2:	b2da      	uxtb	r2, r3
    5fd4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fdc:	701a      	strb	r2, [r3, #0]
    5fde:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	2bff      	cmp	r3, #255	; 0xff
    5fea:	d105      	bne.n	5ff8 <send_attitude+0x3bc>
    5fec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff4:	2200      	movs	r2, #0
    5ff6:	701a      	strb	r2, [r3, #0]
    5ff8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    5ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6000:	781b      	ldrb	r3, [r3, #0]
    6002:	461a      	mov	r2, r3
    6004:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    6008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    600c:	7819      	ldrb	r1, [r3, #0]
    600e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6016:	5499      	strb	r1, [r3, r2]
    6018:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6020:	781a      	ldrb	r2, [r3, #0]
    6022:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	4413      	add	r3, r2
    602e:	b2da      	uxtb	r2, r3
    6030:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6038:	701a      	strb	r2, [r3, #0]
    603a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    603e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6042:	781a      	ldrb	r2, [r3, #0]
    6044:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	4413      	add	r3, r2
    6050:	b2da      	uxtb	r2, r3
    6052:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605a:	701a      	strb	r2, [r3, #0]
    605c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	3301      	adds	r3, #1
    6068:	b2da      	uxtb	r2, r3
    606a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    606e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6072:	701a      	strb	r2, [r3, #0]
    6074:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607c:	781b      	ldrb	r3, [r3, #0]
    607e:	2bff      	cmp	r3, #255	; 0xff
    6080:	d105      	bne.n	608e <send_attitude+0x452>
    6082:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608a:	2200      	movs	r2, #0
    608c:	701a      	strb	r2, [r3, #0]
    608e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	461a      	mov	r2, r3
    609a:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    609e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a2:	7859      	ldrb	r1, [r3, #1]
    60a4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    60a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ac:	5499      	strb	r1, [r3, r2]
    60ae:	4b43      	ldr	r3, [pc, #268]	; (61bc <send_attitude+0x580>)
    60b0:	781a      	ldrb	r2, [r3, #0]
    60b2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    60b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	4413      	add	r3, r2
    60be:	b2da      	uxtb	r2, r3
    60c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    60c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c8:	701a      	strb	r2, [r3, #0]
    60ca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    60ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d2:	781a      	ldrb	r2, [r3, #0]
    60d4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    60d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	4413      	add	r3, r2
    60e0:	b2da      	uxtb	r2, r3
    60e2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    60e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ea:	701a      	strb	r2, [r3, #0]
    60ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f4:	781b      	ldrb	r3, [r3, #0]
    60f6:	3301      	adds	r3, #1
    60f8:	b2da      	uxtb	r2, r3
    60fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    60fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6102:	701a      	strb	r2, [r3, #0]
    6104:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	2bff      	cmp	r3, #255	; 0xff
    6110:	d105      	bne.n	611e <send_attitude+0x4e2>
    6112:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611a:	2200      	movs	r2, #0
    611c:	701a      	strb	r2, [r3, #0]
    611e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	461a      	mov	r2, r3
    612a:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    612e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6132:	7899      	ldrb	r1, [r3, #2]
    6134:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    613c:	5499      	strb	r1, [r3, r2]
    613e:	4b20      	ldr	r3, [pc, #128]	; (61c0 <send_attitude+0x584>)
    6140:	781a      	ldrb	r2, [r3, #0]
    6142:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614a:	781b      	ldrb	r3, [r3, #0]
    614c:	4413      	add	r3, r2
    614e:	b2da      	uxtb	r2, r3
    6150:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6158:	701a      	strb	r2, [r3, #0]
    615a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    615e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6162:	781a      	ldrb	r2, [r3, #0]
    6164:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    616c:	781b      	ldrb	r3, [r3, #0]
    616e:	4413      	add	r3, r2
    6170:	b2da      	uxtb	r2, r3
    6172:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617a:	701a      	strb	r2, [r3, #0]
    617c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	3301      	adds	r3, #1
    6188:	b2da      	uxtb	r2, r3
    618a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    618e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6192:	701a      	strb	r2, [r3, #0]
    6194:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	2bff      	cmp	r3, #255	; 0xff
    61a0:	d110      	bne.n	61c4 <send_attitude+0x588>
    61a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    61a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61aa:	2200      	movs	r2, #0
    61ac:	701a      	strb	r2, [r3, #0]
    61ae:	e009      	b.n	61c4 <send_attitude+0x588>
    61b0:	2000aa79 	.word	0x2000aa79
    61b4:	2000aa7a 	.word	0x2000aa7a
    61b8:	2000aa7b 	.word	0x2000aa7b
    61bc:	2000aa7d 	.word	0x2000aa7d
    61c0:	2000aa7e 	.word	0x2000aa7e
    61c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    61c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	461a      	mov	r2, r3
    61d0:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    61d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d8:	78d9      	ldrb	r1, [r3, #3]
    61da:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    61de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e2:	5499      	strb	r1, [r3, r2]
    61e4:	4bc2      	ldr	r3, [pc, #776]	; (64f0 <send_attitude+0x8b4>)
    61e6:	781a      	ldrb	r2, [r3, #0]
    61e8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    61ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	4413      	add	r3, r2
    61f4:	b2da      	uxtb	r2, r3
    61f6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    61fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fe:	701a      	strb	r2, [r3, #0]
    6200:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6208:	781a      	ldrb	r2, [r3, #0]
    620a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    620e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6212:	781b      	ldrb	r3, [r3, #0]
    6214:	4413      	add	r3, r2
    6216:	b2da      	uxtb	r2, r3
    6218:	f24a 53be 	movw	r3, #42430	; 0xa5be
    621c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6220:	701a      	strb	r2, [r3, #0]
    6222:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	3301      	adds	r3, #1
    622e:	b2da      	uxtb	r2, r3
    6230:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6238:	701a      	strb	r2, [r3, #0]
    623a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    623e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6242:	781b      	ldrb	r3, [r3, #0]
    6244:	2bff      	cmp	r3, #255	; 0xff
    6246:	d105      	bne.n	6254 <send_attitude+0x618>
    6248:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    624c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6250:	2200      	movs	r2, #0
    6252:	701a      	strb	r2, [r3, #0]
    6254:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	461a      	mov	r2, r3
    6260:	f64a 2380 	movw	r3, #43648	; 0xaa80
    6264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6268:	7819      	ldrb	r1, [r3, #0]
    626a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    626e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6272:	5499      	strb	r1, [r3, r2]
    6274:	f64a 2380 	movw	r3, #43648	; 0xaa80
    6278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627c:	781a      	ldrb	r2, [r3, #0]
    627e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6286:	781b      	ldrb	r3, [r3, #0]
    6288:	4413      	add	r3, r2
    628a:	b2da      	uxtb	r2, r3
    628c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6294:	701a      	strb	r2, [r3, #0]
    6296:	f24a 53be 	movw	r3, #42430	; 0xa5be
    629a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    629e:	781a      	ldrb	r2, [r3, #0]
    62a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    62a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a8:	781b      	ldrb	r3, [r3, #0]
    62aa:	4413      	add	r3, r2
    62ac:	b2da      	uxtb	r2, r3
    62ae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    62b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62b6:	701a      	strb	r2, [r3, #0]
    62b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c0:	781b      	ldrb	r3, [r3, #0]
    62c2:	3301      	adds	r3, #1
    62c4:	b2da      	uxtb	r2, r3
    62c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ce:	701a      	strb	r2, [r3, #0]
    62d0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d8:	781b      	ldrb	r3, [r3, #0]
    62da:	2bff      	cmp	r3, #255	; 0xff
    62dc:	d105      	bne.n	62ea <send_attitude+0x6ae>
    62de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e6:	2200      	movs	r2, #0
    62e8:	701a      	strb	r2, [r3, #0]
    62ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    62ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f2:	781b      	ldrb	r3, [r3, #0]
    62f4:	461a      	mov	r2, r3
    62f6:	f64a 2380 	movw	r3, #43648	; 0xaa80
    62fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fe:	7859      	ldrb	r1, [r3, #1]
    6300:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6308:	5499      	strb	r1, [r3, r2]
    630a:	4b7a      	ldr	r3, [pc, #488]	; (64f4 <send_attitude+0x8b8>)
    630c:	781a      	ldrb	r2, [r3, #0]
    630e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6316:	781b      	ldrb	r3, [r3, #0]
    6318:	4413      	add	r3, r2
    631a:	b2da      	uxtb	r2, r3
    631c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6324:	701a      	strb	r2, [r3, #0]
    6326:	f24a 53be 	movw	r3, #42430	; 0xa5be
    632a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    632e:	781a      	ldrb	r2, [r3, #0]
    6330:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6338:	781b      	ldrb	r3, [r3, #0]
    633a:	4413      	add	r3, r2
    633c:	b2da      	uxtb	r2, r3
    633e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6346:	701a      	strb	r2, [r3, #0]
    6348:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    634c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6350:	781b      	ldrb	r3, [r3, #0]
    6352:	3301      	adds	r3, #1
    6354:	b2da      	uxtb	r2, r3
    6356:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    635a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635e:	701a      	strb	r2, [r3, #0]
    6360:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	2bff      	cmp	r3, #255	; 0xff
    636c:	d105      	bne.n	637a <send_attitude+0x73e>
    636e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6376:	2200      	movs	r2, #0
    6378:	701a      	strb	r2, [r3, #0]
    637a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    637e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	461a      	mov	r2, r3
    6386:	f64a 2380 	movw	r3, #43648	; 0xaa80
    638a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    638e:	7899      	ldrb	r1, [r3, #2]
    6390:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6398:	5499      	strb	r1, [r3, r2]
    639a:	4b57      	ldr	r3, [pc, #348]	; (64f8 <send_attitude+0x8bc>)
    639c:	781a      	ldrb	r2, [r3, #0]
    639e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    63a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a6:	781b      	ldrb	r3, [r3, #0]
    63a8:	4413      	add	r3, r2
    63aa:	b2da      	uxtb	r2, r3
    63ac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    63b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b4:	701a      	strb	r2, [r3, #0]
    63b6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    63ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63be:	781a      	ldrb	r2, [r3, #0]
    63c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    63c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	4413      	add	r3, r2
    63cc:	b2da      	uxtb	r2, r3
    63ce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    63d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d6:	701a      	strb	r2, [r3, #0]
    63d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e0:	781b      	ldrb	r3, [r3, #0]
    63e2:	3301      	adds	r3, #1
    63e4:	b2da      	uxtb	r2, r3
    63e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ee:	701a      	strb	r2, [r3, #0]
    63f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    63f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f8:	781b      	ldrb	r3, [r3, #0]
    63fa:	2bff      	cmp	r3, #255	; 0xff
    63fc:	d105      	bne.n	640a <send_attitude+0x7ce>
    63fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6406:	2200      	movs	r2, #0
    6408:	701a      	strb	r2, [r3, #0]
    640a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    640e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	461a      	mov	r2, r3
    6416:	f64a 2380 	movw	r3, #43648	; 0xaa80
    641a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641e:	78d9      	ldrb	r1, [r3, #3]
    6420:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6428:	5499      	strb	r1, [r3, r2]
    642a:	4b34      	ldr	r3, [pc, #208]	; (64fc <send_attitude+0x8c0>)
    642c:	781a      	ldrb	r2, [r3, #0]
    642e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	4413      	add	r3, r2
    643a:	b2da      	uxtb	r2, r3
    643c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6444:	701a      	strb	r2, [r3, #0]
    6446:	f24a 53be 	movw	r3, #42430	; 0xa5be
    644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644e:	781a      	ldrb	r2, [r3, #0]
    6450:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6458:	781b      	ldrb	r3, [r3, #0]
    645a:	4413      	add	r3, r2
    645c:	b2da      	uxtb	r2, r3
    645e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6466:	701a      	strb	r2, [r3, #0]
    6468:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    646c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6470:	781b      	ldrb	r3, [r3, #0]
    6472:	3301      	adds	r3, #1
    6474:	b2da      	uxtb	r2, r3
    6476:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    647a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647e:	701a      	strb	r2, [r3, #0]
    6480:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	2bff      	cmp	r3, #255	; 0xff
    648c:	d105      	bne.n	649a <send_attitude+0x85e>
    648e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6496:	2200      	movs	r2, #0
    6498:	701a      	strb	r2, [r3, #0]
    649a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    649e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a2:	781b      	ldrb	r3, [r3, #0]
    64a4:	461a      	mov	r2, r3
    64a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    64aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ae:	7819      	ldrb	r1, [r3, #0]
    64b0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    64b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64b8:	5499      	strb	r1, [r3, r2]
    64ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    64be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c2:	781b      	ldrb	r3, [r3, #0]
    64c4:	3301      	adds	r3, #1
    64c6:	b2da      	uxtb	r2, r3
    64c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    64cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d0:	701a      	strb	r2, [r3, #0]
    64d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    64d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	2bff      	cmp	r3, #255	; 0xff
    64de:	d10f      	bne.n	6500 <send_attitude+0x8c4>
    64e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    64e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e8:	2200      	movs	r2, #0
    64ea:	701a      	strb	r2, [r3, #0]
    64ec:	e008      	b.n	6500 <send_attitude+0x8c4>
    64ee:	bf00      	nop
    64f0:	2000aa7f 	.word	0x2000aa7f
    64f4:	2000aa81 	.word	0x2000aa81
    64f8:	2000aa82 	.word	0x2000aa82
    64fc:	2000aa83 	.word	0x2000aa83
    6500:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	461a      	mov	r2, r3
    650c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6514:	7819      	ldrb	r1, [r3, #0]
    6516:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    651a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651e:	5499      	strb	r1, [r3, r2]
    6520:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	3301      	adds	r3, #1
    652c:	b2da      	uxtb	r2, r3
    652e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6536:	701a      	strb	r2, [r3, #0]
    6538:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    653c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	2bff      	cmp	r3, #255	; 0xff
    6544:	d105      	bne.n	6552 <send_attitude+0x916>
    6546:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    654a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654e:	2200      	movs	r2, #0
    6550:	701a      	strb	r2, [r3, #0]
    6552:	f248 0339 	movw	r3, #32825	; 0x8039
    6556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	b2db      	uxtb	r3, r3
    655e:	f003 0310 	and.w	r3, r3, #16
    6562:	2b00      	cmp	r3, #0
    6564:	d15a      	bne.n	661c <send_attitude+0x9e0>
    6566:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    656a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656e:	781b      	ldrb	r3, [r3, #0]
    6570:	b2db      	uxtb	r3, r3
    6572:	461a      	mov	r2, r3
    6574:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657c:	5c9a      	ldrb	r2, [r3, r2]
    657e:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    6582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6586:	701a      	strb	r2, [r3, #0]
    6588:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    658c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6590:	2200      	movs	r2, #0
    6592:	701a      	strb	r2, [r3, #0]
    6594:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	b2db      	uxtb	r3, r3
    65a0:	3301      	adds	r3, #1
    65a2:	b2da      	uxtb	r2, r3
    65a4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    65a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ac:	701a      	strb	r2, [r3, #0]
    65ae:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    65b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	b2db      	uxtb	r3, r3
    65ba:	2bff      	cmp	r3, #255	; 0xff
    65bc:	d105      	bne.n	65ca <send_attitude+0x98e>
    65be:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    65c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c6:	2200      	movs	r2, #0
    65c8:	701a      	strb	r2, [r3, #0]
    65ca:	f248 0338 	movw	r3, #32824	; 0x8038
    65ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d2:	f248 0238 	movw	r2, #32824	; 0x8038
    65d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65da:	7812      	ldrb	r2, [r2, #0]
    65dc:	b2d2      	uxtb	r2, r2
    65de:	f042 0201 	orr.w	r2, r2, #1
    65e2:	b2d2      	uxtb	r2, r2
    65e4:	701a      	strb	r2, [r3, #0]
    65e6:	f248 0339 	movw	r3, #32825	; 0x8039
    65ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ee:	f248 0239 	movw	r2, #32825	; 0x8039
    65f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65f6:	7812      	ldrb	r2, [r2, #0]
    65f8:	b2d2      	uxtb	r2, r2
    65fa:	f042 0210 	orr.w	r2, r2, #16
    65fe:	b2d2      	uxtb	r2, r2
    6600:	701a      	strb	r2, [r3, #0]
    6602:	e00b      	b.n	661c <send_attitude+0x9e0>
    6604:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660c:	781b      	ldrb	r3, [r3, #0]
    660e:	3301      	adds	r3, #1
    6610:	b2da      	uxtb	r2, r3
    6612:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661a:	701a      	strb	r2, [r3, #0]
  }
}
    661c:	46bd      	mov	sp, r7
    661e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6622:	4770      	bx	lr

00006624 <send_adc>:
  
void send_adc(void){  //500ms
    6624:	b480      	push	{r7}
    6626:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    6628:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6630:	781a      	ldrb	r2, [r3, #0]
    6632:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6636:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    663a:	fba3 1302 	umull	r1, r3, r3, r2
    663e:	0899      	lsrs	r1, r3, #2
    6640:	460b      	mov	r3, r1
    6642:	009b      	lsls	r3, r3, #2
    6644:	440b      	add	r3, r1
    6646:	1ad3      	subs	r3, r2, r3
    6648:	b2db      	uxtb	r3, r3
    664a:	2b01      	cmp	r3, #1
    664c:	f040 8269 	bne.w	6b22 <send_adc+0x4fe>
    6650:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6658:	781a      	ldrb	r2, [r3, #0]
    665a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    665e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	b2db      	uxtb	r3, r3
    6666:	429a      	cmp	r2, r3
    6668:	d313      	bcc.n	6692 <send_adc+0x6e>
    666a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    666e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	b2db      	uxtb	r3, r3
    6676:	461a      	mov	r2, r3
    6678:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    667c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	1ad3      	subs	r3, r2, r3
    6684:	33ff      	adds	r3, #255	; 0xff
    6686:	2b08      	cmp	r3, #8
    6688:	bfd4      	ite	le
    668a:	2300      	movle	r3, #0
    668c:	2301      	movgt	r3, #1
    668e:	b2db      	uxtb	r3, r3
    6690:	e011      	b.n	66b6 <send_adc+0x92>
    6692:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	b2db      	uxtb	r3, r3
    669e:	461a      	mov	r2, r3
    66a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	1ad3      	subs	r3, r2, r3
    66ac:	2b08      	cmp	r3, #8
    66ae:	bfd4      	ite	le
    66b0:	2300      	movle	r3, #0
    66b2:	2301      	movgt	r3, #1
    66b4:	b2db      	uxtb	r3, r3
    66b6:	2b00      	cmp	r3, #0
    66b8:	f000 8227 	beq.w	6b0a <send_adc+0x4e6>
    66bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c4:	781b      	ldrb	r3, [r3, #0]
    66c6:	461a      	mov	r2, r3
    66c8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    66cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d0:	2105      	movs	r1, #5
    66d2:	5499      	strb	r1, [r3, r2]
    66d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66dc:	781b      	ldrb	r3, [r3, #0]
    66de:	3301      	adds	r3, #1
    66e0:	b2da      	uxtb	r2, r3
    66e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ea:	701a      	strb	r2, [r3, #0]
    66ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	2bff      	cmp	r3, #255	; 0xff
    66f8:	d105      	bne.n	6706 <send_adc+0xe2>
    66fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    66fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6702:	2200      	movs	r2, #0
    6704:	701a      	strb	r2, [r3, #0]
    6706:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    670a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	461a      	mov	r2, r3
    6712:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671a:	2107      	movs	r1, #7
    671c:	5499      	strb	r1, [r3, r2]
    671e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	3301      	adds	r3, #1
    672a:	b2da      	uxtb	r2, r3
    672c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6734:	701a      	strb	r2, [r3, #0]
    6736:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    673a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    673e:	781b      	ldrb	r3, [r3, #0]
    6740:	2bff      	cmp	r3, #255	; 0xff
    6742:	d105      	bne.n	6750 <send_adc+0x12c>
    6744:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674c:	2200      	movs	r2, #0
    674e:	701a      	strb	r2, [r3, #0]
    6750:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6758:	2207      	movs	r2, #7
    675a:	701a      	strb	r2, [r3, #0]
    675c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6764:	2207      	movs	r2, #7
    6766:	701a      	strb	r2, [r3, #0]
    6768:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    676c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6770:	781b      	ldrb	r3, [r3, #0]
    6772:	461a      	mov	r2, r3
    6774:	f24a 7358 	movw	r3, #42840	; 0xa758
    6778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677c:	7819      	ldrb	r1, [r3, #0]
    677e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6786:	5499      	strb	r1, [r3, r2]
    6788:	f24a 7358 	movw	r3, #42840	; 0xa758
    678c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6790:	781a      	ldrb	r2, [r3, #0]
    6792:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    679a:	781b      	ldrb	r3, [r3, #0]
    679c:	4413      	add	r3, r2
    679e:	b2da      	uxtb	r2, r3
    67a0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    67a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a8:	701a      	strb	r2, [r3, #0]
    67aa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    67ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b2:	781a      	ldrb	r2, [r3, #0]
    67b4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    67b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	4413      	add	r3, r2
    67c0:	b2da      	uxtb	r2, r3
    67c2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    67c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ca:	701a      	strb	r2, [r3, #0]
    67cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	3301      	adds	r3, #1
    67d8:	b2da      	uxtb	r2, r3
    67da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e2:	701a      	strb	r2, [r3, #0]
    67e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ec:	781b      	ldrb	r3, [r3, #0]
    67ee:	2bff      	cmp	r3, #255	; 0xff
    67f0:	d105      	bne.n	67fe <send_adc+0x1da>
    67f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    67f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fa:	2200      	movs	r2, #0
    67fc:	701a      	strb	r2, [r3, #0]
    67fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6806:	781b      	ldrb	r3, [r3, #0]
    6808:	461a      	mov	r2, r3
    680a:	f24a 7358 	movw	r3, #42840	; 0xa758
    680e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6812:	7859      	ldrb	r1, [r3, #1]
    6814:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    681c:	5499      	strb	r1, [r3, r2]
    681e:	4bc3      	ldr	r3, [pc, #780]	; (6b2c <send_adc+0x508>)
    6820:	781a      	ldrb	r2, [r3, #0]
    6822:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	4413      	add	r3, r2
    682e:	b2da      	uxtb	r2, r3
    6830:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6838:	701a      	strb	r2, [r3, #0]
    683a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    683e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6842:	781a      	ldrb	r2, [r3, #0]
    6844:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	4413      	add	r3, r2
    6850:	b2da      	uxtb	r2, r3
    6852:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    685a:	701a      	strb	r2, [r3, #0]
    685c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6864:	781b      	ldrb	r3, [r3, #0]
    6866:	3301      	adds	r3, #1
    6868:	b2da      	uxtb	r2, r3
    686a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    686e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6872:	701a      	strb	r2, [r3, #0]
    6874:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	2bff      	cmp	r3, #255	; 0xff
    6880:	d105      	bne.n	688e <send_adc+0x26a>
    6882:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688a:	2200      	movs	r2, #0
    688c:	701a      	strb	r2, [r3, #0]
    688e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	461a      	mov	r2, r3
    689a:	f24a 735a 	movw	r3, #42842	; 0xa75a
    689e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a2:	7819      	ldrb	r1, [r3, #0]
    68a4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    68a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ac:	5499      	strb	r1, [r3, r2]
    68ae:	f24a 735a 	movw	r3, #42842	; 0xa75a
    68b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b6:	781a      	ldrb	r2, [r3, #0]
    68b8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    68bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	4413      	add	r3, r2
    68c4:	b2da      	uxtb	r2, r3
    68c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    68ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ce:	701a      	strb	r2, [r3, #0]
    68d0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    68d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d8:	781a      	ldrb	r2, [r3, #0]
    68da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    68de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e2:	781b      	ldrb	r3, [r3, #0]
    68e4:	4413      	add	r3, r2
    68e6:	b2da      	uxtb	r2, r3
    68e8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    68ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f0:	701a      	strb	r2, [r3, #0]
    68f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    68f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fa:	781b      	ldrb	r3, [r3, #0]
    68fc:	3301      	adds	r3, #1
    68fe:	b2da      	uxtb	r2, r3
    6900:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6908:	701a      	strb	r2, [r3, #0]
    690a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    690e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	2bff      	cmp	r3, #255	; 0xff
    6916:	d105      	bne.n	6924 <send_adc+0x300>
    6918:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    691c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6920:	2200      	movs	r2, #0
    6922:	701a      	strb	r2, [r3, #0]
    6924:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    692c:	781b      	ldrb	r3, [r3, #0]
    692e:	461a      	mov	r2, r3
    6930:	f24a 735a 	movw	r3, #42842	; 0xa75a
    6934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6938:	7859      	ldrb	r1, [r3, #1]
    693a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    693e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6942:	5499      	strb	r1, [r3, r2]
    6944:	4b7a      	ldr	r3, [pc, #488]	; (6b30 <send_adc+0x50c>)
    6946:	781a      	ldrb	r2, [r3, #0]
    6948:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    694c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6950:	781b      	ldrb	r3, [r3, #0]
    6952:	4413      	add	r3, r2
    6954:	b2da      	uxtb	r2, r3
    6956:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    695a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695e:	701a      	strb	r2, [r3, #0]
    6960:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6968:	781a      	ldrb	r2, [r3, #0]
    696a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    696e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6972:	781b      	ldrb	r3, [r3, #0]
    6974:	4413      	add	r3, r2
    6976:	b2da      	uxtb	r2, r3
    6978:	f24a 53be 	movw	r3, #42430	; 0xa5be
    697c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6980:	701a      	strb	r2, [r3, #0]
    6982:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    698a:	781b      	ldrb	r3, [r3, #0]
    698c:	3301      	adds	r3, #1
    698e:	b2da      	uxtb	r2, r3
    6990:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6998:	701a      	strb	r2, [r3, #0]
    699a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    699e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a2:	781b      	ldrb	r3, [r3, #0]
    69a4:	2bff      	cmp	r3, #255	; 0xff
    69a6:	d105      	bne.n	69b4 <send_adc+0x390>
    69a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b0:	2200      	movs	r2, #0
    69b2:	701a      	strb	r2, [r3, #0]
    69b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69bc:	781b      	ldrb	r3, [r3, #0]
    69be:	461a      	mov	r2, r3
    69c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    69c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c8:	7819      	ldrb	r1, [r3, #0]
    69ca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    69ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d2:	5499      	strb	r1, [r3, r2]
    69d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	3301      	adds	r3, #1
    69e0:	b2da      	uxtb	r2, r3
    69e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ea:	701a      	strb	r2, [r3, #0]
    69ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f4:	781b      	ldrb	r3, [r3, #0]
    69f6:	2bff      	cmp	r3, #255	; 0xff
    69f8:	d105      	bne.n	6a06 <send_adc+0x3e2>
    69fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    69fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a02:	2200      	movs	r2, #0
    6a04:	701a      	strb	r2, [r3, #0]
    6a06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a0e:	781b      	ldrb	r3, [r3, #0]
    6a10:	461a      	mov	r2, r3
    6a12:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a1a:	7819      	ldrb	r1, [r3, #0]
    6a1c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a24:	5499      	strb	r1, [r3, r2]
    6a26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2e:	781b      	ldrb	r3, [r3, #0]
    6a30:	3301      	adds	r3, #1
    6a32:	b2da      	uxtb	r2, r3
    6a34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a3c:	701a      	strb	r2, [r3, #0]
    6a3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	2bff      	cmp	r3, #255	; 0xff
    6a4a:	d105      	bne.n	6a58 <send_adc+0x434>
    6a4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a54:	2200      	movs	r2, #0
    6a56:	701a      	strb	r2, [r3, #0]
    6a58:	f248 0339 	movw	r3, #32825	; 0x8039
    6a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a60:	781b      	ldrb	r3, [r3, #0]
    6a62:	b2db      	uxtb	r3, r3
    6a64:	f003 0310 	and.w	r3, r3, #16
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d15a      	bne.n	6b22 <send_adc+0x4fe>
    6a6c:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	b2db      	uxtb	r3, r3
    6a78:	461a      	mov	r2, r3
    6a7a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a82:	5c9a      	ldrb	r2, [r3, r2]
    6a84:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    6a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8c:	701a      	strb	r2, [r3, #0]
    6a8e:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    6a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a96:	2200      	movs	r2, #0
    6a98:	701a      	strb	r2, [r3, #0]
    6a9a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa2:	781b      	ldrb	r3, [r3, #0]
    6aa4:	b2db      	uxtb	r3, r3
    6aa6:	3301      	adds	r3, #1
    6aa8:	b2da      	uxtb	r2, r3
    6aaa:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab2:	701a      	strb	r2, [r3, #0]
    6ab4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	b2db      	uxtb	r3, r3
    6ac0:	2bff      	cmp	r3, #255	; 0xff
    6ac2:	d105      	bne.n	6ad0 <send_adc+0x4ac>
    6ac4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	2200      	movs	r2, #0
    6ace:	701a      	strb	r2, [r3, #0]
    6ad0:	f248 0338 	movw	r3, #32824	; 0x8038
    6ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad8:	f248 0238 	movw	r2, #32824	; 0x8038
    6adc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ae0:	7812      	ldrb	r2, [r2, #0]
    6ae2:	b2d2      	uxtb	r2, r2
    6ae4:	f042 0201 	orr.w	r2, r2, #1
    6ae8:	b2d2      	uxtb	r2, r2
    6aea:	701a      	strb	r2, [r3, #0]
    6aec:	f248 0339 	movw	r3, #32825	; 0x8039
    6af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af4:	f248 0239 	movw	r2, #32825	; 0x8039
    6af8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6afc:	7812      	ldrb	r2, [r2, #0]
    6afe:	b2d2      	uxtb	r2, r2
    6b00:	f042 0210 	orr.w	r2, r2, #16
    6b04:	b2d2      	uxtb	r2, r2
    6b06:	701a      	strb	r2, [r3, #0]
    6b08:	e00b      	b.n	6b22 <send_adc+0x4fe>
    6b0a:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	3301      	adds	r3, #1
    6b16:	b2da      	uxtb	r2, r3
    6b18:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    6b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b20:	701a      	strb	r2, [r3, #0]
}
    6b22:	46bd      	mov	sp, r7
    6b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b28:	4770      	bx	lr
    6b2a:	bf00      	nop
    6b2c:	2000a759 	.word	0x2000a759
    6b30:	2000a75b 	.word	0x2000a75b

00006b34 <send_settings>:
void send_settings(void){ //500ms
    6b34:	b480      	push	{r7}
    6b36:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    6b38:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    6b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b40:	781a      	ldrb	r2, [r3, #0]
    6b42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6b46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6b4a:	fba3 1302 	umull	r1, r3, r3, r2
    6b4e:	0899      	lsrs	r1, r3, #2
    6b50:	460b      	mov	r3, r1
    6b52:	009b      	lsls	r3, r3, #2
    6b54:	440b      	add	r3, r1
    6b56:	1ad3      	subs	r3, r2, r3
    6b58:	b2db      	uxtb	r3, r3
    6b5a:	2b02      	cmp	r3, #2
    6b5c:	f040 83e7 	bne.w	732e <send_settings+0x7fa>
    6b60:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    6b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b68:	781b      	ldrb	r3, [r3, #0]
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	f000 83df 	beq.w	732e <send_settings+0x7fa>
    6b70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b78:	781a      	ldrb	r2, [r3, #0]
    6b7a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	b2db      	uxtb	r3, r3
    6b86:	429a      	cmp	r2, r3
    6b88:	d313      	bcc.n	6bb2 <send_settings+0x7e>
    6b8a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	b2db      	uxtb	r3, r3
    6b96:	461a      	mov	r2, r3
    6b98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba0:	781b      	ldrb	r3, [r3, #0]
    6ba2:	1ad3      	subs	r3, r2, r3
    6ba4:	33ff      	adds	r3, #255	; 0xff
    6ba6:	2b0d      	cmp	r3, #13
    6ba8:	bfd4      	ite	le
    6baa:	2300      	movle	r3, #0
    6bac:	2301      	movgt	r3, #1
    6bae:	b2db      	uxtb	r3, r3
    6bb0:	e011      	b.n	6bd6 <send_settings+0xa2>
    6bb2:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    6bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bba:	781b      	ldrb	r3, [r3, #0]
    6bbc:	b2db      	uxtb	r3, r3
    6bbe:	461a      	mov	r2, r3
    6bc0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	1ad3      	subs	r3, r2, r3
    6bcc:	2b0d      	cmp	r3, #13
    6bce:	bfd4      	ite	le
    6bd0:	2300      	movle	r3, #0
    6bd2:	2301      	movgt	r3, #1
    6bd4:	b2db      	uxtb	r3, r3
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	f000 839d 	beq.w	7316 <send_settings+0x7e2>
    6bdc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be4:	781b      	ldrb	r3, [r3, #0]
    6be6:	461a      	mov	r2, r3
    6be8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf0:	2105      	movs	r1, #5
    6bf2:	5499      	strb	r1, [r3, r2]
    6bf4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	3301      	adds	r3, #1
    6c00:	b2da      	uxtb	r2, r3
    6c02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	2bff      	cmp	r3, #255	; 0xff
    6c18:	d105      	bne.n	6c26 <send_settings+0xf2>
    6c1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c22:	2200      	movs	r2, #0
    6c24:	701a      	strb	r2, [r3, #0]
    6c26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2e:	781b      	ldrb	r3, [r3, #0]
    6c30:	461a      	mov	r2, r3
    6c32:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c3a:	2111      	movs	r1, #17
    6c3c:	5499      	strb	r1, [r3, r2]
    6c3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c46:	781b      	ldrb	r3, [r3, #0]
    6c48:	3301      	adds	r3, #1
    6c4a:	b2da      	uxtb	r2, r3
    6c4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c54:	701a      	strb	r2, [r3, #0]
    6c56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5e:	781b      	ldrb	r3, [r3, #0]
    6c60:	2bff      	cmp	r3, #255	; 0xff
    6c62:	d105      	bne.n	6c70 <send_settings+0x13c>
    6c64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c6c:	2200      	movs	r2, #0
    6c6e:	701a      	strb	r2, [r3, #0]
    6c70:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c78:	2211      	movs	r2, #17
    6c7a:	701a      	strb	r2, [r3, #0]
    6c7c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c84:	2211      	movs	r2, #17
    6c86:	701a      	strb	r2, [r3, #0]
    6c88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	461a      	mov	r2, r3
    6c94:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    6c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9c:	7819      	ldrb	r1, [r3, #0]
    6c9e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca6:	5499      	strb	r1, [r3, r2]
    6ca8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb0:	781a      	ldrb	r2, [r3, #0]
    6cb2:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    6cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	4413      	add	r3, r2
    6cbe:	b2da      	uxtb	r2, r3
    6cc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc8:	701a      	strb	r2, [r3, #0]
    6cca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd2:	781a      	ldrb	r2, [r3, #0]
    6cd4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cdc:	781b      	ldrb	r3, [r3, #0]
    6cde:	4413      	add	r3, r2
    6ce0:	b2da      	uxtb	r2, r3
    6ce2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cea:	701a      	strb	r2, [r3, #0]
    6cec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf4:	781b      	ldrb	r3, [r3, #0]
    6cf6:	3301      	adds	r3, #1
    6cf8:	b2da      	uxtb	r2, r3
    6cfa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d02:	701a      	strb	r2, [r3, #0]
    6d04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0c:	781b      	ldrb	r3, [r3, #0]
    6d0e:	2bff      	cmp	r3, #255	; 0xff
    6d10:	d105      	bne.n	6d1e <send_settings+0x1ea>
    6d12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d1a:	2200      	movs	r2, #0
    6d1c:	701a      	strb	r2, [r3, #0]
    6d1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d26:	781b      	ldrb	r3, [r3, #0]
    6d28:	461a      	mov	r2, r3
    6d2a:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    6d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d32:	7819      	ldrb	r1, [r3, #0]
    6d34:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3c:	5499      	strb	r1, [r3, r2]
    6d3e:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    6d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d46:	781a      	ldrb	r2, [r3, #0]
    6d48:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d50:	781b      	ldrb	r3, [r3, #0]
    6d52:	4413      	add	r3, r2
    6d54:	b2da      	uxtb	r2, r3
    6d56:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5e:	701a      	strb	r2, [r3, #0]
    6d60:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d68:	781a      	ldrb	r2, [r3, #0]
    6d6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	4413      	add	r3, r2
    6d76:	b2da      	uxtb	r2, r3
    6d78:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	701a      	strb	r2, [r3, #0]
    6d82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	3301      	adds	r3, #1
    6d8e:	b2da      	uxtb	r2, r3
    6d90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d98:	701a      	strb	r2, [r3, #0]
    6d9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da2:	781b      	ldrb	r3, [r3, #0]
    6da4:	2bff      	cmp	r3, #255	; 0xff
    6da6:	d105      	bne.n	6db4 <send_settings+0x280>
    6da8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db0:	2200      	movs	r2, #0
    6db2:	701a      	strb	r2, [r3, #0]
    6db4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	461a      	mov	r2, r3
    6dc0:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    6dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc8:	7859      	ldrb	r1, [r3, #1]
    6dca:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd2:	5499      	strb	r1, [r3, r2]
    6dd4:	4bd1      	ldr	r3, [pc, #836]	; (711c <send_settings+0x5e8>)
    6dd6:	781a      	ldrb	r2, [r3, #0]
    6dd8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	4413      	add	r3, r2
    6de4:	b2da      	uxtb	r2, r3
    6de6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dee:	701a      	strb	r2, [r3, #0]
    6df0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df8:	781a      	ldrb	r2, [r3, #0]
    6dfa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e02:	781b      	ldrb	r3, [r3, #0]
    6e04:	4413      	add	r3, r2
    6e06:	b2da      	uxtb	r2, r3
    6e08:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e10:	701a      	strb	r2, [r3, #0]
    6e12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e1a:	781b      	ldrb	r3, [r3, #0]
    6e1c:	3301      	adds	r3, #1
    6e1e:	b2da      	uxtb	r2, r3
    6e20:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e28:	701a      	strb	r2, [r3, #0]
    6e2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	2bff      	cmp	r3, #255	; 0xff
    6e36:	d105      	bne.n	6e44 <send_settings+0x310>
    6e38:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e40:	2200      	movs	r2, #0
    6e42:	701a      	strb	r2, [r3, #0]
    6e44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e4c:	781b      	ldrb	r3, [r3, #0]
    6e4e:	461a      	mov	r2, r3
    6e50:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    6e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e58:	7899      	ldrb	r1, [r3, #2]
    6e5a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e62:	5499      	strb	r1, [r3, r2]
    6e64:	4bae      	ldr	r3, [pc, #696]	; (7120 <send_settings+0x5ec>)
    6e66:	781a      	ldrb	r2, [r3, #0]
    6e68:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e70:	781b      	ldrb	r3, [r3, #0]
    6e72:	4413      	add	r3, r2
    6e74:	b2da      	uxtb	r2, r3
    6e76:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7e:	701a      	strb	r2, [r3, #0]
    6e80:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e88:	781a      	ldrb	r2, [r3, #0]
    6e8a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e92:	781b      	ldrb	r3, [r3, #0]
    6e94:	4413      	add	r3, r2
    6e96:	b2da      	uxtb	r2, r3
    6e98:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea0:	701a      	strb	r2, [r3, #0]
    6ea2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eaa:	781b      	ldrb	r3, [r3, #0]
    6eac:	3301      	adds	r3, #1
    6eae:	b2da      	uxtb	r2, r3
    6eb0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb8:	701a      	strb	r2, [r3, #0]
    6eba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	2bff      	cmp	r3, #255	; 0xff
    6ec6:	d105      	bne.n	6ed4 <send_settings+0x3a0>
    6ec8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed0:	2200      	movs	r2, #0
    6ed2:	701a      	strb	r2, [r3, #0]
    6ed4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6edc:	781b      	ldrb	r3, [r3, #0]
    6ede:	461a      	mov	r2, r3
    6ee0:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
    6ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee8:	78d9      	ldrb	r1, [r3, #3]
    6eea:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef2:	5499      	strb	r1, [r3, r2]
    6ef4:	4b8b      	ldr	r3, [pc, #556]	; (7124 <send_settings+0x5f0>)
    6ef6:	781a      	ldrb	r2, [r3, #0]
    6ef8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f00:	781b      	ldrb	r3, [r3, #0]
    6f02:	4413      	add	r3, r2
    6f04:	b2da      	uxtb	r2, r3
    6f06:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0e:	701a      	strb	r2, [r3, #0]
    6f10:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f18:	781a      	ldrb	r2, [r3, #0]
    6f1a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f22:	781b      	ldrb	r3, [r3, #0]
    6f24:	4413      	add	r3, r2
    6f26:	b2da      	uxtb	r2, r3
    6f28:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f30:	701a      	strb	r2, [r3, #0]
    6f32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3a:	781b      	ldrb	r3, [r3, #0]
    6f3c:	3301      	adds	r3, #1
    6f3e:	b2da      	uxtb	r2, r3
    6f40:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f48:	701a      	strb	r2, [r3, #0]
    6f4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	2bff      	cmp	r3, #255	; 0xff
    6f56:	d105      	bne.n	6f64 <send_settings+0x430>
    6f58:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f60:	2200      	movs	r2, #0
    6f62:	701a      	strb	r2, [r3, #0]
    6f64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f6c:	781b      	ldrb	r3, [r3, #0]
    6f6e:	461a      	mov	r2, r3
    6f70:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    6f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f78:	7819      	ldrb	r1, [r3, #0]
    6f7a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    6f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f82:	5499      	strb	r1, [r3, r2]
    6f84:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    6f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f8c:	781a      	ldrb	r2, [r3, #0]
    6f8e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	4413      	add	r3, r2
    6f9a:	b2da      	uxtb	r2, r3
    6f9c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa4:	701a      	strb	r2, [r3, #0]
    6fa6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fae:	781a      	ldrb	r2, [r3, #0]
    6fb0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    6fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	4413      	add	r3, r2
    6fbc:	b2da      	uxtb	r2, r3
    6fbe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    6fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc6:	701a      	strb	r2, [r3, #0]
    6fc8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd0:	781b      	ldrb	r3, [r3, #0]
    6fd2:	3301      	adds	r3, #1
    6fd4:	b2da      	uxtb	r2, r3
    6fd6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fde:	701a      	strb	r2, [r3, #0]
    6fe0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	2bff      	cmp	r3, #255	; 0xff
    6fec:	d105      	bne.n	6ffa <send_settings+0x4c6>
    6fee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff6:	2200      	movs	r2, #0
    6ff8:	701a      	strb	r2, [r3, #0]
    6ffa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    6ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	461a      	mov	r2, r3
    7006:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    700a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    700e:	7859      	ldrb	r1, [r3, #1]
    7010:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7018:	5499      	strb	r1, [r3, r2]
    701a:	4b43      	ldr	r3, [pc, #268]	; (7128 <send_settings+0x5f4>)
    701c:	781a      	ldrb	r2, [r3, #0]
    701e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	4413      	add	r3, r2
    702a:	b2da      	uxtb	r2, r3
    702c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7034:	701a      	strb	r2, [r3, #0]
    7036:	f24a 53be 	movw	r3, #42430	; 0xa5be
    703a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    703e:	781a      	ldrb	r2, [r3, #0]
    7040:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7048:	781b      	ldrb	r3, [r3, #0]
    704a:	4413      	add	r3, r2
    704c:	b2da      	uxtb	r2, r3
    704e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7056:	701a      	strb	r2, [r3, #0]
    7058:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    705c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7060:	781b      	ldrb	r3, [r3, #0]
    7062:	3301      	adds	r3, #1
    7064:	b2da      	uxtb	r2, r3
    7066:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    706a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    706e:	701a      	strb	r2, [r3, #0]
    7070:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7078:	781b      	ldrb	r3, [r3, #0]
    707a:	2bff      	cmp	r3, #255	; 0xff
    707c:	d105      	bne.n	708a <send_settings+0x556>
    707e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7086:	2200      	movs	r2, #0
    7088:	701a      	strb	r2, [r3, #0]
    708a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    708e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7092:	781b      	ldrb	r3, [r3, #0]
    7094:	461a      	mov	r2, r3
    7096:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    709a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    709e:	7899      	ldrb	r1, [r3, #2]
    70a0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    70a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a8:	5499      	strb	r1, [r3, r2]
    70aa:	4b20      	ldr	r3, [pc, #128]	; (712c <send_settings+0x5f8>)
    70ac:	781a      	ldrb	r2, [r3, #0]
    70ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    70b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	4413      	add	r3, r2
    70ba:	b2da      	uxtb	r2, r3
    70bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    70c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c4:	701a      	strb	r2, [r3, #0]
    70c6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    70ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ce:	781a      	ldrb	r2, [r3, #0]
    70d0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    70d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70d8:	781b      	ldrb	r3, [r3, #0]
    70da:	4413      	add	r3, r2
    70dc:	b2da      	uxtb	r2, r3
    70de:	f24a 53be 	movw	r3, #42430	; 0xa5be
    70e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e6:	701a      	strb	r2, [r3, #0]
    70e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f0:	781b      	ldrb	r3, [r3, #0]
    70f2:	3301      	adds	r3, #1
    70f4:	b2da      	uxtb	r2, r3
    70f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    70fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70fe:	701a      	strb	r2, [r3, #0]
    7100:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	2bff      	cmp	r3, #255	; 0xff
    710c:	d110      	bne.n	7130 <send_settings+0x5fc>
    710e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7116:	2200      	movs	r2, #0
    7118:	701a      	strb	r2, [r3, #0]
    711a:	e009      	b.n	7130 <send_settings+0x5fc>
    711c:	2000a4a9 	.word	0x2000a4a9
    7120:	2000a4aa 	.word	0x2000a4aa
    7124:	2000a4ab 	.word	0x2000a4ab
    7128:	2000a4ad 	.word	0x2000a4ad
    712c:	2000a4ae 	.word	0x2000a4ae
    7130:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	461a      	mov	r2, r3
    713c:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
    7140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7144:	78d9      	ldrb	r1, [r3, #3]
    7146:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    714a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714e:	5499      	strb	r1, [r3, r2]
    7150:	4b79      	ldr	r3, [pc, #484]	; (7338 <send_settings+0x804>)
    7152:	781a      	ldrb	r2, [r3, #0]
    7154:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    715c:	781b      	ldrb	r3, [r3, #0]
    715e:	4413      	add	r3, r2
    7160:	b2da      	uxtb	r2, r3
    7162:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716a:	701a      	strb	r2, [r3, #0]
    716c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7174:	781a      	ldrb	r2, [r3, #0]
    7176:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    717a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717e:	781b      	ldrb	r3, [r3, #0]
    7180:	4413      	add	r3, r2
    7182:	b2da      	uxtb	r2, r3
    7184:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    718c:	701a      	strb	r2, [r3, #0]
    718e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7196:	781b      	ldrb	r3, [r3, #0]
    7198:	3301      	adds	r3, #1
    719a:	b2da      	uxtb	r2, r3
    719c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71a4:	701a      	strb	r2, [r3, #0]
    71a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2bff      	cmp	r3, #255	; 0xff
    71b2:	d105      	bne.n	71c0 <send_settings+0x68c>
    71b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71bc:	2200      	movs	r2, #0
    71be:	701a      	strb	r2, [r3, #0]
    71c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	461a      	mov	r2, r3
    71cc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    71d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d4:	7819      	ldrb	r1, [r3, #0]
    71d6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    71da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71de:	5499      	strb	r1, [r3, r2]
    71e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	3301      	adds	r3, #1
    71ec:	b2da      	uxtb	r2, r3
    71ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f6:	701a      	strb	r2, [r3, #0]
    71f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    71fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	2bff      	cmp	r3, #255	; 0xff
    7204:	d105      	bne.n	7212 <send_settings+0x6de>
    7206:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    720a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720e:	2200      	movs	r2, #0
    7210:	701a      	strb	r2, [r3, #0]
    7212:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	461a      	mov	r2, r3
    721e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7226:	7819      	ldrb	r1, [r3, #0]
    7228:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    722c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7230:	5499      	strb	r1, [r3, r2]
    7232:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    723a:	781b      	ldrb	r3, [r3, #0]
    723c:	3301      	adds	r3, #1
    723e:	b2da      	uxtb	r2, r3
    7240:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7248:	701a      	strb	r2, [r3, #0]
    724a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    724e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	2bff      	cmp	r3, #255	; 0xff
    7256:	d105      	bne.n	7264 <send_settings+0x730>
    7258:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    725c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7260:	2200      	movs	r2, #0
    7262:	701a      	strb	r2, [r3, #0]
    7264:	f248 0339 	movw	r3, #32825	; 0x8039
    7268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726c:	781b      	ldrb	r3, [r3, #0]
    726e:	b2db      	uxtb	r3, r3
    7270:	f003 0310 	and.w	r3, r3, #16
    7274:	2b00      	cmp	r3, #0
    7276:	d15a      	bne.n	732e <send_settings+0x7fa>
    7278:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    727c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7280:	781b      	ldrb	r3, [r3, #0]
    7282:	b2db      	uxtb	r3, r3
    7284:	461a      	mov	r2, r3
    7286:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    728a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728e:	5c9a      	ldrb	r2, [r3, r2]
    7290:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    7294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7298:	701a      	strb	r2, [r3, #0]
    729a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    729e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a2:	2200      	movs	r2, #0
    72a4:	701a      	strb	r2, [r3, #0]
    72a6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    72aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	b2db      	uxtb	r3, r3
    72b2:	3301      	adds	r3, #1
    72b4:	b2da      	uxtb	r2, r3
    72b6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    72ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    72c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	b2db      	uxtb	r3, r3
    72cc:	2bff      	cmp	r3, #255	; 0xff
    72ce:	d105      	bne.n	72dc <send_settings+0x7a8>
    72d0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    72d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d8:	2200      	movs	r2, #0
    72da:	701a      	strb	r2, [r3, #0]
    72dc:	f248 0338 	movw	r3, #32824	; 0x8038
    72e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e4:	f248 0238 	movw	r2, #32824	; 0x8038
    72e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72ec:	7812      	ldrb	r2, [r2, #0]
    72ee:	b2d2      	uxtb	r2, r2
    72f0:	f042 0201 	orr.w	r2, r2, #1
    72f4:	b2d2      	uxtb	r2, r2
    72f6:	701a      	strb	r2, [r3, #0]
    72f8:	f248 0339 	movw	r3, #32825	; 0x8039
    72fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7300:	f248 0239 	movw	r2, #32825	; 0x8039
    7304:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7308:	7812      	ldrb	r2, [r2, #0]
    730a:	b2d2      	uxtb	r2, r2
    730c:	f042 0210 	orr.w	r2, r2, #16
    7310:	b2d2      	uxtb	r2, r2
    7312:	701a      	strb	r2, [r3, #0]
    7314:	e00b      	b.n	732e <send_settings+0x7fa>
    7316:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    731a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	3301      	adds	r3, #1
    7322:	b2da      	uxtb	r2, r3
    7324:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    7328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732c:	701a      	strb	r2, [r3, #0]
}
    732e:	46bd      	mov	sp, r7
    7330:	f85d 7b04 	ldr.w	r7, [sp], #4
    7334:	4770      	bx	lr
    7336:	bf00      	nop
    7338:	2000a4af 	.word	0x2000a4af

0000733c <send_desired>:
void send_desired(void){  //1000ms
    733c:	b480      	push	{r7}
    733e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    7340:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    7344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7348:	781a      	ldrb	r2, [r3, #0]
    734a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    734e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7352:	fba3 1302 	umull	r1, r3, r3, r2
    7356:	08d9      	lsrs	r1, r3, #3
    7358:	460b      	mov	r3, r1
    735a:	009b      	lsls	r3, r3, #2
    735c:	440b      	add	r3, r1
    735e:	005b      	lsls	r3, r3, #1
    7360:	1ad3      	subs	r3, r2, r3
    7362:	b2db      	uxtb	r3, r3
    7364:	2b03      	cmp	r3, #3
    7366:	f040 8712 	bne.w	818e <send_desired+0xe52>
    736a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    736e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7372:	781a      	ldrb	r2, [r3, #0]
    7374:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737c:	781b      	ldrb	r3, [r3, #0]
    737e:	b2db      	uxtb	r3, r3
    7380:	429a      	cmp	r2, r3
    7382:	d313      	bcc.n	73ac <send_desired+0x70>
    7384:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    7388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    738c:	781b      	ldrb	r3, [r3, #0]
    738e:	b2db      	uxtb	r3, r3
    7390:	461a      	mov	r2, r3
    7392:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	1ad3      	subs	r3, r2, r3
    739e:	33ff      	adds	r3, #255	; 0xff
    73a0:	2b18      	cmp	r3, #24
    73a2:	bfd4      	ite	le
    73a4:	2300      	movle	r3, #0
    73a6:	2301      	movgt	r3, #1
    73a8:	b2db      	uxtb	r3, r3
    73aa:	e011      	b.n	73d0 <send_desired+0x94>
    73ac:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    73b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73b4:	781b      	ldrb	r3, [r3, #0]
    73b6:	b2db      	uxtb	r3, r3
    73b8:	461a      	mov	r2, r3
    73ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    73be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c2:	781b      	ldrb	r3, [r3, #0]
    73c4:	1ad3      	subs	r3, r2, r3
    73c6:	2b18      	cmp	r3, #24
    73c8:	bfd4      	ite	le
    73ca:	2300      	movle	r3, #0
    73cc:	2301      	movgt	r3, #1
    73ce:	b2db      	uxtb	r3, r3
    73d0:	2b00      	cmp	r3, #0
    73d2:	f000 86d0 	beq.w	8176 <send_desired+0xe3a>
    73d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    73da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73de:	781b      	ldrb	r3, [r3, #0]
    73e0:	461a      	mov	r2, r3
    73e2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    73e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ea:	2105      	movs	r1, #5
    73ec:	5499      	strb	r1, [r3, r2]
    73ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    73f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	3301      	adds	r3, #1
    73fa:	b2da      	uxtb	r2, r3
    73fc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7404:	701a      	strb	r2, [r3, #0]
    7406:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    740a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	2bff      	cmp	r3, #255	; 0xff
    7412:	d105      	bne.n	7420 <send_desired+0xe4>
    7414:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    741c:	2200      	movs	r2, #0
    741e:	701a      	strb	r2, [r3, #0]
    7420:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7428:	781b      	ldrb	r3, [r3, #0]
    742a:	461a      	mov	r2, r3
    742c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7434:	2112      	movs	r1, #18
    7436:	5499      	strb	r1, [r3, r2]
    7438:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    743c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	3301      	adds	r3, #1
    7444:	b2da      	uxtb	r2, r3
    7446:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    744a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744e:	701a      	strb	r2, [r3, #0]
    7450:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7458:	781b      	ldrb	r3, [r3, #0]
    745a:	2bff      	cmp	r3, #255	; 0xff
    745c:	d105      	bne.n	746a <send_desired+0x12e>
    745e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7466:	2200      	movs	r2, #0
    7468:	701a      	strb	r2, [r3, #0]
    746a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    746e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7472:	2212      	movs	r2, #18
    7474:	701a      	strb	r2, [r3, #0]
    7476:	f24a 53be 	movw	r3, #42430	; 0xa5be
    747a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747e:	2212      	movs	r2, #18
    7480:	701a      	strb	r2, [r3, #0]
    7482:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	461a      	mov	r2, r3
    748e:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    7492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7496:	7819      	ldrb	r1, [r3, #0]
    7498:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    749c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a0:	5499      	strb	r1, [r3, r2]
    74a2:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    74a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74aa:	781a      	ldrb	r2, [r3, #0]
    74ac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    74b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b4:	781b      	ldrb	r3, [r3, #0]
    74b6:	4413      	add	r3, r2
    74b8:	b2da      	uxtb	r2, r3
    74ba:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    74be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c2:	701a      	strb	r2, [r3, #0]
    74c4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    74c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74cc:	781a      	ldrb	r2, [r3, #0]
    74ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    74d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d6:	781b      	ldrb	r3, [r3, #0]
    74d8:	4413      	add	r3, r2
    74da:	b2da      	uxtb	r2, r3
    74dc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    74e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e4:	701a      	strb	r2, [r3, #0]
    74e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ee:	781b      	ldrb	r3, [r3, #0]
    74f0:	3301      	adds	r3, #1
    74f2:	b2da      	uxtb	r2, r3
    74f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    74f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fc:	701a      	strb	r2, [r3, #0]
    74fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	2bff      	cmp	r3, #255	; 0xff
    750a:	d105      	bne.n	7518 <send_desired+0x1dc>
    750c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7514:	2200      	movs	r2, #0
    7516:	701a      	strb	r2, [r3, #0]
    7518:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    751c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	461a      	mov	r2, r3
    7524:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    7528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752c:	7859      	ldrb	r1, [r3, #1]
    752e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7536:	5499      	strb	r1, [r3, r2]
    7538:	4bd1      	ldr	r3, [pc, #836]	; (7880 <send_desired+0x544>)
    753a:	781a      	ldrb	r2, [r3, #0]
    753c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7544:	781b      	ldrb	r3, [r3, #0]
    7546:	4413      	add	r3, r2
    7548:	b2da      	uxtb	r2, r3
    754a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    754e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7552:	701a      	strb	r2, [r3, #0]
    7554:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755c:	781a      	ldrb	r2, [r3, #0]
    755e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7566:	781b      	ldrb	r3, [r3, #0]
    7568:	4413      	add	r3, r2
    756a:	b2da      	uxtb	r2, r3
    756c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7574:	701a      	strb	r2, [r3, #0]
    7576:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    757a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    757e:	781b      	ldrb	r3, [r3, #0]
    7580:	3301      	adds	r3, #1
    7582:	b2da      	uxtb	r2, r3
    7584:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758c:	701a      	strb	r2, [r3, #0]
    758e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	2bff      	cmp	r3, #255	; 0xff
    759a:	d105      	bne.n	75a8 <send_desired+0x26c>
    759c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    75a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a4:	2200      	movs	r2, #0
    75a6:	701a      	strb	r2, [r3, #0]
    75a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    75ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b0:	781b      	ldrb	r3, [r3, #0]
    75b2:	461a      	mov	r2, r3
    75b4:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    75b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75bc:	7899      	ldrb	r1, [r3, #2]
    75be:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    75c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c6:	5499      	strb	r1, [r3, r2]
    75c8:	4bae      	ldr	r3, [pc, #696]	; (7884 <send_desired+0x548>)
    75ca:	781a      	ldrb	r2, [r3, #0]
    75cc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    75d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	4413      	add	r3, r2
    75d8:	b2da      	uxtb	r2, r3
    75da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    75de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e2:	701a      	strb	r2, [r3, #0]
    75e4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    75e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ec:	781a      	ldrb	r2, [r3, #0]
    75ee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    75f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	4413      	add	r3, r2
    75fa:	b2da      	uxtb	r2, r3
    75fc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7604:	701a      	strb	r2, [r3, #0]
    7606:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    760a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    760e:	781b      	ldrb	r3, [r3, #0]
    7610:	3301      	adds	r3, #1
    7612:	b2da      	uxtb	r2, r3
    7614:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    761c:	701a      	strb	r2, [r3, #0]
    761e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7626:	781b      	ldrb	r3, [r3, #0]
    7628:	2bff      	cmp	r3, #255	; 0xff
    762a:	d105      	bne.n	7638 <send_desired+0x2fc>
    762c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7634:	2200      	movs	r2, #0
    7636:	701a      	strb	r2, [r3, #0]
    7638:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    763c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	461a      	mov	r2, r3
    7644:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    7648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    764c:	78d9      	ldrb	r1, [r3, #3]
    764e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7656:	5499      	strb	r1, [r3, r2]
    7658:	4b8b      	ldr	r3, [pc, #556]	; (7888 <send_desired+0x54c>)
    765a:	781a      	ldrb	r2, [r3, #0]
    765c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	4413      	add	r3, r2
    7668:	b2da      	uxtb	r2, r3
    766a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    766e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7672:	701a      	strb	r2, [r3, #0]
    7674:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    767c:	781a      	ldrb	r2, [r3, #0]
    767e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	4413      	add	r3, r2
    768a:	b2da      	uxtb	r2, r3
    768c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7694:	701a      	strb	r2, [r3, #0]
    7696:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    769a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	3301      	adds	r3, #1
    76a2:	b2da      	uxtb	r2, r3
    76a4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ac:	701a      	strb	r2, [r3, #0]
    76ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b6:	781b      	ldrb	r3, [r3, #0]
    76b8:	2bff      	cmp	r3, #255	; 0xff
    76ba:	d105      	bne.n	76c8 <send_desired+0x38c>
    76bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c4:	2200      	movs	r2, #0
    76c6:	701a      	strb	r2, [r3, #0]
    76c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    76cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d0:	781b      	ldrb	r3, [r3, #0]
    76d2:	461a      	mov	r2, r3
    76d4:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    76d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76dc:	7819      	ldrb	r1, [r3, #0]
    76de:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    76e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e6:	5499      	strb	r1, [r3, r2]
    76e8:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    76ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f0:	781a      	ldrb	r2, [r3, #0]
    76f2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    76f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	4413      	add	r3, r2
    76fe:	b2da      	uxtb	r2, r3
    7700:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7708:	701a      	strb	r2, [r3, #0]
    770a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    770e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7712:	781a      	ldrb	r2, [r3, #0]
    7714:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    771c:	781b      	ldrb	r3, [r3, #0]
    771e:	4413      	add	r3, r2
    7720:	b2da      	uxtb	r2, r3
    7722:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772a:	701a      	strb	r2, [r3, #0]
    772c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	3301      	adds	r3, #1
    7738:	b2da      	uxtb	r2, r3
    773a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    773e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7742:	701a      	strb	r2, [r3, #0]
    7744:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	2bff      	cmp	r3, #255	; 0xff
    7750:	d105      	bne.n	775e <send_desired+0x422>
    7752:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775a:	2200      	movs	r2, #0
    775c:	701a      	strb	r2, [r3, #0]
    775e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	461a      	mov	r2, r3
    776a:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    776e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7772:	7859      	ldrb	r1, [r3, #1]
    7774:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    777c:	5499      	strb	r1, [r3, r2]
    777e:	4b43      	ldr	r3, [pc, #268]	; (788c <send_desired+0x550>)
    7780:	781a      	ldrb	r2, [r3, #0]
    7782:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	4413      	add	r3, r2
    778e:	b2da      	uxtb	r2, r3
    7790:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7798:	701a      	strb	r2, [r3, #0]
    779a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    779e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a2:	781a      	ldrb	r2, [r3, #0]
    77a4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    77a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	4413      	add	r3, r2
    77b0:	b2da      	uxtb	r2, r3
    77b2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    77b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ba:	701a      	strb	r2, [r3, #0]
    77bc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    77c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c4:	781b      	ldrb	r3, [r3, #0]
    77c6:	3301      	adds	r3, #1
    77c8:	b2da      	uxtb	r2, r3
    77ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    77ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d2:	701a      	strb	r2, [r3, #0]
    77d4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    77d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	2bff      	cmp	r3, #255	; 0xff
    77e0:	d105      	bne.n	77ee <send_desired+0x4b2>
    77e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    77e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ea:	2200      	movs	r2, #0
    77ec:	701a      	strb	r2, [r3, #0]
    77ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    77f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	461a      	mov	r2, r3
    77fa:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    77fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7802:	7899      	ldrb	r1, [r3, #2]
    7804:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780c:	5499      	strb	r1, [r3, r2]
    780e:	4b20      	ldr	r3, [pc, #128]	; (7890 <send_desired+0x554>)
    7810:	781a      	ldrb	r2, [r3, #0]
    7812:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    781a:	781b      	ldrb	r3, [r3, #0]
    781c:	4413      	add	r3, r2
    781e:	b2da      	uxtb	r2, r3
    7820:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7828:	701a      	strb	r2, [r3, #0]
    782a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    782e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7832:	781a      	ldrb	r2, [r3, #0]
    7834:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	4413      	add	r3, r2
    7840:	b2da      	uxtb	r2, r3
    7842:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    784a:	701a      	strb	r2, [r3, #0]
    784c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7854:	781b      	ldrb	r3, [r3, #0]
    7856:	3301      	adds	r3, #1
    7858:	b2da      	uxtb	r2, r3
    785a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    785e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7862:	701a      	strb	r2, [r3, #0]
    7864:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786c:	781b      	ldrb	r3, [r3, #0]
    786e:	2bff      	cmp	r3, #255	; 0xff
    7870:	d110      	bne.n	7894 <send_desired+0x558>
    7872:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    787a:	2200      	movs	r2, #0
    787c:	701a      	strb	r2, [r3, #0]
    787e:	e009      	b.n	7894 <send_desired+0x558>
    7880:	2000a7e5 	.word	0x2000a7e5
    7884:	2000a7e6 	.word	0x2000a7e6
    7888:	2000a7e7 	.word	0x2000a7e7
    788c:	2000a7e9 	.word	0x2000a7e9
    7890:	2000a7ea 	.word	0x2000a7ea
    7894:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	461a      	mov	r2, r3
    78a0:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    78a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a8:	78d9      	ldrb	r1, [r3, #3]
    78aa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    78ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b2:	5499      	strb	r1, [r3, r2]
    78b4:	4bd3      	ldr	r3, [pc, #844]	; (7c04 <send_desired+0x8c8>)
    78b6:	781a      	ldrb	r2, [r3, #0]
    78b8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    78bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c0:	781b      	ldrb	r3, [r3, #0]
    78c2:	4413      	add	r3, r2
    78c4:	b2da      	uxtb	r2, r3
    78c6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    78ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ce:	701a      	strb	r2, [r3, #0]
    78d0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    78d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d8:	781a      	ldrb	r2, [r3, #0]
    78da:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    78de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78e2:	781b      	ldrb	r3, [r3, #0]
    78e4:	4413      	add	r3, r2
    78e6:	b2da      	uxtb	r2, r3
    78e8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    78ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f0:	701a      	strb	r2, [r3, #0]
    78f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    78f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fa:	781b      	ldrb	r3, [r3, #0]
    78fc:	3301      	adds	r3, #1
    78fe:	b2da      	uxtb	r2, r3
    7900:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7908:	701a      	strb	r2, [r3, #0]
    790a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    790e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7912:	781b      	ldrb	r3, [r3, #0]
    7914:	2bff      	cmp	r3, #255	; 0xff
    7916:	d105      	bne.n	7924 <send_desired+0x5e8>
    7918:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    791c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7920:	2200      	movs	r2, #0
    7922:	701a      	strb	r2, [r3, #0]
    7924:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792c:	781b      	ldrb	r3, [r3, #0]
    792e:	461a      	mov	r2, r3
    7930:	f64a 0330 	movw	r3, #43056	; 0xa830
    7934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7938:	7819      	ldrb	r1, [r3, #0]
    793a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    793e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7942:	5499      	strb	r1, [r3, r2]
    7944:	f64a 0330 	movw	r3, #43056	; 0xa830
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	781a      	ldrb	r2, [r3, #0]
    794e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	4413      	add	r3, r2
    795a:	b2da      	uxtb	r2, r3
    795c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7964:	701a      	strb	r2, [r3, #0]
    7966:	f24a 53be 	movw	r3, #42430	; 0xa5be
    796a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796e:	781a      	ldrb	r2, [r3, #0]
    7970:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7978:	781b      	ldrb	r3, [r3, #0]
    797a:	4413      	add	r3, r2
    797c:	b2da      	uxtb	r2, r3
    797e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7986:	701a      	strb	r2, [r3, #0]
    7988:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    798c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7990:	781b      	ldrb	r3, [r3, #0]
    7992:	3301      	adds	r3, #1
    7994:	b2da      	uxtb	r2, r3
    7996:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    799a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799e:	701a      	strb	r2, [r3, #0]
    79a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a8:	781b      	ldrb	r3, [r3, #0]
    79aa:	2bff      	cmp	r3, #255	; 0xff
    79ac:	d105      	bne.n	79ba <send_desired+0x67e>
    79ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b6:	2200      	movs	r2, #0
    79b8:	701a      	strb	r2, [r3, #0]
    79ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    79be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c2:	781b      	ldrb	r3, [r3, #0]
    79c4:	461a      	mov	r2, r3
    79c6:	f64a 0330 	movw	r3, #43056	; 0xa830
    79ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ce:	7859      	ldrb	r1, [r3, #1]
    79d0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    79d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d8:	5499      	strb	r1, [r3, r2]
    79da:	4b8b      	ldr	r3, [pc, #556]	; (7c08 <send_desired+0x8cc>)
    79dc:	781a      	ldrb	r2, [r3, #0]
    79de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    79e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	4413      	add	r3, r2
    79ea:	b2da      	uxtb	r2, r3
    79ec:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    79f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79f4:	701a      	strb	r2, [r3, #0]
    79f6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    79fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fe:	781a      	ldrb	r2, [r3, #0]
    7a00:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a08:	781b      	ldrb	r3, [r3, #0]
    7a0a:	4413      	add	r3, r2
    7a0c:	b2da      	uxtb	r2, r3
    7a0e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a16:	701a      	strb	r2, [r3, #0]
    7a18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	3301      	adds	r3, #1
    7a24:	b2da      	uxtb	r2, r3
    7a26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2e:	701a      	strb	r2, [r3, #0]
    7a30:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a38:	781b      	ldrb	r3, [r3, #0]
    7a3a:	2bff      	cmp	r3, #255	; 0xff
    7a3c:	d105      	bne.n	7a4a <send_desired+0x70e>
    7a3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a46:	2200      	movs	r2, #0
    7a48:	701a      	strb	r2, [r3, #0]
    7a4a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a52:	781b      	ldrb	r3, [r3, #0]
    7a54:	461a      	mov	r2, r3
    7a56:	f64a 0330 	movw	r3, #43056	; 0xa830
    7a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5e:	7899      	ldrb	r1, [r3, #2]
    7a60:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a68:	5499      	strb	r1, [r3, r2]
    7a6a:	4b68      	ldr	r3, [pc, #416]	; (7c0c <send_desired+0x8d0>)
    7a6c:	781a      	ldrb	r2, [r3, #0]
    7a6e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a76:	781b      	ldrb	r3, [r3, #0]
    7a78:	4413      	add	r3, r2
    7a7a:	b2da      	uxtb	r2, r3
    7a7c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a84:	701a      	strb	r2, [r3, #0]
    7a86:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a8e:	781a      	ldrb	r2, [r3, #0]
    7a90:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a98:	781b      	ldrb	r3, [r3, #0]
    7a9a:	4413      	add	r3, r2
    7a9c:	b2da      	uxtb	r2, r3
    7a9e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa6:	701a      	strb	r2, [r3, #0]
    7aa8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab0:	781b      	ldrb	r3, [r3, #0]
    7ab2:	3301      	adds	r3, #1
    7ab4:	b2da      	uxtb	r2, r3
    7ab6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7abe:	701a      	strb	r2, [r3, #0]
    7ac0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac8:	781b      	ldrb	r3, [r3, #0]
    7aca:	2bff      	cmp	r3, #255	; 0xff
    7acc:	d105      	bne.n	7ada <send_desired+0x79e>
    7ace:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad6:	2200      	movs	r2, #0
    7ad8:	701a      	strb	r2, [r3, #0]
    7ada:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	461a      	mov	r2, r3
    7ae6:	f64a 0330 	movw	r3, #43056	; 0xa830
    7aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aee:	78d9      	ldrb	r1, [r3, #3]
    7af0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af8:	5499      	strb	r1, [r3, r2]
    7afa:	4b45      	ldr	r3, [pc, #276]	; (7c10 <send_desired+0x8d4>)
    7afc:	781a      	ldrb	r2, [r3, #0]
    7afe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b06:	781b      	ldrb	r3, [r3, #0]
    7b08:	4413      	add	r3, r2
    7b0a:	b2da      	uxtb	r2, r3
    7b0c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b14:	701a      	strb	r2, [r3, #0]
    7b16:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b1e:	781a      	ldrb	r2, [r3, #0]
    7b20:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	4413      	add	r3, r2
    7b2c:	b2da      	uxtb	r2, r3
    7b2e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b36:	701a      	strb	r2, [r3, #0]
    7b38:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	3301      	adds	r3, #1
    7b44:	b2da      	uxtb	r2, r3
    7b46:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4e:	701a      	strb	r2, [r3, #0]
    7b50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b58:	781b      	ldrb	r3, [r3, #0]
    7b5a:	2bff      	cmp	r3, #255	; 0xff
    7b5c:	d105      	bne.n	7b6a <send_desired+0x82e>
    7b5e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b66:	2200      	movs	r2, #0
    7b68:	701a      	strb	r2, [r3, #0]
    7b6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	461a      	mov	r2, r3
    7b76:	f64a 0334 	movw	r3, #43060	; 0xa834
    7b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b7e:	7819      	ldrb	r1, [r3, #0]
    7b80:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b88:	5499      	strb	r1, [r3, r2]
    7b8a:	f64a 0334 	movw	r3, #43060	; 0xa834
    7b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b92:	781a      	ldrb	r2, [r3, #0]
    7b94:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9c:	781b      	ldrb	r3, [r3, #0]
    7b9e:	4413      	add	r3, r2
    7ba0:	b2da      	uxtb	r2, r3
    7ba2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7baa:	701a      	strb	r2, [r3, #0]
    7bac:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb4:	781a      	ldrb	r2, [r3, #0]
    7bb6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	4413      	add	r3, r2
    7bc2:	b2da      	uxtb	r2, r3
    7bc4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bcc:	701a      	strb	r2, [r3, #0]
    7bce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	3301      	adds	r3, #1
    7bda:	b2da      	uxtb	r2, r3
    7bdc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be4:	701a      	strb	r2, [r3, #0]
    7be6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	2bff      	cmp	r3, #255	; 0xff
    7bf2:	d10f      	bne.n	7c14 <send_desired+0x8d8>
    7bf4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfc:	2200      	movs	r2, #0
    7bfe:	701a      	strb	r2, [r3, #0]
    7c00:	e008      	b.n	7c14 <send_desired+0x8d8>
    7c02:	bf00      	nop
    7c04:	2000a7eb 	.word	0x2000a7eb
    7c08:	2000a831 	.word	0x2000a831
    7c0c:	2000a832 	.word	0x2000a832
    7c10:	2000a833 	.word	0x2000a833
    7c14:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c1c:	781b      	ldrb	r3, [r3, #0]
    7c1e:	461a      	mov	r2, r3
    7c20:	f64a 0334 	movw	r3, #43060	; 0xa834
    7c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c28:	7859      	ldrb	r1, [r3, #1]
    7c2a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c32:	5499      	strb	r1, [r3, r2]
    7c34:	4bd1      	ldr	r3, [pc, #836]	; (7f7c <send_desired+0xc40>)
    7c36:	781a      	ldrb	r2, [r3, #0]
    7c38:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c40:	781b      	ldrb	r3, [r3, #0]
    7c42:	4413      	add	r3, r2
    7c44:	b2da      	uxtb	r2, r3
    7c46:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c4e:	701a      	strb	r2, [r3, #0]
    7c50:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c58:	781a      	ldrb	r2, [r3, #0]
    7c5a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c62:	781b      	ldrb	r3, [r3, #0]
    7c64:	4413      	add	r3, r2
    7c66:	b2da      	uxtb	r2, r3
    7c68:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c70:	701a      	strb	r2, [r3, #0]
    7c72:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c7a:	781b      	ldrb	r3, [r3, #0]
    7c7c:	3301      	adds	r3, #1
    7c7e:	b2da      	uxtb	r2, r3
    7c80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c92:	781b      	ldrb	r3, [r3, #0]
    7c94:	2bff      	cmp	r3, #255	; 0xff
    7c96:	d105      	bne.n	7ca4 <send_desired+0x968>
    7c98:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca0:	2200      	movs	r2, #0
    7ca2:	701a      	strb	r2, [r3, #0]
    7ca4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cac:	781b      	ldrb	r3, [r3, #0]
    7cae:	461a      	mov	r2, r3
    7cb0:	f64a 0334 	movw	r3, #43060	; 0xa834
    7cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb8:	7899      	ldrb	r1, [r3, #2]
    7cba:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc2:	5499      	strb	r1, [r3, r2]
    7cc4:	4bae      	ldr	r3, [pc, #696]	; (7f80 <send_desired+0xc44>)
    7cc6:	781a      	ldrb	r2, [r3, #0]
    7cc8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd0:	781b      	ldrb	r3, [r3, #0]
    7cd2:	4413      	add	r3, r2
    7cd4:	b2da      	uxtb	r2, r3
    7cd6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cde:	701a      	strb	r2, [r3, #0]
    7ce0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce8:	781a      	ldrb	r2, [r3, #0]
    7cea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	4413      	add	r3, r2
    7cf6:	b2da      	uxtb	r2, r3
    7cf8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d00:	701a      	strb	r2, [r3, #0]
    7d02:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	3301      	adds	r3, #1
    7d0e:	b2da      	uxtb	r2, r3
    7d10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d18:	701a      	strb	r2, [r3, #0]
    7d1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d22:	781b      	ldrb	r3, [r3, #0]
    7d24:	2bff      	cmp	r3, #255	; 0xff
    7d26:	d105      	bne.n	7d34 <send_desired+0x9f8>
    7d28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d30:	2200      	movs	r2, #0
    7d32:	701a      	strb	r2, [r3, #0]
    7d34:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d3c:	781b      	ldrb	r3, [r3, #0]
    7d3e:	461a      	mov	r2, r3
    7d40:	f64a 0334 	movw	r3, #43060	; 0xa834
    7d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d48:	78d9      	ldrb	r1, [r3, #3]
    7d4a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d52:	5499      	strb	r1, [r3, r2]
    7d54:	4b8b      	ldr	r3, [pc, #556]	; (7f84 <send_desired+0xc48>)
    7d56:	781a      	ldrb	r2, [r3, #0]
    7d58:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	4413      	add	r3, r2
    7d64:	b2da      	uxtb	r2, r3
    7d66:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d6e:	701a      	strb	r2, [r3, #0]
    7d70:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d78:	781a      	ldrb	r2, [r3, #0]
    7d7a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	4413      	add	r3, r2
    7d86:	b2da      	uxtb	r2, r3
    7d88:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d90:	701a      	strb	r2, [r3, #0]
    7d92:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d9a:	781b      	ldrb	r3, [r3, #0]
    7d9c:	3301      	adds	r3, #1
    7d9e:	b2da      	uxtb	r2, r3
    7da0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da8:	701a      	strb	r2, [r3, #0]
    7daa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db2:	781b      	ldrb	r3, [r3, #0]
    7db4:	2bff      	cmp	r3, #255	; 0xff
    7db6:	d105      	bne.n	7dc4 <send_desired+0xa88>
    7db8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc0:	2200      	movs	r2, #0
    7dc2:	701a      	strb	r2, [r3, #0]
    7dc4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	461a      	mov	r2, r3
    7dd0:	f240 133c 	movw	r3, #316	; 0x13c
    7dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd8:	7819      	ldrb	r1, [r3, #0]
    7dda:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de2:	5499      	strb	r1, [r3, r2]
    7de4:	f240 133c 	movw	r3, #316	; 0x13c
    7de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dec:	781a      	ldrb	r2, [r3, #0]
    7dee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	4413      	add	r3, r2
    7dfa:	b2da      	uxtb	r2, r3
    7dfc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e04:	701a      	strb	r2, [r3, #0]
    7e06:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e0e:	781a      	ldrb	r2, [r3, #0]
    7e10:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e18:	781b      	ldrb	r3, [r3, #0]
    7e1a:	4413      	add	r3, r2
    7e1c:	b2da      	uxtb	r2, r3
    7e1e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e26:	701a      	strb	r2, [r3, #0]
    7e28:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e30:	781b      	ldrb	r3, [r3, #0]
    7e32:	3301      	adds	r3, #1
    7e34:	b2da      	uxtb	r2, r3
    7e36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3e:	701a      	strb	r2, [r3, #0]
    7e40:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e48:	781b      	ldrb	r3, [r3, #0]
    7e4a:	2bff      	cmp	r3, #255	; 0xff
    7e4c:	d105      	bne.n	7e5a <send_desired+0xb1e>
    7e4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e56:	2200      	movs	r2, #0
    7e58:	701a      	strb	r2, [r3, #0]
    7e5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e62:	781b      	ldrb	r3, [r3, #0]
    7e64:	461a      	mov	r2, r3
    7e66:	f240 133c 	movw	r3, #316	; 0x13c
    7e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6e:	7859      	ldrb	r1, [r3, #1]
    7e70:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e78:	5499      	strb	r1, [r3, r2]
    7e7a:	4b43      	ldr	r3, [pc, #268]	; (7f88 <send_desired+0xc4c>)
    7e7c:	781a      	ldrb	r2, [r3, #0]
    7e7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e86:	781b      	ldrb	r3, [r3, #0]
    7e88:	4413      	add	r3, r2
    7e8a:	b2da      	uxtb	r2, r3
    7e8c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e94:	701a      	strb	r2, [r3, #0]
    7e96:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9e:	781a      	ldrb	r2, [r3, #0]
    7ea0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea8:	781b      	ldrb	r3, [r3, #0]
    7eaa:	4413      	add	r3, r2
    7eac:	b2da      	uxtb	r2, r3
    7eae:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb6:	701a      	strb	r2, [r3, #0]
    7eb8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec0:	781b      	ldrb	r3, [r3, #0]
    7ec2:	3301      	adds	r3, #1
    7ec4:	b2da      	uxtb	r2, r3
    7ec6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ece:	701a      	strb	r2, [r3, #0]
    7ed0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	2bff      	cmp	r3, #255	; 0xff
    7edc:	d105      	bne.n	7eea <send_desired+0xbae>
    7ede:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee6:	2200      	movs	r2, #0
    7ee8:	701a      	strb	r2, [r3, #0]
    7eea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	461a      	mov	r2, r3
    7ef6:	f240 133c 	movw	r3, #316	; 0x13c
    7efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7efe:	7899      	ldrb	r1, [r3, #2]
    7f00:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f08:	5499      	strb	r1, [r3, r2]
    7f0a:	4b20      	ldr	r3, [pc, #128]	; (7f8c <send_desired+0xc50>)
    7f0c:	781a      	ldrb	r2, [r3, #0]
    7f0e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f16:	781b      	ldrb	r3, [r3, #0]
    7f18:	4413      	add	r3, r2
    7f1a:	b2da      	uxtb	r2, r3
    7f1c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f24:	701a      	strb	r2, [r3, #0]
    7f26:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f2e:	781a      	ldrb	r2, [r3, #0]
    7f30:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f38:	781b      	ldrb	r3, [r3, #0]
    7f3a:	4413      	add	r3, r2
    7f3c:	b2da      	uxtb	r2, r3
    7f3e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f46:	701a      	strb	r2, [r3, #0]
    7f48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	3301      	adds	r3, #1
    7f54:	b2da      	uxtb	r2, r3
    7f56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5e:	701a      	strb	r2, [r3, #0]
    7f60:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	2bff      	cmp	r3, #255	; 0xff
    7f6c:	d110      	bne.n	7f90 <send_desired+0xc54>
    7f6e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f76:	2200      	movs	r2, #0
    7f78:	701a      	strb	r2, [r3, #0]
    7f7a:	e009      	b.n	7f90 <send_desired+0xc54>
    7f7c:	2000a835 	.word	0x2000a835
    7f80:	2000a836 	.word	0x2000a836
    7f84:	2000a837 	.word	0x2000a837
    7f88:	2000013d 	.word	0x2000013d
    7f8c:	2000013e 	.word	0x2000013e
    7f90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f98:	781b      	ldrb	r3, [r3, #0]
    7f9a:	461a      	mov	r2, r3
    7f9c:	f240 133c 	movw	r3, #316	; 0x13c
    7fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa4:	78d9      	ldrb	r1, [r3, #3]
    7fa6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    7faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fae:	5499      	strb	r1, [r3, r2]
    7fb0:	4b79      	ldr	r3, [pc, #484]	; (8198 <send_desired+0xe5c>)
    7fb2:	781a      	ldrb	r2, [r3, #0]
    7fb4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbc:	781b      	ldrb	r3, [r3, #0]
    7fbe:	4413      	add	r3, r2
    7fc0:	b2da      	uxtb	r2, r3
    7fc2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fca:	701a      	strb	r2, [r3, #0]
    7fcc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd4:	781a      	ldrb	r2, [r3, #0]
    7fd6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    7fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	4413      	add	r3, r2
    7fe2:	b2da      	uxtb	r2, r3
    7fe4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    7fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fec:	701a      	strb	r2, [r3, #0]
    7fee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    7ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff6:	781b      	ldrb	r3, [r3, #0]
    7ff8:	3301      	adds	r3, #1
    7ffa:	b2da      	uxtb	r2, r3
    7ffc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8004:	701a      	strb	r2, [r3, #0]
    8006:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    800a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    800e:	781b      	ldrb	r3, [r3, #0]
    8010:	2bff      	cmp	r3, #255	; 0xff
    8012:	d105      	bne.n	8020 <send_desired+0xce4>
    8014:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801c:	2200      	movs	r2, #0
    801e:	701a      	strb	r2, [r3, #0]
    8020:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	461a      	mov	r2, r3
    802c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8034:	7819      	ldrb	r1, [r3, #0]
    8036:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    803a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    803e:	5499      	strb	r1, [r3, r2]
    8040:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8048:	781b      	ldrb	r3, [r3, #0]
    804a:	3301      	adds	r3, #1
    804c:	b2da      	uxtb	r2, r3
    804e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8056:	701a      	strb	r2, [r3, #0]
    8058:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    805c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	2bff      	cmp	r3, #255	; 0xff
    8064:	d105      	bne.n	8072 <send_desired+0xd36>
    8066:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    806a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    806e:	2200      	movs	r2, #0
    8070:	701a      	strb	r2, [r3, #0]
    8072:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	461a      	mov	r2, r3
    807e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8086:	7819      	ldrb	r1, [r3, #0]
    8088:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    808c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8090:	5499      	strb	r1, [r3, r2]
    8092:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	3301      	adds	r3, #1
    809e:	b2da      	uxtb	r2, r3
    80a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a8:	701a      	strb	r2, [r3, #0]
    80aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b2:	781b      	ldrb	r3, [r3, #0]
    80b4:	2bff      	cmp	r3, #255	; 0xff
    80b6:	d105      	bne.n	80c4 <send_desired+0xd88>
    80b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    80bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c0:	2200      	movs	r2, #0
    80c2:	701a      	strb	r2, [r3, #0]
    80c4:	f248 0339 	movw	r3, #32825	; 0x8039
    80c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	b2db      	uxtb	r3, r3
    80d0:	f003 0310 	and.w	r3, r3, #16
    80d4:	2b00      	cmp	r3, #0
    80d6:	d15a      	bne.n	818e <send_desired+0xe52>
    80d8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    80dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e0:	781b      	ldrb	r3, [r3, #0]
    80e2:	b2db      	uxtb	r3, r3
    80e4:	461a      	mov	r2, r3
    80e6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    80ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ee:	5c9a      	ldrb	r2, [r3, r2]
    80f0:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    80f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f8:	701a      	strb	r2, [r3, #0]
    80fa:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    80fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8102:	2200      	movs	r2, #0
    8104:	701a      	strb	r2, [r3, #0]
    8106:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    810a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810e:	781b      	ldrb	r3, [r3, #0]
    8110:	b2db      	uxtb	r3, r3
    8112:	3301      	adds	r3, #1
    8114:	b2da      	uxtb	r2, r3
    8116:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    811a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    811e:	701a      	strb	r2, [r3, #0]
    8120:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8128:	781b      	ldrb	r3, [r3, #0]
    812a:	b2db      	uxtb	r3, r3
    812c:	2bff      	cmp	r3, #255	; 0xff
    812e:	d105      	bne.n	813c <send_desired+0xe00>
    8130:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	2200      	movs	r2, #0
    813a:	701a      	strb	r2, [r3, #0]
    813c:	f248 0338 	movw	r3, #32824	; 0x8038
    8140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8144:	f248 0238 	movw	r2, #32824	; 0x8038
    8148:	f2c2 0200 	movt	r2, #8192	; 0x2000
    814c:	7812      	ldrb	r2, [r2, #0]
    814e:	b2d2      	uxtb	r2, r2
    8150:	f042 0201 	orr.w	r2, r2, #1
    8154:	b2d2      	uxtb	r2, r2
    8156:	701a      	strb	r2, [r3, #0]
    8158:	f248 0339 	movw	r3, #32825	; 0x8039
    815c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8160:	f248 0239 	movw	r2, #32825	; 0x8039
    8164:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8168:	7812      	ldrb	r2, [r2, #0]
    816a:	b2d2      	uxtb	r2, r2
    816c:	f042 0210 	orr.w	r2, r2, #16
    8170:	b2d2      	uxtb	r2, r2
    8172:	701a      	strb	r2, [r3, #0]
    8174:	e00b      	b.n	818e <send_desired+0xe52>
    8176:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    817a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817e:	781b      	ldrb	r3, [r3, #0]
    8180:	3301      	adds	r3, #1
    8182:	b2da      	uxtb	r2, r3
    8184:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    8188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818c:	701a      	strb	r2, [r3, #0]
}
    818e:	46bd      	mov	sp, r7
    8190:	f85d 7b04 	ldr.w	r7, [sp], #4
    8194:	4770      	bx	lr
    8196:	bf00      	nop
    8198:	2000013f 	.word	0x2000013f

0000819c <send_bat>:
void send_bat(void){  //2000ms
    819c:	b480      	push	{r7}
    819e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    81a0:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    81a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a8:	781a      	ldrb	r2, [r3, #0]
    81aa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    81ae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    81b2:	fba3 1302 	umull	r1, r3, r3, r2
    81b6:	0919      	lsrs	r1, r3, #4
    81b8:	460b      	mov	r3, r1
    81ba:	009b      	lsls	r3, r3, #2
    81bc:	440b      	add	r3, r1
    81be:	009b      	lsls	r3, r3, #2
    81c0:	1ad3      	subs	r3, r2, r3
    81c2:	b2db      	uxtb	r3, r3
    81c4:	2b08      	cmp	r3, #8
    81c6:	f040 839a 	bne.w	88fe <send_bat+0x762>
    81ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d2:	781a      	ldrb	r2, [r3, #0]
    81d4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    81d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	b2db      	uxtb	r3, r3
    81e0:	429a      	cmp	r2, r3
    81e2:	d313      	bcc.n	820c <send_bat+0x70>
    81e4:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    81e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ec:	781b      	ldrb	r3, [r3, #0]
    81ee:	b2db      	uxtb	r3, r3
    81f0:	461a      	mov	r2, r3
    81f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    81f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81fa:	781b      	ldrb	r3, [r3, #0]
    81fc:	1ad3      	subs	r3, r2, r3
    81fe:	33ff      	adds	r3, #255	; 0xff
    8200:	2b0c      	cmp	r3, #12
    8202:	bfd4      	ite	le
    8204:	2300      	movle	r3, #0
    8206:	2301      	movgt	r3, #1
    8208:	b2db      	uxtb	r3, r3
    820a:	e011      	b.n	8230 <send_bat+0x94>
    820c:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8214:	781b      	ldrb	r3, [r3, #0]
    8216:	b2db      	uxtb	r3, r3
    8218:	461a      	mov	r2, r3
    821a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    821e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8222:	781b      	ldrb	r3, [r3, #0]
    8224:	1ad3      	subs	r3, r2, r3
    8226:	2b0c      	cmp	r3, #12
    8228:	bfd4      	ite	le
    822a:	2300      	movle	r3, #0
    822c:	2301      	movgt	r3, #1
    822e:	b2db      	uxtb	r3, r3
    8230:	2b00      	cmp	r3, #0
    8232:	f000 8358 	beq.w	88e6 <send_bat+0x74a>
    8236:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    823a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823e:	781b      	ldrb	r3, [r3, #0]
    8240:	461a      	mov	r2, r3
    8242:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    824a:	2105      	movs	r1, #5
    824c:	5499      	strb	r1, [r3, r2]
    824e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	3301      	adds	r3, #1
    825a:	b2da      	uxtb	r2, r3
    825c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8264:	701a      	strb	r2, [r3, #0]
    8266:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    826a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826e:	781b      	ldrb	r3, [r3, #0]
    8270:	2bff      	cmp	r3, #255	; 0xff
    8272:	d105      	bne.n	8280 <send_bat+0xe4>
    8274:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    827c:	2200      	movs	r2, #0
    827e:	701a      	strb	r2, [r3, #0]
    8280:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	461a      	mov	r2, r3
    828c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8294:	210c      	movs	r1, #12
    8296:	5499      	strb	r1, [r3, r2]
    8298:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    829c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	3301      	adds	r3, #1
    82a4:	b2da      	uxtb	r2, r3
    82a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    82aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ae:	701a      	strb	r2, [r3, #0]
    82b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    82b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b8:	781b      	ldrb	r3, [r3, #0]
    82ba:	2bff      	cmp	r3, #255	; 0xff
    82bc:	d105      	bne.n	82ca <send_bat+0x12e>
    82be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    82c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c6:	2200      	movs	r2, #0
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    82ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d2:	220c      	movs	r2, #12
    82d4:	701a      	strb	r2, [r3, #0]
    82d6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    82da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82de:	220c      	movs	r2, #12
    82e0:	701a      	strb	r2, [r3, #0]
    82e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    82e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ea:	781b      	ldrb	r3, [r3, #0]
    82ec:	461a      	mov	r2, r3
    82ee:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
    82f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f6:	7819      	ldrb	r1, [r3, #0]
    82f8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    82fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8300:	5499      	strb	r1, [r3, r2]
    8302:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    830a:	781a      	ldrb	r2, [r3, #0]
    830c:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
    8310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8314:	781b      	ldrb	r3, [r3, #0]
    8316:	4413      	add	r3, r2
    8318:	b2da      	uxtb	r2, r3
    831a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    831e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8322:	701a      	strb	r2, [r3, #0]
    8324:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832c:	781a      	ldrb	r2, [r3, #0]
    832e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8336:	781b      	ldrb	r3, [r3, #0]
    8338:	4413      	add	r3, r2
    833a:	b2da      	uxtb	r2, r3
    833c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8344:	701a      	strb	r2, [r3, #0]
    8346:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    834a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834e:	781b      	ldrb	r3, [r3, #0]
    8350:	3301      	adds	r3, #1
    8352:	b2da      	uxtb	r2, r3
    8354:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	701a      	strb	r2, [r3, #0]
    835e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8366:	781b      	ldrb	r3, [r3, #0]
    8368:	2bff      	cmp	r3, #255	; 0xff
    836a:	d105      	bne.n	8378 <send_bat+0x1dc>
    836c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	2200      	movs	r2, #0
    8376:	701a      	strb	r2, [r3, #0]
    8378:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    837c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8380:	781b      	ldrb	r3, [r3, #0]
    8382:	461a      	mov	r2, r3
    8384:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    8388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838c:	7819      	ldrb	r1, [r3, #0]
    838e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8396:	5499      	strb	r1, [r3, r2]
    8398:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    839c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a0:	781a      	ldrb	r2, [r3, #0]
    83a2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    83a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83aa:	781b      	ldrb	r3, [r3, #0]
    83ac:	4413      	add	r3, r2
    83ae:	b2da      	uxtb	r2, r3
    83b0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    83b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b8:	701a      	strb	r2, [r3, #0]
    83ba:	f24a 53be 	movw	r3, #42430	; 0xa5be
    83be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c2:	781a      	ldrb	r2, [r3, #0]
    83c4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    83c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	4413      	add	r3, r2
    83d0:	b2da      	uxtb	r2, r3
    83d2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    83d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83da:	701a      	strb	r2, [r3, #0]
    83dc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	3301      	adds	r3, #1
    83e8:	b2da      	uxtb	r2, r3
    83ea:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f2:	701a      	strb	r2, [r3, #0]
    83f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    83f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fc:	781b      	ldrb	r3, [r3, #0]
    83fe:	2bff      	cmp	r3, #255	; 0xff
    8400:	d105      	bne.n	840e <send_bat+0x272>
    8402:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840a:	2200      	movs	r2, #0
    840c:	701a      	strb	r2, [r3, #0]
    840e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	461a      	mov	r2, r3
    841a:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    841e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8422:	7859      	ldrb	r1, [r3, #1]
    8424:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842c:	5499      	strb	r1, [r3, r2]
    842e:	4bd5      	ldr	r3, [pc, #852]	; (8784 <send_bat+0x5e8>)
    8430:	781a      	ldrb	r2, [r3, #0]
    8432:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	4413      	add	r3, r2
    843e:	b2da      	uxtb	r2, r3
    8440:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	781a      	ldrb	r2, [r3, #0]
    8454:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845c:	781b      	ldrb	r3, [r3, #0]
    845e:	4413      	add	r3, r2
    8460:	b2da      	uxtb	r2, r3
    8462:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	701a      	strb	r2, [r3, #0]
    846c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	3301      	adds	r3, #1
    8478:	b2da      	uxtb	r2, r3
    847a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    847e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8482:	701a      	strb	r2, [r3, #0]
    8484:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	2bff      	cmp	r3, #255	; 0xff
    8490:	d105      	bne.n	849e <send_bat+0x302>
    8492:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    849a:	2200      	movs	r2, #0
    849c:	701a      	strb	r2, [r3, #0]
    849e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    84a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a6:	781b      	ldrb	r3, [r3, #0]
    84a8:	461a      	mov	r2, r3
    84aa:	f24a 43a5 	movw	r3, #42149	; 0xa4a5
    84ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b2:	7819      	ldrb	r1, [r3, #0]
    84b4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    84b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84bc:	5499      	strb	r1, [r3, r2]
    84be:	f24a 43a5 	movw	r3, #42149	; 0xa4a5
    84c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c6:	781a      	ldrb	r2, [r3, #0]
    84c8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    84cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d0:	781b      	ldrb	r3, [r3, #0]
    84d2:	4413      	add	r3, r2
    84d4:	b2da      	uxtb	r2, r3
    84d6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    84da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84de:	701a      	strb	r2, [r3, #0]
    84e0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    84e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e8:	781a      	ldrb	r2, [r3, #0]
    84ea:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    84ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f2:	781b      	ldrb	r3, [r3, #0]
    84f4:	4413      	add	r3, r2
    84f6:	b2da      	uxtb	r2, r3
    84f8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    84fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8500:	701a      	strb	r2, [r3, #0]
    8502:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	3301      	adds	r3, #1
    850e:	b2da      	uxtb	r2, r3
    8510:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8518:	701a      	strb	r2, [r3, #0]
    851a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    851e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8522:	781b      	ldrb	r3, [r3, #0]
    8524:	2bff      	cmp	r3, #255	; 0xff
    8526:	d105      	bne.n	8534 <send_bat+0x398>
    8528:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    852c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8530:	2200      	movs	r2, #0
    8532:	701a      	strb	r2, [r3, #0]
    8534:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    853c:	781b      	ldrb	r3, [r3, #0]
    853e:	461a      	mov	r2, r3
    8540:	f64a 0326 	movw	r3, #43046	; 0xa826
    8544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8548:	7819      	ldrb	r1, [r3, #0]
    854a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    854e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8552:	5499      	strb	r1, [r3, r2]
    8554:	f64a 0326 	movw	r3, #43046	; 0xa826
    8558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    855c:	781a      	ldrb	r2, [r3, #0]
    855e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8566:	781b      	ldrb	r3, [r3, #0]
    8568:	4413      	add	r3, r2
    856a:	b2da      	uxtb	r2, r3
    856c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8574:	701a      	strb	r2, [r3, #0]
    8576:	f24a 53be 	movw	r3, #42430	; 0xa5be
    857a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857e:	781a      	ldrb	r2, [r3, #0]
    8580:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	4413      	add	r3, r2
    858c:	b2da      	uxtb	r2, r3
    858e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8596:	701a      	strb	r2, [r3, #0]
    8598:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    859c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	3301      	adds	r3, #1
    85a4:	b2da      	uxtb	r2, r3
    85a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ae:	701a      	strb	r2, [r3, #0]
    85b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	2bff      	cmp	r3, #255	; 0xff
    85bc:	d105      	bne.n	85ca <send_bat+0x42e>
    85be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c6:	2200      	movs	r2, #0
    85c8:	701a      	strb	r2, [r3, #0]
    85ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    85ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d2:	781b      	ldrb	r3, [r3, #0]
    85d4:	461a      	mov	r2, r3
    85d6:	f64a 0326 	movw	r3, #43046	; 0xa826
    85da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85de:	7859      	ldrb	r1, [r3, #1]
    85e0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    85e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e8:	5499      	strb	r1, [r3, r2]
    85ea:	4b67      	ldr	r3, [pc, #412]	; (8788 <send_bat+0x5ec>)
    85ec:	781a      	ldrb	r2, [r3, #0]
    85ee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    85f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f6:	781b      	ldrb	r3, [r3, #0]
    85f8:	4413      	add	r3, r2
    85fa:	b2da      	uxtb	r2, r3
    85fc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8604:	701a      	strb	r2, [r3, #0]
    8606:	f24a 53be 	movw	r3, #42430	; 0xa5be
    860a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    860e:	781a      	ldrb	r2, [r3, #0]
    8610:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	4413      	add	r3, r2
    861c:	b2da      	uxtb	r2, r3
    861e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8626:	701a      	strb	r2, [r3, #0]
    8628:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    862c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	3301      	adds	r3, #1
    8634:	b2da      	uxtb	r2, r3
    8636:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    863a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    863e:	701a      	strb	r2, [r3, #0]
    8640:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8648:	781b      	ldrb	r3, [r3, #0]
    864a:	2bff      	cmp	r3, #255	; 0xff
    864c:	d105      	bne.n	865a <send_bat+0x4be>
    864e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8656:	2200      	movs	r2, #0
    8658:	701a      	strb	r2, [r3, #0]
    865a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    865e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	461a      	mov	r2, r3
    8666:	f64a 0324 	movw	r3, #43044	; 0xa824
    866a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    866e:	7819      	ldrb	r1, [r3, #0]
    8670:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8678:	5499      	strb	r1, [r3, r2]
    867a:	f64a 0324 	movw	r3, #43044	; 0xa824
    867e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8682:	781a      	ldrb	r2, [r3, #0]
    8684:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	4413      	add	r3, r2
    8690:	b2da      	uxtb	r2, r3
    8692:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    869a:	701a      	strb	r2, [r3, #0]
    869c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    86a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a4:	781a      	ldrb	r2, [r3, #0]
    86a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    86aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	4413      	add	r3, r2
    86b2:	b2da      	uxtb	r2, r3
    86b4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    86b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86bc:	701a      	strb	r2, [r3, #0]
    86be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	3301      	adds	r3, #1
    86ca:	b2da      	uxtb	r2, r3
    86cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	2bff      	cmp	r3, #255	; 0xff
    86e2:	d105      	bne.n	86f0 <send_bat+0x554>
    86e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ec:	2200      	movs	r2, #0
    86ee:	701a      	strb	r2, [r3, #0]
    86f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    86f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	461a      	mov	r2, r3
    86fc:	f64a 0324 	movw	r3, #43044	; 0xa824
    8700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8704:	7859      	ldrb	r1, [r3, #1]
    8706:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    870a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870e:	5499      	strb	r1, [r3, r2]
    8710:	4b1e      	ldr	r3, [pc, #120]	; (878c <send_bat+0x5f0>)
    8712:	781a      	ldrb	r2, [r3, #0]
    8714:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    871c:	781b      	ldrb	r3, [r3, #0]
    871e:	4413      	add	r3, r2
    8720:	b2da      	uxtb	r2, r3
    8722:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    872a:	701a      	strb	r2, [r3, #0]
    872c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8734:	781a      	ldrb	r2, [r3, #0]
    8736:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    873a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	4413      	add	r3, r2
    8742:	b2da      	uxtb	r2, r3
    8744:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    874c:	701a      	strb	r2, [r3, #0]
    874e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8756:	781b      	ldrb	r3, [r3, #0]
    8758:	3301      	adds	r3, #1
    875a:	b2da      	uxtb	r2, r3
    875c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8764:	701a      	strb	r2, [r3, #0]
    8766:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    876a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2bff      	cmp	r3, #255	; 0xff
    8772:	d10d      	bne.n	8790 <send_bat+0x5f4>
    8774:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877c:	2200      	movs	r2, #0
    877e:	701a      	strb	r2, [r3, #0]
    8780:	e006      	b.n	8790 <send_bat+0x5f4>
    8782:	bf00      	nop
    8784:	2000aa9d 	.word	0x2000aa9d
    8788:	2000a827 	.word	0x2000a827
    878c:	2000a825 	.word	0x2000a825
    8790:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8798:	781b      	ldrb	r3, [r3, #0]
    879a:	461a      	mov	r2, r3
    879c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    87a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a4:	7819      	ldrb	r1, [r3, #0]
    87a6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    87aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ae:	5499      	strb	r1, [r3, r2]
    87b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b8:	781b      	ldrb	r3, [r3, #0]
    87ba:	3301      	adds	r3, #1
    87bc:	b2da      	uxtb	r2, r3
    87be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c6:	701a      	strb	r2, [r3, #0]
    87c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d0:	781b      	ldrb	r3, [r3, #0]
    87d2:	2bff      	cmp	r3, #255	; 0xff
    87d4:	d105      	bne.n	87e2 <send_bat+0x646>
    87d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87de:	2200      	movs	r2, #0
    87e0:	701a      	strb	r2, [r3, #0]
    87e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    87e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	461a      	mov	r2, r3
    87ee:	f24a 53be 	movw	r3, #42430	; 0xa5be
    87f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f6:	7819      	ldrb	r1, [r3, #0]
    87f8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    87fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8800:	5499      	strb	r1, [r3, r2]
    8802:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880a:	781b      	ldrb	r3, [r3, #0]
    880c:	3301      	adds	r3, #1
    880e:	b2da      	uxtb	r2, r3
    8810:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8818:	701a      	strb	r2, [r3, #0]
    881a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    881e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	2bff      	cmp	r3, #255	; 0xff
    8826:	d105      	bne.n	8834 <send_bat+0x698>
    8828:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    882c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8830:	2200      	movs	r2, #0
    8832:	701a      	strb	r2, [r3, #0]
    8834:	f248 0339 	movw	r3, #32825	; 0x8039
    8838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	b2db      	uxtb	r3, r3
    8840:	f003 0310 	and.w	r3, r3, #16
    8844:	2b00      	cmp	r3, #0
    8846:	d15a      	bne.n	88fe <send_bat+0x762>
    8848:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    884c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8850:	781b      	ldrb	r3, [r3, #0]
    8852:	b2db      	uxtb	r3, r3
    8854:	461a      	mov	r2, r3
    8856:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    885a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    885e:	5c9a      	ldrb	r2, [r3, r2]
    8860:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    8864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8868:	701a      	strb	r2, [r3, #0]
    886a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    886e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8872:	2200      	movs	r2, #0
    8874:	701a      	strb	r2, [r3, #0]
    8876:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    887a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887e:	781b      	ldrb	r3, [r3, #0]
    8880:	b2db      	uxtb	r3, r3
    8882:	3301      	adds	r3, #1
    8884:	b2da      	uxtb	r2, r3
    8886:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    888a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    888e:	701a      	strb	r2, [r3, #0]
    8890:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8898:	781b      	ldrb	r3, [r3, #0]
    889a:	b2db      	uxtb	r3, r3
    889c:	2bff      	cmp	r3, #255	; 0xff
    889e:	d105      	bne.n	88ac <send_bat+0x710>
    88a0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    88a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a8:	2200      	movs	r2, #0
    88aa:	701a      	strb	r2, [r3, #0]
    88ac:	f248 0338 	movw	r3, #32824	; 0x8038
    88b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b4:	f248 0238 	movw	r2, #32824	; 0x8038
    88b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    88bc:	7812      	ldrb	r2, [r2, #0]
    88be:	b2d2      	uxtb	r2, r2
    88c0:	f042 0201 	orr.w	r2, r2, #1
    88c4:	b2d2      	uxtb	r2, r2
    88c6:	701a      	strb	r2, [r3, #0]
    88c8:	f248 0339 	movw	r3, #32825	; 0x8039
    88cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d0:	f248 0239 	movw	r2, #32825	; 0x8039
    88d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    88d8:	7812      	ldrb	r2, [r2, #0]
    88da:	b2d2      	uxtb	r2, r2
    88dc:	f042 0210 	orr.w	r2, r2, #16
    88e0:	b2d2      	uxtb	r2, r2
    88e2:	701a      	strb	r2, [r3, #0]
    88e4:	e00b      	b.n	88fe <send_bat+0x762>
    88e6:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    88ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	3301      	adds	r3, #1
    88f2:	b2da      	uxtb	r2, r3
    88f4:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    88f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fc:	701a      	strb	r2, [r3, #0]
}
    88fe:	46bd      	mov	sp, r7
    8900:	f85d 7b04 	ldr.w	r7, [sp], #4
    8904:	4770      	bx	lr
    8906:	bf00      	nop

00008908 <send_climb>:
void send_climb(void){  //2000ms
    8908:	b480      	push	{r7}
    890a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    890c:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    8910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8914:	781a      	ldrb	r2, [r3, #0]
    8916:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    891a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    891e:	fba3 1302 	umull	r1, r3, r3, r2
    8922:	0919      	lsrs	r1, r3, #4
    8924:	460b      	mov	r3, r1
    8926:	009b      	lsls	r3, r3, #2
    8928:	440b      	add	r3, r1
    892a:	009b      	lsls	r3, r3, #2
    892c:	1ad3      	subs	r3, r2, r3
    892e:	b2db      	uxtb	r3, r3
    8930:	2b12      	cmp	r3, #18
    8932:	f040 8554 	bne.w	93de <send_climb+0xad6>
    8936:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    893a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    893e:	781a      	ldrb	r2, [r3, #0]
    8940:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8948:	781b      	ldrb	r3, [r3, #0]
    894a:	b2db      	uxtb	r3, r3
    894c:	429a      	cmp	r2, r3
    894e:	d313      	bcc.n	8978 <send_climb+0x70>
    8950:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    8954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	b2db      	uxtb	r3, r3
    895c:	461a      	mov	r2, r3
    895e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	1ad3      	subs	r3, r2, r3
    896a:	33ff      	adds	r3, #255	; 0xff
    896c:	2b12      	cmp	r3, #18
    896e:	bfd4      	ite	le
    8970:	2300      	movle	r3, #0
    8972:	2301      	movgt	r3, #1
    8974:	b2db      	uxtb	r3, r3
    8976:	e011      	b.n	899c <send_climb+0x94>
    8978:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    897c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	b2db      	uxtb	r3, r3
    8984:	461a      	mov	r2, r3
    8986:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    898a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898e:	781b      	ldrb	r3, [r3, #0]
    8990:	1ad3      	subs	r3, r2, r3
    8992:	2b12      	cmp	r3, #18
    8994:	bfd4      	ite	le
    8996:	2300      	movle	r3, #0
    8998:	2301      	movgt	r3, #1
    899a:	b2db      	uxtb	r3, r3
    899c:	2b00      	cmp	r3, #0
    899e:	f000 8512 	beq.w	93c6 <send_climb+0xabe>
    89a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	461a      	mov	r2, r3
    89ae:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    89b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b6:	2105      	movs	r1, #5
    89b8:	5499      	strb	r1, [r3, r2]
    89ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c2:	781b      	ldrb	r3, [r3, #0]
    89c4:	3301      	adds	r3, #1
    89c6:	b2da      	uxtb	r2, r3
    89c8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d0:	701a      	strb	r2, [r3, #0]
    89d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	2bff      	cmp	r3, #255	; 0xff
    89de:	d105      	bne.n	89ec <send_climb+0xe4>
    89e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e8:	2200      	movs	r2, #0
    89ea:	701a      	strb	r2, [r3, #0]
    89ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    89f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	461a      	mov	r2, r3
    89f8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    89fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a00:	210e      	movs	r1, #14
    8a02:	5499      	strb	r1, [r3, r2]
    8a04:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	3301      	adds	r3, #1
    8a10:	b2da      	uxtb	r2, r3
    8a12:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a1a:	701a      	strb	r2, [r3, #0]
    8a1c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	2bff      	cmp	r3, #255	; 0xff
    8a28:	d105      	bne.n	8a36 <send_climb+0x12e>
    8a2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a32:	2200      	movs	r2, #0
    8a34:	701a      	strb	r2, [r3, #0]
    8a36:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a3e:	220e      	movs	r2, #14
    8a40:	701a      	strb	r2, [r3, #0]
    8a42:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a4a:	220e      	movs	r2, #14
    8a4c:	701a      	strb	r2, [r3, #0]
    8a4e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	461a      	mov	r2, r3
    8a5a:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    8a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a62:	7819      	ldrb	r1, [r3, #0]
    8a64:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a6c:	5499      	strb	r1, [r3, r2]
    8a6e:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    8a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a76:	781a      	ldrb	r2, [r3, #0]
    8a78:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a80:	781b      	ldrb	r3, [r3, #0]
    8a82:	4413      	add	r3, r2
    8a84:	b2da      	uxtb	r2, r3
    8a86:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a8e:	701a      	strb	r2, [r3, #0]
    8a90:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a98:	781a      	ldrb	r2, [r3, #0]
    8a9a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa2:	781b      	ldrb	r3, [r3, #0]
    8aa4:	4413      	add	r3, r2
    8aa6:	b2da      	uxtb	r2, r3
    8aa8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab0:	701a      	strb	r2, [r3, #0]
    8ab2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	3301      	adds	r3, #1
    8abe:	b2da      	uxtb	r2, r3
    8ac0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac8:	701a      	strb	r2, [r3, #0]
    8aca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	2bff      	cmp	r3, #255	; 0xff
    8ad6:	d105      	bne.n	8ae4 <send_climb+0x1dc>
    8ad8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae0:	2200      	movs	r2, #0
    8ae2:	701a      	strb	r2, [r3, #0]
    8ae4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aec:	781b      	ldrb	r3, [r3, #0]
    8aee:	461a      	mov	r2, r3
    8af0:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    8af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af8:	7859      	ldrb	r1, [r3, #1]
    8afa:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b02:	5499      	strb	r1, [r3, r2]
    8b04:	4bd3      	ldr	r3, [pc, #844]	; (8e54 <send_climb+0x54c>)
    8b06:	781a      	ldrb	r2, [r3, #0]
    8b08:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b10:	781b      	ldrb	r3, [r3, #0]
    8b12:	4413      	add	r3, r2
    8b14:	b2da      	uxtb	r2, r3
    8b16:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b1e:	701a      	strb	r2, [r3, #0]
    8b20:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b28:	781a      	ldrb	r2, [r3, #0]
    8b2a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b32:	781b      	ldrb	r3, [r3, #0]
    8b34:	4413      	add	r3, r2
    8b36:	b2da      	uxtb	r2, r3
    8b38:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b40:	701a      	strb	r2, [r3, #0]
    8b42:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b4a:	781b      	ldrb	r3, [r3, #0]
    8b4c:	3301      	adds	r3, #1
    8b4e:	b2da      	uxtb	r2, r3
    8b50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b58:	701a      	strb	r2, [r3, #0]
    8b5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	2bff      	cmp	r3, #255	; 0xff
    8b66:	d105      	bne.n	8b74 <send_climb+0x26c>
    8b68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b70:	2200      	movs	r2, #0
    8b72:	701a      	strb	r2, [r3, #0]
    8b74:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	461a      	mov	r2, r3
    8b80:	f64a 0300 	movw	r3, #43008	; 0xa800
    8b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b88:	7819      	ldrb	r1, [r3, #0]
    8b8a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b92:	5499      	strb	r1, [r3, r2]
    8b94:	f64a 0300 	movw	r3, #43008	; 0xa800
    8b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9c:	781a      	ldrb	r2, [r3, #0]
    8b9e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba6:	781b      	ldrb	r3, [r3, #0]
    8ba8:	4413      	add	r3, r2
    8baa:	b2da      	uxtb	r2, r3
    8bac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb4:	701a      	strb	r2, [r3, #0]
    8bb6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bbe:	781a      	ldrb	r2, [r3, #0]
    8bc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc8:	781b      	ldrb	r3, [r3, #0]
    8bca:	4413      	add	r3, r2
    8bcc:	b2da      	uxtb	r2, r3
    8bce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd6:	701a      	strb	r2, [r3, #0]
    8bd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be0:	781b      	ldrb	r3, [r3, #0]
    8be2:	3301      	adds	r3, #1
    8be4:	b2da      	uxtb	r2, r3
    8be6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bee:	701a      	strb	r2, [r3, #0]
    8bf0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	2bff      	cmp	r3, #255	; 0xff
    8bfc:	d105      	bne.n	8c0a <send_climb+0x302>
    8bfe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c06:	2200      	movs	r2, #0
    8c08:	701a      	strb	r2, [r3, #0]
    8c0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c12:	781b      	ldrb	r3, [r3, #0]
    8c14:	461a      	mov	r2, r3
    8c16:	f64a 0300 	movw	r3, #43008	; 0xa800
    8c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c1e:	7859      	ldrb	r1, [r3, #1]
    8c20:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c28:	5499      	strb	r1, [r3, r2]
    8c2a:	4b8b      	ldr	r3, [pc, #556]	; (8e58 <send_climb+0x550>)
    8c2c:	781a      	ldrb	r2, [r3, #0]
    8c2e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c36:	781b      	ldrb	r3, [r3, #0]
    8c38:	4413      	add	r3, r2
    8c3a:	b2da      	uxtb	r2, r3
    8c3c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c44:	701a      	strb	r2, [r3, #0]
    8c46:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c4e:	781a      	ldrb	r2, [r3, #0]
    8c50:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	4413      	add	r3, r2
    8c5c:	b2da      	uxtb	r2, r3
    8c5e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c66:	701a      	strb	r2, [r3, #0]
    8c68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c70:	781b      	ldrb	r3, [r3, #0]
    8c72:	3301      	adds	r3, #1
    8c74:	b2da      	uxtb	r2, r3
    8c76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c7e:	701a      	strb	r2, [r3, #0]
    8c80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	2bff      	cmp	r3, #255	; 0xff
    8c8c:	d105      	bne.n	8c9a <send_climb+0x392>
    8c8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c96:	2200      	movs	r2, #0
    8c98:	701a      	strb	r2, [r3, #0]
    8c9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	461a      	mov	r2, r3
    8ca6:	f64a 0300 	movw	r3, #43008	; 0xa800
    8caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cae:	7899      	ldrb	r1, [r3, #2]
    8cb0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb8:	5499      	strb	r1, [r3, r2]
    8cba:	4b68      	ldr	r3, [pc, #416]	; (8e5c <send_climb+0x554>)
    8cbc:	781a      	ldrb	r2, [r3, #0]
    8cbe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	4413      	add	r3, r2
    8cca:	b2da      	uxtb	r2, r3
    8ccc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd4:	701a      	strb	r2, [r3, #0]
    8cd6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cde:	781a      	ldrb	r2, [r3, #0]
    8ce0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	4413      	add	r3, r2
    8cec:	b2da      	uxtb	r2, r3
    8cee:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf6:	701a      	strb	r2, [r3, #0]
    8cf8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d00:	781b      	ldrb	r3, [r3, #0]
    8d02:	3301      	adds	r3, #1
    8d04:	b2da      	uxtb	r2, r3
    8d06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0e:	701a      	strb	r2, [r3, #0]
    8d10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d18:	781b      	ldrb	r3, [r3, #0]
    8d1a:	2bff      	cmp	r3, #255	; 0xff
    8d1c:	d105      	bne.n	8d2a <send_climb+0x422>
    8d1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d26:	2200      	movs	r2, #0
    8d28:	701a      	strb	r2, [r3, #0]
    8d2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d32:	781b      	ldrb	r3, [r3, #0]
    8d34:	461a      	mov	r2, r3
    8d36:	f64a 0300 	movw	r3, #43008	; 0xa800
    8d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3e:	78d9      	ldrb	r1, [r3, #3]
    8d40:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d48:	5499      	strb	r1, [r3, r2]
    8d4a:	4b45      	ldr	r3, [pc, #276]	; (8e60 <send_climb+0x558>)
    8d4c:	781a      	ldrb	r2, [r3, #0]
    8d4e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d56:	781b      	ldrb	r3, [r3, #0]
    8d58:	4413      	add	r3, r2
    8d5a:	b2da      	uxtb	r2, r3
    8d5c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d64:	701a      	strb	r2, [r3, #0]
    8d66:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6e:	781a      	ldrb	r2, [r3, #0]
    8d70:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	4413      	add	r3, r2
    8d7c:	b2da      	uxtb	r2, r3
    8d7e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d86:	701a      	strb	r2, [r3, #0]
    8d88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d90:	781b      	ldrb	r3, [r3, #0]
    8d92:	3301      	adds	r3, #1
    8d94:	b2da      	uxtb	r2, r3
    8d96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9e:	701a      	strb	r2, [r3, #0]
    8da0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	2bff      	cmp	r3, #255	; 0xff
    8dac:	d105      	bne.n	8dba <send_climb+0x4b2>
    8dae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db6:	2200      	movs	r2, #0
    8db8:	701a      	strb	r2, [r3, #0]
    8dba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc2:	781b      	ldrb	r3, [r3, #0]
    8dc4:	461a      	mov	r2, r3
    8dc6:	f64a 0308 	movw	r3, #43016	; 0xa808
    8dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dce:	7819      	ldrb	r1, [r3, #0]
    8dd0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd8:	5499      	strb	r1, [r3, r2]
    8dda:	f64a 0308 	movw	r3, #43016	; 0xa808
    8dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de2:	781a      	ldrb	r2, [r3, #0]
    8de4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	4413      	add	r3, r2
    8df0:	b2da      	uxtb	r2, r3
    8df2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfa:	701a      	strb	r2, [r3, #0]
    8dfc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e04:	781a      	ldrb	r2, [r3, #0]
    8e06:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	4413      	add	r3, r2
    8e12:	b2da      	uxtb	r2, r3
    8e14:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1c:	701a      	strb	r2, [r3, #0]
    8e1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	3301      	adds	r3, #1
    8e2a:	b2da      	uxtb	r2, r3
    8e2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e34:	701a      	strb	r2, [r3, #0]
    8e36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	2bff      	cmp	r3, #255	; 0xff
    8e42:	d10f      	bne.n	8e64 <send_climb+0x55c>
    8e44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4c:	2200      	movs	r2, #0
    8e4e:	701a      	strb	r2, [r3, #0]
    8e50:	e008      	b.n	8e64 <send_climb+0x55c>
    8e52:	bf00      	nop
    8e54:	2000a7ed 	.word	0x2000a7ed
    8e58:	2000a801 	.word	0x2000a801
    8e5c:	2000a802 	.word	0x2000a802
    8e60:	2000a803 	.word	0x2000a803
    8e64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	461a      	mov	r2, r3
    8e70:	f64a 0308 	movw	r3, #43016	; 0xa808
    8e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e78:	7859      	ldrb	r1, [r3, #1]
    8e7a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e82:	5499      	strb	r1, [r3, r2]
    8e84:	4bd1      	ldr	r3, [pc, #836]	; (91cc <send_climb+0x8c4>)
    8e86:	781a      	ldrb	r2, [r3, #0]
    8e88:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e90:	781b      	ldrb	r3, [r3, #0]
    8e92:	4413      	add	r3, r2
    8e94:	b2da      	uxtb	r2, r3
    8e96:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e9e:	701a      	strb	r2, [r3, #0]
    8ea0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea8:	781a      	ldrb	r2, [r3, #0]
    8eaa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb2:	781b      	ldrb	r3, [r3, #0]
    8eb4:	4413      	add	r3, r2
    8eb6:	b2da      	uxtb	r2, r3
    8eb8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec0:	701a      	strb	r2, [r3, #0]
    8ec2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eca:	781b      	ldrb	r3, [r3, #0]
    8ecc:	3301      	adds	r3, #1
    8ece:	b2da      	uxtb	r2, r3
    8ed0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed8:	701a      	strb	r2, [r3, #0]
    8eda:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee2:	781b      	ldrb	r3, [r3, #0]
    8ee4:	2bff      	cmp	r3, #255	; 0xff
    8ee6:	d105      	bne.n	8ef4 <send_climb+0x5ec>
    8ee8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef0:	2200      	movs	r2, #0
    8ef2:	701a      	strb	r2, [r3, #0]
    8ef4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8efc:	781b      	ldrb	r3, [r3, #0]
    8efe:	461a      	mov	r2, r3
    8f00:	f64a 0308 	movw	r3, #43016	; 0xa808
    8f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f08:	7899      	ldrb	r1, [r3, #2]
    8f0a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f12:	5499      	strb	r1, [r3, r2]
    8f14:	4bae      	ldr	r3, [pc, #696]	; (91d0 <send_climb+0x8c8>)
    8f16:	781a      	ldrb	r2, [r3, #0]
    8f18:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f20:	781b      	ldrb	r3, [r3, #0]
    8f22:	4413      	add	r3, r2
    8f24:	b2da      	uxtb	r2, r3
    8f26:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f2e:	701a      	strb	r2, [r3, #0]
    8f30:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f38:	781a      	ldrb	r2, [r3, #0]
    8f3a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f42:	781b      	ldrb	r3, [r3, #0]
    8f44:	4413      	add	r3, r2
    8f46:	b2da      	uxtb	r2, r3
    8f48:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f50:	701a      	strb	r2, [r3, #0]
    8f52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	3301      	adds	r3, #1
    8f5e:	b2da      	uxtb	r2, r3
    8f60:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f68:	701a      	strb	r2, [r3, #0]
    8f6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f72:	781b      	ldrb	r3, [r3, #0]
    8f74:	2bff      	cmp	r3, #255	; 0xff
    8f76:	d105      	bne.n	8f84 <send_climb+0x67c>
    8f78:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f80:	2200      	movs	r2, #0
    8f82:	701a      	strb	r2, [r3, #0]
    8f84:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f8c:	781b      	ldrb	r3, [r3, #0]
    8f8e:	461a      	mov	r2, r3
    8f90:	f64a 0308 	movw	r3, #43016	; 0xa808
    8f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f98:	78d9      	ldrb	r1, [r3, #3]
    8f9a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    8f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa2:	5499      	strb	r1, [r3, r2]
    8fa4:	4b8b      	ldr	r3, [pc, #556]	; (91d4 <send_climb+0x8cc>)
    8fa6:	781a      	ldrb	r2, [r3, #0]
    8fa8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb0:	781b      	ldrb	r3, [r3, #0]
    8fb2:	4413      	add	r3, r2
    8fb4:	b2da      	uxtb	r2, r3
    8fb6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fbe:	701a      	strb	r2, [r3, #0]
    8fc0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc8:	781a      	ldrb	r2, [r3, #0]
    8fca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    8fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd2:	781b      	ldrb	r3, [r3, #0]
    8fd4:	4413      	add	r3, r2
    8fd6:	b2da      	uxtb	r2, r3
    8fd8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    8fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe0:	701a      	strb	r2, [r3, #0]
    8fe2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fea:	781b      	ldrb	r3, [r3, #0]
    8fec:	3301      	adds	r3, #1
    8fee:	b2da      	uxtb	r2, r3
    8ff0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff8:	701a      	strb	r2, [r3, #0]
    8ffa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    8ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9002:	781b      	ldrb	r3, [r3, #0]
    9004:	2bff      	cmp	r3, #255	; 0xff
    9006:	d105      	bne.n	9014 <send_climb+0x70c>
    9008:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    900c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9010:	2200      	movs	r2, #0
    9012:	701a      	strb	r2, [r3, #0]
    9014:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	461a      	mov	r2, r3
    9020:	f643 1340 	movw	r3, #14656	; 0x3940
    9024:	f2c0 0301 	movt	r3, #1
    9028:	7819      	ldrb	r1, [r3, #0]
    902a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    902e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9032:	5499      	strb	r1, [r3, r2]
    9034:	f643 1340 	movw	r3, #14656	; 0x3940
    9038:	f2c0 0301 	movt	r3, #1
    903c:	781a      	ldrb	r2, [r3, #0]
    903e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9046:	781b      	ldrb	r3, [r3, #0]
    9048:	4413      	add	r3, r2
    904a:	b2da      	uxtb	r2, r3
    904c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9054:	701a      	strb	r2, [r3, #0]
    9056:	f24a 53be 	movw	r3, #42430	; 0xa5be
    905a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    905e:	781a      	ldrb	r2, [r3, #0]
    9060:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9068:	781b      	ldrb	r3, [r3, #0]
    906a:	4413      	add	r3, r2
    906c:	b2da      	uxtb	r2, r3
    906e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9076:	701a      	strb	r2, [r3, #0]
    9078:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    907c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9080:	781b      	ldrb	r3, [r3, #0]
    9082:	3301      	adds	r3, #1
    9084:	b2da      	uxtb	r2, r3
    9086:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    908a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    908e:	701a      	strb	r2, [r3, #0]
    9090:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9098:	781b      	ldrb	r3, [r3, #0]
    909a:	2bff      	cmp	r3, #255	; 0xff
    909c:	d105      	bne.n	90aa <send_climb+0x7a2>
    909e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a6:	2200      	movs	r2, #0
    90a8:	701a      	strb	r2, [r3, #0]
    90aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    90ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b2:	781b      	ldrb	r3, [r3, #0]
    90b4:	461a      	mov	r2, r3
    90b6:	f643 1340 	movw	r3, #14656	; 0x3940
    90ba:	f2c0 0301 	movt	r3, #1
    90be:	7859      	ldrb	r1, [r3, #1]
    90c0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    90c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c8:	5499      	strb	r1, [r3, r2]
    90ca:	4b43      	ldr	r3, [pc, #268]	; (91d8 <send_climb+0x8d0>)
    90cc:	781a      	ldrb	r2, [r3, #0]
    90ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    90d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	4413      	add	r3, r2
    90da:	b2da      	uxtb	r2, r3
    90dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    90e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e4:	701a      	strb	r2, [r3, #0]
    90e6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    90ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ee:	781a      	ldrb	r2, [r3, #0]
    90f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    90f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f8:	781b      	ldrb	r3, [r3, #0]
    90fa:	4413      	add	r3, r2
    90fc:	b2da      	uxtb	r2, r3
    90fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9106:	701a      	strb	r2, [r3, #0]
    9108:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    910c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9110:	781b      	ldrb	r3, [r3, #0]
    9112:	3301      	adds	r3, #1
    9114:	b2da      	uxtb	r2, r3
    9116:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    911a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    911e:	701a      	strb	r2, [r3, #0]
    9120:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	2bff      	cmp	r3, #255	; 0xff
    912c:	d105      	bne.n	913a <send_climb+0x832>
    912e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9136:	2200      	movs	r2, #0
    9138:	701a      	strb	r2, [r3, #0]
    913a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    913e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9142:	781b      	ldrb	r3, [r3, #0]
    9144:	461a      	mov	r2, r3
    9146:	f643 1340 	movw	r3, #14656	; 0x3940
    914a:	f2c0 0301 	movt	r3, #1
    914e:	7899      	ldrb	r1, [r3, #2]
    9150:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9158:	5499      	strb	r1, [r3, r2]
    915a:	4b20      	ldr	r3, [pc, #128]	; (91dc <send_climb+0x8d4>)
    915c:	781a      	ldrb	r2, [r3, #0]
    915e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9166:	781b      	ldrb	r3, [r3, #0]
    9168:	4413      	add	r3, r2
    916a:	b2da      	uxtb	r2, r3
    916c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9174:	701a      	strb	r2, [r3, #0]
    9176:	f24a 53be 	movw	r3, #42430	; 0xa5be
    917a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    917e:	781a      	ldrb	r2, [r3, #0]
    9180:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9188:	781b      	ldrb	r3, [r3, #0]
    918a:	4413      	add	r3, r2
    918c:	b2da      	uxtb	r2, r3
    918e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9196:	701a      	strb	r2, [r3, #0]
    9198:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    919c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	3301      	adds	r3, #1
    91a4:	b2da      	uxtb	r2, r3
    91a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    91aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ae:	701a      	strb	r2, [r3, #0]
    91b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    91b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b8:	781b      	ldrb	r3, [r3, #0]
    91ba:	2bff      	cmp	r3, #255	; 0xff
    91bc:	d110      	bne.n	91e0 <send_climb+0x8d8>
    91be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    91c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c6:	2200      	movs	r2, #0
    91c8:	701a      	strb	r2, [r3, #0]
    91ca:	e009      	b.n	91e0 <send_climb+0x8d8>
    91cc:	2000a809 	.word	0x2000a809
    91d0:	2000a80a 	.word	0x2000a80a
    91d4:	2000a80b 	.word	0x2000a80b
    91d8:	00013941 	.word	0x00013941
    91dc:	00013942 	.word	0x00013942
    91e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    91e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e8:	781b      	ldrb	r3, [r3, #0]
    91ea:	461a      	mov	r2, r3
    91ec:	f643 1340 	movw	r3, #14656	; 0x3940
    91f0:	f2c0 0301 	movt	r3, #1
    91f4:	78d9      	ldrb	r1, [r3, #3]
    91f6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    91fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fe:	5499      	strb	r1, [r3, r2]
    9200:	4b79      	ldr	r3, [pc, #484]	; (93e8 <send_climb+0xae0>)
    9202:	781a      	ldrb	r2, [r3, #0]
    9204:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	4413      	add	r3, r2
    9210:	b2da      	uxtb	r2, r3
    9212:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    921a:	701a      	strb	r2, [r3, #0]
    921c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9224:	781a      	ldrb	r2, [r3, #0]
    9226:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    922a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    922e:	781b      	ldrb	r3, [r3, #0]
    9230:	4413      	add	r3, r2
    9232:	b2da      	uxtb	r2, r3
    9234:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    923c:	701a      	strb	r2, [r3, #0]
    923e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	3301      	adds	r3, #1
    924a:	b2da      	uxtb	r2, r3
    924c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9254:	701a      	strb	r2, [r3, #0]
    9256:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    925a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    925e:	781b      	ldrb	r3, [r3, #0]
    9260:	2bff      	cmp	r3, #255	; 0xff
    9262:	d105      	bne.n	9270 <send_climb+0x968>
    9264:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926c:	2200      	movs	r2, #0
    926e:	701a      	strb	r2, [r3, #0]
    9270:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	461a      	mov	r2, r3
    927c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9284:	7819      	ldrb	r1, [r3, #0]
    9286:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    928a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928e:	5499      	strb	r1, [r3, r2]
    9290:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	3301      	adds	r3, #1
    929c:	b2da      	uxtb	r2, r3
    929e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a6:	701a      	strb	r2, [r3, #0]
    92a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	2bff      	cmp	r3, #255	; 0xff
    92b4:	d105      	bne.n	92c2 <send_climb+0x9ba>
    92b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92be:	2200      	movs	r2, #0
    92c0:	701a      	strb	r2, [r3, #0]
    92c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	461a      	mov	r2, r3
    92ce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    92d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d6:	7819      	ldrb	r1, [r3, #0]
    92d8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	5499      	strb	r1, [r3, r2]
    92e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ea:	781b      	ldrb	r3, [r3, #0]
    92ec:	3301      	adds	r3, #1
    92ee:	b2da      	uxtb	r2, r3
    92f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f8:	701a      	strb	r2, [r3, #0]
    92fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    92fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9302:	781b      	ldrb	r3, [r3, #0]
    9304:	2bff      	cmp	r3, #255	; 0xff
    9306:	d105      	bne.n	9314 <send_climb+0xa0c>
    9308:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    930c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9310:	2200      	movs	r2, #0
    9312:	701a      	strb	r2, [r3, #0]
    9314:	f248 0339 	movw	r3, #32825	; 0x8039
    9318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931c:	781b      	ldrb	r3, [r3, #0]
    931e:	b2db      	uxtb	r3, r3
    9320:	f003 0310 	and.w	r3, r3, #16
    9324:	2b00      	cmp	r3, #0
    9326:	d15a      	bne.n	93de <send_climb+0xad6>
    9328:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    932c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9330:	781b      	ldrb	r3, [r3, #0]
    9332:	b2db      	uxtb	r3, r3
    9334:	461a      	mov	r2, r3
    9336:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    933a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    933e:	5c9a      	ldrb	r2, [r3, r2]
    9340:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    9344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9348:	701a      	strb	r2, [r3, #0]
    934a:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    934e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9352:	2200      	movs	r2, #0
    9354:	701a      	strb	r2, [r3, #0]
    9356:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    935a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935e:	781b      	ldrb	r3, [r3, #0]
    9360:	b2db      	uxtb	r3, r3
    9362:	3301      	adds	r3, #1
    9364:	b2da      	uxtb	r2, r3
    9366:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    936a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936e:	701a      	strb	r2, [r3, #0]
    9370:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	b2db      	uxtb	r3, r3
    937c:	2bff      	cmp	r3, #255	; 0xff
    937e:	d105      	bne.n	938c <send_climb+0xa84>
    9380:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9388:	2200      	movs	r2, #0
    938a:	701a      	strb	r2, [r3, #0]
    938c:	f248 0338 	movw	r3, #32824	; 0x8038
    9390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9394:	f248 0238 	movw	r2, #32824	; 0x8038
    9398:	f2c2 0200 	movt	r2, #8192	; 0x2000
    939c:	7812      	ldrb	r2, [r2, #0]
    939e:	b2d2      	uxtb	r2, r2
    93a0:	f042 0201 	orr.w	r2, r2, #1
    93a4:	b2d2      	uxtb	r2, r2
    93a6:	701a      	strb	r2, [r3, #0]
    93a8:	f248 0339 	movw	r3, #32825	; 0x8039
    93ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b0:	f248 0239 	movw	r2, #32825	; 0x8039
    93b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b8:	7812      	ldrb	r2, [r2, #0]
    93ba:	b2d2      	uxtb	r2, r2
    93bc:	f042 0210 	orr.w	r2, r2, #16
    93c0:	b2d2      	uxtb	r2, r2
    93c2:	701a      	strb	r2, [r3, #0]
    93c4:	e00b      	b.n	93de <send_climb+0xad6>
    93c6:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    93ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ce:	781b      	ldrb	r3, [r3, #0]
    93d0:	3301      	adds	r3, #1
    93d2:	b2da      	uxtb	r2, r3
    93d4:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    93d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93dc:	701a      	strb	r2, [r3, #0]
}
    93de:	46bd      	mov	sp, r7
    93e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e4:	4770      	bx	lr
    93e6:	bf00      	nop
    93e8:	00013943 	.word	0x00013943

000093ec <send_mode>:
void send_mode(void){  //5000ms
    93ec:	b480      	push	{r7}
    93ee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    93f0:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    93f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f8:	781a      	ldrb	r2, [r3, #0]
    93fa:	f248 531f 	movw	r3, #34079	; 0x851f
    93fe:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9402:	fba3 1302 	umull	r1, r3, r3, r2
    9406:	091b      	lsrs	r3, r3, #4
    9408:	2132      	movs	r1, #50	; 0x32
    940a:	fb01 f303 	mul.w	r3, r1, r3
    940e:	1ad3      	subs	r3, r2, r3
    9410:	b2db      	uxtb	r3, r3
    9412:	2b09      	cmp	r3, #9
    9414:	f040 82ba 	bne.w	998c <send_mode+0x5a0>
    9418:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    941c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9420:	781a      	ldrb	r2, [r3, #0]
    9422:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    942a:	781b      	ldrb	r3, [r3, #0]
    942c:	b2db      	uxtb	r3, r3
    942e:	429a      	cmp	r2, r3
    9430:	d313      	bcc.n	945a <send_mode+0x6e>
    9432:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    943a:	781b      	ldrb	r3, [r3, #0]
    943c:	b2db      	uxtb	r3, r3
    943e:	461a      	mov	r2, r3
    9440:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9448:	781b      	ldrb	r3, [r3, #0]
    944a:	1ad3      	subs	r3, r2, r3
    944c:	33ff      	adds	r3, #255	; 0xff
    944e:	2b09      	cmp	r3, #9
    9450:	bfd4      	ite	le
    9452:	2300      	movle	r3, #0
    9454:	2301      	movgt	r3, #1
    9456:	b2db      	uxtb	r3, r3
    9458:	e011      	b.n	947e <send_mode+0x92>
    945a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    945e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9462:	781b      	ldrb	r3, [r3, #0]
    9464:	b2db      	uxtb	r3, r3
    9466:	461a      	mov	r2, r3
    9468:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	1ad3      	subs	r3, r2, r3
    9474:	2b09      	cmp	r3, #9
    9476:	bfd4      	ite	le
    9478:	2300      	movle	r3, #0
    947a:	2301      	movgt	r3, #1
    947c:	b2db      	uxtb	r3, r3
    947e:	2b00      	cmp	r3, #0
    9480:	f000 8278 	beq.w	9974 <send_mode+0x588>
    9484:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	461a      	mov	r2, r3
    9490:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9498:	2105      	movs	r1, #5
    949a:	5499      	strb	r1, [r3, r2]
    949c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	3301      	adds	r3, #1
    94a8:	b2da      	uxtb	r2, r3
    94aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b2:	701a      	strb	r2, [r3, #0]
    94b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	2bff      	cmp	r3, #255	; 0xff
    94c0:	d105      	bne.n	94ce <send_mode+0xe2>
    94c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ca:	2200      	movs	r2, #0
    94cc:	701a      	strb	r2, [r3, #0]
    94ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	461a      	mov	r2, r3
    94da:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    94de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e2:	210b      	movs	r1, #11
    94e4:	5499      	strb	r1, [r3, r2]
    94e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ee:	781b      	ldrb	r3, [r3, #0]
    94f0:	3301      	adds	r3, #1
    94f2:	b2da      	uxtb	r2, r3
    94f4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    94f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94fc:	701a      	strb	r2, [r3, #0]
    94fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	2bff      	cmp	r3, #255	; 0xff
    950a:	d105      	bne.n	9518 <send_mode+0x12c>
    950c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9514:	2200      	movs	r2, #0
    9516:	701a      	strb	r2, [r3, #0]
    9518:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    951c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9520:	220b      	movs	r2, #11
    9522:	701a      	strb	r2, [r3, #0]
    9524:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    952c:	220b      	movs	r2, #11
    952e:	701a      	strb	r2, [r3, #0]
    9530:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9538:	781b      	ldrb	r3, [r3, #0]
    953a:	461a      	mov	r2, r3
    953c:	f24a 439c 	movw	r3, #42140	; 0xa49c
    9540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9544:	7819      	ldrb	r1, [r3, #0]
    9546:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    954a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    954e:	5499      	strb	r1, [r3, r2]
    9550:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9558:	781a      	ldrb	r2, [r3, #0]
    955a:	f24a 439c 	movw	r3, #42140	; 0xa49c
    955e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	4413      	add	r3, r2
    9566:	b2da      	uxtb	r2, r3
    9568:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    956c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9570:	701a      	strb	r2, [r3, #0]
    9572:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    957a:	781a      	ldrb	r2, [r3, #0]
    957c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	4413      	add	r3, r2
    9588:	b2da      	uxtb	r2, r3
    958a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    958e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9592:	701a      	strb	r2, [r3, #0]
    9594:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	3301      	adds	r3, #1
    95a0:	b2da      	uxtb	r2, r3
    95a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95aa:	701a      	strb	r2, [r3, #0]
    95ac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	2bff      	cmp	r3, #255	; 0xff
    95b8:	d105      	bne.n	95c6 <send_mode+0x1da>
    95ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c2:	2200      	movs	r2, #0
    95c4:	701a      	strb	r2, [r3, #0]
    95c6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    95ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ce:	781b      	ldrb	r3, [r3, #0]
    95d0:	461a      	mov	r2, r3
    95d2:	f24a 439d 	movw	r3, #42141	; 0xa49d
    95d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95da:	7819      	ldrb	r1, [r3, #0]
    95dc:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    95e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e4:	5499      	strb	r1, [r3, r2]
    95e6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    95ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ee:	781a      	ldrb	r2, [r3, #0]
    95f0:	f24a 439d 	movw	r3, #42141	; 0xa49d
    95f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f8:	781b      	ldrb	r3, [r3, #0]
    95fa:	4413      	add	r3, r2
    95fc:	b2da      	uxtb	r2, r3
    95fe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9606:	701a      	strb	r2, [r3, #0]
    9608:	f24a 53be 	movw	r3, #42430	; 0xa5be
    960c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9610:	781a      	ldrb	r2, [r3, #0]
    9612:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    961a:	781b      	ldrb	r3, [r3, #0]
    961c:	4413      	add	r3, r2
    961e:	b2da      	uxtb	r2, r3
    9620:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9628:	701a      	strb	r2, [r3, #0]
    962a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    962e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9632:	781b      	ldrb	r3, [r3, #0]
    9634:	3301      	adds	r3, #1
    9636:	b2da      	uxtb	r2, r3
    9638:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    963c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9640:	701a      	strb	r2, [r3, #0]
    9642:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	2bff      	cmp	r3, #255	; 0xff
    964e:	d105      	bne.n	965c <send_mode+0x270>
    9650:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9658:	2200      	movs	r2, #0
    965a:	701a      	strb	r2, [r3, #0]
    965c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9664:	781b      	ldrb	r3, [r3, #0]
    9666:	461a      	mov	r2, r3
    9668:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    966c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9670:	7819      	ldrb	r1, [r3, #0]
    9672:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    967a:	5499      	strb	r1, [r3, r2]
    967c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9684:	781a      	ldrb	r2, [r3, #0]
    9686:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    968a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    968e:	781b      	ldrb	r3, [r3, #0]
    9690:	4413      	add	r3, r2
    9692:	b2da      	uxtb	r2, r3
    9694:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    969c:	701a      	strb	r2, [r3, #0]
    969e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    96a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a6:	781a      	ldrb	r2, [r3, #0]
    96a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    96ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	4413      	add	r3, r2
    96b4:	b2da      	uxtb	r2, r3
    96b6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    96ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    96c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	3301      	adds	r3, #1
    96cc:	b2da      	uxtb	r2, r3
    96ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    96d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d6:	701a      	strb	r2, [r3, #0]
    96d8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    96dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e0:	781b      	ldrb	r3, [r3, #0]
    96e2:	2bff      	cmp	r3, #255	; 0xff
    96e4:	d105      	bne.n	96f2 <send_mode+0x306>
    96e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    96ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ee:	2200      	movs	r2, #0
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    96f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	461a      	mov	r2, r3
    96fe:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    9702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9706:	7819      	ldrb	r1, [r3, #0]
    9708:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    970c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9710:	5499      	strb	r1, [r3, r2]
    9712:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    971a:	781a      	ldrb	r2, [r3, #0]
    971c:	f24a 43a3 	movw	r3, #42147	; 0xa4a3
    9720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9724:	781b      	ldrb	r3, [r3, #0]
    9726:	4413      	add	r3, r2
    9728:	b2da      	uxtb	r2, r3
    972a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    972e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9732:	701a      	strb	r2, [r3, #0]
    9734:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    973c:	781a      	ldrb	r2, [r3, #0]
    973e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9746:	781b      	ldrb	r3, [r3, #0]
    9748:	4413      	add	r3, r2
    974a:	b2da      	uxtb	r2, r3
    974c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9754:	701a      	strb	r2, [r3, #0]
    9756:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    975a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    975e:	781b      	ldrb	r3, [r3, #0]
    9760:	3301      	adds	r3, #1
    9762:	b2da      	uxtb	r2, r3
    9764:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    976c:	701a      	strb	r2, [r3, #0]
    976e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9776:	781b      	ldrb	r3, [r3, #0]
    9778:	2bff      	cmp	r3, #255	; 0xff
    977a:	d105      	bne.n	9788 <send_mode+0x39c>
    977c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9784:	2200      	movs	r2, #0
    9786:	701a      	strb	r2, [r3, #0]
    9788:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    978c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	461a      	mov	r2, r3
    9794:	f240 1304 	movw	r3, #260	; 0x104
    9798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    979c:	7819      	ldrb	r1, [r3, #0]
    979e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    97a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a6:	5499      	strb	r1, [r3, r2]
    97a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    97ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b0:	781a      	ldrb	r2, [r3, #0]
    97b2:	f240 1304 	movw	r3, #260	; 0x104
    97b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	4413      	add	r3, r2
    97be:	b2da      	uxtb	r2, r3
    97c0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    97c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c8:	701a      	strb	r2, [r3, #0]
    97ca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    97ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d2:	781a      	ldrb	r2, [r3, #0]
    97d4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    97d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97dc:	781b      	ldrb	r3, [r3, #0]
    97de:	4413      	add	r3, r2
    97e0:	b2da      	uxtb	r2, r3
    97e2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    97e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ea:	701a      	strb	r2, [r3, #0]
    97ec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    97f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f4:	781b      	ldrb	r3, [r3, #0]
    97f6:	3301      	adds	r3, #1
    97f8:	b2da      	uxtb	r2, r3
    97fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    97fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9802:	701a      	strb	r2, [r3, #0]
    9804:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    980c:	781b      	ldrb	r3, [r3, #0]
    980e:	2bff      	cmp	r3, #255	; 0xff
    9810:	d105      	bne.n	981e <send_mode+0x432>
    9812:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    981a:	2200      	movs	r2, #0
    981c:	701a      	strb	r2, [r3, #0]
    981e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9826:	781b      	ldrb	r3, [r3, #0]
    9828:	461a      	mov	r2, r3
    982a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    982e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9832:	7819      	ldrb	r1, [r3, #0]
    9834:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983c:	5499      	strb	r1, [r3, r2]
    983e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	3301      	adds	r3, #1
    984a:	b2da      	uxtb	r2, r3
    984c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9854:	701a      	strb	r2, [r3, #0]
    9856:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    985a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985e:	781b      	ldrb	r3, [r3, #0]
    9860:	2bff      	cmp	r3, #255	; 0xff
    9862:	d105      	bne.n	9870 <send_mode+0x484>
    9864:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986c:	2200      	movs	r2, #0
    986e:	701a      	strb	r2, [r3, #0]
    9870:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9878:	781b      	ldrb	r3, [r3, #0]
    987a:	461a      	mov	r2, r3
    987c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9884:	7819      	ldrb	r1, [r3, #0]
    9886:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    988a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988e:	5499      	strb	r1, [r3, r2]
    9890:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	3301      	adds	r3, #1
    989c:	b2da      	uxtb	r2, r3
    989e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	2bff      	cmp	r3, #255	; 0xff
    98b4:	d105      	bne.n	98c2 <send_mode+0x4d6>
    98b6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    98ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	f248 0339 	movw	r3, #32825	; 0x8039
    98c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	b2db      	uxtb	r3, r3
    98ce:	f003 0310 	and.w	r3, r3, #16
    98d2:	2b00      	cmp	r3, #0
    98d4:	d15a      	bne.n	998c <send_mode+0x5a0>
    98d6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    98da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	b2db      	uxtb	r3, r3
    98e2:	461a      	mov	r2, r3
    98e4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    98e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ec:	5c9a      	ldrb	r2, [r3, r2]
    98ee:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    98f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f6:	701a      	strb	r2, [r3, #0]
    98f8:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    98fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9900:	2200      	movs	r2, #0
    9902:	701a      	strb	r2, [r3, #0]
    9904:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990c:	781b      	ldrb	r3, [r3, #0]
    990e:	b2db      	uxtb	r3, r3
    9910:	3301      	adds	r3, #1
    9912:	b2da      	uxtb	r2, r3
    9914:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991c:	701a      	strb	r2, [r3, #0]
    991e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9926:	781b      	ldrb	r3, [r3, #0]
    9928:	b2db      	uxtb	r3, r3
    992a:	2bff      	cmp	r3, #255	; 0xff
    992c:	d105      	bne.n	993a <send_mode+0x54e>
    992e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9936:	2200      	movs	r2, #0
    9938:	701a      	strb	r2, [r3, #0]
    993a:	f248 0338 	movw	r3, #32824	; 0x8038
    993e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9942:	f248 0238 	movw	r2, #32824	; 0x8038
    9946:	f2c2 0200 	movt	r2, #8192	; 0x2000
    994a:	7812      	ldrb	r2, [r2, #0]
    994c:	b2d2      	uxtb	r2, r2
    994e:	f042 0201 	orr.w	r2, r2, #1
    9952:	b2d2      	uxtb	r2, r2
    9954:	701a      	strb	r2, [r3, #0]
    9956:	f248 0339 	movw	r3, #32825	; 0x8039
    995a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995e:	f248 0239 	movw	r2, #32825	; 0x8039
    9962:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9966:	7812      	ldrb	r2, [r2, #0]
    9968:	b2d2      	uxtb	r2, r2
    996a:	f042 0210 	orr.w	r2, r2, #16
    996e:	b2d2      	uxtb	r2, r2
    9970:	701a      	strb	r2, [r3, #0]
    9972:	e00b      	b.n	998c <send_mode+0x5a0>
    9974:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997c:	781b      	ldrb	r3, [r3, #0]
    997e:	3301      	adds	r3, #1
    9980:	b2da      	uxtb	r2, r3
    9982:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    998a:	701a      	strb	r2, [r3, #0]
}
    998c:	46bd      	mov	sp, r7
    998e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9992:	4770      	bx	lr

00009994 <send_debug>:
void send_debug(void){  //5000ms
    9994:	b480      	push	{r7}
    9996:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    9998:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    999c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99a0:	781a      	ldrb	r2, [r3, #0]
    99a2:	f248 531f 	movw	r3, #34079	; 0x851f
    99a6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    99aa:	fba3 1302 	umull	r1, r3, r3, r2
    99ae:	091b      	lsrs	r3, r3, #4
    99b0:	2132      	movs	r1, #50	; 0x32
    99b2:	fb01 f303 	mul.w	r3, r1, r3
    99b6:	1ad3      	subs	r3, r2, r3
    99b8:	b2db      	uxtb	r3, r3
    99ba:	2b1d      	cmp	r3, #29
    99bc:	f040 82bb 	bne.w	9f36 <send_debug+0x5a2>
    99c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c8:	781a      	ldrb	r2, [r3, #0]
    99ca:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    99ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d2:	781b      	ldrb	r3, [r3, #0]
    99d4:	b2db      	uxtb	r3, r3
    99d6:	429a      	cmp	r2, r3
    99d8:	d313      	bcc.n	9a02 <send_debug+0x6e>
    99da:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    99de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	b2db      	uxtb	r3, r3
    99e6:	461a      	mov	r2, r3
    99e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    99ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f0:	781b      	ldrb	r3, [r3, #0]
    99f2:	1ad3      	subs	r3, r2, r3
    99f4:	33ff      	adds	r3, #255	; 0xff
    99f6:	2b09      	cmp	r3, #9
    99f8:	bfd4      	ite	le
    99fa:	2300      	movle	r3, #0
    99fc:	2301      	movgt	r3, #1
    99fe:	b2db      	uxtb	r3, r3
    9a00:	e011      	b.n	9a26 <send_debug+0x92>
    9a02:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a0a:	781b      	ldrb	r3, [r3, #0]
    9a0c:	b2db      	uxtb	r3, r3
    9a0e:	461a      	mov	r2, r3
    9a10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	1ad3      	subs	r3, r2, r3
    9a1c:	2b09      	cmp	r3, #9
    9a1e:	bfd4      	ite	le
    9a20:	2300      	movle	r3, #0
    9a22:	2301      	movgt	r3, #1
    9a24:	b2db      	uxtb	r3, r3
    9a26:	2b00      	cmp	r3, #0
    9a28:	f000 8279 	beq.w	9f1e <send_debug+0x58a>
    9a2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a34:	781b      	ldrb	r3, [r3, #0]
    9a36:	461a      	mov	r2, r3
    9a38:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a40:	2105      	movs	r1, #5
    9a42:	5499      	strb	r1, [r3, r2]
    9a44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	3301      	adds	r3, #1
    9a50:	b2da      	uxtb	r2, r3
    9a52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5a:	701a      	strb	r2, [r3, #0]
    9a5c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a64:	781b      	ldrb	r3, [r3, #0]
    9a66:	2bff      	cmp	r3, #255	; 0xff
    9a68:	d105      	bne.n	9a76 <send_debug+0xe2>
    9a6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a72:	2200      	movs	r2, #0
    9a74:	701a      	strb	r2, [r3, #0]
    9a76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a7e:	781b      	ldrb	r3, [r3, #0]
    9a80:	461a      	mov	r2, r3
    9a82:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8a:	210d      	movs	r1, #13
    9a8c:	5499      	strb	r1, [r3, r2]
    9a8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a96:	781b      	ldrb	r3, [r3, #0]
    9a98:	3301      	adds	r3, #1
    9a9a:	b2da      	uxtb	r2, r3
    9a9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa4:	701a      	strb	r2, [r3, #0]
    9aa6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aae:	781b      	ldrb	r3, [r3, #0]
    9ab0:	2bff      	cmp	r3, #255	; 0xff
    9ab2:	d105      	bne.n	9ac0 <send_debug+0x12c>
    9ab4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abc:	2200      	movs	r2, #0
    9abe:	701a      	strb	r2, [r3, #0]
    9ac0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac8:	220d      	movs	r2, #13
    9aca:	701a      	strb	r2, [r3, #0]
    9acc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad4:	220d      	movs	r2, #13
    9ad6:	701a      	strb	r2, [r3, #0]
    9ad8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae0:	781b      	ldrb	r3, [r3, #0]
    9ae2:	461a      	mov	r2, r3
    9ae4:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    9ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aec:	781b      	ldrb	r3, [r3, #0]
    9aee:	b2d9      	uxtb	r1, r3
    9af0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af8:	5499      	strb	r1, [r3, r2]
    9afa:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    9afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b02:	781a      	ldrb	r2, [r3, #0]
    9b04:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b0c:	781b      	ldrb	r3, [r3, #0]
    9b0e:	4413      	add	r3, r2
    9b10:	b2da      	uxtb	r2, r3
    9b12:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b1a:	701a      	strb	r2, [r3, #0]
    9b1c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b24:	781a      	ldrb	r2, [r3, #0]
    9b26:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	4413      	add	r3, r2
    9b32:	b2da      	uxtb	r2, r3
    9b34:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3c:	701a      	strb	r2, [r3, #0]
    9b3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b46:	781b      	ldrb	r3, [r3, #0]
    9b48:	3301      	adds	r3, #1
    9b4a:	b2da      	uxtb	r2, r3
    9b4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b54:	701a      	strb	r2, [r3, #0]
    9b56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	2bff      	cmp	r3, #255	; 0xff
    9b62:	d105      	bne.n	9b70 <send_debug+0x1dc>
    9b64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b6c:	2200      	movs	r2, #0
    9b6e:	701a      	strb	r2, [r3, #0]
    9b70:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b78:	781b      	ldrb	r3, [r3, #0]
    9b7a:	461a      	mov	r2, r3
    9b7c:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    9b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b84:	7819      	ldrb	r1, [r3, #0]
    9b86:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8e:	5499      	strb	r1, [r3, r2]
    9b90:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b98:	781a      	ldrb	r2, [r3, #0]
    9b9a:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    9b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	4413      	add	r3, r2
    9ba6:	b2da      	uxtb	r2, r3
    9ba8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb0:	701a      	strb	r2, [r3, #0]
    9bb2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bba:	781a      	ldrb	r2, [r3, #0]
    9bbc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc4:	781b      	ldrb	r3, [r3, #0]
    9bc6:	4413      	add	r3, r2
    9bc8:	b2da      	uxtb	r2, r3
    9bca:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd2:	701a      	strb	r2, [r3, #0]
    9bd4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bdc:	781b      	ldrb	r3, [r3, #0]
    9bde:	3301      	adds	r3, #1
    9be0:	b2da      	uxtb	r2, r3
    9be2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bea:	701a      	strb	r2, [r3, #0]
    9bec:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	2bff      	cmp	r3, #255	; 0xff
    9bf8:	d105      	bne.n	9c06 <send_debug+0x272>
    9bfa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c02:	2200      	movs	r2, #0
    9c04:	701a      	strb	r2, [r3, #0]
    9c06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0e:	781b      	ldrb	r3, [r3, #0]
    9c10:	461a      	mov	r2, r3
    9c12:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1a:	7819      	ldrb	r1, [r3, #0]
    9c1c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c24:	5499      	strb	r1, [r3, r2]
    9c26:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c2e:	781a      	ldrb	r2, [r3, #0]
    9c30:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c38:	781b      	ldrb	r3, [r3, #0]
    9c3a:	4413      	add	r3, r2
    9c3c:	b2da      	uxtb	r2, r3
    9c3e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c46:	701a      	strb	r2, [r3, #0]
    9c48:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c50:	781a      	ldrb	r2, [r3, #0]
    9c52:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c5a:	781b      	ldrb	r3, [r3, #0]
    9c5c:	4413      	add	r3, r2
    9c5e:	b2da      	uxtb	r2, r3
    9c60:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c68:	701a      	strb	r2, [r3, #0]
    9c6a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c72:	781b      	ldrb	r3, [r3, #0]
    9c74:	3301      	adds	r3, #1
    9c76:	b2da      	uxtb	r2, r3
    9c78:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c80:	701a      	strb	r2, [r3, #0]
    9c82:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c8a:	781b      	ldrb	r3, [r3, #0]
    9c8c:	2bff      	cmp	r3, #255	; 0xff
    9c8e:	d105      	bne.n	9c9c <send_debug+0x308>
    9c90:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c98:	2200      	movs	r2, #0
    9c9a:	701a      	strb	r2, [r3, #0]
    9c9c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca4:	781b      	ldrb	r3, [r3, #0]
    9ca6:	461a      	mov	r2, r3
    9ca8:	f24a 7357 	movw	r3, #42839	; 0xa757
    9cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb0:	7819      	ldrb	r1, [r3, #0]
    9cb2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cba:	5499      	strb	r1, [r3, r2]
    9cbc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc4:	781a      	ldrb	r2, [r3, #0]
    9cc6:	f24a 7357 	movw	r3, #42839	; 0xa757
    9cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cce:	781b      	ldrb	r3, [r3, #0]
    9cd0:	4413      	add	r3, r2
    9cd2:	b2da      	uxtb	r2, r3
    9cd4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cdc:	701a      	strb	r2, [r3, #0]
    9cde:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce6:	781a      	ldrb	r2, [r3, #0]
    9ce8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf0:	781b      	ldrb	r3, [r3, #0]
    9cf2:	4413      	add	r3, r2
    9cf4:	b2da      	uxtb	r2, r3
    9cf6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfe:	701a      	strb	r2, [r3, #0]
    9d00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d08:	781b      	ldrb	r3, [r3, #0]
    9d0a:	3301      	adds	r3, #1
    9d0c:	b2da      	uxtb	r2, r3
    9d0e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d16:	701a      	strb	r2, [r3, #0]
    9d18:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d20:	781b      	ldrb	r3, [r3, #0]
    9d22:	2bff      	cmp	r3, #255	; 0xff
    9d24:	d105      	bne.n	9d32 <send_debug+0x39e>
    9d26:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2e:	2200      	movs	r2, #0
    9d30:	701a      	strb	r2, [r3, #0]
    9d32:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d3a:	781b      	ldrb	r3, [r3, #0]
    9d3c:	461a      	mov	r2, r3
    9d3e:	f24a 43a4 	movw	r3, #42148	; 0xa4a4
    9d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d46:	7819      	ldrb	r1, [r3, #0]
    9d48:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d50:	5499      	strb	r1, [r3, r2]
    9d52:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d5a:	781a      	ldrb	r2, [r3, #0]
    9d5c:	f24a 43a4 	movw	r3, #42148	; 0xa4a4
    9d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d64:	781b      	ldrb	r3, [r3, #0]
    9d66:	4413      	add	r3, r2
    9d68:	b2da      	uxtb	r2, r3
    9d6a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d72:	701a      	strb	r2, [r3, #0]
    9d74:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7c:	781a      	ldrb	r2, [r3, #0]
    9d7e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d86:	781b      	ldrb	r3, [r3, #0]
    9d88:	4413      	add	r3, r2
    9d8a:	b2da      	uxtb	r2, r3
    9d8c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d94:	701a      	strb	r2, [r3, #0]
    9d96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d9e:	781b      	ldrb	r3, [r3, #0]
    9da0:	3301      	adds	r3, #1
    9da2:	b2da      	uxtb	r2, r3
    9da4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dac:	701a      	strb	r2, [r3, #0]
    9dae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db6:	781b      	ldrb	r3, [r3, #0]
    9db8:	2bff      	cmp	r3, #255	; 0xff
    9dba:	d105      	bne.n	9dc8 <send_debug+0x434>
    9dbc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc4:	2200      	movs	r2, #0
    9dc6:	701a      	strb	r2, [r3, #0]
    9dc8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	461a      	mov	r2, r3
    9dd4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    9dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ddc:	7819      	ldrb	r1, [r3, #0]
    9dde:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de6:	5499      	strb	r1, [r3, r2]
    9de8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	3301      	adds	r3, #1
    9df4:	b2da      	uxtb	r2, r3
    9df6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dfe:	701a      	strb	r2, [r3, #0]
    9e00:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	2bff      	cmp	r3, #255	; 0xff
    9e0c:	d105      	bne.n	9e1a <send_debug+0x486>
    9e0e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e16:	2200      	movs	r2, #0
    9e18:	701a      	strb	r2, [r3, #0]
    9e1a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	461a      	mov	r2, r3
    9e26:	f24a 53be 	movw	r3, #42430	; 0xa5be
    9e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e2e:	7819      	ldrb	r1, [r3, #0]
    9e30:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e38:	5499      	strb	r1, [r3, r2]
    9e3a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e42:	781b      	ldrb	r3, [r3, #0]
    9e44:	3301      	adds	r3, #1
    9e46:	b2da      	uxtb	r2, r3
    9e48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e50:	701a      	strb	r2, [r3, #0]
    9e52:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e5a:	781b      	ldrb	r3, [r3, #0]
    9e5c:	2bff      	cmp	r3, #255	; 0xff
    9e5e:	d105      	bne.n	9e6c <send_debug+0x4d8>
    9e60:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e68:	2200      	movs	r2, #0
    9e6a:	701a      	strb	r2, [r3, #0]
    9e6c:	f248 0339 	movw	r3, #32825	; 0x8039
    9e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e74:	781b      	ldrb	r3, [r3, #0]
    9e76:	b2db      	uxtb	r3, r3
    9e78:	f003 0310 	and.w	r3, r3, #16
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d15a      	bne.n	9f36 <send_debug+0x5a2>
    9e80:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e88:	781b      	ldrb	r3, [r3, #0]
    9e8a:	b2db      	uxtb	r3, r3
    9e8c:	461a      	mov	r2, r3
    9e8e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e96:	5c9a      	ldrb	r2, [r3, r2]
    9e98:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    9e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea0:	701a      	strb	r2, [r3, #0]
    9ea2:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    9ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eaa:	2200      	movs	r2, #0
    9eac:	701a      	strb	r2, [r3, #0]
    9eae:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	b2db      	uxtb	r3, r3
    9eba:	3301      	adds	r3, #1
    9ebc:	b2da      	uxtb	r2, r3
    9ebe:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec6:	701a      	strb	r2, [r3, #0]
    9ec8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed0:	781b      	ldrb	r3, [r3, #0]
    9ed2:	b2db      	uxtb	r3, r3
    9ed4:	2bff      	cmp	r3, #255	; 0xff
    9ed6:	d105      	bne.n	9ee4 <send_debug+0x550>
    9ed8:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee0:	2200      	movs	r2, #0
    9ee2:	701a      	strb	r2, [r3, #0]
    9ee4:	f248 0338 	movw	r3, #32824	; 0x8038
    9ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eec:	f248 0238 	movw	r2, #32824	; 0x8038
    9ef0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ef4:	7812      	ldrb	r2, [r2, #0]
    9ef6:	b2d2      	uxtb	r2, r2
    9ef8:	f042 0201 	orr.w	r2, r2, #1
    9efc:	b2d2      	uxtb	r2, r2
    9efe:	701a      	strb	r2, [r3, #0]
    9f00:	f248 0339 	movw	r3, #32825	; 0x8039
    9f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f08:	f248 0239 	movw	r2, #32825	; 0x8039
    9f0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9f10:	7812      	ldrb	r2, [r2, #0]
    9f12:	b2d2      	uxtb	r2, r2
    9f14:	f042 0210 	orr.w	r2, r2, #16
    9f18:	b2d2      	uxtb	r2, r2
    9f1a:	701a      	strb	r2, [r3, #0]
    9f1c:	e00b      	b.n	9f36 <send_debug+0x5a2>
    9f1e:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	3301      	adds	r3, #1
    9f2a:	b2da      	uxtb	r2, r3
    9f2c:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    9f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f34:	701a      	strb	r2, [r3, #0]
}
    9f36:	46bd      	mov	sp, r7
    9f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f3c:	4770      	bx	lr
    9f3e:	bf00      	nop

00009f40 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    9f40:	b480      	push	{r7}
    9f42:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    9f44:	f24a 43b1 	movw	r3, #42161	; 0xa4b1
    9f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f4c:	781a      	ldrb	r2, [r3, #0]
    9f4e:	f248 531f 	movw	r3, #34079	; 0x851f
    9f52:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9f56:	fba3 1302 	umull	r1, r3, r3, r2
    9f5a:	095b      	lsrs	r3, r3, #5
    9f5c:	2164      	movs	r1, #100	; 0x64
    9f5e:	fb01 f303 	mul.w	r3, r1, r3
    9f62:	1ad3      	subs	r3, r2, r3
    9f64:	b2db      	uxtb	r3, r3
    9f66:	2b31      	cmp	r3, #49	; 0x31
    9f68:	f040 8395 	bne.w	a696 <send_nav_ref+0x756>
    9f6c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f74:	781a      	ldrb	r2, [r3, #0]
    9f76:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f7e:	781b      	ldrb	r3, [r3, #0]
    9f80:	b2db      	uxtb	r3, r3
    9f82:	429a      	cmp	r2, r3
    9f84:	d313      	bcc.n	9fae <send_nav_ref+0x6e>
    9f86:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	b2db      	uxtb	r3, r3
    9f92:	461a      	mov	r2, r3
    9f94:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	1ad3      	subs	r3, r2, r3
    9fa0:	33ff      	adds	r3, #255	; 0xff
    9fa2:	2b0c      	cmp	r3, #12
    9fa4:	bfd4      	ite	le
    9fa6:	2300      	movle	r3, #0
    9fa8:	2301      	movgt	r3, #1
    9faa:	b2db      	uxtb	r3, r3
    9fac:	e011      	b.n	9fd2 <send_nav_ref+0x92>
    9fae:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	b2db      	uxtb	r3, r3
    9fba:	461a      	mov	r2, r3
    9fbc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	1ad3      	subs	r3, r2, r3
    9fc8:	2b0c      	cmp	r3, #12
    9fca:	bfd4      	ite	le
    9fcc:	2300      	movle	r3, #0
    9fce:	2301      	movgt	r3, #1
    9fd0:	b2db      	uxtb	r3, r3
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	f000 8353 	beq.w	a67e <send_nav_ref+0x73e>
    9fd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	461a      	mov	r2, r3
    9fe4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    9fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fec:	2105      	movs	r1, #5
    9fee:	5499      	strb	r1, [r3, r2]
    9ff0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    9ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff8:	781b      	ldrb	r3, [r3, #0]
    9ffa:	3301      	adds	r3, #1
    9ffc:	b2da      	uxtb	r2, r3
    9ffe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a006:	701a      	strb	r2, [r3, #0]
    a008:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a010:	781b      	ldrb	r3, [r3, #0]
    a012:	2bff      	cmp	r3, #255	; 0xff
    a014:	d105      	bne.n	a022 <send_nav_ref+0xe2>
    a016:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a01e:	2200      	movs	r2, #0
    a020:	701a      	strb	r2, [r3, #0]
    a022:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	461a      	mov	r2, r3
    a02e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a036:	2109      	movs	r1, #9
    a038:	5499      	strb	r1, [r3, r2]
    a03a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	3301      	adds	r3, #1
    a046:	b2da      	uxtb	r2, r3
    a048:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	701a      	strb	r2, [r3, #0]
    a052:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	2bff      	cmp	r3, #255	; 0xff
    a05e:	d105      	bne.n	a06c <send_nav_ref+0x12c>
    a060:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a068:	2200      	movs	r2, #0
    a06a:	701a      	strb	r2, [r3, #0]
    a06c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a074:	2209      	movs	r2, #9
    a076:	701a      	strb	r2, [r3, #0]
    a078:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a080:	2209      	movs	r2, #9
    a082:	701a      	strb	r2, [r3, #0]
    a084:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a08c:	781b      	ldrb	r3, [r3, #0]
    a08e:	461a      	mov	r2, r3
    a090:	f643 1338 	movw	r3, #14648	; 0x3938
    a094:	f2c0 0301 	movt	r3, #1
    a098:	7819      	ldrb	r1, [r3, #0]
    a09a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a2:	5499      	strb	r1, [r3, r2]
    a0a4:	f643 1338 	movw	r3, #14648	; 0x3938
    a0a8:	f2c0 0301 	movt	r3, #1
    a0ac:	781a      	ldrb	r2, [r3, #0]
    a0ae:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b6:	781b      	ldrb	r3, [r3, #0]
    a0b8:	4413      	add	r3, r2
    a0ba:	b2da      	uxtb	r2, r3
    a0bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c4:	701a      	strb	r2, [r3, #0]
    a0c6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ce:	781a      	ldrb	r2, [r3, #0]
    a0d0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d8:	781b      	ldrb	r3, [r3, #0]
    a0da:	4413      	add	r3, r2
    a0dc:	b2da      	uxtb	r2, r3
    a0de:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e6:	701a      	strb	r2, [r3, #0]
    a0e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f0:	781b      	ldrb	r3, [r3, #0]
    a0f2:	3301      	adds	r3, #1
    a0f4:	b2da      	uxtb	r2, r3
    a0f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0fe:	701a      	strb	r2, [r3, #0]
    a100:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a108:	781b      	ldrb	r3, [r3, #0]
    a10a:	2bff      	cmp	r3, #255	; 0xff
    a10c:	d105      	bne.n	a11a <send_nav_ref+0x1da>
    a10e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a116:	2200      	movs	r2, #0
    a118:	701a      	strb	r2, [r3, #0]
    a11a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a122:	781b      	ldrb	r3, [r3, #0]
    a124:	461a      	mov	r2, r3
    a126:	f643 1338 	movw	r3, #14648	; 0x3938
    a12a:	f2c0 0301 	movt	r3, #1
    a12e:	7859      	ldrb	r1, [r3, #1]
    a130:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a138:	5499      	strb	r1, [r3, r2]
    a13a:	4bd2      	ldr	r3, [pc, #840]	; (a484 <send_nav_ref+0x544>)
    a13c:	781a      	ldrb	r2, [r3, #0]
    a13e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a146:	781b      	ldrb	r3, [r3, #0]
    a148:	4413      	add	r3, r2
    a14a:	b2da      	uxtb	r2, r3
    a14c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a154:	701a      	strb	r2, [r3, #0]
    a156:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a15e:	781a      	ldrb	r2, [r3, #0]
    a160:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a168:	781b      	ldrb	r3, [r3, #0]
    a16a:	4413      	add	r3, r2
    a16c:	b2da      	uxtb	r2, r3
    a16e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a176:	701a      	strb	r2, [r3, #0]
    a178:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	3301      	adds	r3, #1
    a184:	b2da      	uxtb	r2, r3
    a186:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a18e:	701a      	strb	r2, [r3, #0]
    a190:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a198:	781b      	ldrb	r3, [r3, #0]
    a19a:	2bff      	cmp	r3, #255	; 0xff
    a19c:	d105      	bne.n	a1aa <send_nav_ref+0x26a>
    a19e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a6:	2200      	movs	r2, #0
    a1a8:	701a      	strb	r2, [r3, #0]
    a1aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	461a      	mov	r2, r3
    a1b6:	f643 1338 	movw	r3, #14648	; 0x3938
    a1ba:	f2c0 0301 	movt	r3, #1
    a1be:	7899      	ldrb	r1, [r3, #2]
    a1c0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c8:	5499      	strb	r1, [r3, r2]
    a1ca:	4baf      	ldr	r3, [pc, #700]	; (a488 <send_nav_ref+0x548>)
    a1cc:	781a      	ldrb	r2, [r3, #0]
    a1ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	4413      	add	r3, r2
    a1da:	b2da      	uxtb	r2, r3
    a1dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e4:	701a      	strb	r2, [r3, #0]
    a1e6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ee:	781a      	ldrb	r2, [r3, #0]
    a1f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	4413      	add	r3, r2
    a1fc:	b2da      	uxtb	r2, r3
    a1fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a206:	701a      	strb	r2, [r3, #0]
    a208:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a210:	781b      	ldrb	r3, [r3, #0]
    a212:	3301      	adds	r3, #1
    a214:	b2da      	uxtb	r2, r3
    a216:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21e:	701a      	strb	r2, [r3, #0]
    a220:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	2bff      	cmp	r3, #255	; 0xff
    a22c:	d105      	bne.n	a23a <send_nav_ref+0x2fa>
    a22e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a236:	2200      	movs	r2, #0
    a238:	701a      	strb	r2, [r3, #0]
    a23a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a242:	781b      	ldrb	r3, [r3, #0]
    a244:	461a      	mov	r2, r3
    a246:	f643 1338 	movw	r3, #14648	; 0x3938
    a24a:	f2c0 0301 	movt	r3, #1
    a24e:	78d9      	ldrb	r1, [r3, #3]
    a250:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a258:	5499      	strb	r1, [r3, r2]
    a25a:	4b8c      	ldr	r3, [pc, #560]	; (a48c <send_nav_ref+0x54c>)
    a25c:	781a      	ldrb	r2, [r3, #0]
    a25e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a266:	781b      	ldrb	r3, [r3, #0]
    a268:	4413      	add	r3, r2
    a26a:	b2da      	uxtb	r2, r3
    a26c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a274:	701a      	strb	r2, [r3, #0]
    a276:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27e:	781a      	ldrb	r2, [r3, #0]
    a280:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	4413      	add	r3, r2
    a28c:	b2da      	uxtb	r2, r3
    a28e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a296:	701a      	strb	r2, [r3, #0]
    a298:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a0:	781b      	ldrb	r3, [r3, #0]
    a2a2:	3301      	adds	r3, #1
    a2a4:	b2da      	uxtb	r2, r3
    a2a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ae:	701a      	strb	r2, [r3, #0]
    a2b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	2bff      	cmp	r3, #255	; 0xff
    a2bc:	d105      	bne.n	a2ca <send_nav_ref+0x38a>
    a2be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c6:	2200      	movs	r2, #0
    a2c8:	701a      	strb	r2, [r3, #0]
    a2ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	461a      	mov	r2, r3
    a2d6:	f643 133c 	movw	r3, #14652	; 0x393c
    a2da:	f2c0 0301 	movt	r3, #1
    a2de:	7819      	ldrb	r1, [r3, #0]
    a2e0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e8:	5499      	strb	r1, [r3, r2]
    a2ea:	f643 133c 	movw	r3, #14652	; 0x393c
    a2ee:	f2c0 0301 	movt	r3, #1
    a2f2:	781a      	ldrb	r2, [r3, #0]
    a2f4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2fc:	781b      	ldrb	r3, [r3, #0]
    a2fe:	4413      	add	r3, r2
    a300:	b2da      	uxtb	r2, r3
    a302:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a30a:	701a      	strb	r2, [r3, #0]
    a30c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a314:	781a      	ldrb	r2, [r3, #0]
    a316:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a31e:	781b      	ldrb	r3, [r3, #0]
    a320:	4413      	add	r3, r2
    a322:	b2da      	uxtb	r2, r3
    a324:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a32c:	701a      	strb	r2, [r3, #0]
    a32e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a336:	781b      	ldrb	r3, [r3, #0]
    a338:	3301      	adds	r3, #1
    a33a:	b2da      	uxtb	r2, r3
    a33c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a344:	701a      	strb	r2, [r3, #0]
    a346:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a34e:	781b      	ldrb	r3, [r3, #0]
    a350:	2bff      	cmp	r3, #255	; 0xff
    a352:	d105      	bne.n	a360 <send_nav_ref+0x420>
    a354:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a35c:	2200      	movs	r2, #0
    a35e:	701a      	strb	r2, [r3, #0]
    a360:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a368:	781b      	ldrb	r3, [r3, #0]
    a36a:	461a      	mov	r2, r3
    a36c:	f643 133c 	movw	r3, #14652	; 0x393c
    a370:	f2c0 0301 	movt	r3, #1
    a374:	7859      	ldrb	r1, [r3, #1]
    a376:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a37e:	5499      	strb	r1, [r3, r2]
    a380:	4b43      	ldr	r3, [pc, #268]	; (a490 <send_nav_ref+0x550>)
    a382:	781a      	ldrb	r2, [r3, #0]
    a384:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a38c:	781b      	ldrb	r3, [r3, #0]
    a38e:	4413      	add	r3, r2
    a390:	b2da      	uxtb	r2, r3
    a392:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a39a:	701a      	strb	r2, [r3, #0]
    a39c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a4:	781a      	ldrb	r2, [r3, #0]
    a3a6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ae:	781b      	ldrb	r3, [r3, #0]
    a3b0:	4413      	add	r3, r2
    a3b2:	b2da      	uxtb	r2, r3
    a3b4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3bc:	701a      	strb	r2, [r3, #0]
    a3be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c6:	781b      	ldrb	r3, [r3, #0]
    a3c8:	3301      	adds	r3, #1
    a3ca:	b2da      	uxtb	r2, r3
    a3cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d4:	701a      	strb	r2, [r3, #0]
    a3d6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3de:	781b      	ldrb	r3, [r3, #0]
    a3e0:	2bff      	cmp	r3, #255	; 0xff
    a3e2:	d105      	bne.n	a3f0 <send_nav_ref+0x4b0>
    a3e4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ec:	2200      	movs	r2, #0
    a3ee:	701a      	strb	r2, [r3, #0]
    a3f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f8:	781b      	ldrb	r3, [r3, #0]
    a3fa:	461a      	mov	r2, r3
    a3fc:	f643 133c 	movw	r3, #14652	; 0x393c
    a400:	f2c0 0301 	movt	r3, #1
    a404:	7899      	ldrb	r1, [r3, #2]
    a406:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a40e:	5499      	strb	r1, [r3, r2]
    a410:	4b20      	ldr	r3, [pc, #128]	; (a494 <send_nav_ref+0x554>)
    a412:	781a      	ldrb	r2, [r3, #0]
    a414:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41c:	781b      	ldrb	r3, [r3, #0]
    a41e:	4413      	add	r3, r2
    a420:	b2da      	uxtb	r2, r3
    a422:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a42a:	701a      	strb	r2, [r3, #0]
    a42c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a434:	781a      	ldrb	r2, [r3, #0]
    a436:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a43e:	781b      	ldrb	r3, [r3, #0]
    a440:	4413      	add	r3, r2
    a442:	b2da      	uxtb	r2, r3
    a444:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a44c:	701a      	strb	r2, [r3, #0]
    a44e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a456:	781b      	ldrb	r3, [r3, #0]
    a458:	3301      	adds	r3, #1
    a45a:	b2da      	uxtb	r2, r3
    a45c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a464:	701a      	strb	r2, [r3, #0]
    a466:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a46e:	781b      	ldrb	r3, [r3, #0]
    a470:	2bff      	cmp	r3, #255	; 0xff
    a472:	d111      	bne.n	a498 <send_nav_ref+0x558>
    a474:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a47c:	2200      	movs	r2, #0
    a47e:	701a      	strb	r2, [r3, #0]
    a480:	e00a      	b.n	a498 <send_nav_ref+0x558>
    a482:	bf00      	nop
    a484:	00013939 	.word	0x00013939
    a488:	0001393a 	.word	0x0001393a
    a48c:	0001393b 	.word	0x0001393b
    a490:	0001393d 	.word	0x0001393d
    a494:	0001393e 	.word	0x0001393e
    a498:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a0:	781b      	ldrb	r3, [r3, #0]
    a4a2:	461a      	mov	r2, r3
    a4a4:	f643 133c 	movw	r3, #14652	; 0x393c
    a4a8:	f2c0 0301 	movt	r3, #1
    a4ac:	78d9      	ldrb	r1, [r3, #3]
    a4ae:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b6:	5499      	strb	r1, [r3, r2]
    a4b8:	4b79      	ldr	r3, [pc, #484]	; (a6a0 <send_nav_ref+0x760>)
    a4ba:	781a      	ldrb	r2, [r3, #0]
    a4bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a4c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c4:	781b      	ldrb	r3, [r3, #0]
    a4c6:	4413      	add	r3, r2
    a4c8:	b2da      	uxtb	r2, r3
    a4ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d2:	701a      	strb	r2, [r3, #0]
    a4d4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4dc:	781a      	ldrb	r2, [r3, #0]
    a4de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	4413      	add	r3, r2
    a4ea:	b2da      	uxtb	r2, r3
    a4ec:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f4:	701a      	strb	r2, [r3, #0]
    a4f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4fe:	781b      	ldrb	r3, [r3, #0]
    a500:	3301      	adds	r3, #1
    a502:	b2da      	uxtb	r2, r3
    a504:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a50c:	701a      	strb	r2, [r3, #0]
    a50e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a516:	781b      	ldrb	r3, [r3, #0]
    a518:	2bff      	cmp	r3, #255	; 0xff
    a51a:	d105      	bne.n	a528 <send_nav_ref+0x5e8>
    a51c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a524:	2200      	movs	r2, #0
    a526:	701a      	strb	r2, [r3, #0]
    a528:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	461a      	mov	r2, r3
    a534:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    a538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a53c:	7819      	ldrb	r1, [r3, #0]
    a53e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a546:	5499      	strb	r1, [r3, r2]
    a548:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a550:	781b      	ldrb	r3, [r3, #0]
    a552:	3301      	adds	r3, #1
    a554:	b2da      	uxtb	r2, r3
    a556:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a55e:	701a      	strb	r2, [r3, #0]
    a560:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a568:	781b      	ldrb	r3, [r3, #0]
    a56a:	2bff      	cmp	r3, #255	; 0xff
    a56c:	d105      	bne.n	a57a <send_nav_ref+0x63a>
    a56e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a576:	2200      	movs	r2, #0
    a578:	701a      	strb	r2, [r3, #0]
    a57a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	461a      	mov	r2, r3
    a586:	f24a 53be 	movw	r3, #42430	; 0xa5be
    a58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a58e:	7819      	ldrb	r1, [r3, #0]
    a590:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a598:	5499      	strb	r1, [r3, r2]
    a59a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a2:	781b      	ldrb	r3, [r3, #0]
    a5a4:	3301      	adds	r3, #1
    a5a6:	b2da      	uxtb	r2, r3
    a5a8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b0:	701a      	strb	r2, [r3, #0]
    a5b2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ba:	781b      	ldrb	r3, [r3, #0]
    a5bc:	2bff      	cmp	r3, #255	; 0xff
    a5be:	d105      	bne.n	a5cc <send_nav_ref+0x68c>
    a5c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c8:	2200      	movs	r2, #0
    a5ca:	701a      	strb	r2, [r3, #0]
    a5cc:	f248 0339 	movw	r3, #32825	; 0x8039
    a5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d4:	781b      	ldrb	r3, [r3, #0]
    a5d6:	b2db      	uxtb	r3, r3
    a5d8:	f003 0310 	and.w	r3, r3, #16
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d15a      	bne.n	a696 <send_nav_ref+0x756>
    a5e0:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e8:	781b      	ldrb	r3, [r3, #0]
    a5ea:	b2db      	uxtb	r3, r3
    a5ec:	461a      	mov	r2, r3
    a5ee:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f6:	5c9a      	ldrb	r2, [r3, r2]
    a5f8:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    a5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a600:	701a      	strb	r2, [r3, #0]
    a602:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    a606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60a:	2200      	movs	r2, #0
    a60c:	701a      	strb	r2, [r3, #0]
    a60e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a616:	781b      	ldrb	r3, [r3, #0]
    a618:	b2db      	uxtb	r3, r3
    a61a:	3301      	adds	r3, #1
    a61c:	b2da      	uxtb	r2, r3
    a61e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a626:	701a      	strb	r2, [r3, #0]
    a628:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a630:	781b      	ldrb	r3, [r3, #0]
    a632:	b2db      	uxtb	r3, r3
    a634:	2bff      	cmp	r3, #255	; 0xff
    a636:	d105      	bne.n	a644 <send_nav_ref+0x704>
    a638:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a640:	2200      	movs	r2, #0
    a642:	701a      	strb	r2, [r3, #0]
    a644:	f248 0338 	movw	r3, #32824	; 0x8038
    a648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a64c:	f248 0238 	movw	r2, #32824	; 0x8038
    a650:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a654:	7812      	ldrb	r2, [r2, #0]
    a656:	b2d2      	uxtb	r2, r2
    a658:	f042 0201 	orr.w	r2, r2, #1
    a65c:	b2d2      	uxtb	r2, r2
    a65e:	701a      	strb	r2, [r3, #0]
    a660:	f248 0339 	movw	r3, #32825	; 0x8039
    a664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a668:	f248 0239 	movw	r2, #32825	; 0x8039
    a66c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a670:	7812      	ldrb	r2, [r2, #0]
    a672:	b2d2      	uxtb	r2, r2
    a674:	f042 0210 	orr.w	r2, r2, #16
    a678:	b2d2      	uxtb	r2, r2
    a67a:	701a      	strb	r2, [r3, #0]
    a67c:	e00b      	b.n	a696 <send_nav_ref+0x756>
    a67e:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    a682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a686:	781b      	ldrb	r3, [r3, #0]
    a688:	3301      	adds	r3, #1
    a68a:	b2da      	uxtb	r2, r3
    a68c:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    a690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a694:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    a696:	46bd      	mov	sp, r7
    a698:	f85d 7b04 	ldr.w	r7, [sp], #4
    a69c:	4770      	bx	lr
    a69e:	bf00      	nop
    a6a0:	0001393f 	.word	0x0001393f

0000a6a4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    a6a4:	b480      	push	{r7}
    a6a6:	b083      	sub	sp, #12
    a6a8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    a6aa:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b2:	8a1b      	ldrh	r3, [r3, #16]
    a6b4:	b21b      	sxth	r3, r3
    a6b6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    a6ba:	db0d      	blt.n	a6d8 <inflight_calib_mode_update+0x34>
    a6bc:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c4:	8a1b      	ldrh	r3, [r3, #16]
    a6c6:	b21a      	sxth	r2, r3
    a6c8:	f640 437f 	movw	r3, #3199	; 0xc7f
    a6cc:	429a      	cmp	r2, r3
    a6ce:	bfd4      	ite	le
    a6d0:	2300      	movle	r3, #0
    a6d2:	2301      	movgt	r3, #1
    a6d4:	b2db      	uxtb	r3, r3
    a6d6:	e000      	b.n	a6da <inflight_calib_mode_update+0x36>
    a6d8:	2302      	movs	r3, #2
    a6da:	71fb      	strb	r3, [r7, #7]
    a6dc:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    a6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e4:	781b      	ldrb	r3, [r3, #0]
    a6e6:	79fa      	ldrb	r2, [r7, #7]
    a6e8:	429a      	cmp	r2, r3
    a6ea:	d007      	beq.n	a6fc <inflight_calib_mode_update+0x58>
    a6ec:	f64a 23cc 	movw	r3, #43724	; 0xaacc
    a6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f4:	79fa      	ldrb	r2, [r7, #7]
    a6f6:	701a      	strb	r2, [r3, #0]
    a6f8:	2301      	movs	r3, #1
    a6fa:	e000      	b.n	a6fe <inflight_calib_mode_update+0x5a>
    a6fc:	2300      	movs	r3, #0
}
    a6fe:	4618      	mov	r0, r3
    a700:	370c      	adds	r7, #12
    a702:	46bd      	mov	sp, r7
    a704:	f85d 7b04 	ldr.w	r7, [sp], #4
    a708:	4770      	bx	lr
    a70a:	bf00      	nop

0000a70c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    a712:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    a716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a71a:	2201      	movs	r2, #1
    a71c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    a71e:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    a722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a726:	781b      	ldrb	r3, [r3, #0]
    a728:	b2db      	uxtb	r3, r3
    a72a:	2b00      	cmp	r3, #0
    a72c:	f000 80df 	beq.w	a8ee <radio_control_task+0x1e2>
    uint8_t mode_changed = FALSE;
    a730:	2300      	movs	r3, #0
    a732:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    a734:	f7fa fa9c 	bl	4c70 <copy_from_to_fbw>
    //if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) 
    {
      pprz_mode = PPRZ_MODE_HOME;
    a738:	f24a 439c 	movw	r3, #42140	; 0xa49c
    a73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a740:	2203      	movs	r2, #3
    a742:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    a744:	2301      	movs	r3, #1
    a746:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    a748:	f7fa f96c 	bl	4a24 <pprz_mode_update>
    a74c:	4603      	mov	r3, r0
    a74e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    a750:	79fa      	ldrb	r2, [r7, #7]
    a752:	79bb      	ldrb	r3, [r7, #6]
    a754:	4313      	orrs	r3, r2
    a756:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    a758:	f7fa f9b0 	bl	4abc <ir_estim_mode_update>
    a75c:	4603      	mov	r3, r0
    a75e:	461a      	mov	r2, r3
    a760:	79fb      	ldrb	r3, [r7, #7]
    a762:	4313      	orrs	r3, r2
    a764:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    a766:	f7ff ff9d 	bl	a6a4 <inflight_calib_mode_update>
    a76a:	4603      	mov	r3, r0
    a76c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    a76e:	797b      	ldrb	r3, [r7, #5]
    a770:	2b00      	cmp	r3, #0
    a772:	d102      	bne.n	a77a <radio_control_task+0x6e>
    a774:	79bb      	ldrb	r3, [r7, #6]
    a776:	2b00      	cmp	r3, #0
    a778:	d001      	beq.n	a77e <radio_control_task+0x72>
    a77a:	2301      	movs	r3, #1
    a77c:	e000      	b.n	a780 <radio_control_task+0x74>
    a77e:	2300      	movs	r3, #0
    a780:	b2db      	uxtb	r3, r3
    a782:	4618      	mov	r0, r3
    a784:	f005 ff60 	bl	10648 <inflight_calib>
      mode_changed |= calib_mode_changed;
    a788:	79fa      	ldrb	r2, [r7, #7]
    a78a:	797b      	ldrb	r3, [r7, #5]
    a78c:	4313      	orrs	r3, r2
    a78e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    a790:	f7fa f9bc 	bl	4b0c <mcu1_status_update>
    a794:	4603      	mov	r3, r0
    a796:	461a      	mov	r2, r3
    a798:	79fb      	ldrb	r3, [r7, #7]
    a79a:	4313      	orrs	r3, r2
    a79c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    a79e:	2301      	movs	r3, #1
    a7a0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    a7a2:	79fb      	ldrb	r3, [r7, #7]
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d06a      	beq.n	a87e <radio_control_task+0x172>
      //DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    a7a8:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b0:	885b      	ldrh	r3, [r3, #2]
    a7b2:	b21b      	sxth	r3, r3
    a7b4:	4618      	mov	r0, r3
    a7b6:	f008 fd61 	bl	1327c <__aeabi_i2f>
    a7ba:	4603      	mov	r3, r0
    a7bc:	4618      	mov	r0, r3
    a7be:	f04f 0100 	mov.w	r1, #0
    a7c2:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a7c6:	f008 fe61 	bl	1348c <__aeabi_fdiv>
    a7ca:	4603      	mov	r3, r0
    a7cc:	4618      	mov	r0, r3
    a7ce:	f008 f915 	bl	129fc <__aeabi_f2d>
    a7d2:	4602      	mov	r2, r0
    a7d4:	460b      	mov	r3, r1
    a7d6:	4610      	mov	r0, r2
    a7d8:	4619      	mov	r1, r3
    a7da:	a347      	add	r3, pc, #284	; (adr r3, a8f8 <radio_control_task+0x1ec>)
    a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7e0:	f008 f960 	bl	12aa4 <__aeabi_dmul>
    a7e4:	4602      	mov	r2, r0
    a7e6:	460b      	mov	r3, r1
    a7e8:	4610      	mov	r0, r2
    a7ea:	4619      	mov	r1, r3
    a7ec:	f04f 0200 	mov.w	r2, #0
    a7f0:	f04f 0300 	mov.w	r3, #0
    a7f4:	f007 ffa4 	bl	12740 <__adddf3>
    a7f8:	4602      	mov	r2, r0
    a7fa:	460b      	mov	r3, r1
    a7fc:	4610      	mov	r0, r2
    a7fe:	4619      	mov	r1, r3
    a800:	f008 fc32 	bl	13068 <__aeabi_d2f>
    a804:	4602      	mov	r2, r0
    a806:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    a80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80e:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    a810:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a818:	889b      	ldrh	r3, [r3, #4]
    a81a:	b21b      	sxth	r3, r3
    a81c:	4618      	mov	r0, r3
    a81e:	f008 fd2d 	bl	1327c <__aeabi_i2f>
    a822:	4603      	mov	r3, r0
    a824:	4618      	mov	r0, r3
    a826:	f04f 0100 	mov.w	r1, #0
    a82a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a82e:	f008 fe2d 	bl	1348c <__aeabi_fdiv>
    a832:	4603      	mov	r3, r0
    a834:	4618      	mov	r0, r3
    a836:	f008 f8e1 	bl	129fc <__aeabi_f2d>
    a83a:	4602      	mov	r2, r0
    a83c:	460b      	mov	r3, r1
    a83e:	4610      	mov	r0, r2
    a840:	4619      	mov	r1, r3
    a842:	f04f 0200 	mov.w	r2, #0
    a846:	f04f 0300 	mov.w	r3, #0
    a84a:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    a84e:	f008 f929 	bl	12aa4 <__aeabi_dmul>
    a852:	4602      	mov	r2, r0
    a854:	460b      	mov	r3, r1
    a856:	4610      	mov	r0, r2
    a858:	4619      	mov	r1, r3
    a85a:	f04f 0200 	mov.w	r2, #0
    a85e:	f04f 0300 	mov.w	r3, #0
    a862:	f007 ff6d 	bl	12740 <__adddf3>
    a866:	4602      	mov	r2, r0
    a868:	460b      	mov	r3, r1
    a86a:	4610      	mov	r0, r2
    a86c:	4619      	mov	r1, r3
    a86e:	f008 fbfb 	bl	13068 <__aeabi_d2f>
    a872:	4602      	mov	r2, r0
    a874:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    a878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87c:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    a87e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a886:	881a      	ldrh	r2, [r3, #0]
    a888:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    a88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a890:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    a892:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a89a:	7c9a      	ldrb	r2, [r3, #18]
    a89c:	f24a 43a4 	movw	r3, #42148	; 0xa4a4
    a8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a4:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    a8a6:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ae:	7d5a      	ldrb	r2, [r3, #21]
    a8b0:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
    a8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b8:	701a      	strb	r2, [r3, #0]

    events_update();
    a8ba:	f7fa f957 	bl	4b6c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    a8be:	f7fa f867 	bl	4990 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    a8c2:	f24a 439c 	movw	r3, #42140	; 0xa49c
    a8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ca:	781b      	ldrb	r3, [r3, #0]
    a8cc:	2b02      	cmp	r3, #2
    a8ce:	d10e      	bne.n	a8ee <radio_control_task+0x1e2>
    a8d0:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    a8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d8:	881b      	ldrh	r3, [r3, #0]
    a8da:	b21b      	sxth	r3, r3
    a8dc:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    a8e0:	dd05      	ble.n	a8ee <radio_control_task+0x1e2>
	launch = TRUE;
    a8e2:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    a8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ea:	2201      	movs	r2, #1
    a8ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    a8ee:	3708      	adds	r7, #8
    a8f0:	46bd      	mov	sp, r7
    a8f2:	bd80      	pop	{r7, pc}
    a8f4:	f3af 8000 	nop.w
    a8f8:	33333333 	.word	0x33333333
    a8fc:	bfe33333 	.word	0xbfe33333

0000a900 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    a900:	b580      	push	{r7, lr}
    a902:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    a904:	f24a 439e 	movw	r3, #42142	; 0xa49e
    a908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a90c:	2203      	movs	r2, #3
    a90e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    a910:	f24a 439c 	movw	r3, #42140	; 0xa49c
    a914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a918:	781b      	ldrb	r3, [r3, #0]
    a91a:	2b03      	cmp	r3, #3
    a91c:	d102      	bne.n	a924 <navigation_update+0x24>
    nav_home();
    a91e:	f005 f917 	bl	fb50 <nav_home>
    a922:	e001      	b.n	a928 <navigation_update+0x28>
  else
    nav_update();
    a924:	f005 f93a 	bl	fb9c <nav_update>
}
    a928:	bd80      	pop	{r7, pc}
    a92a:	bf00      	nop

0000a92c <send_nav_values>:

void send_nav_values(void){
    a92c:	b480      	push	{r7}
    a92e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    a930:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a938:	781a      	ldrb	r2, [r3, #0]
    a93a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a942:	781b      	ldrb	r3, [r3, #0]
    a944:	b2db      	uxtb	r3, r3
    a946:	429a      	cmp	r2, r3
    a948:	d313      	bcc.n	a972 <send_nav_values+0x46>
    a94a:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a952:	781b      	ldrb	r3, [r3, #0]
    a954:	b2db      	uxtb	r3, r3
    a956:	461a      	mov	r2, r3
    a958:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	1ad3      	subs	r3, r2, r3
    a964:	33ff      	adds	r3, #255	; 0xff
    a966:	2b1e      	cmp	r3, #30
    a968:	bfd4      	ite	le
    a96a:	2300      	movle	r3, #0
    a96c:	2301      	movgt	r3, #1
    a96e:	b2db      	uxtb	r3, r3
    a970:	e011      	b.n	a996 <send_nav_values+0x6a>
    a972:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    a976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a97a:	781b      	ldrb	r3, [r3, #0]
    a97c:	b2db      	uxtb	r3, r3
    a97e:	461a      	mov	r2, r3
    a980:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a988:	781b      	ldrb	r3, [r3, #0]
    a98a:	1ad3      	subs	r3, r2, r3
    a98c:	2b1e      	cmp	r3, #30
    a98e:	bfd4      	ite	le
    a990:	2300      	movle	r3, #0
    a992:	2301      	movgt	r3, #1
    a994:	b2db      	uxtb	r3, r3
    a996:	2b00      	cmp	r3, #0
    a998:	f001 8094 	beq.w	bac4 <send_nav_values+0x1198>
    a99c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a4:	781b      	ldrb	r3, [r3, #0]
    a9a6:	461a      	mov	r2, r3
    a9a8:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	2105      	movs	r1, #5
    a9b2:	5499      	strb	r1, [r3, r2]
    a9b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9bc:	781b      	ldrb	r3, [r3, #0]
    a9be:	3301      	adds	r3, #1
    a9c0:	b2da      	uxtb	r2, r3
    a9c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ca:	701a      	strb	r2, [r3, #0]
    a9cc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d4:	781b      	ldrb	r3, [r3, #0]
    a9d6:	2bff      	cmp	r3, #255	; 0xff
    a9d8:	d105      	bne.n	a9e6 <send_nav_values+0xba>
    a9da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e2:	2200      	movs	r2, #0
    a9e4:	701a      	strb	r2, [r3, #0]
    a9e6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    a9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ee:	781b      	ldrb	r3, [r3, #0]
    a9f0:	461a      	mov	r2, r3
    a9f2:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    a9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9fa:	210a      	movs	r1, #10
    a9fc:	5499      	strb	r1, [r3, r2]
    a9fe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa06:	781b      	ldrb	r3, [r3, #0]
    aa08:	3301      	adds	r3, #1
    aa0a:	b2da      	uxtb	r2, r3
    aa0c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa14:	701a      	strb	r2, [r3, #0]
    aa16:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	2bff      	cmp	r3, #255	; 0xff
    aa22:	d105      	bne.n	aa30 <send_nav_values+0x104>
    aa24:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2c:	2200      	movs	r2, #0
    aa2e:	701a      	strb	r2, [r3, #0]
    aa30:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa38:	220a      	movs	r2, #10
    aa3a:	701a      	strb	r2, [r3, #0]
    aa3c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aa40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa44:	220a      	movs	r2, #10
    aa46:	701a      	strb	r2, [r3, #0]
    aa48:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aa4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa50:	781b      	ldrb	r3, [r3, #0]
    aa52:	461a      	mov	r2, r3
    aa54:	f64a 0311 	movw	r3, #43025	; 0xa811
    aa58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5c:	7819      	ldrb	r1, [r3, #0]
    aa5e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aa62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa66:	5499      	strb	r1, [r3, r2]
    aa68:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa70:	781a      	ldrb	r2, [r3, #0]
    aa72:	f64a 0311 	movw	r3, #43025	; 0xa811
    aa76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7a:	781b      	ldrb	r3, [r3, #0]
    aa7c:	4413      	add	r3, r2
    aa7e:	b2da      	uxtb	r2, r3
    aa80:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aa84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa88:	701a      	strb	r2, [r3, #0]
    aa8a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa92:	781a      	ldrb	r2, [r3, #0]
    aa94:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aa98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9c:	781b      	ldrb	r3, [r3, #0]
    aa9e:	4413      	add	r3, r2
    aaa0:	b2da      	uxtb	r2, r3
    aaa2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aaa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaaa:	701a      	strb	r2, [r3, #0]
    aaac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab4:	781b      	ldrb	r3, [r3, #0]
    aab6:	3301      	adds	r3, #1
    aab8:	b2da      	uxtb	r2, r3
    aaba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac2:	701a      	strb	r2, [r3, #0]
    aac4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aacc:	781b      	ldrb	r3, [r3, #0]
    aace:	2bff      	cmp	r3, #255	; 0xff
    aad0:	d105      	bne.n	aade <send_nav_values+0x1b2>
    aad2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aada:	2200      	movs	r2, #0
    aadc:	701a      	strb	r2, [r3, #0]
    aade:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae6:	781b      	ldrb	r3, [r3, #0]
    aae8:	461a      	mov	r2, r3
    aaea:	f64a 0310 	movw	r3, #43024	; 0xa810
    aaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf2:	7819      	ldrb	r1, [r3, #0]
    aaf4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aaf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aafc:	5499      	strb	r1, [r3, r2]
    aafe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ab02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab06:	781a      	ldrb	r2, [r3, #0]
    ab08:	f64a 0310 	movw	r3, #43024	; 0xa810
    ab0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	4413      	add	r3, r2
    ab14:	b2da      	uxtb	r2, r3
    ab16:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ab1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1e:	701a      	strb	r2, [r3, #0]
    ab20:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ab24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab28:	781a      	ldrb	r2, [r3, #0]
    ab2a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ab2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab32:	781b      	ldrb	r3, [r3, #0]
    ab34:	4413      	add	r3, r2
    ab36:	b2da      	uxtb	r2, r3
    ab38:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ab3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab40:	701a      	strb	r2, [r3, #0]
    ab42:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ab46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4a:	781b      	ldrb	r3, [r3, #0]
    ab4c:	3301      	adds	r3, #1
    ab4e:	b2da      	uxtb	r2, r3
    ab50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ab54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab58:	701a      	strb	r2, [r3, #0]
    ab5a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ab5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab62:	781b      	ldrb	r3, [r3, #0]
    ab64:	2bff      	cmp	r3, #255	; 0xff
    ab66:	d105      	bne.n	ab74 <send_nav_values+0x248>
    ab68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ab6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab70:	2200      	movs	r2, #0
    ab72:	701a      	strb	r2, [r3, #0]
    ab74:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ab78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	461a      	mov	r2, r3
    ab80:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ab84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab88:	7819      	ldrb	r1, [r3, #0]
    ab8a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ab8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab92:	5499      	strb	r1, [r3, r2]
    ab94:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ab98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab9c:	781a      	ldrb	r2, [r3, #0]
    ab9e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    aba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	4413      	add	r3, r2
    abaa:	b2da      	uxtb	r2, r3
    abac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    abb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb4:	701a      	strb	r2, [r3, #0]
    abb6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    abba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abbe:	781a      	ldrb	r2, [r3, #0]
    abc0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    abc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	4413      	add	r3, r2
    abcc:	b2da      	uxtb	r2, r3
    abce:	f24a 53be 	movw	r3, #42430	; 0xa5be
    abd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd6:	701a      	strb	r2, [r3, #0]
    abd8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe0:	781b      	ldrb	r3, [r3, #0]
    abe2:	3301      	adds	r3, #1
    abe4:	b2da      	uxtb	r2, r3
    abe6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    abea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abee:	701a      	strb	r2, [r3, #0]
    abf0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    abf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf8:	781b      	ldrb	r3, [r3, #0]
    abfa:	2bff      	cmp	r3, #255	; 0xff
    abfc:	d105      	bne.n	ac0a <send_nav_values+0x2de>
    abfe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac06:	2200      	movs	r2, #0
    ac08:	701a      	strb	r2, [r3, #0]
    ac0a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac12:	781b      	ldrb	r3, [r3, #0]
    ac14:	461a      	mov	r2, r3
    ac16:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ac1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac1e:	7859      	ldrb	r1, [r3, #1]
    ac20:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ac24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac28:	5499      	strb	r1, [r3, r2]
    ac2a:	4bd2      	ldr	r3, [pc, #840]	; (af74 <send_nav_values+0x648>)
    ac2c:	781a      	ldrb	r2, [r3, #0]
    ac2e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ac32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	4413      	add	r3, r2
    ac3a:	b2da      	uxtb	r2, r3
    ac3c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ac40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac44:	701a      	strb	r2, [r3, #0]
    ac46:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ac4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4e:	781a      	ldrb	r2, [r3, #0]
    ac50:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ac54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac58:	781b      	ldrb	r3, [r3, #0]
    ac5a:	4413      	add	r3, r2
    ac5c:	b2da      	uxtb	r2, r3
    ac5e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ac62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac66:	701a      	strb	r2, [r3, #0]
    ac68:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac70:	781b      	ldrb	r3, [r3, #0]
    ac72:	3301      	adds	r3, #1
    ac74:	b2da      	uxtb	r2, r3
    ac76:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac7e:	701a      	strb	r2, [r3, #0]
    ac80:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac88:	781b      	ldrb	r3, [r3, #0]
    ac8a:	2bff      	cmp	r3, #255	; 0xff
    ac8c:	d105      	bne.n	ac9a <send_nav_values+0x36e>
    ac8e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac96:	2200      	movs	r2, #0
    ac98:	701a      	strb	r2, [r3, #0]
    ac9a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ac9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca2:	781b      	ldrb	r3, [r3, #0]
    aca4:	461a      	mov	r2, r3
    aca6:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    acaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acae:	7899      	ldrb	r1, [r3, #2]
    acb0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    acb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb8:	5499      	strb	r1, [r3, r2]
    acba:	4baf      	ldr	r3, [pc, #700]	; (af78 <send_nav_values+0x64c>)
    acbc:	781a      	ldrb	r2, [r3, #0]
    acbe:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    acc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc6:	781b      	ldrb	r3, [r3, #0]
    acc8:	4413      	add	r3, r2
    acca:	b2da      	uxtb	r2, r3
    accc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    acd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd4:	701a      	strb	r2, [r3, #0]
    acd6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    acda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acde:	781a      	ldrb	r2, [r3, #0]
    ace0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ace4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace8:	781b      	ldrb	r3, [r3, #0]
    acea:	4413      	add	r3, r2
    acec:	b2da      	uxtb	r2, r3
    acee:	f24a 53be 	movw	r3, #42430	; 0xa5be
    acf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf6:	701a      	strb	r2, [r3, #0]
    acf8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    acfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad00:	781b      	ldrb	r3, [r3, #0]
    ad02:	3301      	adds	r3, #1
    ad04:	b2da      	uxtb	r2, r3
    ad06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad0e:	701a      	strb	r2, [r3, #0]
    ad10:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad18:	781b      	ldrb	r3, [r3, #0]
    ad1a:	2bff      	cmp	r3, #255	; 0xff
    ad1c:	d105      	bne.n	ad2a <send_nav_values+0x3fe>
    ad1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad26:	2200      	movs	r2, #0
    ad28:	701a      	strb	r2, [r3, #0]
    ad2a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad32:	781b      	ldrb	r3, [r3, #0]
    ad34:	461a      	mov	r2, r3
    ad36:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ad3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3e:	78d9      	ldrb	r1, [r3, #3]
    ad40:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ad44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad48:	5499      	strb	r1, [r3, r2]
    ad4a:	4b8c      	ldr	r3, [pc, #560]	; (af7c <send_nav_values+0x650>)
    ad4c:	781a      	ldrb	r2, [r3, #0]
    ad4e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	4413      	add	r3, r2
    ad5a:	b2da      	uxtb	r2, r3
    ad5c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad64:	701a      	strb	r2, [r3, #0]
    ad66:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ad6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad6e:	781a      	ldrb	r2, [r3, #0]
    ad70:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ad74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad78:	781b      	ldrb	r3, [r3, #0]
    ad7a:	4413      	add	r3, r2
    ad7c:	b2da      	uxtb	r2, r3
    ad7e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ad82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad86:	701a      	strb	r2, [r3, #0]
    ad88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad90:	781b      	ldrb	r3, [r3, #0]
    ad92:	3301      	adds	r3, #1
    ad94:	b2da      	uxtb	r2, r3
    ad96:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ad9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad9e:	701a      	strb	r2, [r3, #0]
    ada0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ada4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada8:	781b      	ldrb	r3, [r3, #0]
    adaa:	2bff      	cmp	r3, #255	; 0xff
    adac:	d105      	bne.n	adba <send_nav_values+0x48e>
    adae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    adb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb6:	2200      	movs	r2, #0
    adb8:	701a      	strb	r2, [r3, #0]
    adba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    adbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc2:	781b      	ldrb	r3, [r3, #0]
    adc4:	461a      	mov	r2, r3
    adc6:	f64a 2370 	movw	r3, #43632	; 0xaa70
    adca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adce:	7819      	ldrb	r1, [r3, #0]
    add0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    add4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add8:	5499      	strb	r1, [r3, r2]
    adda:	f64a 2370 	movw	r3, #43632	; 0xaa70
    adde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade2:	781a      	ldrb	r2, [r3, #0]
    ade4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ade8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adec:	781b      	ldrb	r3, [r3, #0]
    adee:	4413      	add	r3, r2
    adf0:	b2da      	uxtb	r2, r3
    adf2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    adf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adfa:	701a      	strb	r2, [r3, #0]
    adfc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ae00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae04:	781a      	ldrb	r2, [r3, #0]
    ae06:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae0e:	781b      	ldrb	r3, [r3, #0]
    ae10:	4413      	add	r3, r2
    ae12:	b2da      	uxtb	r2, r3
    ae14:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ae18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae1c:	701a      	strb	r2, [r3, #0]
    ae1e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae26:	781b      	ldrb	r3, [r3, #0]
    ae28:	3301      	adds	r3, #1
    ae2a:	b2da      	uxtb	r2, r3
    ae2c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae34:	701a      	strb	r2, [r3, #0]
    ae36:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae3e:	781b      	ldrb	r3, [r3, #0]
    ae40:	2bff      	cmp	r3, #255	; 0xff
    ae42:	d105      	bne.n	ae50 <send_nav_values+0x524>
    ae44:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae4c:	2200      	movs	r2, #0
    ae4e:	701a      	strb	r2, [r3, #0]
    ae50:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ae54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae58:	781b      	ldrb	r3, [r3, #0]
    ae5a:	461a      	mov	r2, r3
    ae5c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    ae60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae64:	7859      	ldrb	r1, [r3, #1]
    ae66:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ae6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae6e:	5499      	strb	r1, [r3, r2]
    ae70:	4b43      	ldr	r3, [pc, #268]	; (af80 <send_nav_values+0x654>)
    ae72:	781a      	ldrb	r2, [r3, #0]
    ae74:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae7c:	781b      	ldrb	r3, [r3, #0]
    ae7e:	4413      	add	r3, r2
    ae80:	b2da      	uxtb	r2, r3
    ae82:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae8a:	701a      	strb	r2, [r3, #0]
    ae8c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    ae90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae94:	781a      	ldrb	r2, [r3, #0]
    ae96:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    ae9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	4413      	add	r3, r2
    aea2:	b2da      	uxtb	r2, r3
    aea4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    aea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeac:	701a      	strb	r2, [r3, #0]
    aeae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aeb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb6:	781b      	ldrb	r3, [r3, #0]
    aeb8:	3301      	adds	r3, #1
    aeba:	b2da      	uxtb	r2, r3
    aebc:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec4:	701a      	strb	r2, [r3, #0]
    aec6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aece:	781b      	ldrb	r3, [r3, #0]
    aed0:	2bff      	cmp	r3, #255	; 0xff
    aed2:	d105      	bne.n	aee0 <send_nav_values+0x5b4>
    aed4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aedc:	2200      	movs	r2, #0
    aede:	701a      	strb	r2, [r3, #0]
    aee0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee8:	781b      	ldrb	r3, [r3, #0]
    aeea:	461a      	mov	r2, r3
    aeec:	f64a 2370 	movw	r3, #43632	; 0xaa70
    aef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef4:	7899      	ldrb	r1, [r3, #2]
    aef6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    aefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefe:	5499      	strb	r1, [r3, r2]
    af00:	4b20      	ldr	r3, [pc, #128]	; (af84 <send_nav_values+0x658>)
    af02:	781a      	ldrb	r2, [r3, #0]
    af04:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    af08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af0c:	781b      	ldrb	r3, [r3, #0]
    af0e:	4413      	add	r3, r2
    af10:	b2da      	uxtb	r2, r3
    af12:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    af16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af1a:	701a      	strb	r2, [r3, #0]
    af1c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    af20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af24:	781a      	ldrb	r2, [r3, #0]
    af26:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    af2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2e:	781b      	ldrb	r3, [r3, #0]
    af30:	4413      	add	r3, r2
    af32:	b2da      	uxtb	r2, r3
    af34:	f24a 53be 	movw	r3, #42430	; 0xa5be
    af38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3c:	701a      	strb	r2, [r3, #0]
    af3e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af46:	781b      	ldrb	r3, [r3, #0]
    af48:	3301      	adds	r3, #1
    af4a:	b2da      	uxtb	r2, r3
    af4c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af54:	701a      	strb	r2, [r3, #0]
    af56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af5e:	781b      	ldrb	r3, [r3, #0]
    af60:	2bff      	cmp	r3, #255	; 0xff
    af62:	d111      	bne.n	af88 <send_nav_values+0x65c>
    af64:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6c:	2200      	movs	r2, #0
    af6e:	701a      	strb	r2, [r3, #0]
    af70:	e00a      	b.n	af88 <send_nav_values+0x65c>
    af72:	bf00      	nop
    af74:	2000aa6d 	.word	0x2000aa6d
    af78:	2000aa6e 	.word	0x2000aa6e
    af7c:	2000aa6f 	.word	0x2000aa6f
    af80:	2000aa71 	.word	0x2000aa71
    af84:	2000aa72 	.word	0x2000aa72
    af88:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    af8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	461a      	mov	r2, r3
    af94:	f64a 2370 	movw	r3, #43632	; 0xaa70
    af98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9c:	78d9      	ldrb	r1, [r3, #3]
    af9e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    afa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa6:	5499      	strb	r1, [r3, r2]
    afa8:	4bd3      	ldr	r3, [pc, #844]	; (b2f8 <send_nav_values+0x9cc>)
    afaa:	781a      	ldrb	r2, [r3, #0]
    afac:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    afb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb4:	781b      	ldrb	r3, [r3, #0]
    afb6:	4413      	add	r3, r2
    afb8:	b2da      	uxtb	r2, r3
    afba:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    afbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc2:	701a      	strb	r2, [r3, #0]
    afc4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    afc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afcc:	781a      	ldrb	r2, [r3, #0]
    afce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    afd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd6:	781b      	ldrb	r3, [r3, #0]
    afd8:	4413      	add	r3, r2
    afda:	b2da      	uxtb	r2, r3
    afdc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    afe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe4:	701a      	strb	r2, [r3, #0]
    afe6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    afea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afee:	781b      	ldrb	r3, [r3, #0]
    aff0:	3301      	adds	r3, #1
    aff2:	b2da      	uxtb	r2, r3
    aff4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    aff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affc:	701a      	strb	r2, [r3, #0]
    affe:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b006:	781b      	ldrb	r3, [r3, #0]
    b008:	2bff      	cmp	r3, #255	; 0xff
    b00a:	d105      	bne.n	b018 <send_nav_values+0x6ec>
    b00c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b014:	2200      	movs	r2, #0
    b016:	701a      	strb	r2, [r3, #0]
    b018:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	781b      	ldrb	r3, [r3, #0]
    b022:	461a      	mov	r2, r3
    b024:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    b028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02c:	7819      	ldrb	r1, [r3, #0]
    b02e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b036:	5499      	strb	r1, [r3, r2]
    b038:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    b03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b040:	781a      	ldrb	r2, [r3, #0]
    b042:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b04a:	781b      	ldrb	r3, [r3, #0]
    b04c:	4413      	add	r3, r2
    b04e:	b2da      	uxtb	r2, r3
    b050:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b058:	701a      	strb	r2, [r3, #0]
    b05a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b062:	781a      	ldrb	r2, [r3, #0]
    b064:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b06c:	781b      	ldrb	r3, [r3, #0]
    b06e:	4413      	add	r3, r2
    b070:	b2da      	uxtb	r2, r3
    b072:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b07a:	701a      	strb	r2, [r3, #0]
    b07c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b084:	781b      	ldrb	r3, [r3, #0]
    b086:	3301      	adds	r3, #1
    b088:	b2da      	uxtb	r2, r3
    b08a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b092:	701a      	strb	r2, [r3, #0]
    b094:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b09c:	781b      	ldrb	r3, [r3, #0]
    b09e:	2bff      	cmp	r3, #255	; 0xff
    b0a0:	d105      	bne.n	b0ae <send_nav_values+0x782>
    b0a2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0aa:	2200      	movs	r2, #0
    b0ac:	701a      	strb	r2, [r3, #0]
    b0ae:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	461a      	mov	r2, r3
    b0ba:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    b0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c2:	7859      	ldrb	r1, [r3, #1]
    b0c4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0cc:	5499      	strb	r1, [r3, r2]
    b0ce:	4b8b      	ldr	r3, [pc, #556]	; (b2fc <send_nav_values+0x9d0>)
    b0d0:	781a      	ldrb	r2, [r3, #0]
    b0d2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0da:	781b      	ldrb	r3, [r3, #0]
    b0dc:	4413      	add	r3, r2
    b0de:	b2da      	uxtb	r2, r3
    b0e0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e8:	701a      	strb	r2, [r3, #0]
    b0ea:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f2:	781a      	ldrb	r2, [r3, #0]
    b0f4:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0fc:	781b      	ldrb	r3, [r3, #0]
    b0fe:	4413      	add	r3, r2
    b100:	b2da      	uxtb	r2, r3
    b102:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b10a:	701a      	strb	r2, [r3, #0]
    b10c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b114:	781b      	ldrb	r3, [r3, #0]
    b116:	3301      	adds	r3, #1
    b118:	b2da      	uxtb	r2, r3
    b11a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b122:	701a      	strb	r2, [r3, #0]
    b124:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b12c:	781b      	ldrb	r3, [r3, #0]
    b12e:	2bff      	cmp	r3, #255	; 0xff
    b130:	d105      	bne.n	b13e <send_nav_values+0x812>
    b132:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b13a:	2200      	movs	r2, #0
    b13c:	701a      	strb	r2, [r3, #0]
    b13e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	461a      	mov	r2, r3
    b14a:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    b14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b152:	7899      	ldrb	r1, [r3, #2]
    b154:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b15c:	5499      	strb	r1, [r3, r2]
    b15e:	4b68      	ldr	r3, [pc, #416]	; (b300 <send_nav_values+0x9d4>)
    b160:	781a      	ldrb	r2, [r3, #0]
    b162:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	4413      	add	r3, r2
    b16e:	b2da      	uxtb	r2, r3
    b170:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b178:	701a      	strb	r2, [r3, #0]
    b17a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b182:	781a      	ldrb	r2, [r3, #0]
    b184:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18c:	781b      	ldrb	r3, [r3, #0]
    b18e:	4413      	add	r3, r2
    b190:	b2da      	uxtb	r2, r3
    b192:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19a:	701a      	strb	r2, [r3, #0]
    b19c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a4:	781b      	ldrb	r3, [r3, #0]
    b1a6:	3301      	adds	r3, #1
    b1a8:	b2da      	uxtb	r2, r3
    b1aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b2:	701a      	strb	r2, [r3, #0]
    b1b4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1bc:	781b      	ldrb	r3, [r3, #0]
    b1be:	2bff      	cmp	r3, #255	; 0xff
    b1c0:	d105      	bne.n	b1ce <send_nav_values+0x8a2>
    b1c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ca:	2200      	movs	r2, #0
    b1cc:	701a      	strb	r2, [r3, #0]
    b1ce:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	461a      	mov	r2, r3
    b1da:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    b1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e2:	78d9      	ldrb	r1, [r3, #3]
    b1e4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ec:	5499      	strb	r1, [r3, r2]
    b1ee:	4b45      	ldr	r3, [pc, #276]	; (b304 <send_nav_values+0x9d8>)
    b1f0:	781a      	ldrb	r2, [r3, #0]
    b1f2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	4413      	add	r3, r2
    b1fe:	b2da      	uxtb	r2, r3
    b200:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b208:	701a      	strb	r2, [r3, #0]
    b20a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b212:	781a      	ldrb	r2, [r3, #0]
    b214:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21c:	781b      	ldrb	r3, [r3, #0]
    b21e:	4413      	add	r3, r2
    b220:	b2da      	uxtb	r2, r3
    b222:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22a:	701a      	strb	r2, [r3, #0]
    b22c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b234:	781b      	ldrb	r3, [r3, #0]
    b236:	3301      	adds	r3, #1
    b238:	b2da      	uxtb	r2, r3
    b23a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b242:	701a      	strb	r2, [r3, #0]
    b244:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24c:	781b      	ldrb	r3, [r3, #0]
    b24e:	2bff      	cmp	r3, #255	; 0xff
    b250:	d105      	bne.n	b25e <send_nav_values+0x932>
    b252:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b25a:	2200      	movs	r2, #0
    b25c:	701a      	strb	r2, [r3, #0]
    b25e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b266:	781b      	ldrb	r3, [r3, #0]
    b268:	461a      	mov	r2, r3
    b26a:	f64a 0344 	movw	r3, #43076	; 0xa844
    b26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b272:	7819      	ldrb	r1, [r3, #0]
    b274:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27c:	5499      	strb	r1, [r3, r2]
    b27e:	f64a 0344 	movw	r3, #43076	; 0xa844
    b282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b286:	781a      	ldrb	r2, [r3, #0]
    b288:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b290:	781b      	ldrb	r3, [r3, #0]
    b292:	4413      	add	r3, r2
    b294:	b2da      	uxtb	r2, r3
    b296:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b29e:	701a      	strb	r2, [r3, #0]
    b2a0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a8:	781a      	ldrb	r2, [r3, #0]
    b2aa:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b2:	781b      	ldrb	r3, [r3, #0]
    b2b4:	4413      	add	r3, r2
    b2b6:	b2da      	uxtb	r2, r3
    b2b8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c0:	701a      	strb	r2, [r3, #0]
    b2c2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ca:	781b      	ldrb	r3, [r3, #0]
    b2cc:	3301      	adds	r3, #1
    b2ce:	b2da      	uxtb	r2, r3
    b2d0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d8:	701a      	strb	r2, [r3, #0]
    b2da:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	2bff      	cmp	r3, #255	; 0xff
    b2e6:	d10f      	bne.n	b308 <send_nav_values+0x9dc>
    b2e8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f0:	2200      	movs	r2, #0
    b2f2:	701a      	strb	r2, [r3, #0]
    b2f4:	e008      	b.n	b308 <send_nav_values+0x9dc>
    b2f6:	bf00      	nop
    b2f8:	2000aa73 	.word	0x2000aa73
    b2fc:	2000a7fd 	.word	0x2000a7fd
    b300:	2000a7fe 	.word	0x2000a7fe
    b304:	2000a7ff 	.word	0x2000a7ff
    b308:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b310:	781b      	ldrb	r3, [r3, #0]
    b312:	461a      	mov	r2, r3
    b314:	f64a 0344 	movw	r3, #43076	; 0xa844
    b318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b31c:	7859      	ldrb	r1, [r3, #1]
    b31e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b326:	5499      	strb	r1, [r3, r2]
    b328:	4bd1      	ldr	r3, [pc, #836]	; (b670 <send_nav_values+0xd44>)
    b32a:	781a      	ldrb	r2, [r3, #0]
    b32c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b334:	781b      	ldrb	r3, [r3, #0]
    b336:	4413      	add	r3, r2
    b338:	b2da      	uxtb	r2, r3
    b33a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b342:	701a      	strb	r2, [r3, #0]
    b344:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b34c:	781a      	ldrb	r2, [r3, #0]
    b34e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b356:	781b      	ldrb	r3, [r3, #0]
    b358:	4413      	add	r3, r2
    b35a:	b2da      	uxtb	r2, r3
    b35c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b364:	701a      	strb	r2, [r3, #0]
    b366:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36e:	781b      	ldrb	r3, [r3, #0]
    b370:	3301      	adds	r3, #1
    b372:	b2da      	uxtb	r2, r3
    b374:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b37c:	701a      	strb	r2, [r3, #0]
    b37e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b386:	781b      	ldrb	r3, [r3, #0]
    b388:	2bff      	cmp	r3, #255	; 0xff
    b38a:	d105      	bne.n	b398 <send_nav_values+0xa6c>
    b38c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b394:	2200      	movs	r2, #0
    b396:	701a      	strb	r2, [r3, #0]
    b398:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a0:	781b      	ldrb	r3, [r3, #0]
    b3a2:	461a      	mov	r2, r3
    b3a4:	f64a 0344 	movw	r3, #43076	; 0xa844
    b3a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ac:	7899      	ldrb	r1, [r3, #2]
    b3ae:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b6:	5499      	strb	r1, [r3, r2]
    b3b8:	4bae      	ldr	r3, [pc, #696]	; (b674 <send_nav_values+0xd48>)
    b3ba:	781a      	ldrb	r2, [r3, #0]
    b3bc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c4:	781b      	ldrb	r3, [r3, #0]
    b3c6:	4413      	add	r3, r2
    b3c8:	b2da      	uxtb	r2, r3
    b3ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d2:	701a      	strb	r2, [r3, #0]
    b3d4:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3dc:	781a      	ldrb	r2, [r3, #0]
    b3de:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e6:	781b      	ldrb	r3, [r3, #0]
    b3e8:	4413      	add	r3, r2
    b3ea:	b2da      	uxtb	r2, r3
    b3ec:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f4:	701a      	strb	r2, [r3, #0]
    b3f6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3fe:	781b      	ldrb	r3, [r3, #0]
    b400:	3301      	adds	r3, #1
    b402:	b2da      	uxtb	r2, r3
    b404:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b40c:	701a      	strb	r2, [r3, #0]
    b40e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b416:	781b      	ldrb	r3, [r3, #0]
    b418:	2bff      	cmp	r3, #255	; 0xff
    b41a:	d105      	bne.n	b428 <send_nav_values+0xafc>
    b41c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b424:	2200      	movs	r2, #0
    b426:	701a      	strb	r2, [r3, #0]
    b428:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b430:	781b      	ldrb	r3, [r3, #0]
    b432:	461a      	mov	r2, r3
    b434:	f64a 0344 	movw	r3, #43076	; 0xa844
    b438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b43c:	78d9      	ldrb	r1, [r3, #3]
    b43e:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b446:	5499      	strb	r1, [r3, r2]
    b448:	4b8b      	ldr	r3, [pc, #556]	; (b678 <send_nav_values+0xd4c>)
    b44a:	781a      	ldrb	r2, [r3, #0]
    b44c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b454:	781b      	ldrb	r3, [r3, #0]
    b456:	4413      	add	r3, r2
    b458:	b2da      	uxtb	r2, r3
    b45a:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b462:	701a      	strb	r2, [r3, #0]
    b464:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46c:	781a      	ldrb	r2, [r3, #0]
    b46e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b476:	781b      	ldrb	r3, [r3, #0]
    b478:	4413      	add	r3, r2
    b47a:	b2da      	uxtb	r2, r3
    b47c:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b484:	701a      	strb	r2, [r3, #0]
    b486:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b48e:	781b      	ldrb	r3, [r3, #0]
    b490:	3301      	adds	r3, #1
    b492:	b2da      	uxtb	r2, r3
    b494:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49c:	701a      	strb	r2, [r3, #0]
    b49e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a6:	781b      	ldrb	r3, [r3, #0]
    b4a8:	2bff      	cmp	r3, #255	; 0xff
    b4aa:	d105      	bne.n	b4b8 <send_nav_values+0xb8c>
    b4ac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b4:	2200      	movs	r2, #0
    b4b6:	701a      	strb	r2, [r3, #0]
    b4b8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	461a      	mov	r2, r3
    b4c4:	f240 1320 	movw	r3, #288	; 0x120
    b4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4cc:	7819      	ldrb	r1, [r3, #0]
    b4ce:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d6:	5499      	strb	r1, [r3, r2]
    b4d8:	f240 1320 	movw	r3, #288	; 0x120
    b4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e0:	781a      	ldrb	r2, [r3, #0]
    b4e2:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ea:	781b      	ldrb	r3, [r3, #0]
    b4ec:	4413      	add	r3, r2
    b4ee:	b2da      	uxtb	r2, r3
    b4f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f8:	701a      	strb	r2, [r3, #0]
    b4fa:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b4fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b502:	781a      	ldrb	r2, [r3, #0]
    b504:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b50c:	781b      	ldrb	r3, [r3, #0]
    b50e:	4413      	add	r3, r2
    b510:	b2da      	uxtb	r2, r3
    b512:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b51a:	701a      	strb	r2, [r3, #0]
    b51c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b524:	781b      	ldrb	r3, [r3, #0]
    b526:	3301      	adds	r3, #1
    b528:	b2da      	uxtb	r2, r3
    b52a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b532:	701a      	strb	r2, [r3, #0]
    b534:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b53c:	781b      	ldrb	r3, [r3, #0]
    b53e:	2bff      	cmp	r3, #255	; 0xff
    b540:	d105      	bne.n	b54e <send_nav_values+0xc22>
    b542:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b54a:	2200      	movs	r2, #0
    b54c:	701a      	strb	r2, [r3, #0]
    b54e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b556:	781b      	ldrb	r3, [r3, #0]
    b558:	461a      	mov	r2, r3
    b55a:	f240 1320 	movw	r3, #288	; 0x120
    b55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b562:	7859      	ldrb	r1, [r3, #1]
    b564:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b56c:	5499      	strb	r1, [r3, r2]
    b56e:	4b43      	ldr	r3, [pc, #268]	; (b67c <send_nav_values+0xd50>)
    b570:	781a      	ldrb	r2, [r3, #0]
    b572:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	4413      	add	r3, r2
    b57e:	b2da      	uxtb	r2, r3
    b580:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b588:	701a      	strb	r2, [r3, #0]
    b58a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b592:	781a      	ldrb	r2, [r3, #0]
    b594:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b59c:	781b      	ldrb	r3, [r3, #0]
    b59e:	4413      	add	r3, r2
    b5a0:	b2da      	uxtb	r2, r3
    b5a2:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5aa:	701a      	strb	r2, [r3, #0]
    b5ac:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b4:	781b      	ldrb	r3, [r3, #0]
    b5b6:	3301      	adds	r3, #1
    b5b8:	b2da      	uxtb	r2, r3
    b5ba:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c2:	701a      	strb	r2, [r3, #0]
    b5c4:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5cc:	781b      	ldrb	r3, [r3, #0]
    b5ce:	2bff      	cmp	r3, #255	; 0xff
    b5d0:	d105      	bne.n	b5de <send_nav_values+0xcb2>
    b5d2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5da:	2200      	movs	r2, #0
    b5dc:	701a      	strb	r2, [r3, #0]
    b5de:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e6:	781b      	ldrb	r3, [r3, #0]
    b5e8:	461a      	mov	r2, r3
    b5ea:	f240 1320 	movw	r3, #288	; 0x120
    b5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f2:	7899      	ldrb	r1, [r3, #2]
    b5f4:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5fc:	5499      	strb	r1, [r3, r2]
    b5fe:	4b20      	ldr	r3, [pc, #128]	; (b680 <send_nav_values+0xd54>)
    b600:	781a      	ldrb	r2, [r3, #0]
    b602:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60a:	781b      	ldrb	r3, [r3, #0]
    b60c:	4413      	add	r3, r2
    b60e:	b2da      	uxtb	r2, r3
    b610:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b618:	701a      	strb	r2, [r3, #0]
    b61a:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b622:	781a      	ldrb	r2, [r3, #0]
    b624:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b62c:	781b      	ldrb	r3, [r3, #0]
    b62e:	4413      	add	r3, r2
    b630:	b2da      	uxtb	r2, r3
    b632:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63a:	701a      	strb	r2, [r3, #0]
    b63c:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b644:	781b      	ldrb	r3, [r3, #0]
    b646:	3301      	adds	r3, #1
    b648:	b2da      	uxtb	r2, r3
    b64a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b652:	701a      	strb	r2, [r3, #0]
    b654:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b65c:	781b      	ldrb	r3, [r3, #0]
    b65e:	2bff      	cmp	r3, #255	; 0xff
    b660:	d110      	bne.n	b684 <send_nav_values+0xd58>
    b662:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66a:	2200      	movs	r2, #0
    b66c:	701a      	strb	r2, [r3, #0]
    b66e:	e009      	b.n	b684 <send_nav_values+0xd58>
    b670:	2000a845 	.word	0x2000a845
    b674:	2000a846 	.word	0x2000a846
    b678:	2000a847 	.word	0x2000a847
    b67c:	20000121 	.word	0x20000121
    b680:	20000122 	.word	0x20000122
    b684:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b68c:	781b      	ldrb	r3, [r3, #0]
    b68e:	461a      	mov	r2, r3
    b690:	f240 1320 	movw	r3, #288	; 0x120
    b694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b698:	78d9      	ldrb	r1, [r3, #3]
    b69a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a2:	5499      	strb	r1, [r3, r2]
    b6a4:	4bc2      	ldr	r3, [pc, #776]	; (b9b0 <send_nav_values+0x1084>)
    b6a6:	781a      	ldrb	r2, [r3, #0]
    b6a8:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	4413      	add	r3, r2
    b6b4:	b2da      	uxtb	r2, r3
    b6b6:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6be:	701a      	strb	r2, [r3, #0]
    b6c0:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c8:	781a      	ldrb	r2, [r3, #0]
    b6ca:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d2:	781b      	ldrb	r3, [r3, #0]
    b6d4:	4413      	add	r3, r2
    b6d6:	b2da      	uxtb	r2, r3
    b6d8:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e0:	701a      	strb	r2, [r3, #0]
    b6e2:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ea:	781b      	ldrb	r3, [r3, #0]
    b6ec:	3301      	adds	r3, #1
    b6ee:	b2da      	uxtb	r2, r3
    b6f0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f8:	701a      	strb	r2, [r3, #0]
    b6fa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b702:	781b      	ldrb	r3, [r3, #0]
    b704:	2bff      	cmp	r3, #255	; 0xff
    b706:	d105      	bne.n	b714 <send_nav_values+0xde8>
    b708:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b710:	2200      	movs	r2, #0
    b712:	701a      	strb	r2, [r3, #0]
    b714:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b71c:	781b      	ldrb	r3, [r3, #0]
    b71e:	461a      	mov	r2, r3
    b720:	f64a 0348 	movw	r3, #43080	; 0xa848
    b724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b728:	7819      	ldrb	r1, [r3, #0]
    b72a:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b732:	5499      	strb	r1, [r3, r2]
    b734:	f64a 0348 	movw	r3, #43080	; 0xa848
    b738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b73c:	781a      	ldrb	r2, [r3, #0]
    b73e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b746:	781b      	ldrb	r3, [r3, #0]
    b748:	4413      	add	r3, r2
    b74a:	b2da      	uxtb	r2, r3
    b74c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b754:	701a      	strb	r2, [r3, #0]
    b756:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b75e:	781a      	ldrb	r2, [r3, #0]
    b760:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b768:	781b      	ldrb	r3, [r3, #0]
    b76a:	4413      	add	r3, r2
    b76c:	b2da      	uxtb	r2, r3
    b76e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b776:	701a      	strb	r2, [r3, #0]
    b778:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b780:	781b      	ldrb	r3, [r3, #0]
    b782:	3301      	adds	r3, #1
    b784:	b2da      	uxtb	r2, r3
    b786:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b78e:	701a      	strb	r2, [r3, #0]
    b790:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b798:	781b      	ldrb	r3, [r3, #0]
    b79a:	2bff      	cmp	r3, #255	; 0xff
    b79c:	d105      	bne.n	b7aa <send_nav_values+0xe7e>
    b79e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a6:	2200      	movs	r2, #0
    b7a8:	701a      	strb	r2, [r3, #0]
    b7aa:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	461a      	mov	r2, r3
    b7b6:	f64a 0348 	movw	r3, #43080	; 0xa848
    b7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7be:	7859      	ldrb	r1, [r3, #1]
    b7c0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c8:	5499      	strb	r1, [r3, r2]
    b7ca:	4b7a      	ldr	r3, [pc, #488]	; (b9b4 <send_nav_values+0x1088>)
    b7cc:	781a      	ldrb	r2, [r3, #0]
    b7ce:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d6:	781b      	ldrb	r3, [r3, #0]
    b7d8:	4413      	add	r3, r2
    b7da:	b2da      	uxtb	r2, r3
    b7dc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e4:	701a      	strb	r2, [r3, #0]
    b7e6:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ee:	781a      	ldrb	r2, [r3, #0]
    b7f0:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f8:	781b      	ldrb	r3, [r3, #0]
    b7fa:	4413      	add	r3, r2
    b7fc:	b2da      	uxtb	r2, r3
    b7fe:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b806:	701a      	strb	r2, [r3, #0]
    b808:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b810:	781b      	ldrb	r3, [r3, #0]
    b812:	3301      	adds	r3, #1
    b814:	b2da      	uxtb	r2, r3
    b816:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b81e:	701a      	strb	r2, [r3, #0]
    b820:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	2bff      	cmp	r3, #255	; 0xff
    b82c:	d105      	bne.n	b83a <send_nav_values+0xf0e>
    b82e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b836:	2200      	movs	r2, #0
    b838:	701a      	strb	r2, [r3, #0]
    b83a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b83e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b842:	781b      	ldrb	r3, [r3, #0]
    b844:	461a      	mov	r2, r3
    b846:	f64a 0348 	movw	r3, #43080	; 0xa848
    b84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b84e:	7899      	ldrb	r1, [r3, #2]
    b850:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b858:	5499      	strb	r1, [r3, r2]
    b85a:	4b57      	ldr	r3, [pc, #348]	; (b9b8 <send_nav_values+0x108c>)
    b85c:	781a      	ldrb	r2, [r3, #0]
    b85e:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b866:	781b      	ldrb	r3, [r3, #0]
    b868:	4413      	add	r3, r2
    b86a:	b2da      	uxtb	r2, r3
    b86c:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b874:	701a      	strb	r2, [r3, #0]
    b876:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b87e:	781a      	ldrb	r2, [r3, #0]
    b880:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b888:	781b      	ldrb	r3, [r3, #0]
    b88a:	4413      	add	r3, r2
    b88c:	b2da      	uxtb	r2, r3
    b88e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b896:	701a      	strb	r2, [r3, #0]
    b898:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a0:	781b      	ldrb	r3, [r3, #0]
    b8a2:	3301      	adds	r3, #1
    b8a4:	b2da      	uxtb	r2, r3
    b8a6:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ae:	701a      	strb	r2, [r3, #0]
    b8b0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b8:	781b      	ldrb	r3, [r3, #0]
    b8ba:	2bff      	cmp	r3, #255	; 0xff
    b8bc:	d105      	bne.n	b8ca <send_nav_values+0xf9e>
    b8be:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c6:	2200      	movs	r2, #0
    b8c8:	701a      	strb	r2, [r3, #0]
    b8ca:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	461a      	mov	r2, r3
    b8d6:	f64a 0348 	movw	r3, #43080	; 0xa848
    b8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8de:	78d9      	ldrb	r1, [r3, #3]
    b8e0:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e8:	5499      	strb	r1, [r3, r2]
    b8ea:	4b34      	ldr	r3, [pc, #208]	; (b9bc <send_nav_values+0x1090>)
    b8ec:	781a      	ldrb	r2, [r3, #0]
    b8ee:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f6:	781b      	ldrb	r3, [r3, #0]
    b8f8:	4413      	add	r3, r2
    b8fa:	b2da      	uxtb	r2, r3
    b8fc:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b904:	701a      	strb	r2, [r3, #0]
    b906:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90e:	781a      	ldrb	r2, [r3, #0]
    b910:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	4413      	add	r3, r2
    b91c:	b2da      	uxtb	r2, r3
    b91e:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b926:	701a      	strb	r2, [r3, #0]
    b928:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b930:	781b      	ldrb	r3, [r3, #0]
    b932:	3301      	adds	r3, #1
    b934:	b2da      	uxtb	r2, r3
    b936:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93e:	701a      	strb	r2, [r3, #0]
    b940:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b948:	781b      	ldrb	r3, [r3, #0]
    b94a:	2bff      	cmp	r3, #255	; 0xff
    b94c:	d105      	bne.n	b95a <send_nav_values+0x102e>
    b94e:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b956:	2200      	movs	r2, #0
    b958:	701a      	strb	r2, [r3, #0]
    b95a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b962:	781b      	ldrb	r3, [r3, #0]
    b964:	461a      	mov	r2, r3
    b966:	f24a 53bd 	movw	r3, #42429	; 0xa5bd
    b96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96e:	7819      	ldrb	r1, [r3, #0]
    b970:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b978:	5499      	strb	r1, [r3, r2]
    b97a:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b982:	781b      	ldrb	r3, [r3, #0]
    b984:	3301      	adds	r3, #1
    b986:	b2da      	uxtb	r2, r3
    b988:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b990:	701a      	strb	r2, [r3, #0]
    b992:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	2bff      	cmp	r3, #255	; 0xff
    b99e:	d10f      	bne.n	b9c0 <send_nav_values+0x1094>
    b9a0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a8:	2200      	movs	r2, #0
    b9aa:	701a      	strb	r2, [r3, #0]
    b9ac:	e008      	b.n	b9c0 <send_nav_values+0x1094>
    b9ae:	bf00      	nop
    b9b0:	20000123 	.word	0x20000123
    b9b4:	2000a849 	.word	0x2000a849
    b9b8:	2000a84a 	.word	0x2000a84a
    b9bc:	2000a84b 	.word	0x2000a84b
    b9c0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	461a      	mov	r2, r3
    b9cc:	f24a 53be 	movw	r3, #42430	; 0xa5be
    b9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d4:	7819      	ldrb	r1, [r3, #0]
    b9d6:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    b9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9de:	5499      	strb	r1, [r3, r2]
    b9e0:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e8:	781b      	ldrb	r3, [r3, #0]
    b9ea:	3301      	adds	r3, #1
    b9ec:	b2da      	uxtb	r2, r3
    b9ee:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f6:	701a      	strb	r2, [r3, #0]
    b9f8:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    b9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	2bff      	cmp	r3, #255	; 0xff
    ba04:	d105      	bne.n	ba12 <send_nav_values+0x10e6>
    ba06:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    ba0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0e:	2200      	movs	r2, #0
    ba10:	701a      	strb	r2, [r3, #0]
    ba12:	f248 0339 	movw	r3, #32825	; 0x8039
    ba16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	b2db      	uxtb	r3, r3
    ba1e:	f003 0310 	and.w	r3, r3, #16
    ba22:	2b00      	cmp	r3, #0
    ba24:	d15a      	bne.n	badc <send_nav_values+0x11b0>
    ba26:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2e:	781b      	ldrb	r3, [r3, #0]
    ba30:	b2db      	uxtb	r3, r3
    ba32:	461a      	mov	r2, r3
    ba34:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    ba38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba3c:	5c9a      	ldrb	r2, [r3, r2]
    ba3e:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    ba42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba46:	701a      	strb	r2, [r3, #0]
    ba48:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    ba4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba50:	2200      	movs	r2, #0
    ba52:	701a      	strb	r2, [r3, #0]
    ba54:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5c:	781b      	ldrb	r3, [r3, #0]
    ba5e:	b2db      	uxtb	r3, r3
    ba60:	3301      	adds	r3, #1
    ba62:	b2da      	uxtb	r2, r3
    ba64:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba6c:	701a      	strb	r2, [r3, #0]
    ba6e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba76:	781b      	ldrb	r3, [r3, #0]
    ba78:	b2db      	uxtb	r3, r3
    ba7a:	2bff      	cmp	r3, #255	; 0xff
    ba7c:	d105      	bne.n	ba8a <send_nav_values+0x115e>
    ba7e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    ba82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba86:	2200      	movs	r2, #0
    ba88:	701a      	strb	r2, [r3, #0]
    ba8a:	f248 0338 	movw	r3, #32824	; 0x8038
    ba8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba92:	f248 0238 	movw	r2, #32824	; 0x8038
    ba96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba9a:	7812      	ldrb	r2, [r2, #0]
    ba9c:	b2d2      	uxtb	r2, r2
    ba9e:	f042 0201 	orr.w	r2, r2, #1
    baa2:	b2d2      	uxtb	r2, r2
    baa4:	701a      	strb	r2, [r3, #0]
    baa6:	f248 0339 	movw	r3, #32825	; 0x8039
    baaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baae:	f248 0239 	movw	r2, #32825	; 0x8039
    bab2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bab6:	7812      	ldrb	r2, [r2, #0]
    bab8:	b2d2      	uxtb	r2, r2
    baba:	f042 0210 	orr.w	r2, r2, #16
    babe:	b2d2      	uxtb	r2, r2
    bac0:	701a      	strb	r2, [r3, #0]
    bac2:	e00b      	b.n	badc <send_nav_values+0x11b0>
    bac4:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    bac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bacc:	781b      	ldrb	r3, [r3, #0]
    bace:	3301      	adds	r3, #1
    bad0:	b2da      	uxtb	r2, r3
    bad2:	f24a 43b8 	movw	r3, #42168	; 0xa4b8
    bad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bada:	701a      	strb	r2, [r3, #0]
}
    badc:	46bd      	mov	sp, r7
    bade:	f85d 7b04 	ldr.w	r7, [sp], #4
    bae2:	4770      	bx	lr

0000bae4 <course_run>:

void course_run(void){
    bae4:	b580      	push	{r7, lr}
    bae6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bae8:	f24a 439c 	movw	r3, #42140	; 0xa49c
    baec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	2b02      	cmp	r3, #2
    baf4:	d006      	beq.n	bb04 <course_run+0x20>
    baf6:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafe:	781b      	ldrb	r3, [r3, #0]
    bb00:	2b03      	cmp	r3, #3
    bb02:	d112      	bne.n	bb2a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    bb04:	f24a 439e 	movw	r3, #42142	; 0xa49e
    bb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0c:	781b      	ldrb	r3, [r3, #0]
    bb0e:	2b02      	cmp	r3, #2
    bb10:	d901      	bls.n	bb16 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    bb12:	f001 f96d 	bl	cdf0 <course_pid_run>
    desired_roll = nav_desired_roll;
    bb16:	f64a 0340 	movw	r3, #43072	; 0xa840
    bb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb1e:	681a      	ldr	r2, [r3, #0]
    bb20:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    bb24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb28:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    bb2a:	bd80      	pop	{r7, pc}

0000bb2c <altitude_control_task>:

void altitude_control_task(void)
{
    bb2c:	b580      	push	{r7, lr}
    bb2e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    bb30:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb38:	781b      	ldrb	r3, [r3, #0]
    bb3a:	2b02      	cmp	r3, #2
    bb3c:	d006      	beq.n	bb4c <altitude_control_task+0x20>
    bb3e:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb46:	781b      	ldrb	r3, [r3, #0]
    bb48:	2b03      	cmp	r3, #3
    bb4a:	d108      	bne.n	bb5e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    bb4c:	f24a 439d 	movw	r3, #42141	; 0xa49d
    bb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb54:	781b      	ldrb	r3, [r3, #0]
    bb56:	2b03      	cmp	r3, #3
    bb58:	d101      	bne.n	bb5e <altitude_control_task+0x32>
      			altitude_pid_run();
    bb5a:	f001 fbd1 	bl	d300 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    bb5e:	bd80      	pop	{r7, pc}

0000bb60 <climb_control_task>:
void climb_control_task(void)
{
    bb60:	b580      	push	{r7, lr}
    bb62:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bb64:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6c:	781b      	ldrb	r3, [r3, #0]
    bb6e:	2b02      	cmp	r3, #2
    bb70:	d006      	beq.n	bb80 <climb_control_task+0x20>
    bb72:	f24a 439c 	movw	r3, #42140	; 0xa49c
    bb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7a:	781b      	ldrb	r3, [r3, #0]
    bb7c:	2b03      	cmp	r3, #3
    bb7e:	d135      	bne.n	bbec <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    bb80:	f24a 439d 	movw	r3, #42141	; 0xa49d
    bb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	2b01      	cmp	r3, #1
    bb8c:	d901      	bls.n	bb92 <climb_control_task+0x32>
        	climb_pid_run();
    bb8e:	f001 f9e7 	bl	cf60 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    bb92:	f24a 439d 	movw	r3, #42141	; 0xa49d
    bb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9a:	781b      	ldrb	r3, [r3, #0]
    bb9c:	2b01      	cmp	r3, #1
    bb9e:	d10a      	bne.n	bbb6 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    bba0:	f64a 0338 	movw	r3, #43064	; 0xa838
    bba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba8:	881b      	ldrh	r3, [r3, #0]
    bbaa:	b29a      	uxth	r2, r3
    bbac:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    bbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb4:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    bbb6:	f24a 43a5 	movw	r3, #42149	; 0xa4a5
    bbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbbe:	781b      	ldrb	r3, [r3, #0]
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d10d      	bne.n	bbe0 <climb_control_task+0x80>
    bbc4:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    bbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbcc:	881b      	ldrh	r3, [r3, #0]
    bbce:	2b00      	cmp	r3, #0
    bbd0:	d10c      	bne.n	bbec <climb_control_task+0x8c>
    bbd2:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    bbd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbda:	781b      	ldrb	r3, [r3, #0]
    bbdc:	2b00      	cmp	r3, #0
    bbde:	d105      	bne.n	bbec <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    bbe0:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    bbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe8:	2200      	movs	r2, #0
    bbea:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    bbec:	bd80      	pop	{r7, pc}
    bbee:	bf00      	nop

0000bbf0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    bbf0:	b580      	push	{r7, lr}
    bbf2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    bbf4:	f000 ffa2 	bl	cb3c <ir_update>
    estimator_update_state_infrared();
    bbf8:	f004 fa28 	bl	1004c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    bbfc:	f001 f80c 	bl	cc18 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    bc00:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    bc04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc08:	881a      	ldrh	r2, [r3, #0]
    bc0a:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    bc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc12:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    bc14:	f24a 73ee 	movw	r3, #42990	; 0xa7ee
    bc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1c:	881a      	ldrh	r2, [r3, #0]
    bc1e:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    bc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc26:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    bc28:	f24a 73f0 	movw	r3, #42992	; 0xa7f0
    bc2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc30:	881a      	ldrh	r2, [r3, #0]
    bc32:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    bc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3a:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    bc3c:	f64a 2378 	movw	r3, #43640	; 0xaa78
    bc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc44:	681b      	ldr	r3, [r3, #0]
    bc46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bc4a:	4618      	mov	r0, r3
    bc4c:	f006 fed6 	bl	129fc <__aeabi_f2d>
    bc50:	4602      	mov	r2, r0
    bc52:	460b      	mov	r3, r1
    bc54:	4610      	mov	r0, r2
    bc56:	4619      	mov	r1, r3
    bc58:	f04f 0200 	mov.w	r2, #0
    bc5c:	f04f 0300 	mov.w	r3, #0
    bc60:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bc64:	f006 ff1e 	bl	12aa4 <__aeabi_dmul>
    bc68:	4602      	mov	r2, r0
    bc6a:	460b      	mov	r3, r1
    bc6c:	4610      	mov	r0, r2
    bc6e:	4619      	mov	r1, r3
    bc70:	f04f 0200 	mov.w	r2, #0
    bc74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bc78:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    bc7c:	f007 f984 	bl	12f88 <__aeabi_dcmplt>
    bc80:	4603      	mov	r3, r0
    bc82:	2b00      	cmp	r3, #0
    bc84:	d002      	beq.n	bc8c <stabilisation_task+0x9c>
    bc86:	f64d 2280 	movw	r2, #55936	; 0xda80
    bc8a:	e046      	b.n	bd1a <stabilisation_task+0x12a>
    bc8c:	f64a 2378 	movw	r3, #43640	; 0xaa78
    bc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc94:	681b      	ldr	r3, [r3, #0]
    bc96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bc9a:	4618      	mov	r0, r3
    bc9c:	f006 feae 	bl	129fc <__aeabi_f2d>
    bca0:	4602      	mov	r2, r0
    bca2:	460b      	mov	r3, r1
    bca4:	4610      	mov	r0, r2
    bca6:	4619      	mov	r1, r3
    bca8:	f04f 0200 	mov.w	r2, #0
    bcac:	f04f 0300 	mov.w	r3, #0
    bcb0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bcb4:	f006 fef6 	bl	12aa4 <__aeabi_dmul>
    bcb8:	4602      	mov	r2, r0
    bcba:	460b      	mov	r3, r1
    bcbc:	4610      	mov	r0, r2
    bcbe:	4619      	mov	r1, r3
    bcc0:	f04f 0200 	mov.w	r2, #0
    bcc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bcc8:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    bccc:	f007 f97a 	bl	12fc4 <__aeabi_dcmpgt>
    bcd0:	4603      	mov	r3, r0
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d002      	beq.n	bcdc <stabilisation_task+0xec>
    bcd6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    bcda:	e01d      	b.n	bd18 <stabilisation_task+0x128>
    bcdc:	f64a 2378 	movw	r3, #43640	; 0xaa78
    bce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce4:	681b      	ldr	r3, [r3, #0]
    bce6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bcea:	4618      	mov	r0, r3
    bcec:	f006 fe86 	bl	129fc <__aeabi_f2d>
    bcf0:	4602      	mov	r2, r0
    bcf2:	460b      	mov	r3, r1
    bcf4:	4610      	mov	r0, r2
    bcf6:	4619      	mov	r1, r3
    bcf8:	f04f 0200 	mov.w	r2, #0
    bcfc:	f04f 0300 	mov.w	r3, #0
    bd00:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bd04:	f006 fece 	bl	12aa4 <__aeabi_dmul>
    bd08:	4602      	mov	r2, r0
    bd0a:	460b      	mov	r3, r1
    bd0c:	4610      	mov	r0, r2
    bd0e:	4619      	mov	r1, r3
    bd10:	f007 f962 	bl	12fd8 <__aeabi_d2iz>
    bd14:	4603      	mov	r3, r0
    bd16:	b29b      	uxth	r3, r3
    bd18:	b29a      	uxth	r2, r3
    bd1a:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    bd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd22:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    bd24:	bd80      	pop	{r7, pc}
    bd26:	bf00      	nop

0000bd28 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    bd28:	b580      	push	{r7, lr}
    bd2a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    bd2c:	f24a 634d 	movw	r3, #42573	; 0xa64d
    bd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd34:	2200      	movs	r2, #0
    bd36:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    bd38:	f24a 634e 	movw	r3, #42574	; 0xa64e
    bd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d001      	beq.n	bd4a <send_gps_pos+0x22>
     //DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
     estimator_update_state_gps();
    bd46:	f004 fc27 	bl	10598 <estimator_update_state_gps>
  }
}
    bd4a:	bd80      	pop	{r7, pc}

0000bd4c <send_radIR>:

void send_radIR(void){
    bd4c:	b480      	push	{r7}
    bd4e:	af00      	add	r7, sp, #0
    if (gps_pos_available){
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    }
}
    bd50:	46bd      	mov	sp, r7
    bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd56:	4770      	bx	lr

0000bd58 <send_takeOff>:

void send_takeOff(void){
    bd58:	b580      	push	{r7, lr}
    bd5a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    bd5c:	f24a 634e 	movw	r3, #42574	; 0xa64e
    bd60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d027      	beq.n	bdba <send_takeOff+0x62>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    bd6a:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    bd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd72:	881b      	ldrh	r3, [r3, #0]
    bd74:	2b00      	cmp	r3, #0
    bd76:	d11a      	bne.n	bdae <send_takeOff+0x56>
    bd78:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    bd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd80:	681b      	ldr	r3, [r3, #0]
    bd82:	4618      	mov	r0, r3
    bd84:	f04f 0100 	mov.w	r1, #0
    bd88:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    bd8c:	f007 fc86 	bl	1369c <__aeabi_fcmpgt>
    bd90:	4603      	mov	r3, r0
    bd92:	2b00      	cmp	r3, #0
    bd94:	d00b      	beq.n	bdae <send_takeOff+0x56>
        estimator_flight_time = 1;
    bd96:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    bd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd9e:	2201      	movs	r2, #1
    bda0:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    bda2:	f24a 43b0 	movw	r3, #42160	; 0xa4b0
    bda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdaa:	2201      	movs	r2, #1
    bdac:	701a      	strb	r2, [r3, #0]
        //DOWNLINK_SEND_TAKEOFF(&cputime);
     }
     gps_pos_available = FALSE; 
    bdae:	f24a 634e 	movw	r3, #42574	; 0xa64e
    bdb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb6:	2200      	movs	r2, #0
    bdb8:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    bdba:	bd80      	pop	{r7, pc}
    bdbc:	f3af 8000 	nop.w

0000bdc0 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    bdc0:	b480      	push	{r7}
    bdc2:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    bdc4:	f248 0317 	movw	r3, #32791	; 0x8017
    bdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdcc:	f248 0217 	movw	r2, #32791	; 0x8017
    bdd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bdd4:	7812      	ldrb	r2, [r2, #0]
    bdd6:	b2d2      	uxtb	r2, r2
    bdd8:	f042 0210 	orr.w	r2, r2, #16
    bddc:	b2d2      	uxtb	r2, r2
    bdde:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    bde0:	f248 0331 	movw	r3, #32817	; 0x8031
    bde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde8:	2201      	movs	r2, #1
    bdea:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    bdec:	f248 0333 	movw	r3, #32819	; 0x8033
    bdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf4:	2219      	movs	r2, #25
    bdf6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    bdf8:	f248 0311 	movw	r3, #32785	; 0x8011
    bdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be00:	f248 0211 	movw	r2, #32785	; 0x8011
    be04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be08:	7812      	ldrb	r2, [r2, #0]
    be0a:	b2d2      	uxtb	r2, r2
    be0c:	f062 023f 	orn	r2, r2, #63	; 0x3f
    be10:	b2d2      	uxtb	r2, r2
    be12:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    be14:	f248 0312 	movw	r3, #32786	; 0x8012
    be18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be1c:	f248 0212 	movw	r2, #32786	; 0x8012
    be20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be24:	7812      	ldrb	r2, [r2, #0]
    be26:	b2d2      	uxtb	r2, r2
    be28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    be2c:	b2d2      	uxtb	r2, r2
    be2e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    be30:	f248 0312 	movw	r3, #32786	; 0x8012
    be34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be38:	f248 0212 	movw	r2, #32786	; 0x8012
    be3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be40:	7812      	ldrb	r2, [r2, #0]
    be42:	b2d2      	uxtb	r2, r2
    be44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    be48:	b2d2      	uxtb	r2, r2
    be4a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    be4c:	f248 033a 	movw	r3, #32826	; 0x803a
    be50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be54:	f248 023a 	movw	r2, #32826	; 0x803a
    be58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be5c:	7812      	ldrb	r2, [r2, #0]
    be5e:	b2d2      	uxtb	r2, r2
    be60:	f042 0202 	orr.w	r2, r2, #2
    be64:	b2d2      	uxtb	r2, r2
    be66:	701a      	strb	r2, [r3, #0]
}
    be68:	46bd      	mov	sp, r7
    be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be6e:	4770      	bx	lr

0000be70 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    be70:	b480      	push	{r7}
    be72:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    be74:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    be78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be7c:	781b      	ldrb	r3, [r3, #0]
    be7e:	2b00      	cmp	r3, #0
    be80:	d10e      	bne.n	bea0 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    be82:	f248 0312 	movw	r3, #32786	; 0x8012
    be86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8a:	f248 0212 	movw	r2, #32786	; 0x8012
    be8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be92:	7812      	ldrb	r2, [r2, #0]
    be94:	b2d2      	uxtb	r2, r2
    be96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    be9a:	b2d2      	uxtb	r2, r2
    be9c:	701a      	strb	r2, [r3, #0]
    be9e:	e047      	b.n	bf30 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    bea0:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    bea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea8:	781b      	ldrb	r3, [r3, #0]
    beaa:	2b08      	cmp	r3, #8
    beac:	d832      	bhi.n	bf14 <__vector_5+0xa4>
    if (tx_byte & 0x01)
    beae:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    beb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	f003 0301 	and.w	r3, r3, #1
    bebc:	2b00      	cmp	r3, #0
    bebe:	d00e      	beq.n	bede <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bec0:	f248 0312 	movw	r3, #32786	; 0x8012
    bec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec8:	f248 0212 	movw	r2, #32786	; 0x8012
    becc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bed0:	7812      	ldrb	r2, [r2, #0]
    bed2:	b2d2      	uxtb	r2, r2
    bed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bed8:	b2d2      	uxtb	r2, r2
    beda:	701a      	strb	r2, [r3, #0]
    bedc:	e00d      	b.n	befa <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bede:	f248 0312 	movw	r3, #32786	; 0x8012
    bee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee6:	f248 0212 	movw	r2, #32786	; 0x8012
    beea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    beee:	7812      	ldrb	r2, [r2, #0]
    bef0:	b2d2      	uxtb	r2, r2
    bef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bef6:	b2d2      	uxtb	r2, r2
    bef8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    befa:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    befe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	085b      	lsrs	r3, r3, #1
    bf06:	b2da      	uxtb	r2, r3
    bf08:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    bf0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf10:	701a      	strb	r2, [r3, #0]
    bf12:	e00d      	b.n	bf30 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    bf14:	f248 0312 	movw	r3, #32786	; 0x8012
    bf18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1c:	f248 0212 	movw	r2, #32786	; 0x8012
    bf20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf24:	7812      	ldrb	r2, [r2, #0]
    bf26:	b2d2      	uxtb	r2, r2
    bf28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bf2c:	b2d2      	uxtb	r2, r2
    bf2e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    bf30:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    bf34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf38:	781b      	ldrb	r3, [r3, #0]
    bf3a:	3301      	adds	r3, #1
    bf3c:	b2da      	uxtb	r2, r3
    bf3e:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    bf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf46:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    bf48:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    bf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	2b09      	cmp	r3, #9
    bf54:	d94d      	bls.n	bff2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    bf56:	f24a 43b9 	movw	r3, #42169	; 0xa4b9
    bf5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf5e:	781a      	ldrb	r2, [r3, #0]
    bf60:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bf64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf68:	781b      	ldrb	r3, [r3, #0]
    bf6a:	b2db      	uxtb	r3, r3
    bf6c:	429a      	cmp	r2, r3
    bf6e:	d10e      	bne.n	bf8e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    bf70:	f248 0339 	movw	r3, #32825	; 0x8039
    bf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf78:	f248 0239 	movw	r2, #32825	; 0x8039
    bf7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf80:	7812      	ldrb	r2, [r2, #0]
    bf82:	b2d2      	uxtb	r2, r2
    bf84:	f022 0210 	bic.w	r2, r2, #16
    bf88:	b2d2      	uxtb	r2, r2
    bf8a:	701a      	strb	r2, [r3, #0]
    bf8c:	e031      	b.n	bff2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    bf8e:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bf92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf96:	781b      	ldrb	r3, [r3, #0]
    bf98:	b2db      	uxtb	r3, r3
    bf9a:	461a      	mov	r2, r3
    bf9c:	f24a 43bc 	movw	r3, #42172	; 0xa4bc
    bfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa4:	5c9a      	ldrb	r2, [r3, r2]
    bfa6:	f24a 53bb 	movw	r3, #42427	; 0xa5bb
    bfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfae:	701a      	strb	r2, [r3, #0]
    bfb0:	f24a 53bc 	movw	r3, #42428	; 0xa5bc
    bfb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb8:	2200      	movs	r2, #0
    bfba:	701a      	strb	r2, [r3, #0]
    bfbc:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc4:	781b      	ldrb	r3, [r3, #0]
    bfc6:	b2db      	uxtb	r3, r3
    bfc8:	3301      	adds	r3, #1
    bfca:	b2da      	uxtb	r2, r3
    bfcc:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd4:	701a      	strb	r2, [r3, #0]
    bfd6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfde:	781b      	ldrb	r3, [r3, #0]
    bfe0:	b2db      	uxtb	r3, r3
    bfe2:	2bff      	cmp	r3, #255	; 0xff
    bfe4:	d105      	bne.n	bff2 <__vector_5+0x182>
    bfe6:	f24a 43ba 	movw	r3, #42170	; 0xa4ba
    bfea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfee:	2200      	movs	r2, #0
    bff0:	701a      	strb	r2, [r3, #0]
    }
  }
}
    bff2:	46bd      	mov	sp, r7
    bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bff8:	4770      	bx	lr
    bffa:	bf00      	nop

0000bffc <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    bffc:	b480      	push	{r7}
    bffe:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    c000:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    c004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c008:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    c00a:	f240 1306 	movw	r3, #262	; 0x106
    c00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c012:	2200      	movs	r2, #0
    c014:	701a      	strb	r2, [r3, #0]
}
    c016:	46bd      	mov	sp, r7
    c018:	f85d 7b04 	ldr.w	r7, [sp], #4
    c01c:	4770      	bx	lr
    c01e:	bf00      	nop

0000c020 <link_fbw_send>:

void link_fbw_send(void) {
    c020:	b480      	push	{r7}
    c022:	b083      	sub	sp, #12
    c024:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    c026:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02e:	781b      	ldrb	r3, [r3, #0]
    c030:	b2db      	uxtb	r3, r3
    c032:	2b00      	cmp	r3, #0
    c034:	d00c      	beq.n	c050 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    c036:	f24a 53f5 	movw	r3, #42485	; 0xa5f5
    c03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c03e:	781b      	ldrb	r3, [r3, #0]
    c040:	3301      	adds	r3, #1
    c042:	b2da      	uxtb	r2, r3
    c044:	f24a 53f5 	movw	r3, #42485	; 0xa5f5
    c048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    c04e:	e064      	b.n	c11a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    c050:	f248 030d 	movw	r3, #32781	; 0x800d
    c054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c058:	2251      	movs	r2, #81	; 0x51
    c05a:	701a      	strb	r2, [r3, #0]
    c05c:	f248 030e 	movw	r3, #32782	; 0x800e
    c060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c064:	781b      	ldrb	r3, [r3, #0]
    c066:	b2db      	uxtb	r3, r3
    c068:	b2db      	uxtb	r3, r3
    c06a:	b25b      	sxtb	r3, r3
    c06c:	2b00      	cmp	r3, #0
    c06e:	da05      	bge.n	c07c <link_fbw_send+0x5c>
    c070:	f248 030f 	movw	r3, #32783	; 0x800f
    c074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	71fb      	strb	r3, [r7, #7]
    c07c:	f248 030d 	movw	r3, #32781	; 0x800d
    c080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c084:	f248 020d 	movw	r2, #32781	; 0x800d
    c088:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c08c:	7812      	ldrb	r2, [r2, #0]
    c08e:	b2d2      	uxtb	r2, r2
    c090:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c094:	b2d2      	uxtb	r2, r2
    c096:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    c098:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a0:	2201      	movs	r2, #1
    c0a2:	701a      	strb	r2, [r3, #0]
    c0a4:	f248 0318 	movw	r3, #32792	; 0x8018
    c0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ac:	f248 0218 	movw	r2, #32792	; 0x8018
    c0b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0b4:	7812      	ldrb	r2, [r2, #0]
    c0b6:	b2d2      	uxtb	r2, r2
    c0b8:	f022 0201 	bic.w	r2, r2, #1
    c0bc:	b2d2      	uxtb	r2, r2
    c0be:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    c0c0:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c8:	2200      	movs	r2, #0
    c0ca:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    c0cc:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    c0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d4:	2200      	movs	r2, #0
    c0d6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    c0d8:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	461a      	mov	r2, r3
    c0e4:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    c0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ec:	4413      	add	r3, r2
    c0ee:	781a      	ldrb	r2, [r3, #0]
    c0f0:	f24a 53f3 	movw	r3, #42483	; 0xa5f3
    c0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    c0fa:	f248 030f 	movw	r3, #32783	; 0x800f
    c0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c102:	f24a 52f3 	movw	r2, #42483	; 0xa5f3
    c106:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c10a:	7812      	ldrb	r2, [r2, #0]
    c10c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    c10e:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    c112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c116:	2200      	movs	r2, #0
    c118:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    c11a:	370c      	adds	r7, #12
    c11c:	46bd      	mov	sp, r7
    c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c122:	4770      	bx	lr

0000c124 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    c124:	b480      	push	{r7}
    c126:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    c128:	f248 032a 	movw	r3, #32810	; 0x802a
    c12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c130:	f248 022c 	movw	r2, #32812	; 0x802c
    c134:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c138:	8812      	ldrh	r2, [r2, #0]
    c13a:	b292      	uxth	r2, r2
    c13c:	32c8      	adds	r2, #200	; 0xc8
    c13e:	b292      	uxth	r2, r2
    c140:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    c142:	f248 0336 	movw	r3, #32822	; 0x8036
    c146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14a:	f248 0236 	movw	r2, #32822	; 0x8036
    c14e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c152:	7812      	ldrb	r2, [r2, #0]
    c154:	b2d2      	uxtb	r2, r2
    c156:	f042 0210 	orr.w	r2, r2, #16
    c15a:	b2d2      	uxtb	r2, r2
    c15c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    c15e:	f248 0337 	movw	r3, #32823	; 0x8037
    c162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c166:	f248 0237 	movw	r2, #32823	; 0x8037
    c16a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c16e:	7812      	ldrb	r2, [r2, #0]
    c170:	b2d2      	uxtb	r2, r2
    c172:	f042 0210 	orr.w	r2, r2, #16
    c176:	b2d2      	uxtb	r2, r2
    c178:	701a      	strb	r2, [r3, #0]
}
    c17a:	46bd      	mov	sp, r7
    c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c180:	4770      	bx	lr
    c182:	bf00      	nop

0000c184 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    c184:	b480      	push	{r7}
    c186:	b083      	sub	sp, #12
    c188:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    c18a:	f248 0337 	movw	r3, #32823	; 0x8037
    c18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c192:	f248 0237 	movw	r2, #32823	; 0x8037
    c196:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c19a:	7812      	ldrb	r2, [r2, #0]
    c19c:	b2d2      	uxtb	r2, r2
    c19e:	f022 0210 	bic.w	r2, r2, #16
    c1a2:	b2d2      	uxtb	r2, r2
    c1a4:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    c1a6:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ae:	781b      	ldrb	r3, [r3, #0]
    c1b0:	3301      	adds	r3, #1
    c1b2:	b2da      	uxtb	r2, r3
    c1b4:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1bc:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    c1be:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	2b17      	cmp	r3, #23
    c1ca:	d162      	bne.n	c292 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    c1cc:	f248 030f 	movw	r3, #32783	; 0x800f
    c1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d4:	781b      	ldrb	r3, [r3, #0]
    c1d6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    c1d8:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    c1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e0:	781b      	ldrb	r3, [r3, #0]
    c1e2:	79fa      	ldrb	r2, [r7, #7]
    c1e4:	429a      	cmp	r2, r3
    c1e6:	d110      	bne.n	c20a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    c1e8:	f24a 53ee 	movw	r3, #42478	; 0xa5ee
    c1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f0:	2201      	movs	r2, #1
    c1f2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    c1f4:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    c1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fc:	7d1a      	ldrb	r2, [r3, #20]
    c1fe:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    c202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c206:	701a      	strb	r2, [r3, #0]
    c208:	e00c      	b.n	c224 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    c20a:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    c20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c212:	781b      	ldrb	r3, [r3, #0]
    c214:	b2db      	uxtb	r3, r3
    c216:	3301      	adds	r3, #1
    c218:	b2da      	uxtb	r2, r3
    c21a:	f24a 53ef 	movw	r3, #42479	; 0xa5ef
    c21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c222:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    c224:	f240 1306 	movw	r3, #262	; 0x106
    c228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22c:	2201      	movs	r2, #1
    c22e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    c230:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c238:	2200      	movs	r2, #0
    c23a:	701a      	strb	r2, [r3, #0]
    c23c:	f248 0318 	movw	r3, #32792	; 0x8018
    c240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c244:	f248 0218 	movw	r2, #32792	; 0x8018
    c248:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c24c:	7812      	ldrb	r2, [r2, #0]
    c24e:	b2d2      	uxtb	r2, r2
    c250:	f042 0201 	orr.w	r2, r2, #1
    c254:	b2d2      	uxtb	r2, r2
    c256:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    c258:	f248 030d 	movw	r3, #32781	; 0x800d
    c25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c260:	f248 020d 	movw	r2, #32781	; 0x800d
    c264:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c268:	7812      	ldrb	r2, [r2, #0]
    c26a:	b2d2      	uxtb	r2, r2
    c26c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c270:	b2d2      	uxtb	r2, r2
    c272:	701a      	strb	r2, [r3, #0]
    c274:	f248 030d 	movw	r3, #32781	; 0x800d
    c278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27c:	f248 020d 	movw	r2, #32781	; 0x800d
    c280:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c284:	7812      	ldrb	r2, [r2, #0]
    c286:	b2d2      	uxtb	r2, r2
    c288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c28c:	b2d2      	uxtb	r2, r2
    c28e:	701a      	strb	r2, [r3, #0]
    return;
    c290:	e051      	b.n	c336 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    c292:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c29a:	781b      	ldrb	r3, [r3, #0]
    c29c:	2b15      	cmp	r3, #21
    c29e:	d820      	bhi.n	c2e2 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    c2a0:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	461a      	mov	r2, r3
    c2ac:	f24a 53d8 	movw	r3, #42456	; 0xa5d8
    c2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b4:	4413      	add	r3, r2
    c2b6:	781b      	ldrb	r3, [r3, #0]
    c2b8:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    c2ba:	f248 030f 	movw	r3, #32783	; 0x800f
    c2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c2:	79fa      	ldrb	r2, [r7, #7]
    c2c4:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    c2c6:	f24a 53f3 	movw	r3, #42483	; 0xa5f3
    c2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ce:	781a      	ldrb	r2, [r3, #0]
    c2d0:	79fb      	ldrb	r3, [r7, #7]
    c2d2:	4053      	eors	r3, r2
    c2d4:	b2da      	uxtb	r2, r3
    c2d6:	f24a 53f3 	movw	r3, #42483	; 0xa5f3
    c2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2de:	701a      	strb	r2, [r3, #0]
    c2e0:	e009      	b.n	c2f6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    c2e2:	f248 030f 	movw	r3, #32783	; 0x800f
    c2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ea:	f24a 52f3 	movw	r2, #42483	; 0xa5f3
    c2ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2f2:	7812      	ldrb	r2, [r2, #0]
    c2f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    c2f6:	f248 030f 	movw	r3, #32783	; 0x800f
    c2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fe:	781b      	ldrb	r3, [r3, #0]
    c300:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    c302:	f24a 53f1 	movw	r3, #42481	; 0xa5f1
    c306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	1e5a      	subs	r2, r3, #1
    c30e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    c312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c316:	4413      	add	r3, r2
    c318:	79fa      	ldrb	r2, [r7, #7]
    c31a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    c31c:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    c320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c324:	781a      	ldrb	r2, [r3, #0]
    c326:	79fb      	ldrb	r3, [r7, #7]
    c328:	4053      	eors	r3, r2
    c32a:	b2da      	uxtb	r2, r3
    c32c:	f24a 53f2 	movw	r3, #42482	; 0xa5f2
    c330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c334:	701a      	strb	r2, [r3, #0]
}
    c336:	370c      	adds	r7, #12
    c338:	46bd      	mov	sp, r7
    c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c33e:	4770      	bx	lr

0000c340 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    c340:	b480      	push	{r7}
    c342:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    c344:	f248 0317 	movw	r3, #32791	; 0x8017
    c348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c34c:	f248 0217 	movw	r2, #32791	; 0x8017
    c350:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c354:	7812      	ldrb	r2, [r2, #0]
    c356:	b2d2      	uxtb	r2, r2
    c358:	f042 0206 	orr.w	r2, r2, #6
    c35c:	b2d2      	uxtb	r2, r2
    c35e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    c360:	f248 0317 	movw	r3, #32791	; 0x8017
    c364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c368:	f248 0217 	movw	r2, #32791	; 0x8017
    c36c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c370:	7812      	ldrb	r2, [r2, #0]
    c372:	b2d2      	uxtb	r2, r2
    c374:	f042 0201 	orr.w	r2, r2, #1
    c378:	b2d2      	uxtb	r2, r2
    c37a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    c37c:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c384:	2200      	movs	r2, #0
    c386:	701a      	strb	r2, [r3, #0]
    c388:	f248 0318 	movw	r3, #32792	; 0x8018
    c38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c390:	f248 0218 	movw	r2, #32792	; 0x8018
    c394:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c398:	7812      	ldrb	r2, [r2, #0]
    c39a:	b2d2      	uxtb	r2, r2
    c39c:	f042 0201 	orr.w	r2, r2, #1
    c3a0:	b2d2      	uxtb	r2, r2
    c3a2:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    c3a4:	f248 0302 	movw	r3, #32770	; 0x8002
    c3a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ac:	f248 0202 	movw	r2, #32770	; 0x8002
    c3b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3b4:	7812      	ldrb	r2, [r2, #0]
    c3b6:	b2d2      	uxtb	r2, r2
    c3b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c3bc:	b2d2      	uxtb	r2, r2
    c3be:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    c3c0:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c8:	2200      	movs	r2, #0
    c3ca:	701a      	strb	r2, [r3, #0]
    c3cc:	f248 0303 	movw	r3, #32771	; 0x8003
    c3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d4:	f248 0203 	movw	r2, #32771	; 0x8003
    c3d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3dc:	7812      	ldrb	r2, [r2, #0]
    c3de:	b2d2      	uxtb	r2, r2
    c3e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c3e4:	b2d2      	uxtb	r2, r2
    c3e6:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    c3e8:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f0:	2200      	movs	r2, #0
    c3f2:	701a      	strb	r2, [r3, #0]
}
    c3f4:	46bd      	mov	sp, r7
    c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3fa:	4770      	bx	lr

0000c3fc <__vector_17>:


SIGNAL(SIG_SPI) {
    c3fc:	b580      	push	{r7, lr}
    c3fe:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    c400:	f24a 53f4 	movw	r3, #42484	; 0xa5f4
    c404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	b2db      	uxtb	r3, r3
    c40c:	2b01      	cmp	r3, #1
    c40e:	d102      	bne.n	c416 <__vector_17+0x1a>
    link_fbw_on_spi_it();
    c410:	f7ff fe88 	bl	c124 <link_fbw_on_spi_it>
    c414:	e00b      	b.n	c42e <__vector_17+0x32>
  else
    fatal_error_nb++;
    c416:	f24a 4398 	movw	r3, #42136	; 0xa498
    c41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c41e:	781b      	ldrb	r3, [r3, #0]
    c420:	3301      	adds	r3, #1
    c422:	b2da      	uxtb	r2, r3
    c424:	f24a 4398 	movw	r3, #42136	; 0xa498
    c428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42c:	701a      	strb	r2, [r3, #0]
}
    c42e:	bd80      	pop	{r7, pc}

0000c430 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    c430:	b480      	push	{r7}
    c432:	b083      	sub	sp, #12
    c434:	af00      	add	r7, sp, #0
    c436:	4603      	mov	r3, r0
    c438:	6039      	str	r1, [r7, #0]
    c43a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    c43c:	79fa      	ldrb	r2, [r7, #7]
    c43e:	f24a 6308 	movw	r3, #42504	; 0xa608
    c442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c446:	6839      	ldr	r1, [r7, #0]
    c448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    c44c:	370c      	adds	r7, #12
    c44e:	46bd      	mov	sp, r7
    c450:	f85d 7b04 	ldr.w	r7, [sp], #4
    c454:	4770      	bx	lr
    c456:	bf00      	nop

0000c458 <adc_init>:

void 
adc_init( void )
{
    c458:	b480      	push	{r7}
    c45a:	b083      	sub	sp, #12
    c45c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    c45e:	f248 0362 	movw	r3, #32866	; 0x8062
    c462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c466:	2200      	movs	r2, #0
    c468:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    c46a:	f248 0361 	movw	r3, #32865	; 0x8061
    c46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c472:	2200      	movs	r2, #0
    c474:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    c476:	f248 0307 	movw	r3, #32775	; 0x8007
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	2240      	movs	r2, #64	; 0x40
    c480:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    c482:	f248 0308 	movw	r3, #32776	; 0x8008
    c486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48a:	f248 0208 	movw	r2, #32776	; 0x8008
    c48e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c492:	7812      	ldrb	r2, [r2, #0]
    c494:	b2d2      	uxtb	r2, r2
    c496:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c49a:	b2d2      	uxtb	r2, r2
    c49c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    c49e:	f248 0306 	movw	r3, #32774	; 0x8006
    c4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a6:	22cf      	movs	r2, #207	; 0xcf
    c4a8:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c4aa:	2300      	movs	r3, #0
    c4ac:	71fb      	strb	r3, [r7, #7]
    c4ae:	e00a      	b.n	c4c6 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    c4b0:	79fa      	ldrb	r2, [r7, #7]
    c4b2:	f24a 6308 	movw	r3, #42504	; 0xa608
    c4b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ba:	2100      	movs	r1, #0
    c4bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c4c0:	79fb      	ldrb	r3, [r7, #7]
    c4c2:	3301      	adds	r3, #1
    c4c4:	71fb      	strb	r3, [r7, #7]
    c4c6:	79fb      	ldrb	r3, [r7, #7]
    c4c8:	2b07      	cmp	r3, #7
    c4ca:	d9f1      	bls.n	c4b0 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    c4cc:	370c      	adds	r7, #12
    c4ce:	46bd      	mov	sp, r7
    c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4d4:	4770      	bx	lr
    c4d6:	bf00      	nop

0000c4d8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    c4d8:	b480      	push	{r7}
    c4da:	b085      	sub	sp, #20
    c4dc:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    c4de:	f248 0307 	movw	r3, #32775	; 0x8007
    c4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e6:	781b      	ldrb	r3, [r3, #0]
    c4e8:	b2db      	uxtb	r3, r3
    c4ea:	f003 0307 	and.w	r3, r3, #7
    c4ee:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    c4f0:	7bfa      	ldrb	r2, [r7, #15]
    c4f2:	f24a 6308 	movw	r3, #42504	; 0xa608
    c4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c4fe:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    c500:	f248 0304 	movw	r3, #32772	; 0x8004
    c504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c508:	881b      	ldrh	r3, [r3, #0]
    c50a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    c50c:	7bfa      	ldrb	r2, [r7, #15]
    c50e:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
    c512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c516:	88f9      	ldrh	r1, [r7, #6]
    c518:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    c51c:	68bb      	ldr	r3, [r7, #8]
    c51e:	2b00      	cmp	r3, #0
    c520:	d025      	beq.n	c56e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    c522:	68bb      	ldr	r3, [r7, #8]
    c524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c528:	3301      	adds	r3, #1
    c52a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    c52c:	7bbb      	ldrb	r3, [r7, #14]
    c52e:	2b1f      	cmp	r3, #31
    c530:	d901      	bls.n	c536 <__vector_21+0x5e>
    c532:	2300      	movs	r3, #0
    c534:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    c536:	68bb      	ldr	r3, [r7, #8]
    c538:	881a      	ldrh	r2, [r3, #0]
    c53a:	7bbb      	ldrb	r3, [r7, #14]
    c53c:	68b9      	ldr	r1, [r7, #8]
    c53e:	005b      	lsls	r3, r3, #1
    c540:	440b      	add	r3, r1
    c542:	885b      	ldrh	r3, [r3, #2]
    c544:	1ad3      	subs	r3, r2, r3
    c546:	b29a      	uxth	r2, r3
    c548:	68bb      	ldr	r3, [r7, #8]
    c54a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    c54c:	7bbb      	ldrb	r3, [r7, #14]
    c54e:	68ba      	ldr	r2, [r7, #8]
    c550:	005b      	lsls	r3, r3, #1
    c552:	4413      	add	r3, r2
    c554:	88fa      	ldrh	r2, [r7, #6]
    c556:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    c558:	68bb      	ldr	r3, [r7, #8]
    c55a:	881a      	ldrh	r2, [r3, #0]
    c55c:	88fb      	ldrh	r3, [r7, #6]
    c55e:	4413      	add	r3, r2
    c560:	b29a      	uxth	r2, r3
    c562:	68bb      	ldr	r3, [r7, #8]
    c564:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    c566:	68bb      	ldr	r3, [r7, #8]
    c568:	7bba      	ldrb	r2, [r7, #14]
    c56a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    c56e:	7bfb      	ldrb	r3, [r7, #15]
    c570:	3301      	adds	r3, #1
    c572:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    c574:	7bfb      	ldrb	r3, [r7, #15]
    c576:	2b07      	cmp	r3, #7
    c578:	d901      	bls.n	c57e <__vector_21+0xa6>
    adc_input = 0;
    c57a:	2300      	movs	r3, #0
    c57c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
    c57e:	f248 0307 	movw	r3, #32775	; 0x8007
    c582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c586:	7bfa      	ldrb	r2, [r7, #15]
    c588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c58c:	b2d2      	uxtb	r2, r2
    c58e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
    c590:	f248 0306 	movw	r3, #32774	; 0x8006
    c594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c598:	f248 0206 	movw	r2, #32774	; 0x8006
    c59c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5a0:	7812      	ldrb	r2, [r2, #0]
    c5a2:	b2d2      	uxtb	r2, r2
    c5a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c5a8:	b2d2      	uxtb	r2, r2
    c5aa:	701a      	strb	r2, [r3, #0]
  
}
    c5ac:	3714      	adds	r7, #20
    c5ae:	46bd      	mov	sp, r7
    c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5b4:	4770      	bx	lr
    c5b6:	bf00      	nop

0000c5b8 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
    c5b8:	b580      	push	{r7, lr}
    c5ba:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
    c5bc:	f003 fca8 	bl	ff10 <uart1_init>
#endif
  ubx_status = UNINIT;
    c5c0:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c8:	2200      	movs	r2, #0
    c5ca:	701a      	strb	r2, [r3, #0]
}
    c5cc:	bd80      	pop	{r7, pc}
    c5ce:	bf00      	nop

0000c5d0 <parse_gps_msg>:

void parse_gps_msg( void ) {
    c5d0:	b580      	push	{r7, lr}
    c5d2:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
    c5d4:	f24a 7356 	movw	r3, #42838	; 0xa756
    c5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5dc:	781b      	ldrb	r3, [r3, #0]
    c5de:	2b01      	cmp	r3, #1
    c5e0:	f040 80f9 	bne.w	c7d6 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
    c5e4:	f24a 7355 	movw	r3, #42837	; 0xa755
    c5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	2b08      	cmp	r3, #8
    c5f0:	d128      	bne.n	c644 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
    c5f2:	f24a 6350 	movw	r3, #42576	; 0xa650
    c5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fa:	685a      	ldr	r2, [r3, #4]
    c5fc:	f24a 633c 	movw	r3, #42556	; 0xa63c
    c600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c604:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
    c606:	f24a 6350 	movw	r3, #42576	; 0xa650
    c60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c60e:	689a      	ldr	r2, [r3, #8]
    c610:	f24a 6340 	movw	r3, #42560	; 0xa640
    c614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c618:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
    c61a:	4b73      	ldr	r3, [pc, #460]	; (c7e8 <parse_gps_msg+0x218>)
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	4618      	mov	r0, r3
    c620:	f006 fe2c 	bl	1327c <__aeabi_i2f>
    c624:	4603      	mov	r3, r0
    c626:	4618      	mov	r0, r3
    c628:	f04f 0100 	mov.w	r1, #0
    c62c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c630:	f006 ff2c 	bl	1348c <__aeabi_fdiv>
    c634:	4603      	mov	r3, r0
    c636:	461a      	mov	r2, r3
    c638:	f24a 632c 	movw	r3, #42540	; 0xa62c
    c63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c640:	601a      	str	r2, [r3, #0]
    c642:	e0c8      	b.n	c7d6 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
    c644:	f24a 7355 	movw	r3, #42837	; 0xa755
    c648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c64c:	781b      	ldrb	r3, [r3, #0]
    c64e:	2b03      	cmp	r3, #3
    c650:	d10a      	bne.n	c668 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
    c652:	f24a 6350 	movw	r3, #42576	; 0xa650
    c656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c65a:	791a      	ldrb	r2, [r3, #4]
    c65c:	f24a 634c 	movw	r3, #42572	; 0xa64c
    c660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c664:	701a      	strb	r2, [r3, #0]
    c666:	e0b6      	b.n	c7d6 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
    c668:	f24a 7355 	movw	r3, #42837	; 0xa755
    c66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c670:	781b      	ldrb	r3, [r3, #0]
    c672:	2b12      	cmp	r3, #18
    c674:	f040 80af 	bne.w	c7d6 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
    c678:	4b5c      	ldr	r3, [pc, #368]	; (c7ec <parse_gps_msg+0x21c>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	4618      	mov	r0, r3
    c67e:	f006 fdf9 	bl	13274 <__aeabi_ui2f>
    c682:	4603      	mov	r3, r0
    c684:	4618      	mov	r0, r3
    c686:	f04f 0100 	mov.w	r1, #0
    c68a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c68e:	f006 fefd 	bl	1348c <__aeabi_fdiv>
    c692:	4603      	mov	r3, r0
    c694:	461a      	mov	r2, r3
    c696:	f24a 6330 	movw	r3, #42544	; 0xa630
    c69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
    c6a0:	4b51      	ldr	r3, [pc, #324]	; (c7e8 <parse_gps_msg+0x218>)
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	4618      	mov	r0, r3
    c6a6:	f006 fde9 	bl	1327c <__aeabi_i2f>
    c6aa:	4603      	mov	r3, r0
    c6ac:	4618      	mov	r0, r3
    c6ae:	f04f 0100 	mov.w	r1, #0
    c6b2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    c6b6:	f006 fee9 	bl	1348c <__aeabi_fdiv>
    c6ba:	4603      	mov	r3, r0
    c6bc:	461a      	mov	r2, r3
    c6be:	f24a 6334 	movw	r3, #42548	; 0xa634
    c6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c6:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
    c6c8:	4b49      	ldr	r3, [pc, #292]	; (c7f0 <parse_gps_msg+0x220>)
    c6ca:	681b      	ldr	r3, [r3, #0]
    c6cc:	4618      	mov	r0, r3
    c6ce:	f006 fdd5 	bl	1327c <__aeabi_i2f>
    c6d2:	4603      	mov	r3, r0
    c6d4:	4618      	mov	r0, r3
    c6d6:	f006 f991 	bl	129fc <__aeabi_f2d>
    c6da:	4602      	mov	r2, r0
    c6dc:	460b      	mov	r3, r1
    c6de:	4610      	mov	r0, r2
    c6e0:	4619      	mov	r1, r3
    c6e2:	a33d      	add	r3, pc, #244	; (adr r3, c7d8 <parse_gps_msg+0x208>)
    c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6e8:	f006 fb06 	bl	12cf8 <__aeabi_ddiv>
    c6ec:	4602      	mov	r2, r0
    c6ee:	460b      	mov	r3, r1
    c6f0:	4610      	mov	r0, r2
    c6f2:	4619      	mov	r1, r3
    c6f4:	f04f 0200 	mov.w	r2, #0
    c6f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c6fc:	f2c4 0366 	movt	r3, #16486	; 0x4066
    c700:	f006 fafa 	bl	12cf8 <__aeabi_ddiv>
    c704:	4602      	mov	r2, r0
    c706:	460b      	mov	r3, r1
    c708:	4610      	mov	r0, r2
    c70a:	4619      	mov	r1, r3
    c70c:	a334      	add	r3, pc, #208	; (adr r3, c7e0 <parse_gps_msg+0x210>)
    c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c712:	f006 f9c7 	bl	12aa4 <__aeabi_dmul>
    c716:	4602      	mov	r2, r0
    c718:	460b      	mov	r3, r1
    c71a:	4610      	mov	r0, r2
    c71c:	4619      	mov	r1, r3
    c71e:	f006 fca3 	bl	13068 <__aeabi_d2f>
    c722:	4602      	mov	r2, r0
    c724:	f24a 6338 	movw	r3, #42552	; 0xa638
    c728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c72c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
    c72e:	f24a 6350 	movw	r3, #42576	; 0xa650
    c732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	4618      	mov	r0, r3
    c73a:	f006 fd9b 	bl	13274 <__aeabi_ui2f>
    c73e:	4603      	mov	r3, r0
    c740:	4618      	mov	r0, r3
    c742:	f04f 0100 	mov.w	r1, #0
    c746:	f2c4 417a 	movt	r1, #17530	; 0x447a
    c74a:	f006 fe9f 	bl	1348c <__aeabi_fdiv>
    c74e:	4603      	mov	r3, r0
    c750:	461a      	mov	r2, r3
    c752:	f24a 6328 	movw	r3, #42536	; 0xa628
    c756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c75a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
    c75c:	f24a 633c 	movw	r3, #42556	; 0xa63c
    c760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c764:	681a      	ldr	r2, [r3, #0]
    c766:	f248 531f 	movw	r3, #34079	; 0x851f
    c76a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c76e:	fb83 1302 	smull	r1, r3, r3, r2
    c772:	1159      	asrs	r1, r3, #5
    c774:	17d3      	asrs	r3, r2, #31
    c776:	1acb      	subs	r3, r1, r3
    c778:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
    c77c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
    c780:	4618      	mov	r0, r3
    c782:	f006 fd7b 	bl	1327c <__aeabi_i2f>
    c786:	4602      	mov	r2, r0
    c788:	f24a 6344 	movw	r3, #42564	; 0xa644
    c78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c790:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
    c792:	f24a 6340 	movw	r3, #42560	; 0xa640
    c796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79a:	681a      	ldr	r2, [r3, #0]
    c79c:	f248 531f 	movw	r3, #34079	; 0x851f
    c7a0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c7a4:	fb83 1302 	smull	r1, r3, r3, r2
    c7a8:	1159      	asrs	r1, r3, #5
    c7aa:	17d3      	asrs	r3, r2, #31
    c7ac:	1aca      	subs	r2, r1, r3
    c7ae:	f648 231a 	movw	r3, #35354	; 0x8a1a
    c7b2:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
    c7b6:	4413      	add	r3, r2
    c7b8:	4618      	mov	r0, r3
    c7ba:	f006 fd5f 	bl	1327c <__aeabi_i2f>
    c7be:	4602      	mov	r2, r0
    c7c0:	f24a 6348 	movw	r3, #42568	; 0xa648
    c7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c8:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
    c7ca:	f24a 634e 	movw	r3, #42574	; 0xa64e
    c7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d2:	2201      	movs	r2, #1
    c7d4:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
    c7d6:	bd80      	pop	{r7, pc}
    c7d8:	00000000 	.word	0x00000000
    c7dc:	40f86a00 	.word	0x40f86a00
    c7e0:	5a7ed197 	.word	0x5a7ed197
    c7e4:	400921fb 	.word	0x400921fb
    c7e8:	2000a65c 	.word	0x2000a65c
    c7ec:	2000a664 	.word	0x2000a664
    c7f0:	2000a668 	.word	0x2000a668

0000c7f4 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
    c7f4:	b480      	push	{r7}
    c7f6:	b083      	sub	sp, #12
    c7f8:	af00      	add	r7, sp, #0
    c7fa:	4603      	mov	r3, r0
    c7fc:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
    c7fe:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	2b06      	cmp	r3, #6
    c80a:	d81d      	bhi.n	c848 <parse_ubx+0x54>
    ck_a += c;
    c80c:	f24a 7353 	movw	r3, #42835	; 0xa753
    c810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c814:	781a      	ldrb	r2, [r3, #0]
    c816:	79fb      	ldrb	r3, [r7, #7]
    c818:	4413      	add	r3, r2
    c81a:	b2da      	uxtb	r2, r3
    c81c:	f24a 7353 	movw	r3, #42835	; 0xa753
    c820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c824:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
    c826:	f24a 7354 	movw	r3, #42836	; 0xa754
    c82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82e:	781a      	ldrb	r2, [r3, #0]
    c830:	f24a 7353 	movw	r3, #42835	; 0xa753
    c834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c838:	781b      	ldrb	r3, [r3, #0]
    c83a:	4413      	add	r3, r2
    c83c:	b2da      	uxtb	r2, r3
    c83e:	f24a 7354 	movw	r3, #42836	; 0xa754
    c842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c846:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
    c848:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c850:	781b      	ldrb	r3, [r3, #0]
    c852:	2b00      	cmp	r3, #0
    c854:	d110      	bne.n	c878 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
    c856:	79fb      	ldrb	r3, [r7, #7]
    c858:	2bb5      	cmp	r3, #181	; 0xb5
    c85a:	f040 8135 	bne.w	cac8 <parse_ubx+0x2d4>
      ubx_status++;
    c85e:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	3301      	adds	r3, #1
    c86a:	b2da      	uxtb	r2, r3
    c86c:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c874:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    c876:	e12f      	b.n	cad8 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
    c878:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c880:	781b      	ldrb	r3, [r3, #0]
    c882:	2b01      	cmp	r3, #1
    c884:	d11c      	bne.n	c8c0 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
    c886:	79fb      	ldrb	r3, [r7, #7]
    c888:	2b62      	cmp	r3, #98	; 0x62
    c88a:	d000      	beq.n	c88e <parse_ubx+0x9a>
      goto error;
    c88c:	e11d      	b.n	caca <parse_ubx+0x2d6>
    ck_a = 0;
    c88e:	f24a 7353 	movw	r3, #42835	; 0xa753
    c892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c896:	2200      	movs	r2, #0
    c898:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
    c89a:	f24a 7354 	movw	r3, #42836	; 0xa754
    c89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a2:	2200      	movs	r2, #0
    c8a4:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c8a6:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ae:	781b      	ldrb	r3, [r3, #0]
    c8b0:	3301      	adds	r3, #1
    c8b2:	b2da      	uxtb	r2, r3
    c8b4:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8bc:	701a      	strb	r2, [r3, #0]
    c8be:	e103      	b.n	cac8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
    c8c0:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c8:	781b      	ldrb	r3, [r3, #0]
    c8ca:	2b02      	cmp	r3, #2
    c8cc:	d127      	bne.n	c91e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
    c8ce:	f24a 634d 	movw	r3, #42573	; 0xa64d
    c8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d6:	781b      	ldrb	r3, [r3, #0]
    c8d8:	b2db      	uxtb	r3, r3
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d00c      	beq.n	c8f8 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
    c8de:	f24a 7357 	movw	r3, #42839	; 0xa757
    c8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e6:	781b      	ldrb	r3, [r3, #0]
    c8e8:	3301      	adds	r3, #1
    c8ea:	b2da      	uxtb	r2, r3
    c8ec:	f24a 7357 	movw	r3, #42839	; 0xa757
    c8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f4:	701a      	strb	r2, [r3, #0]
      goto error;
    c8f6:	e0e8      	b.n	caca <parse_ubx+0x2d6>
    }
    ubx_class = c;
    c8f8:	f24a 7356 	movw	r3, #42838	; 0xa756
    c8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c900:	79fa      	ldrb	r2, [r7, #7]
    c902:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c904:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90c:	781b      	ldrb	r3, [r3, #0]
    c90e:	3301      	adds	r3, #1
    c910:	b2da      	uxtb	r2, r3
    c912:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c91a:	701a      	strb	r2, [r3, #0]
    c91c:	e0d4      	b.n	cac8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
    c91e:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	2b03      	cmp	r3, #3
    c92a:	d112      	bne.n	c952 <parse_ubx+0x15e>
  {
    ubx_id = c;
    c92c:	f24a 7355 	movw	r3, #42837	; 0xa755
    c930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c934:	79fa      	ldrb	r2, [r7, #7]
    c936:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c938:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c940:	781b      	ldrb	r3, [r3, #0]
    c942:	3301      	adds	r3, #1
    c944:	b2da      	uxtb	r2, r3
    c946:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c94e:	701a      	strb	r2, [r3, #0]
    c950:	e0ba      	b.n	cac8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
    c952:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c95a:	781b      	ldrb	r3, [r3, #0]
    c95c:	2b04      	cmp	r3, #4
    c95e:	d113      	bne.n	c988 <parse_ubx+0x194>
  {
    ubx_len = c;
    c960:	79fb      	ldrb	r3, [r7, #7]
    c962:	b29a      	uxth	r2, r3
    c964:	f24a 7350 	movw	r3, #42832	; 0xa750
    c968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
    c96e:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c976:	781b      	ldrb	r3, [r3, #0]
    c978:	3301      	adds	r3, #1
    c97a:	b2da      	uxtb	r2, r3
    c97c:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c984:	701a      	strb	r2, [r3, #0]
    c986:	e09f      	b.n	cac8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
    c988:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	2b05      	cmp	r3, #5
    c994:	d12b      	bne.n	c9ee <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
    c996:	79fb      	ldrb	r3, [r7, #7]
    c998:	021b      	lsls	r3, r3, #8
    c99a:	b29a      	uxth	r2, r3
    c99c:	f24a 7350 	movw	r3, #42832	; 0xa750
    c9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a4:	881b      	ldrh	r3, [r3, #0]
    c9a6:	b29b      	uxth	r3, r3
    c9a8:	4313      	orrs	r3, r2
    c9aa:	b29b      	uxth	r3, r3
    c9ac:	b29a      	uxth	r2, r3
    c9ae:	f24a 7350 	movw	r3, #42832	; 0xa750
    c9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b6:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
    c9b8:	f24a 7350 	movw	r3, #42832	; 0xa750
    c9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c0:	881b      	ldrh	r3, [r3, #0]
    c9c2:	2bff      	cmp	r3, #255	; 0xff
    c9c4:	d900      	bls.n	c9c8 <parse_ubx+0x1d4>
      goto error;
    c9c6:	e080      	b.n	caca <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
    c9c8:	f24a 7352 	movw	r3, #42834	; 0xa752
    c9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d0:	2200      	movs	r2, #0
    c9d2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c9d4:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9dc:	781b      	ldrb	r3, [r3, #0]
    c9de:	3301      	adds	r3, #1
    c9e0:	b2da      	uxtb	r2, r3
    c9e2:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ea:	701a      	strb	r2, [r3, #0]
    c9ec:	e06c      	b.n	cac8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
    c9ee:	f24a 734f 	movw	r3, #42831	; 0xa74f
    c9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f6:	781b      	ldrb	r3, [r3, #0]
    c9f8:	2b06      	cmp	r3, #6
    c9fa:	d131      	bne.n	ca60 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
    c9fc:	f24a 7352 	movw	r3, #42834	; 0xa752
    ca00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca04:	781b      	ldrb	r3, [r3, #0]
    ca06:	461a      	mov	r2, r3
    ca08:	f24a 6350 	movw	r3, #42576	; 0xa650
    ca0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca10:	79f9      	ldrb	r1, [r7, #7]
    ca12:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
    ca14:	f24a 7352 	movw	r3, #42834	; 0xa752
    ca18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	3301      	adds	r3, #1
    ca20:	b2da      	uxtb	r2, r3
    ca22:	f24a 7352 	movw	r3, #42834	; 0xa752
    ca26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca2a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
    ca2c:	f24a 7352 	movw	r3, #42834	; 0xa752
    ca30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca34:	781b      	ldrb	r3, [r3, #0]
    ca36:	461a      	mov	r2, r3
    ca38:	f24a 7350 	movw	r3, #42832	; 0xa750
    ca3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca40:	881b      	ldrh	r3, [r3, #0]
    ca42:	429a      	cmp	r2, r3
    ca44:	d340      	bcc.n	cac8 <parse_ubx+0x2d4>
      ubx_status++;
    ca46:	f24a 734f 	movw	r3, #42831	; 0xa74f
    ca4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4e:	781b      	ldrb	r3, [r3, #0]
    ca50:	3301      	adds	r3, #1
    ca52:	b2da      	uxtb	r2, r3
    ca54:	f24a 734f 	movw	r3, #42831	; 0xa74f
    ca58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca5c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    ca5e:	e03b      	b.n	cad8 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
    ca60:	f24a 734f 	movw	r3, #42831	; 0xa74f
    ca64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	2b07      	cmp	r3, #7
    ca6c:	d115      	bne.n	ca9a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
    ca6e:	f24a 7353 	movw	r3, #42835	; 0xa753
    ca72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca76:	781b      	ldrb	r3, [r3, #0]
    ca78:	79fa      	ldrb	r2, [r7, #7]
    ca7a:	429a      	cmp	r2, r3
    ca7c:	d000      	beq.n	ca80 <parse_ubx+0x28c>
      goto error;
    ca7e:	e024      	b.n	caca <parse_ubx+0x2d6>
    ubx_status++;
    ca80:	f24a 734f 	movw	r3, #42831	; 0xa74f
    ca84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	3301      	adds	r3, #1
    ca8c:	b2da      	uxtb	r2, r3
    ca8e:	f24a 734f 	movw	r3, #42831	; 0xa74f
    ca92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca96:	701a      	strb	r2, [r3, #0]
    ca98:	e016      	b.n	cac8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
    ca9a:	f24a 734f 	movw	r3, #42831	; 0xa74f
    ca9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	2b08      	cmp	r3, #8
    caa6:	d10f      	bne.n	cac8 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
    caa8:	f24a 7354 	movw	r3, #42836	; 0xa754
    caac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	79fa      	ldrb	r2, [r7, #7]
    cab4:	429a      	cmp	r2, r3
    cab6:	d000      	beq.n	caba <parse_ubx+0x2c6>
      goto error;
    cab8:	e007      	b.n	caca <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
    caba:	f24a 634d 	movw	r3, #42573	; 0xa64d
    cabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac2:	2201      	movs	r2, #1
    cac4:	701a      	strb	r2, [r3, #0]
    goto restart;
    cac6:	e000      	b.n	caca <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
    cac8:	e006      	b.n	cad8 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
    caca:	f24a 734f 	movw	r3, #42831	; 0xa74f
    cace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad2:	2200      	movs	r2, #0
    cad4:	701a      	strb	r2, [r3, #0]
  return;
    cad6:	bf00      	nop
}
    cad8:	370c      	adds	r7, #12
    cada:	46bd      	mov	sp, r7
    cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae0:	4770      	bx	lr
    cae2:	bf00      	nop

0000cae4 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
    cae4:	b580      	push	{r7, lr}
    cae6:	b082      	sub	sp, #8
    cae8:	af00      	add	r7, sp, #0
    caea:	f248 039c 	movw	r3, #32924	; 0x809c
    caee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf2:	781b      	ldrb	r3, [r3, #0]
    caf4:	71fb      	strb	r3, [r7, #7]
    caf6:	79fb      	ldrb	r3, [r7, #7]
    caf8:	4618      	mov	r0, r3
    cafa:	f7ff fe7b 	bl	c7f4 <parse_ubx>
    cafe:	3708      	adds	r7, #8
    cb00:	46bd      	mov	sp, r7
    cb02:	bd80      	pop	{r7, pc}
    cb04:	f3af 8000 	nop.w

0000cb08 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
    cb08:	b580      	push	{r7, lr}
    cb0a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
    cb0c:	f240 1310 	movw	r3, #272	; 0x110
    cb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb14:	f24c 228f 	movw	r2, #49807	; 0xc28f
    cb18:	f6c3 3275 	movt	r2, #15221	; 0x3b75
    cb1c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
    cb1e:	2001      	movs	r0, #1
    cb20:	f24a 715c 	movw	r1, #42844	; 0xa75c
    cb24:	f2c2 0100 	movt	r1, #8192	; 0x2000
    cb28:	f7ff fc82 	bl	c430 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
    cb2c:	2002      	movs	r0, #2
    cb2e:	f24a 71a0 	movw	r1, #42912	; 0xa7a0
    cb32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    cb36:	f7ff fc7b 	bl	c430 <adc_buf_channel>
}
    cb3a:	bd80      	pop	{r7, pc}

0000cb3c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
    cb3c:	b480      	push	{r7}
    cb3e:	b083      	sub	sp, #12
    cb40:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
    cb42:	f24a 735c 	movw	r3, #42844	; 0xa75c
    cb46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb4a:	881b      	ldrh	r3, [r3, #0]
    cb4c:	095b      	lsrs	r3, r3, #5
    cb4e:	b29b      	uxth	r3, r3
    cb50:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
    cb52:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
    cb56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5a:	881b      	ldrh	r3, [r3, #0]
    cb5c:	095b      	lsrs	r3, r3, #5
    cb5e:	b29b      	uxth	r3, r3
    cb60:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
    cb62:	88fb      	ldrh	r3, [r7, #6]
    cb64:	425b      	negs	r3, r3
    cb66:	b29a      	uxth	r2, r3
    cb68:	88bb      	ldrh	r3, [r7, #4]
    cb6a:	1ad3      	subs	r3, r2, r3
    cb6c:	b29a      	uxth	r2, r3
    cb6e:	f240 130a 	movw	r3, #266	; 0x10a
    cb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb76:	881b      	ldrh	r3, [r3, #0]
    cb78:	b29b      	uxth	r3, r3
    cb7a:	1ad3      	subs	r3, r2, r3
    cb7c:	b29b      	uxth	r3, r3
    cb7e:	b29a      	uxth	r2, r3
    cb80:	f24a 7358 	movw	r3, #42840	; 0xa758
    cb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb88:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
    cb8a:	88ba      	ldrh	r2, [r7, #4]
    cb8c:	88fb      	ldrh	r3, [r7, #6]
    cb8e:	1ad3      	subs	r3, r2, r3
    cb90:	b29a      	uxth	r2, r3
    cb92:	f240 130c 	movw	r3, #268	; 0x10c
    cb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb9a:	881b      	ldrh	r3, [r3, #0]
    cb9c:	b29b      	uxth	r3, r3
    cb9e:	1ad3      	subs	r3, r2, r3
    cba0:	b29b      	uxth	r3, r3
    cba2:	b29a      	uxth	r2, r3
    cba4:	f24a 735a 	movw	r3, #42842	; 0xa75a
    cba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbac:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
    cbae:	370c      	adds	r7, #12
    cbb0:	46bd      	mov	sp, r7
    cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbb6:	4770      	bx	lr

0000cbb8 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
    cbb8:	b580      	push	{r7, lr}
    cbba:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
    cbbc:	f24a 735a 	movw	r3, #42842	; 0xa75a
    cbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc4:	881b      	ldrh	r3, [r3, #0]
    cbc6:	b29b      	uxth	r3, r3
    cbc8:	425b      	negs	r3, r3
    cbca:	b29b      	uxth	r3, r3
    cbcc:	b29a      	uxth	r2, r3
    cbce:	f240 1308 	movw	r3, #264	; 0x108
    cbd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd6:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
    cbd8:	f240 1308 	movw	r3, #264	; 0x108
    cbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe0:	881b      	ldrh	r3, [r3, #0]
    cbe2:	b21b      	sxth	r3, r3
    cbe4:	4618      	mov	r0, r3
    cbe6:	f005 fef7 	bl	129d8 <__aeabi_i2d>
    cbea:	4602      	mov	r2, r0
    cbec:	460b      	mov	r3, r1
    cbee:	f04f 0000 	mov.w	r0, #0
    cbf2:	f04f 0100 	mov.w	r1, #0
    cbf6:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
    cbfa:	f006 f87d 	bl	12cf8 <__aeabi_ddiv>
    cbfe:	4602      	mov	r2, r0
    cc00:	460b      	mov	r3, r1
    cc02:	4610      	mov	r0, r2
    cc04:	4619      	mov	r1, r3
    cc06:	f006 fa2f 	bl	13068 <__aeabi_d2f>
    cc0a:	4602      	mov	r2, r0
    cc0c:	f240 1310 	movw	r3, #272	; 0x110
    cc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc14:	601a      	str	r2, [r3, #0]
}
    cc16:	bd80      	pop	{r7, pc}

0000cc18 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
    cc18:	b590      	push	{r4, r7, lr}
    cc1a:	b083      	sub	sp, #12
    cc1c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
    cc1e:	f64a 2378 	movw	r3, #43640	; 0xaa78
    cc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc26:	681a      	ldr	r2, [r3, #0]
    cc28:	f24a 73e4 	movw	r3, #42980	; 0xa7e4
    cc2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc30:	681b      	ldr	r3, [r3, #0]
    cc32:	4610      	mov	r0, r2
    cc34:	4619      	mov	r1, r3
    cc36:	f006 fa6b 	bl	13110 <__aeabi_fsub>
    cc3a:	4603      	mov	r3, r0
    cc3c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
    cc3e:	f240 1314 	movw	r3, #276	; 0x114
    cc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc46:	681b      	ldr	r3, [r3, #0]
    cc48:	4618      	mov	r0, r3
    cc4a:	6879      	ldr	r1, [r7, #4]
    cc4c:	f006 fb6a 	bl	13324 <__aeabi_fmul>
    cc50:	4603      	mov	r3, r0
    cc52:	4618      	mov	r0, r3
    cc54:	f04f 0100 	mov.w	r1, #0
    cc58:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cc5c:	f006 fd00 	bl	13660 <__aeabi_fcmplt>
    cc60:	4603      	mov	r3, r0
    cc62:	2b00      	cmp	r3, #0
    cc64:	d002      	beq.n	cc6c <roll_pitch_pid_run+0x54>
    cc66:	f64d 2280 	movw	r2, #55936	; 0xda80
    cc6a:	e026      	b.n	ccba <roll_pitch_pid_run+0xa2>
    cc6c:	f240 1314 	movw	r3, #276	; 0x114
    cc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc74:	681b      	ldr	r3, [r3, #0]
    cc76:	4618      	mov	r0, r3
    cc78:	6879      	ldr	r1, [r7, #4]
    cc7a:	f006 fb53 	bl	13324 <__aeabi_fmul>
    cc7e:	4603      	mov	r3, r0
    cc80:	4618      	mov	r0, r3
    cc82:	f04f 0100 	mov.w	r1, #0
    cc86:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cc8a:	f006 fd07 	bl	1369c <__aeabi_fcmpgt>
    cc8e:	4603      	mov	r3, r0
    cc90:	2b00      	cmp	r3, #0
    cc92:	d002      	beq.n	cc9a <roll_pitch_pid_run+0x82>
    cc94:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cc98:	e00e      	b.n	ccb8 <roll_pitch_pid_run+0xa0>
    cc9a:	f240 1314 	movw	r3, #276	; 0x114
    cc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca2:	681b      	ldr	r3, [r3, #0]
    cca4:	4618      	mov	r0, r3
    cca6:	6879      	ldr	r1, [r7, #4]
    cca8:	f006 fb3c 	bl	13324 <__aeabi_fmul>
    ccac:	4603      	mov	r3, r0
    ccae:	4618      	mov	r0, r3
    ccb0:	f006 fcfe 	bl	136b0 <__aeabi_f2iz>
    ccb4:	4603      	mov	r3, r0
    ccb6:	b29b      	uxth	r3, r3
    ccb8:	b29a      	uxth	r2, r3
    ccba:	f24a 73ee 	movw	r3, #42990	; 0xa7ee
    ccbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc2:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
    ccc4:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
    ccc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cccc:	681b      	ldr	r3, [r3, #0]
    ccce:	4618      	mov	r0, r3
    ccd0:	f04f 0100 	mov.w	r1, #0
    ccd4:	f006 fcc4 	bl	13660 <__aeabi_fcmplt>
    ccd8:	4603      	mov	r3, r0
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d006      	beq.n	ccec <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
    ccde:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
    cce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce6:	f04f 0200 	mov.w	r2, #0
    ccea:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
    ccec:	f64a 2380 	movw	r3, #43648	; 0xaa80
    ccf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf4:	681a      	ldr	r2, [r3, #0]
    ccf6:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    ccfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccfe:	681b      	ldr	r3, [r3, #0]
    cd00:	4610      	mov	r0, r2
    cd02:	4619      	mov	r1, r3
    cd04:	f006 fa04 	bl	13110 <__aeabi_fsub>
    cd08:	4603      	mov	r3, r0
    cd0a:	461c      	mov	r4, r3
    cd0c:	f64a 2378 	movw	r3, #43640	; 0xaa78
    cd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	4618      	mov	r0, r3
    cd18:	f04f 0100 	mov.w	r1, #0
    cd1c:	f006 fca0 	bl	13660 <__aeabi_fcmplt>
    cd20:	4603      	mov	r3, r0
    cd22:	2b00      	cmp	r3, #0
    cd24:	d007      	beq.n	cd36 <roll_pitch_pid_run+0x11e>
    cd26:	f64a 2378 	movw	r3, #43640	; 0xaa78
    cd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2e:	681b      	ldr	r3, [r3, #0]
    cd30:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cd34:	e004      	b.n	cd40 <roll_pitch_pid_run+0x128>
    cd36:	f64a 2378 	movw	r3, #43640	; 0xaa78
    cd3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd3e:	681a      	ldr	r2, [r3, #0]
    cd40:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
    cd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd48:	681b      	ldr	r3, [r3, #0]
    cd4a:	4610      	mov	r0, r2
    cd4c:	4619      	mov	r1, r3
    cd4e:	f006 fae9 	bl	13324 <__aeabi_fmul>
    cd52:	4603      	mov	r3, r0
    cd54:	4620      	mov	r0, r4
    cd56:	4619      	mov	r1, r3
    cd58:	f006 f9da 	bl	13110 <__aeabi_fsub>
    cd5c:	4603      	mov	r3, r0
    cd5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cd62:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
    cd64:	f240 1318 	movw	r3, #280	; 0x118
    cd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd6c:	681b      	ldr	r3, [r3, #0]
    cd6e:	4618      	mov	r0, r3
    cd70:	6879      	ldr	r1, [r7, #4]
    cd72:	f006 fad7 	bl	13324 <__aeabi_fmul>
    cd76:	4603      	mov	r3, r0
    cd78:	4618      	mov	r0, r3
    cd7a:	f04f 0100 	mov.w	r1, #0
    cd7e:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cd82:	f006 fc6d 	bl	13660 <__aeabi_fcmplt>
    cd86:	4603      	mov	r3, r0
    cd88:	2b00      	cmp	r3, #0
    cd8a:	d002      	beq.n	cd92 <roll_pitch_pid_run+0x17a>
    cd8c:	f64d 2280 	movw	r2, #55936	; 0xda80
    cd90:	e026      	b.n	cde0 <roll_pitch_pid_run+0x1c8>
    cd92:	f240 1318 	movw	r3, #280	; 0x118
    cd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd9a:	681b      	ldr	r3, [r3, #0]
    cd9c:	4618      	mov	r0, r3
    cd9e:	6879      	ldr	r1, [r7, #4]
    cda0:	f006 fac0 	bl	13324 <__aeabi_fmul>
    cda4:	4603      	mov	r3, r0
    cda6:	4618      	mov	r0, r3
    cda8:	f04f 0100 	mov.w	r1, #0
    cdac:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cdb0:	f006 fc74 	bl	1369c <__aeabi_fcmpgt>
    cdb4:	4603      	mov	r3, r0
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d002      	beq.n	cdc0 <roll_pitch_pid_run+0x1a8>
    cdba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cdbe:	e00e      	b.n	cdde <roll_pitch_pid_run+0x1c6>
    cdc0:	f240 1318 	movw	r3, #280	; 0x118
    cdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc8:	681b      	ldr	r3, [r3, #0]
    cdca:	4618      	mov	r0, r3
    cdcc:	6879      	ldr	r1, [r7, #4]
    cdce:	f006 faa9 	bl	13324 <__aeabi_fmul>
    cdd2:	4603      	mov	r3, r0
    cdd4:	4618      	mov	r0, r3
    cdd6:	f006 fc6b 	bl	136b0 <__aeabi_f2iz>
    cdda:	4603      	mov	r3, r0
    cddc:	b29b      	uxth	r3, r3
    cdde:	b29a      	uxth	r2, r3
    cde0:	f24a 73f0 	movw	r3, #42992	; 0xa7f0
    cde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde8:	801a      	strh	r2, [r3, #0]
}
    cdea:	370c      	adds	r7, #12
    cdec:	46bd      	mov	sp, r7
    cdee:	bd90      	pop	{r4, r7, pc}

0000cdf0 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
    cdf0:	b580      	push	{r7, lr}
    cdf2:	b082      	sub	sp, #8
    cdf4:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
    cdf6:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    cdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdfe:	681a      	ldr	r2, [r3, #0]
    ce00:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    ce04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce08:	681b      	ldr	r3, [r3, #0]
    ce0a:	4610      	mov	r0, r2
    ce0c:	4619      	mov	r1, r3
    ce0e:	f006 f97f 	bl	13110 <__aeabi_fsub>
    ce12:	4603      	mov	r3, r0
    ce14:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
    ce16:	e013      	b.n	ce40 <course_pid_run+0x50>
    ce18:	6878      	ldr	r0, [r7, #4]
    ce1a:	f005 fdef 	bl	129fc <__aeabi_f2d>
    ce1e:	4602      	mov	r2, r0
    ce20:	460b      	mov	r3, r1
    ce22:	4610      	mov	r0, r2
    ce24:	4619      	mov	r1, r3
    ce26:	a348      	add	r3, pc, #288	; (adr r3, cf48 <course_pid_run+0x158>)
    ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce2c:	f005 fc86 	bl	1273c <__aeabi_dsub>
    ce30:	4602      	mov	r2, r0
    ce32:	460b      	mov	r3, r1
    ce34:	4610      	mov	r0, r2
    ce36:	4619      	mov	r1, r3
    ce38:	f006 f916 	bl	13068 <__aeabi_d2f>
    ce3c:	4603      	mov	r3, r0
    ce3e:	607b      	str	r3, [r7, #4]
    ce40:	6878      	ldr	r0, [r7, #4]
    ce42:	f005 fddb 	bl	129fc <__aeabi_f2d>
    ce46:	4602      	mov	r2, r0
    ce48:	460b      	mov	r3, r1
    ce4a:	4610      	mov	r0, r2
    ce4c:	4619      	mov	r1, r3
    ce4e:	a340      	add	r3, pc, #256	; (adr r3, cf50 <course_pid_run+0x160>)
    ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce54:	f006 f8b6 	bl	12fc4 <__aeabi_dcmpgt>
    ce58:	4603      	mov	r3, r0
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d1dc      	bne.n	ce18 <course_pid_run+0x28>
    ce5e:	e013      	b.n	ce88 <course_pid_run+0x98>
    ce60:	6878      	ldr	r0, [r7, #4]
    ce62:	f005 fdcb 	bl	129fc <__aeabi_f2d>
    ce66:	4602      	mov	r2, r0
    ce68:	460b      	mov	r3, r1
    ce6a:	4610      	mov	r0, r2
    ce6c:	4619      	mov	r1, r3
    ce6e:	a336      	add	r3, pc, #216	; (adr r3, cf48 <course_pid_run+0x158>)
    ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce74:	f005 fc64 	bl	12740 <__adddf3>
    ce78:	4602      	mov	r2, r0
    ce7a:	460b      	mov	r3, r1
    ce7c:	4610      	mov	r0, r2
    ce7e:	4619      	mov	r1, r3
    ce80:	f006 f8f2 	bl	13068 <__aeabi_d2f>
    ce84:	4603      	mov	r3, r0
    ce86:	607b      	str	r3, [r7, #4]
    ce88:	6878      	ldr	r0, [r7, #4]
    ce8a:	f005 fdb7 	bl	129fc <__aeabi_f2d>
    ce8e:	4602      	mov	r2, r0
    ce90:	460b      	mov	r3, r1
    ce92:	4610      	mov	r0, r2
    ce94:	4619      	mov	r1, r3
    ce96:	a330      	add	r3, pc, #192	; (adr r3, cf58 <course_pid_run+0x168>)
    ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce9c:	f006 f874 	bl	12f88 <__aeabi_dcmplt>
    cea0:	4603      	mov	r3, r0
    cea2:	2b00      	cmp	r3, #0
    cea4:	d1dc      	bne.n	ce60 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
    cea6:	f240 1320 	movw	r3, #288	; 0x120
    ceaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceae:	681b      	ldr	r3, [r3, #0]
    ceb0:	4618      	mov	r0, r3
    ceb2:	6879      	ldr	r1, [r7, #4]
    ceb4:	f006 fa36 	bl	13324 <__aeabi_fmul>
    ceb8:	4603      	mov	r3, r0
    ceba:	461a      	mov	r2, r3
    cebc:	f64a 0340 	movw	r3, #43072	; 0xa840
    cec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec4:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
    cec6:	f64a 0340 	movw	r3, #43072	; 0xa840
    ceca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cece:	681a      	ldr	r2, [r3, #0]
    ced0:	f240 1324 	movw	r3, #292	; 0x124
    ced4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced8:	681b      	ldr	r3, [r3, #0]
    ceda:	4610      	mov	r0, r2
    cedc:	4619      	mov	r1, r3
    cede:	f006 fbdd 	bl	1369c <__aeabi_fcmpgt>
    cee2:	4603      	mov	r3, r0
    cee4:	2b00      	cmp	r3, #0
    cee6:	d00a      	beq.n	cefe <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
    cee8:	f240 1324 	movw	r3, #292	; 0x124
    ceec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef0:	681a      	ldr	r2, [r3, #0]
    cef2:	f64a 0340 	movw	r3, #43072	; 0xa840
    cef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cefa:	601a      	str	r2, [r3, #0]
    cefc:	e01e      	b.n	cf3c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
    cefe:	f240 1324 	movw	r3, #292	; 0x124
    cf02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf06:	681b      	ldr	r3, [r3, #0]
    cf08:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cf0c:	f64a 0340 	movw	r3, #43072	; 0xa840
    cf10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf14:	681b      	ldr	r3, [r3, #0]
    cf16:	4610      	mov	r0, r2
    cf18:	4619      	mov	r1, r3
    cf1a:	f006 fbbf 	bl	1369c <__aeabi_fcmpgt>
    cf1e:	4603      	mov	r3, r0
    cf20:	2b00      	cmp	r3, #0
    cf22:	d00b      	beq.n	cf3c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
    cf24:	f240 1324 	movw	r3, #292	; 0x124
    cf28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf2c:	681b      	ldr	r3, [r3, #0]
    cf2e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cf32:	f64a 0340 	movw	r3, #43072	; 0xa840
    cf36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3a:	601a      	str	r2, [r3, #0]
}
    cf3c:	3708      	adds	r7, #8
    cf3e:	46bd      	mov	sp, r7
    cf40:	bd80      	pop	{r7, pc}
    cf42:	bf00      	nop
    cf44:	f3af 8000 	nop.w
    cf48:	54442d18 	.word	0x54442d18
    cf4c:	401921fb 	.word	0x401921fb
    cf50:	54442d18 	.word	0x54442d18
    cf54:	400921fb 	.word	0x400921fb
    cf58:	54442d18 	.word	0x54442d18
    cf5c:	c00921fb 	.word	0xc00921fb

0000cf60 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
    cf60:	b5b0      	push	{r4, r5, r7, lr}
    cf62:	b082      	sub	sp, #8
    cf64:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
    cf66:	f64a 238c 	movw	r3, #43660	; 0xaa8c
    cf6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6e:	681a      	ldr	r2, [r3, #0]
    cf70:	f64a 0300 	movw	r3, #43008	; 0xa800
    cf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf78:	681b      	ldr	r3, [r3, #0]
    cf7a:	4610      	mov	r0, r2
    cf7c:	4619      	mov	r1, r3
    cf7e:	f006 f8c7 	bl	13110 <__aeabi_fsub>
    cf82:	4603      	mov	r3, r0
    cf84:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
    cf86:	f24a 439f 	movw	r3, #42143	; 0xa49f
    cf8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf8e:	781b      	ldrb	r3, [r3, #0]
    cf90:	2b00      	cmp	r3, #0
    cf92:	f000 80a8 	beq.w	d0e6 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
    cf96:	f64a 0338 	movw	r3, #43064	; 0xa838
    cf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9e:	881b      	ldrh	r3, [r3, #0]
    cfa0:	b29a      	uxth	r2, r3
    cfa2:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    cfa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfaa:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
    cfac:	f240 132c 	movw	r3, #300	; 0x12c
    cfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb4:	681a      	ldr	r2, [r3, #0]
    cfb6:	f64a 030c 	movw	r3, #43020	; 0xa80c
    cfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	4610      	mov	r0, r2
    cfc2:	4619      	mov	r1, r3
    cfc4:	f006 f9ae 	bl	13324 <__aeabi_fmul>
    cfc8:	4603      	mov	r3, r0
    cfca:	4618      	mov	r0, r3
    cfcc:	6879      	ldr	r1, [r7, #4]
    cfce:	f006 f8a1 	bl	13114 <__addsf3>
    cfd2:	4603      	mov	r3, r0
    cfd4:	461a      	mov	r2, r3
    cfd6:	f240 1328 	movw	r3, #296	; 0x128
    cfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfde:	681b      	ldr	r3, [r3, #0]
    cfe0:	4610      	mov	r0, r2
    cfe2:	4619      	mov	r1, r3
    cfe4:	f006 f99e 	bl	13324 <__aeabi_fmul>
    cfe8:	4603      	mov	r3, r0
    cfea:	461a      	mov	r2, r3
    cfec:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    cff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff4:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
    cff6:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    cffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cffe:	681a      	ldr	r2, [r3, #0]
    d000:	f240 1330 	movw	r3, #304	; 0x130
    d004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d008:	681b      	ldr	r3, [r3, #0]
    d00a:	4610      	mov	r0, r2
    d00c:	4619      	mov	r1, r3
    d00e:	f006 fb45 	bl	1369c <__aeabi_fcmpgt>
    d012:	4603      	mov	r3, r0
    d014:	2b00      	cmp	r3, #0
    d016:	d009      	beq.n	d02c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
    d018:	f240 1330 	movw	r3, #304	; 0x130
    d01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d020:	681a      	ldr	r2, [r3, #0]
    d022:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    d026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
    d02c:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    d030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d034:	681a      	ldr	r2, [r3, #0]
    d036:	f240 1334 	movw	r3, #308	; 0x134
    d03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d03e:	681b      	ldr	r3, [r3, #0]
    d040:	4610      	mov	r0, r2
    d042:	4619      	mov	r1, r3
    d044:	f006 fb0c 	bl	13660 <__aeabi_fcmplt>
    d048:	4603      	mov	r3, r0
    d04a:	2b00      	cmp	r3, #0
    d04c:	d009      	beq.n	d062 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
    d04e:	f240 1334 	movw	r3, #308	; 0x134
    d052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d056:	681a      	ldr	r2, [r3, #0]
    d058:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    d05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d060:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
    d062:	f64a 030c 	movw	r3, #43020	; 0xa80c
    d066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d06a:	681b      	ldr	r3, [r3, #0]
    d06c:	4618      	mov	r0, r3
    d06e:	6879      	ldr	r1, [r7, #4]
    d070:	f006 f850 	bl	13114 <__addsf3>
    d074:	4603      	mov	r3, r0
    d076:	461a      	mov	r2, r3
    d078:	f64a 030c 	movw	r3, #43020	; 0xa80c
    d07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d080:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
    d082:	f64a 030c 	movw	r3, #43020	; 0xa80c
    d086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08a:	681b      	ldr	r3, [r3, #0]
    d08c:	4618      	mov	r0, r3
    d08e:	f04f 0100 	mov.w	r1, #0
    d092:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d096:	f006 fb01 	bl	1369c <__aeabi_fcmpgt>
    d09a:	4603      	mov	r3, r0
    d09c:	2b00      	cmp	r3, #0
    d09e:	d008      	beq.n	d0b2 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
    d0a0:	f64a 030c 	movw	r3, #43020	; 0xa80c
    d0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a8:	f04f 0200 	mov.w	r2, #0
    d0ac:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d0b0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
    d0b2:	f64a 030c 	movw	r3, #43020	; 0xa80c
    d0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ba:	681b      	ldr	r3, [r3, #0]
    d0bc:	4618      	mov	r0, r3
    d0be:	f04f 0100 	mov.w	r1, #0
    d0c2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d0c6:	f006 facb 	bl	13660 <__aeabi_fcmplt>
    d0ca:	4603      	mov	r3, r0
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d100      	bne.n	d0d2 <climb_pid_run+0x172>
    d0d0:	e109      	b.n	d2e6 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
    d0d2:	f64a 030c 	movw	r3, #43020	; 0xa80c
    d0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0da:	f04f 0200 	mov.w	r2, #0
    d0de:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d0e2:	601a      	str	r2, [r3, #0]
    d0e4:	e0ff      	b.n	d2e6 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
    d0e6:	f64a 0300 	movw	r3, #43008	; 0xa800
    d0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ee:	681b      	ldr	r3, [r3, #0]
    d0f0:	4618      	mov	r0, r3
    d0f2:	f04f 0100 	mov.w	r1, #0
    d0f6:	f006 fad1 	bl	1369c <__aeabi_fcmpgt>
    d0fa:	4603      	mov	r3, r0
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d010      	beq.n	d122 <climb_pid_run+0x1c2>
    d100:	f64a 0300 	movw	r3, #43008	; 0xa800
    d104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d108:	681a      	ldr	r2, [r3, #0]
    d10a:	f240 131c 	movw	r3, #284	; 0x11c
    d10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d112:	681b      	ldr	r3, [r3, #0]
    d114:	4610      	mov	r0, r2
    d116:	4619      	mov	r1, r3
    d118:	f006 f904 	bl	13324 <__aeabi_fmul>
    d11c:	4603      	mov	r3, r0
    d11e:	461a      	mov	r2, r3
    d120:	e001      	b.n	d126 <climb_pid_run+0x1c6>
    d122:	f04f 0200 	mov.w	r2, #0
    d126:	f24a 73f8 	movw	r3, #43000	; 0xa7f8
    d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
    d130:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    d134:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    d138:	f64a 0308 	movw	r3, #43016	; 0xa808
    d13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d140:	681b      	ldr	r3, [r3, #0]
    d142:	4610      	mov	r0, r2
    d144:	4619      	mov	r1, r3
    d146:	f006 f8ed 	bl	13324 <__aeabi_fmul>
    d14a:	4603      	mov	r3, r0
    d14c:	4618      	mov	r0, r3
    d14e:	6879      	ldr	r1, [r7, #4]
    d150:	f005 ffe0 	bl	13114 <__addsf3>
    d154:	4603      	mov	r3, r0
    d156:	461a      	mov	r2, r3
    d158:	f24c 238f 	movw	r3, #49807	; 0xc28f
    d15c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
    d160:	4610      	mov	r0, r2
    d162:	4619      	mov	r1, r3
    d164:	f006 f8de 	bl	13324 <__aeabi_fmul>
    d168:	4603      	mov	r3, r0
    d16a:	4618      	mov	r0, r3
    d16c:	f005 fc46 	bl	129fc <__aeabi_f2d>
    d170:	4602      	mov	r2, r0
    d172:	460b      	mov	r3, r1
    d174:	4610      	mov	r0, r2
    d176:	4619      	mov	r1, r3
    d178:	a35d      	add	r3, pc, #372	; (adr r3, d2f0 <climb_pid_run+0x390>)
    d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d17e:	f005 fadf 	bl	12740 <__adddf3>
    d182:	4602      	mov	r2, r0
    d184:	460b      	mov	r3, r1
    d186:	4614      	mov	r4, r2
    d188:	461d      	mov	r5, r3
    d18a:	f64a 0300 	movw	r3, #43008	; 0xa800
    d18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d192:	681b      	ldr	r3, [r3, #0]
    d194:	4618      	mov	r0, r3
    d196:	f005 fc31 	bl	129fc <__aeabi_f2d>
    d19a:	4602      	mov	r2, r0
    d19c:	460b      	mov	r3, r1
    d19e:	4610      	mov	r0, r2
    d1a0:	4619      	mov	r1, r3
    d1a2:	a355      	add	r3, pc, #340	; (adr r3, d2f8 <climb_pid_run+0x398>)
    d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1a8:	f005 fc7c 	bl	12aa4 <__aeabi_dmul>
    d1ac:	4602      	mov	r2, r0
    d1ae:	460b      	mov	r3, r1
    d1b0:	4620      	mov	r0, r4
    d1b2:	4629      	mov	r1, r5
    d1b4:	f005 fac4 	bl	12740 <__adddf3>
    d1b8:	4602      	mov	r2, r0
    d1ba:	460b      	mov	r3, r1
    d1bc:	4610      	mov	r0, r2
    d1be:	4619      	mov	r1, r3
    d1c0:	f005 ff52 	bl	13068 <__aeabi_d2f>
    d1c4:	4603      	mov	r3, r0
    d1c6:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
    d1c8:	f64a 0308 	movw	r3, #43016	; 0xa808
    d1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d0:	681b      	ldr	r3, [r3, #0]
    d1d2:	4618      	mov	r0, r3
    d1d4:	6879      	ldr	r1, [r7, #4]
    d1d6:	f005 ff9d 	bl	13114 <__addsf3>
    d1da:	4603      	mov	r3, r0
    d1dc:	461a      	mov	r2, r3
    d1de:	f64a 0308 	movw	r3, #43016	; 0xa808
    d1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
    d1e8:	f64a 0308 	movw	r3, #43016	; 0xa808
    d1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f0:	681b      	ldr	r3, [r3, #0]
    d1f2:	4618      	mov	r0, r3
    d1f4:	f04f 0100 	mov.w	r1, #0
    d1f8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d1fc:	f006 fa4e 	bl	1369c <__aeabi_fcmpgt>
    d200:	4603      	mov	r3, r0
    d202:	2b00      	cmp	r3, #0
    d204:	d008      	beq.n	d218 <climb_pid_run+0x2b8>
    d206:	f64a 0308 	movw	r3, #43016	; 0xa808
    d20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d20e:	f04f 0200 	mov.w	r2, #0
    d212:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d216:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
    d218:	f64a 0308 	movw	r3, #43016	; 0xa808
    d21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d220:	681b      	ldr	r3, [r3, #0]
    d222:	4618      	mov	r0, r3
    d224:	f04f 0100 	mov.w	r1, #0
    d228:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d22c:	f006 fa18 	bl	13660 <__aeabi_fcmplt>
    d230:	4603      	mov	r3, r0
    d232:	2b00      	cmp	r3, #0
    d234:	d008      	beq.n	d248 <climb_pid_run+0x2e8>
    d236:	f64a 0308 	movw	r3, #43016	; 0xa808
    d23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d23e:	f04f 0200 	mov.w	r2, #0
    d242:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d246:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
    d248:	6838      	ldr	r0, [r7, #0]
    d24a:	f04f 0100 	mov.w	r1, #0
    d24e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d252:	f006 f867 	bl	13324 <__aeabi_fmul>
    d256:	4603      	mov	r3, r0
    d258:	4618      	mov	r0, r3
    d25a:	f04f 0100 	mov.w	r1, #0
    d25e:	f006 f9ff 	bl	13660 <__aeabi_fcmplt>
    d262:	4603      	mov	r3, r0
    d264:	2b00      	cmp	r3, #0
    d266:	d001      	beq.n	d26c <climb_pid_run+0x30c>
    d268:	2200      	movs	r2, #0
    d26a:	e022      	b.n	d2b2 <climb_pid_run+0x352>
    d26c:	6838      	ldr	r0, [r7, #0]
    d26e:	f04f 0100 	mov.w	r1, #0
    d272:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d276:	f006 f855 	bl	13324 <__aeabi_fmul>
    d27a:	4603      	mov	r3, r0
    d27c:	4618      	mov	r0, r3
    d27e:	f04f 0100 	mov.w	r1, #0
    d282:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d286:	f006 fa09 	bl	1369c <__aeabi_fcmpgt>
    d28a:	4603      	mov	r3, r0
    d28c:	2b00      	cmp	r3, #0
    d28e:	d002      	beq.n	d296 <climb_pid_run+0x336>
    d290:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d294:	e00c      	b.n	d2b0 <climb_pid_run+0x350>
    d296:	6838      	ldr	r0, [r7, #0]
    d298:	f04f 0100 	mov.w	r1, #0
    d29c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d2a0:	f006 f840 	bl	13324 <__aeabi_fmul>
    d2a4:	4603      	mov	r3, r0
    d2a6:	4618      	mov	r0, r3
    d2a8:	f006 fa02 	bl	136b0 <__aeabi_f2iz>
    d2ac:	4603      	mov	r3, r0
    d2ae:	b29b      	uxth	r3, r3
    d2b0:	b29a      	uxth	r2, r3
    d2b2:	f24a 73ec 	movw	r3, #42988	; 0xa7ec
    d2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ba:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
    d2bc:	f64a 033c 	movw	r3, #43068	; 0xa83c
    d2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c4:	681a      	ldr	r2, [r3, #0]
    d2c6:	f24a 73f8 	movw	r3, #43000	; 0xa7f8
    d2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ce:	681b      	ldr	r3, [r3, #0]
    d2d0:	4610      	mov	r0, r2
    d2d2:	4619      	mov	r1, r3
    d2d4:	f005 ff1e 	bl	13114 <__addsf3>
    d2d8:	4603      	mov	r3, r0
    d2da:	461a      	mov	r2, r3
    d2dc:	f24a 73e8 	movw	r3, #42984	; 0xa7e8
    d2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2e4:	601a      	str	r2, [r3, #0]
  }
}
    d2e6:	3708      	adds	r7, #8
    d2e8:	46bd      	mov	sp, r7
    d2ea:	bdb0      	pop	{r4, r5, r7, pc}
    d2ec:	f3af 8000 	nop.w
    d2f0:	3d70a3d7 	.word	0x3d70a3d7
    d2f4:	3fd3d70a 	.word	0x3fd3d70a
    d2f8:	9999999a 	.word	0x9999999a
    d2fc:	3fc99999 	.word	0x3fc99999

0000d300 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
    d300:	b580      	push	{r7, lr}
    d302:	b082      	sub	sp, #8
    d304:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
    d306:	f64a 2374 	movw	r3, #43636	; 0xaa74
    d30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d30e:	681a      	ldr	r2, [r3, #0]
    d310:	f240 133c 	movw	r3, #316	; 0x13c
    d314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d318:	681b      	ldr	r3, [r3, #0]
    d31a:	4610      	mov	r0, r2
    d31c:	4619      	mov	r1, r3
    d31e:	f005 fef7 	bl	13110 <__aeabi_fsub>
    d322:	4603      	mov	r3, r0
    d324:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
    d326:	f240 1338 	movw	r3, #312	; 0x138
    d32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32e:	681b      	ldr	r3, [r3, #0]
    d330:	4618      	mov	r0, r3
    d332:	6879      	ldr	r1, [r7, #4]
    d334:	f005 fff6 	bl	13324 <__aeabi_fmul>
    d338:	4603      	mov	r3, r0
    d33a:	461a      	mov	r2, r3
    d33c:	f64a 0304 	movw	r3, #43012	; 0xa804
    d340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d344:	681b      	ldr	r3, [r3, #0]
    d346:	4610      	mov	r0, r2
    d348:	4619      	mov	r1, r3
    d34a:	f005 fee3 	bl	13114 <__addsf3>
    d34e:	4603      	mov	r3, r0
    d350:	461a      	mov	r2, r3
    d352:	f64a 0300 	movw	r3, #43008	; 0xa800
    d356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d35a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
    d35c:	f64a 0300 	movw	r3, #43008	; 0xa800
    d360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d364:	681b      	ldr	r3, [r3, #0]
    d366:	4618      	mov	r0, r3
    d368:	f04f 0100 	mov.w	r1, #0
    d36c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
    d370:	f006 f976 	bl	13660 <__aeabi_fcmplt>
    d374:	4603      	mov	r3, r0
    d376:	2b00      	cmp	r3, #0
    d378:	d008      	beq.n	d38c <altitude_pid_run+0x8c>
    d37a:	f64a 0300 	movw	r3, #43008	; 0xa800
    d37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d382:	f04f 0200 	mov.w	r2, #0
    d386:	f6cb 7280 	movt	r2, #49024	; 0xbf80
    d38a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
    d38c:	f64a 0300 	movw	r3, #43008	; 0xa800
    d390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d394:	681b      	ldr	r3, [r3, #0]
    d396:	4618      	mov	r0, r3
    d398:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d39c:	f006 f97e 	bl	1369c <__aeabi_fcmpgt>
    d3a0:	4603      	mov	r3, r0
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d006      	beq.n	d3b4 <altitude_pid_run+0xb4>
    d3a6:	f64a 0300 	movw	r3, #43008	; 0xa800
    d3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d3b2:	601a      	str	r2, [r3, #0]
}
    d3b4:	3708      	adds	r7, #8
    d3b6:	46bd      	mov	sp, r7
    d3b8:	bd80      	pop	{r7, pc}
    d3ba:	bf00      	nop
    d3bc:	f3af 8000 	nop.w

0000d3c0 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
    d3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3c2:	b08b      	sub	sp, #44	; 0x2c
    d3c4:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
    d3c6:	f64a 0311 	movw	r3, #43025	; 0xa811
    d3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ce:	781b      	ldrb	r3, [r3, #0]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	f040 8169 	bne.w	d6a8 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
    d3d6:	f64a 0310 	movw	r3, #43024	; 0xa810
    d3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3de:	781b      	ldrb	r3, [r3, #0]
    d3e0:	2b00      	cmp	r3, #0
    d3e2:	d13c      	bne.n	d45e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
    d3e4:	f64a 0310 	movw	r3, #43024	; 0xa810
    d3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ec:	2200      	movs	r2, #0
    d3ee:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
    d3f0:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    d3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f8:	881b      	ldrh	r3, [r3, #0]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d000      	beq.n	d400 <auto_nav+0x40>
    d3fe:	e03d      	b.n	d47c <auto_nav+0xbc>
	else NextStage(); 
    d400:	f64a 0310 	movw	r3, #43024	; 0xa810
    d404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d408:	781b      	ldrb	r3, [r3, #0]
    d40a:	3301      	adds	r3, #1
    d40c:	b2da      	uxtb	r2, r3
    d40e:	f64a 0310 	movw	r3, #43024	; 0xa810
    d412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d416:	701a      	strb	r2, [r3, #0]
    d418:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d420:	681a      	ldr	r2, [r3, #0]
    d422:	f64a 0314 	movw	r3, #43028	; 0xa814
    d426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d42a:	601a      	str	r2, [r3, #0]
    d42c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d434:	681a      	ldr	r2, [r3, #0]
    d436:	f64a 0318 	movw	r3, #43032	; 0xa818
    d43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d43e:	601a      	str	r2, [r3, #0]
    d440:	f64a 0324 	movw	r3, #43044	; 0xa824
    d444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d448:	2200      	movs	r2, #0
    d44a:	801a      	strh	r2, [r3, #0]
    d44c:	f64a 0328 	movw	r3, #43048	; 0xa828
    d450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d454:	f04f 0200 	mov.w	r2, #0
    d458:	601a      	str	r2, [r3, #0]
    d45a:	f002 b883 	b.w	f564 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d45e:	f64a 0310 	movw	r3, #43024	; 0xa810
    d462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d466:	781b      	ldrb	r3, [r3, #0]
    d468:	2b01      	cmp	r3, #1
    d46a:	d100      	bne.n	d46e <auto_nav+0xae>
    {   Goto(while_1)}
    d46c:	e7ba      	b.n	d3e4 <auto_nav+0x24>
    else if (nav_stage == 2)
    d46e:	f64a 0310 	movw	r3, #43024	; 0xa810
    d472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d476:	781b      	ldrb	r3, [r3, #0]
    d478:	2b02      	cmp	r3, #2
    d47a:	d162      	bne.n	d542 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
    d47c:	f64a 0310 	movw	r3, #43024	; 0xa810
    d480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d484:	2202      	movs	r2, #2
    d486:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
    d488:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    d48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d490:	881b      	ldrh	r3, [r3, #0]
    d492:	2b08      	cmp	r3, #8
    d494:	d92e      	bls.n	d4f4 <auto_nav+0x134>
    d496:	f64a 0310 	movw	r3, #43024	; 0xa810
    d49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d49e:	781b      	ldrb	r3, [r3, #0]
    d4a0:	3301      	adds	r3, #1
    d4a2:	b2da      	uxtb	r2, r3
    d4a4:	f64a 0310 	movw	r3, #43024	; 0xa810
    d4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ac:	701a      	strb	r2, [r3, #0]
    d4ae:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b6:	681a      	ldr	r2, [r3, #0]
    d4b8:	f64a 0314 	movw	r3, #43028	; 0xa814
    d4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4c0:	601a      	str	r2, [r3, #0]
    d4c2:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ca:	681a      	ldr	r2, [r3, #0]
    d4cc:	f64a 0318 	movw	r3, #43032	; 0xa818
    d4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d4:	601a      	str	r2, [r3, #0]
    d4d6:	f64a 0324 	movw	r3, #43044	; 0xa824
    d4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4de:	2200      	movs	r2, #0
    d4e0:	801a      	strh	r2, [r3, #0]
    d4e2:	f64a 0328 	movw	r3, #43048	; 0xa828
    d4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ea:	f04f 0200 	mov.w	r2, #0
    d4ee:	601a      	str	r2, [r3, #0]
    d4f0:	f002 b838 	b.w	f564 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d4f4:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    d4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4fc:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d500:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d504:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d506:	f24a 439f 	movw	r3, #42143	; 0xa49f
    d50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50e:	2200      	movs	r2, #0
    d510:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
    d512:	f64a 033c 	movw	r3, #43068	; 0xa83c
    d516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51a:	f649 129a 	movw	r2, #39322	; 0x999a
    d51e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
    d522:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
    d524:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52c:	2201      	movs	r2, #1
    d52e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
    d530:	f64a 0338 	movw	r3, #43064	; 0xa838
    d534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d538:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    d53c:	801a      	strh	r2, [r3, #0]
        }
        return;
    d53e:	f002 b811 	b.w	f564 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
    d542:	f64a 0310 	movw	r3, #43024	; 0xa810
    d546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d54a:	781b      	ldrb	r3, [r3, #0]
    d54c:	2b03      	cmp	r3, #3
    d54e:	d168      	bne.n	d622 <auto_nav+0x262>
     {
	nav_stage = 3;	
    d550:	f64a 0310 	movw	r3, #43024	; 0xa810
    d554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d558:	2203      	movs	r2, #3
    d55a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
    d55c:	f64a 2374 	movw	r3, #43636	; 0xaa74
    d560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d564:	681b      	ldr	r3, [r3, #0]
    d566:	4618      	mov	r0, r3
    d568:	f04f 0100 	mov.w	r1, #0
    d56c:	f2c4 3116 	movt	r1, #17174	; 0x4316
    d570:	f006 f894 	bl	1369c <__aeabi_fcmpgt>
    d574:	4603      	mov	r3, r0
    d576:	2b00      	cmp	r3, #0
    d578:	d02e      	beq.n	d5d8 <auto_nav+0x218>
    d57a:	f64a 0310 	movw	r3, #43024	; 0xa810
    d57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d582:	781b      	ldrb	r3, [r3, #0]
    d584:	3301      	adds	r3, #1
    d586:	b2da      	uxtb	r2, r3
    d588:	f64a 0310 	movw	r3, #43024	; 0xa810
    d58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d590:	701a      	strb	r2, [r3, #0]
    d592:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d59a:	681a      	ldr	r2, [r3, #0]
    d59c:	f64a 0314 	movw	r3, #43028	; 0xa814
    d5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a4:	601a      	str	r2, [r3, #0]
    d5a6:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ae:	681a      	ldr	r2, [r3, #0]
    d5b0:	f64a 0318 	movw	r3, #43032	; 0xa818
    d5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b8:	601a      	str	r2, [r3, #0]
    d5ba:	f64a 0324 	movw	r3, #43044	; 0xa824
    d5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c2:	2200      	movs	r2, #0
    d5c4:	801a      	strh	r2, [r3, #0]
    d5c6:	f64a 0328 	movw	r3, #43048	; 0xa828
    d5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ce:	f04f 0200 	mov.w	r2, #0
    d5d2:	601a      	str	r2, [r3, #0]
    d5d4:	f001 bfc6 	b.w	f564 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d5d8:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    d5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e0:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d5e4:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d5e8:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d5ea:	f24a 439f 	movw	r3, #42143	; 0xa49f
    d5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f2:	2200      	movs	r2, #0
    d5f4:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    d5f6:	f64a 033c 	movw	r3, #43068	; 0xa83c
    d5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5fe:	f04f 0200 	mov.w	r2, #0
    d602:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
    d604:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60c:	2202      	movs	r2, #2
    d60e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
    d610:	f64a 0300 	movw	r3, #43008	; 0xa800
    d614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d618:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    d61c:	601a      	str	r2, [r3, #0]
        }
        return;
    d61e:	f001 bfa1 	b.w	f564 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
    d622:	f64a 0310 	movw	r3, #43024	; 0xa810
    d626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62a:	781b      	ldrb	r3, [r3, #0]
    d62c:	2b04      	cmp	r3, #4
    d62e:	f041 8799 	bne.w	f564 <auto_nav+0x21a4>
        NextBlock()
    d632:	f64a 0311 	movw	r3, #43025	; 0xa811
    d636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d63a:	781b      	ldrb	r3, [r3, #0]
    d63c:	3301      	adds	r3, #1
    d63e:	b2da      	uxtb	r2, r3
    d640:	f64a 0311 	movw	r3, #43025	; 0xa811
    d644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d648:	701a      	strb	r2, [r3, #0]
    d64a:	f64a 0310 	movw	r3, #43024	; 0xa810
    d64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d652:	2200      	movs	r2, #0
    d654:	701a      	strb	r2, [r3, #0]
    d656:	f64a 0326 	movw	r3, #43046	; 0xa826
    d65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65e:	2200      	movs	r2, #0
    d660:	801a      	strh	r2, [r3, #0]
    d662:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d66a:	681a      	ldr	r2, [r3, #0]
    d66c:	f64a 0314 	movw	r3, #43028	; 0xa814
    d670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d674:	601a      	str	r2, [r3, #0]
    d676:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67e:	681a      	ldr	r2, [r3, #0]
    d680:	f64a 0318 	movw	r3, #43032	; 0xa818
    d684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d688:	601a      	str	r2, [r3, #0]
    d68a:	f64a 0324 	movw	r3, #43044	; 0xa824
    d68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d692:	2200      	movs	r2, #0
    d694:	801a      	strh	r2, [r3, #0]
    d696:	f64a 0328 	movw	r3, #43048	; 0xa828
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	f04f 0200 	mov.w	r2, #0
    d6a2:	601a      	str	r2, [r3, #0]
    d6a4:	f001 bf5e 	b.w	f564 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
    d6a8:	f64a 0311 	movw	r3, #43025	; 0xa811
    d6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	2b01      	cmp	r3, #1
    d6b4:	f040 81bc 	bne.w	da30 <auto_nav+0x670>
{
    nav_block = 1;
    d6b8:	f64a 0311 	movw	r3, #43025	; 0xa811
    d6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c0:	2201      	movs	r2, #1
    d6c2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
    d6c4:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    d6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6cc:	781b      	ldrb	r3, [r3, #0]
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d007      	beq.n	d6e2 <auto_nav+0x322>
    d6d2:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    d6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6da:	2200      	movs	r2, #0
    d6dc:	701a      	strb	r2, [r3, #0]
    d6de:	2301      	movs	r3, #1
    d6e0:	e000      	b.n	d6e4 <auto_nav+0x324>
    d6e2:	2300      	movs	r3, #0
    d6e4:	2b00      	cmp	r3, #0
    d6e6:	d034      	beq.n	d752 <auto_nav+0x392>
	{ GotoBlock(2) }
    d6e8:	f64a 0311 	movw	r3, #43025	; 0xa811
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	2202      	movs	r2, #2
    d6f2:	701a      	strb	r2, [r3, #0]
    d6f4:	f64a 0310 	movw	r3, #43024	; 0xa810
    d6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fc:	2200      	movs	r2, #0
    d6fe:	701a      	strb	r2, [r3, #0]
    d700:	f64a 0326 	movw	r3, #43046	; 0xa826
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	2200      	movs	r2, #0
    d70a:	801a      	strh	r2, [r3, #0]
    d70c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d714:	681a      	ldr	r2, [r3, #0]
    d716:	f64a 0314 	movw	r3, #43028	; 0xa814
    d71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d71e:	601a      	str	r2, [r3, #0]
    d720:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d728:	681a      	ldr	r2, [r3, #0]
    d72a:	f64a 0318 	movw	r3, #43032	; 0xa818
    d72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d732:	601a      	str	r2, [r3, #0]
    d734:	f64a 0324 	movw	r3, #43044	; 0xa824
    d738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73c:	2200      	movs	r2, #0
    d73e:	801a      	strh	r2, [r3, #0]
    d740:	f64a 0328 	movw	r3, #43048	; 0xa828
    d744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d748:	f04f 0200 	mov.w	r2, #0
    d74c:	601a      	str	r2, [r3, #0]
    d74e:	f001 bf09 	b.w	f564 <auto_nav+0x21a4>
    if(nav_stage == 0)
    d752:	f64a 0310 	movw	r3, #43024	; 0xa810
    d756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75a:	781b      	ldrb	r3, [r3, #0]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d12e      	bne.n	d7be <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
    d760:	f64a 0310 	movw	r3, #43024	; 0xa810
    d764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d768:	781b      	ldrb	r3, [r3, #0]
    d76a:	3301      	adds	r3, #1
    d76c:	b2da      	uxtb	r2, r3
    d76e:	f64a 0310 	movw	r3, #43024	; 0xa810
    d772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d776:	701a      	strb	r2, [r3, #0]
    d778:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d780:	681a      	ldr	r2, [r3, #0]
    d782:	f64a 0314 	movw	r3, #43028	; 0xa814
    d786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d78a:	601a      	str	r2, [r3, #0]
    d78c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d794:	681a      	ldr	r2, [r3, #0]
    d796:	f64a 0318 	movw	r3, #43032	; 0xa818
    d79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79e:	601a      	str	r2, [r3, #0]
    d7a0:	f64a 0324 	movw	r3, #43044	; 0xa824
    d7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a8:	2200      	movs	r2, #0
    d7aa:	801a      	strh	r2, [r3, #0]
    d7ac:	f64a 0328 	movw	r3, #43048	; 0xa828
    d7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b4:	f04f 0200 	mov.w	r2, #0
    d7b8:	601a      	str	r2, [r3, #0]
    d7ba:	f001 bed3 	b.w	f564 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d7be:	f64a 0310 	movw	r3, #43024	; 0xa810
    d7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c6:	781b      	ldrb	r3, [r3, #0]
    d7c8:	2b01      	cmp	r3, #1
    d7ca:	d169      	bne.n	d8a0 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
    d7cc:	f64a 0310 	movw	r3, #43024	; 0xa810
    d7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d4:	2201      	movs	r2, #1
    d7d6:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
    d7d8:	2001      	movs	r0, #1
    d7da:	f001 fed1 	bl	f580 <approaching>
    d7de:	4603      	mov	r3, r0
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	d034      	beq.n	d84e <auto_nav+0x48e>
    d7e4:	f64a 031c 	movw	r3, #43036	; 0xa81c
    d7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ec:	2201      	movs	r2, #1
    d7ee:	701a      	strb	r2, [r3, #0]
    d7f0:	f64a 0310 	movw	r3, #43024	; 0xa810
    d7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	3301      	adds	r3, #1
    d7fc:	b2da      	uxtb	r2, r3
    d7fe:	f64a 0310 	movw	r3, #43024	; 0xa810
    d802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d806:	701a      	strb	r2, [r3, #0]
    d808:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d810:	681a      	ldr	r2, [r3, #0]
    d812:	f64a 0314 	movw	r3, #43028	; 0xa814
    d816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81a:	601a      	str	r2, [r3, #0]
    d81c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d824:	681a      	ldr	r2, [r3, #0]
    d826:	f64a 0318 	movw	r3, #43032	; 0xa818
    d82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d82e:	601a      	str	r2, [r3, #0]
    d830:	f64a 0324 	movw	r3, #43044	; 0xa824
    d834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d838:	2200      	movs	r2, #0
    d83a:	801a      	strh	r2, [r3, #0]
    d83c:	f64a 0328 	movw	r3, #43048	; 0xa828
    d840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d844:	f04f 0200 	mov.w	r2, #0
    d848:	601a      	str	r2, [r3, #0]
    d84a:	f001 be8b 	b.w	f564 <auto_nav+0x21a4>
            fly_to(1);
    d84e:	2001      	movs	r0, #1
    d850:	f001 ffca 	bl	f7e8 <fly_to>
            auto_pitch = FALSE;
    d854:	f24a 439f 	movw	r3, #42143	; 0xa49f
    d858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d85c:	2200      	movs	r2, #0
    d85e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d860:	f64a 033c 	movw	r3, #43068	; 0xa83c
    d864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d868:	f04f 0200 	mov.w	r2, #0
    d86c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d86e:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d876:	2203      	movs	r2, #3
    d878:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    d87a:	f240 1340 	movw	r3, #320	; 0x140
    d87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d882:	695a      	ldr	r2, [r3, #20]
    d884:	f240 133c 	movw	r3, #316	; 0x13c
    d888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d88c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d88e:	f64a 0304 	movw	r3, #43012	; 0xa804
    d892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d896:	f04f 0200 	mov.w	r2, #0
    d89a:	601a      	str	r2, [r3, #0]
          }
          return;
    d89c:	f001 be62 	b.w	f564 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    d8a0:	f64a 0310 	movw	r3, #43024	; 0xa810
    d8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	2b02      	cmp	r3, #2
    d8ac:	d169      	bne.n	d982 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
    d8ae:	f64a 0310 	movw	r3, #43024	; 0xa810
    d8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b6:	2202      	movs	r2, #2
    d8b8:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    d8ba:	2004      	movs	r0, #4
    d8bc:	f001 fe60 	bl	f580 <approaching>
    d8c0:	4603      	mov	r3, r0
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d034      	beq.n	d930 <auto_nav+0x570>
    d8c6:	f64a 031c 	movw	r3, #43036	; 0xa81c
    d8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ce:	2204      	movs	r2, #4
    d8d0:	701a      	strb	r2, [r3, #0]
    d8d2:	f64a 0310 	movw	r3, #43024	; 0xa810
    d8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8da:	781b      	ldrb	r3, [r3, #0]
    d8dc:	3301      	adds	r3, #1
    d8de:	b2da      	uxtb	r2, r3
    d8e0:	f64a 0310 	movw	r3, #43024	; 0xa810
    d8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e8:	701a      	strb	r2, [r3, #0]
    d8ea:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f2:	681a      	ldr	r2, [r3, #0]
    d8f4:	f64a 0314 	movw	r3, #43028	; 0xa814
    d8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8fc:	601a      	str	r2, [r3, #0]
    d8fe:	f64a 2370 	movw	r3, #43632	; 0xaa70
    d902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d906:	681a      	ldr	r2, [r3, #0]
    d908:	f64a 0318 	movw	r3, #43032	; 0xa818
    d90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d910:	601a      	str	r2, [r3, #0]
    d912:	f64a 0324 	movw	r3, #43044	; 0xa824
    d916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91a:	2200      	movs	r2, #0
    d91c:	801a      	strh	r2, [r3, #0]
    d91e:	f64a 0328 	movw	r3, #43048	; 0xa828
    d922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d926:	f04f 0200 	mov.w	r2, #0
    d92a:	601a      	str	r2, [r3, #0]
    d92c:	f001 be1a 	b.w	f564 <auto_nav+0x21a4>
            fly_to(4);
    d930:	2004      	movs	r0, #4
    d932:	f001 ff59 	bl	f7e8 <fly_to>
            auto_pitch = FALSE;
    d936:	f24a 439f 	movw	r3, #42143	; 0xa49f
    d93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d93e:	2200      	movs	r2, #0
    d940:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d942:	f64a 033c 	movw	r3, #43068	; 0xa83c
    d946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94a:	f04f 0200 	mov.w	r2, #0
    d94e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d950:	f24a 439d 	movw	r3, #42141	; 0xa49d
    d954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d958:	2203      	movs	r2, #3
    d95a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    d95c:	f240 1340 	movw	r3, #320	; 0x140
    d960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d966:	f240 133c 	movw	r3, #316	; 0x13c
    d96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d96e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d970:	f64a 0304 	movw	r3, #43012	; 0xa804
    d974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d978:	f04f 0200 	mov.w	r2, #0
    d97c:	601a      	str	r2, [r3, #0]
          }
          return;
    d97e:	f001 bdf1 	b.w	f564 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    d982:	f64a 0310 	movw	r3, #43024	; 0xa810
    d986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	2b03      	cmp	r3, #3
    d98e:	d106      	bne.n	d99e <auto_nav+0x5de>
      {
	  nav_stage = 3;
    d990:	f64a 0310 	movw	r3, #43024	; 0xa810
    d994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d998:	2203      	movs	r2, #3
    d99a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
    d99c:	e6e0      	b.n	d760 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
    d99e:	f64a 0310 	movw	r3, #43024	; 0xa810
    d9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a6:	781b      	ldrb	r3, [r3, #0]
    d9a8:	2b04      	cmp	r3, #4
    d9aa:	f041 85db 	bne.w	f564 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
    d9ae:	f64a 0310 	movw	r3, #43024	; 0xa810
    d9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b6:	2204      	movs	r2, #4
    d9b8:	701a      	strb	r2, [r3, #0]
        NextBlock()
    d9ba:	f64a 0311 	movw	r3, #43025	; 0xa811
    d9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	3301      	adds	r3, #1
    d9c6:	b2da      	uxtb	r2, r3
    d9c8:	f64a 0311 	movw	r3, #43025	; 0xa811
    d9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d0:	701a      	strb	r2, [r3, #0]
    d9d2:	f64a 0310 	movw	r3, #43024	; 0xa810
    d9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9da:	2200      	movs	r2, #0
    d9dc:	701a      	strb	r2, [r3, #0]
    d9de:	f64a 0326 	movw	r3, #43046	; 0xa826
    d9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e6:	2200      	movs	r2, #0
    d9e8:	801a      	strh	r2, [r3, #0]
    d9ea:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    d9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f2:	681a      	ldr	r2, [r3, #0]
    d9f4:	f64a 0314 	movw	r3, #43028	; 0xa814
    d9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fc:	601a      	str	r2, [r3, #0]
    d9fe:	f64a 2370 	movw	r3, #43632	; 0xaa70
    da02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da06:	681a      	ldr	r2, [r3, #0]
    da08:	f64a 0318 	movw	r3, #43032	; 0xa818
    da0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da10:	601a      	str	r2, [r3, #0]
    da12:	f64a 0324 	movw	r3, #43044	; 0xa824
    da16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da1a:	2200      	movs	r2, #0
    da1c:	801a      	strh	r2, [r3, #0]
    da1e:	f64a 0328 	movw	r3, #43048	; 0xa828
    da22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da26:	f04f 0200 	mov.w	r2, #0
    da2a:	601a      	str	r2, [r3, #0]
    da2c:	f001 bd9a 	b.w	f564 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
    da30:	f64a 0311 	movw	r3, #43025	; 0xa811
    da34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	2b02      	cmp	r3, #2
    da3c:	f040 8392 	bne.w	e164 <auto_nav+0xda4>
{
	nav_block = 2;
    da40:	f64a 0311 	movw	r3, #43025	; 0xa811
    da44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da48:	2202      	movs	r2, #2
    da4a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
    da4c:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    da50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da54:	781b      	ldrb	r3, [r3, #0]
    da56:	2b00      	cmp	r3, #0
    da58:	d007      	beq.n	da6a <auto_nav+0x6aa>
    da5a:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    da5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da62:	2200      	movs	r2, #0
    da64:	701a      	strb	r2, [r3, #0]
    da66:	2301      	movs	r3, #1
    da68:	e000      	b.n	da6c <auto_nav+0x6ac>
    da6a:	2300      	movs	r3, #0
    da6c:	2b00      	cmp	r3, #0
    da6e:	d034      	beq.n	dada <auto_nav+0x71a>
    da70:	f64a 0311 	movw	r3, #43025	; 0xa811
    da74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da78:	2203      	movs	r2, #3
    da7a:	701a      	strb	r2, [r3, #0]
    da7c:	f64a 0310 	movw	r3, #43024	; 0xa810
    da80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da84:	2200      	movs	r2, #0
    da86:	701a      	strb	r2, [r3, #0]
    da88:	f64a 0326 	movw	r3, #43046	; 0xa826
    da8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da90:	2200      	movs	r2, #0
    da92:	801a      	strh	r2, [r3, #0]
    da94:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    da98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9c:	681a      	ldr	r2, [r3, #0]
    da9e:	f64a 0314 	movw	r3, #43028	; 0xa814
    daa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa6:	601a      	str	r2, [r3, #0]
    daa8:	f64a 2370 	movw	r3, #43632	; 0xaa70
    daac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab0:	681a      	ldr	r2, [r3, #0]
    dab2:	f64a 0318 	movw	r3, #43032	; 0xa818
    dab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daba:	601a      	str	r2, [r3, #0]
    dabc:	f64a 0324 	movw	r3, #43044	; 0xa824
    dac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac4:	2200      	movs	r2, #0
    dac6:	801a      	strh	r2, [r3, #0]
    dac8:	f64a 0328 	movw	r3, #43048	; 0xa828
    dacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad0:	f04f 0200 	mov.w	r2, #0
    dad4:	601a      	str	r2, [r3, #0]
    dad6:	f001 bd45 	b.w	f564 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
    dada:	f64a 0310 	movw	r3, #43024	; 0xa810
    dade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae2:	781b      	ldrb	r3, [r3, #0]
    dae4:	2b00      	cmp	r3, #0
    dae6:	d134      	bne.n	db52 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
    dae8:	f64a 0310 	movw	r3, #43024	; 0xa810
    daec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf0:	2200      	movs	r2, #0
    daf2:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
    daf4:	f64a 0310 	movw	r3, #43024	; 0xa810
    daf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafc:	781b      	ldrb	r3, [r3, #0]
    dafe:	3301      	adds	r3, #1
    db00:	b2da      	uxtb	r2, r3
    db02:	f64a 0310 	movw	r3, #43024	; 0xa810
    db06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db0a:	701a      	strb	r2, [r3, #0]
    db0c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    db10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db14:	681a      	ldr	r2, [r3, #0]
    db16:	f64a 0314 	movw	r3, #43028	; 0xa814
    db1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1e:	601a      	str	r2, [r3, #0]
    db20:	f64a 2370 	movw	r3, #43632	; 0xaa70
    db24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db28:	681a      	ldr	r2, [r3, #0]
    db2a:	f64a 0318 	movw	r3, #43032	; 0xa818
    db2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db32:	601a      	str	r2, [r3, #0]
    db34:	f64a 0324 	movw	r3, #43044	; 0xa824
    db38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3c:	2200      	movs	r2, #0
    db3e:	801a      	strh	r2, [r3, #0]
    db40:	f64a 0328 	movw	r3, #43048	; 0xa828
    db44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db48:	f04f 0200 	mov.w	r2, #0
    db4c:	601a      	str	r2, [r3, #0]
    db4e:	f001 bd09 	b.w	f564 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
    db52:	f64a 0310 	movw	r3, #43024	; 0xa810
    db56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5a:	781b      	ldrb	r3, [r3, #0]
    db5c:	2b01      	cmp	r3, #1
    db5e:	d169      	bne.n	dc34 <auto_nav+0x874>
    {
         nav_stage =1;
    db60:	f64a 0310 	movw	r3, #43024	; 0xa810
    db64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db68:	2201      	movs	r2, #1
    db6a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
    db6c:	2006      	movs	r0, #6
    db6e:	f001 fd07 	bl	f580 <approaching>
    db72:	4603      	mov	r3, r0
    db74:	2b00      	cmp	r3, #0
    db76:	d034      	beq.n	dbe2 <auto_nav+0x822>
    db78:	f64a 031c 	movw	r3, #43036	; 0xa81c
    db7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db80:	2206      	movs	r2, #6
    db82:	701a      	strb	r2, [r3, #0]
    db84:	f64a 0310 	movw	r3, #43024	; 0xa810
    db88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db8c:	781b      	ldrb	r3, [r3, #0]
    db8e:	3301      	adds	r3, #1
    db90:	b2da      	uxtb	r2, r3
    db92:	f64a 0310 	movw	r3, #43024	; 0xa810
    db96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9a:	701a      	strb	r2, [r3, #0]
    db9c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    dba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba4:	681a      	ldr	r2, [r3, #0]
    dba6:	f64a 0314 	movw	r3, #43028	; 0xa814
    dbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbae:	601a      	str	r2, [r3, #0]
    dbb0:	f64a 2370 	movw	r3, #43632	; 0xaa70
    dbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb8:	681a      	ldr	r2, [r3, #0]
    dbba:	f64a 0318 	movw	r3, #43032	; 0xa818
    dbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc2:	601a      	str	r2, [r3, #0]
    dbc4:	f64a 0324 	movw	r3, #43044	; 0xa824
    dbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbcc:	2200      	movs	r2, #0
    dbce:	801a      	strh	r2, [r3, #0]
    dbd0:	f64a 0328 	movw	r3, #43048	; 0xa828
    dbd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd8:	f04f 0200 	mov.w	r2, #0
    dbdc:	601a      	str	r2, [r3, #0]
    dbde:	f001 bcc1 	b.w	f564 <auto_nav+0x21a4>
            fly_to(6);
    dbe2:	2006      	movs	r0, #6
    dbe4:	f001 fe00 	bl	f7e8 <fly_to>
            auto_pitch = FALSE;
    dbe8:	f24a 439f 	movw	r3, #42143	; 0xa49f
    dbec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf0:	2200      	movs	r2, #0
    dbf2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dbf4:	f64a 033c 	movw	r3, #43068	; 0xa83c
    dbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfc:	f04f 0200 	mov.w	r2, #0
    dc00:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dc02:	f24a 439d 	movw	r3, #42141	; 0xa49d
    dc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc0a:	2203      	movs	r2, #3
    dc0c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
    dc0e:	f240 1340 	movw	r3, #320	; 0x140
    dc12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    dc18:	f240 133c 	movw	r3, #316	; 0x13c
    dc1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc20:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dc22:	f64a 0304 	movw	r3, #43012	; 0xa804
    dc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2a:	f04f 0200 	mov.w	r2, #0
    dc2e:	601a      	str	r2, [r3, #0]
          }
          return;
    dc30:	f001 bc98 	b.w	f564 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    dc34:	f64a 0310 	movw	r3, #43024	; 0xa810
    dc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc3c:	781b      	ldrb	r3, [r3, #0]
    dc3e:	2b02      	cmp	r3, #2
    dc40:	d169      	bne.n	dd16 <auto_nav+0x956>
     {
         nav_stage =2; 
    dc42:	f64a 0310 	movw	r3, #43024	; 0xa810
    dc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4a:	2202      	movs	r2, #2
    dc4c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
    dc4e:	2001      	movs	r0, #1
    dc50:	f001 fc96 	bl	f580 <approaching>
    dc54:	4603      	mov	r3, r0
    dc56:	2b00      	cmp	r3, #0
    dc58:	d034      	beq.n	dcc4 <auto_nav+0x904>
    dc5a:	f64a 031c 	movw	r3, #43036	; 0xa81c
    dc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc62:	2201      	movs	r2, #1
    dc64:	701a      	strb	r2, [r3, #0]
    dc66:	f64a 0310 	movw	r3, #43024	; 0xa810
    dc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc6e:	781b      	ldrb	r3, [r3, #0]
    dc70:	3301      	adds	r3, #1
    dc72:	b2da      	uxtb	r2, r3
    dc74:	f64a 0310 	movw	r3, #43024	; 0xa810
    dc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc7c:	701a      	strb	r2, [r3, #0]
    dc7e:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    dc82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc86:	681a      	ldr	r2, [r3, #0]
    dc88:	f64a 0314 	movw	r3, #43028	; 0xa814
    dc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc90:	601a      	str	r2, [r3, #0]
    dc92:	f64a 2370 	movw	r3, #43632	; 0xaa70
    dc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9a:	681a      	ldr	r2, [r3, #0]
    dc9c:	f64a 0318 	movw	r3, #43032	; 0xa818
    dca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca4:	601a      	str	r2, [r3, #0]
    dca6:	f64a 0324 	movw	r3, #43044	; 0xa824
    dcaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcae:	2200      	movs	r2, #0
    dcb0:	801a      	strh	r2, [r3, #0]
    dcb2:	f64a 0328 	movw	r3, #43048	; 0xa828
    dcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcba:	f04f 0200 	mov.w	r2, #0
    dcbe:	601a      	str	r2, [r3, #0]
    dcc0:	f001 bc50 	b.w	f564 <auto_nav+0x21a4>
            fly_to(1);
    dcc4:	2001      	movs	r0, #1
    dcc6:	f001 fd8f 	bl	f7e8 <fly_to>
            auto_pitch = FALSE;
    dcca:	f24a 439f 	movw	r3, #42143	; 0xa49f
    dcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd2:	2200      	movs	r2, #0
    dcd4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dcd6:	f64a 033c 	movw	r3, #43068	; 0xa83c
    dcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcde:	f04f 0200 	mov.w	r2, #0
    dce2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dce4:	f24a 439d 	movw	r3, #42141	; 0xa49d
    dce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcec:	2203      	movs	r2, #3
    dcee:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    dcf0:	f240 1340 	movw	r3, #320	; 0x140
    dcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf8:	695a      	ldr	r2, [r3, #20]
    dcfa:	f240 133c 	movw	r3, #316	; 0x13c
    dcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd02:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dd04:	f64a 0304 	movw	r3, #43012	; 0xa804
    dd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0c:	f04f 0200 	mov.w	r2, #0
    dd10:	601a      	str	r2, [r3, #0]
          }
          return;
    dd12:	f001 bc27 	b.w	f564 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    dd16:	f64a 0310 	movw	r3, #43024	; 0xa810
    dd1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd1e:	781b      	ldrb	r3, [r3, #0]
    dd20:	2b03      	cmp	r3, #3
    dd22:	d16f      	bne.n	de04 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
    dd24:	f64a 0310 	movw	r3, #43024	; 0xa810
    dd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2c:	2203      	movs	r2, #3
    dd2e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
    dd30:	2002      	movs	r0, #2
    dd32:	f001 fc25 	bl	f580 <approaching>
    dd36:	4603      	mov	r3, r0
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d034      	beq.n	dda6 <auto_nav+0x9e6>
    dd3c:	f64a 031c 	movw	r3, #43036	; 0xa81c
    dd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd44:	2202      	movs	r2, #2
    dd46:	701a      	strb	r2, [r3, #0]
    dd48:	f64a 0310 	movw	r3, #43024	; 0xa810
    dd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	3301      	adds	r3, #1
    dd54:	b2da      	uxtb	r2, r3
    dd56:	f64a 0310 	movw	r3, #43024	; 0xa810
    dd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5e:	701a      	strb	r2, [r3, #0]
    dd60:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    dd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd68:	681a      	ldr	r2, [r3, #0]
    dd6a:	f64a 0314 	movw	r3, #43028	; 0xa814
    dd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd72:	601a      	str	r2, [r3, #0]
    dd74:	f64a 2370 	movw	r3, #43632	; 0xaa70
    dd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd7c:	681a      	ldr	r2, [r3, #0]
    dd7e:	f64a 0318 	movw	r3, #43032	; 0xa818
    dd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd86:	601a      	str	r2, [r3, #0]
    dd88:	f64a 0324 	movw	r3, #43044	; 0xa824
    dd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd90:	2200      	movs	r2, #0
    dd92:	801a      	strh	r2, [r3, #0]
    dd94:	f64a 0328 	movw	r3, #43048	; 0xa828
    dd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9c:	f04f 0200 	mov.w	r2, #0
    dda0:	601a      	str	r2, [r3, #0]
    dda2:	f001 bbdf 	b.w	f564 <auto_nav+0x21a4>
            route_to(last_wp, 2);
    dda6:	f64a 031c 	movw	r3, #43036	; 0xa81c
    ddaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddae:	781b      	ldrb	r3, [r3, #0]
    ddb0:	4618      	mov	r0, r3
    ddb2:	2102      	movs	r1, #2
    ddb4:	f001 fd3a 	bl	f82c <route_to>
            auto_pitch = FALSE;
    ddb8:	f24a 439f 	movw	r3, #42143	; 0xa49f
    ddbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc0:	2200      	movs	r2, #0
    ddc2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    ddc4:	f64a 033c 	movw	r3, #43068	; 0xa83c
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	f04f 0200 	mov.w	r2, #0
    ddd0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ddd2:	f24a 439d 	movw	r3, #42141	; 0xa49d
    ddd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddda:	2203      	movs	r2, #3
    dddc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
    ddde:	f240 1340 	movw	r3, #320	; 0x140
    dde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde6:	6a1a      	ldr	r2, [r3, #32]
    dde8:	f240 133c 	movw	r3, #316	; 0x13c
    ddec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    ddf2:	f64a 0304 	movw	r3, #43012	; 0xa804
    ddf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfa:	f04f 0200 	mov.w	r2, #0
    ddfe:	601a      	str	r2, [r3, #0]
          }
          return;
    de00:	f001 bbb0 	b.w	f564 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
    de04:	f64a 0310 	movw	r3, #43024	; 0xa810
    de08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de0c:	781b      	ldrb	r3, [r3, #0]
    de0e:	2b04      	cmp	r3, #4
    de10:	d169      	bne.n	dee6 <auto_nav+0xb26>
       {
          nav_stage = 4;
    de12:	f64a 0310 	movw	r3, #43024	; 0xa810
    de16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1a:	2204      	movs	r2, #4
    de1c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
    de1e:	2003      	movs	r0, #3
    de20:	f001 fbae 	bl	f580 <approaching>
    de24:	4603      	mov	r3, r0
    de26:	2b00      	cmp	r3, #0
    de28:	d034      	beq.n	de94 <auto_nav+0xad4>
    de2a:	f64a 031c 	movw	r3, #43036	; 0xa81c
    de2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de32:	2203      	movs	r2, #3
    de34:	701a      	strb	r2, [r3, #0]
    de36:	f64a 0310 	movw	r3, #43024	; 0xa810
    de3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de3e:	781b      	ldrb	r3, [r3, #0]
    de40:	3301      	adds	r3, #1
    de42:	b2da      	uxtb	r2, r3
    de44:	f64a 0310 	movw	r3, #43024	; 0xa810
    de48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4c:	701a      	strb	r2, [r3, #0]
    de4e:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    de52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de56:	681a      	ldr	r2, [r3, #0]
    de58:	f64a 0314 	movw	r3, #43028	; 0xa814
    de5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de60:	601a      	str	r2, [r3, #0]
    de62:	f64a 2370 	movw	r3, #43632	; 0xaa70
    de66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de6a:	681a      	ldr	r2, [r3, #0]
    de6c:	f64a 0318 	movw	r3, #43032	; 0xa818
    de70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de74:	601a      	str	r2, [r3, #0]
    de76:	f64a 0324 	movw	r3, #43044	; 0xa824
    de7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7e:	2200      	movs	r2, #0
    de80:	801a      	strh	r2, [r3, #0]
    de82:	f64a 0328 	movw	r3, #43048	; 0xa828
    de86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de8a:	f04f 0200 	mov.w	r2, #0
    de8e:	601a      	str	r2, [r3, #0]
    de90:	f001 bb68 	b.w	f564 <auto_nav+0x21a4>
            fly_to(3);
    de94:	2003      	movs	r0, #3
    de96:	f001 fca7 	bl	f7e8 <fly_to>
            auto_pitch = FALSE;
    de9a:	f24a 439f 	movw	r3, #42143	; 0xa49f
    de9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea2:	2200      	movs	r2, #0
    dea4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dea6:	f64a 033c 	movw	r3, #43068	; 0xa83c
    deaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deae:	f04f 0200 	mov.w	r2, #0
    deb2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    deb4:	f24a 439d 	movw	r3, #42141	; 0xa49d
    deb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    debc:	2203      	movs	r2, #3
    debe:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
    dec0:	f240 1340 	movw	r3, #320	; 0x140
    dec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    deca:	f240 133c 	movw	r3, #316	; 0x13c
    dece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    ded4:	f64a 0304 	movw	r3, #43012	; 0xa804
    ded8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dedc:	f04f 0200 	mov.w	r2, #0
    dee0:	601a      	str	r2, [r3, #0]
          }
          return;
    dee2:	f001 bb3f 	b.w	f564 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
    dee6:	f64a 0310 	movw	r3, #43024	; 0xa810
    deea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	2b05      	cmp	r3, #5
    def2:	d169      	bne.n	dfc8 <auto_nav+0xc08>
       {
          nav_stage =5;
    def4:	f64a 0310 	movw	r3, #43024	; 0xa810
    def8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defc:	2205      	movs	r2, #5
    defe:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    df00:	2004      	movs	r0, #4
    df02:	f001 fb3d 	bl	f580 <approaching>
    df06:	4603      	mov	r3, r0
    df08:	2b00      	cmp	r3, #0
    df0a:	d034      	beq.n	df76 <auto_nav+0xbb6>
    df0c:	f64a 031c 	movw	r3, #43036	; 0xa81c
    df10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df14:	2204      	movs	r2, #4
    df16:	701a      	strb	r2, [r3, #0]
    df18:	f64a 0310 	movw	r3, #43024	; 0xa810
    df1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df20:	781b      	ldrb	r3, [r3, #0]
    df22:	3301      	adds	r3, #1
    df24:	b2da      	uxtb	r2, r3
    df26:	f64a 0310 	movw	r3, #43024	; 0xa810
    df2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2e:	701a      	strb	r2, [r3, #0]
    df30:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    df34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df38:	681a      	ldr	r2, [r3, #0]
    df3a:	f64a 0314 	movw	r3, #43028	; 0xa814
    df3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df42:	601a      	str	r2, [r3, #0]
    df44:	f64a 2370 	movw	r3, #43632	; 0xaa70
    df48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df4c:	681a      	ldr	r2, [r3, #0]
    df4e:	f64a 0318 	movw	r3, #43032	; 0xa818
    df52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df56:	601a      	str	r2, [r3, #0]
    df58:	f64a 0324 	movw	r3, #43044	; 0xa824
    df5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df60:	2200      	movs	r2, #0
    df62:	801a      	strh	r2, [r3, #0]
    df64:	f64a 0328 	movw	r3, #43048	; 0xa828
    df68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6c:	f04f 0200 	mov.w	r2, #0
    df70:	601a      	str	r2, [r3, #0]
    df72:	f001 baf7 	b.w	f564 <auto_nav+0x21a4>
            fly_to(4);
    df76:	2004      	movs	r0, #4
    df78:	f001 fc36 	bl	f7e8 <fly_to>
            auto_pitch = FALSE;
    df7c:	f24a 439f 	movw	r3, #42143	; 0xa49f
    df80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df84:	2200      	movs	r2, #0
    df86:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    df88:	f64a 033c 	movw	r3, #43068	; 0xa83c
    df8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df90:	f04f 0200 	mov.w	r2, #0
    df94:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    df96:	f24a 439d 	movw	r3, #42141	; 0xa49d
    df9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df9e:	2203      	movs	r2, #3
    dfa0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    dfa2:	f240 1340 	movw	r3, #320	; 0x140
    dfa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dfac:	f240 133c 	movw	r3, #316	; 0x13c
    dfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dfb6:	f64a 0304 	movw	r3, #43012	; 0xa804
    dfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbe:	f04f 0200 	mov.w	r2, #0
    dfc2:	601a      	str	r2, [r3, #0]
          }
          return;
    dfc4:	f001 bace 	b.w	f564 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
    dfc8:	f64a 0310 	movw	r3, #43024	; 0xa810
    dfcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd0:	781b      	ldrb	r3, [r3, #0]
    dfd2:	2b06      	cmp	r3, #6
    dfd4:	d16f      	bne.n	e0b6 <auto_nav+0xcf6>
       {
          nav_stage =6;
    dfd6:	f64a 0310 	movw	r3, #43024	; 0xa810
    dfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfde:	2206      	movs	r2, #6
    dfe0:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
    dfe2:	2005      	movs	r0, #5
    dfe4:	f001 facc 	bl	f580 <approaching>
    dfe8:	4603      	mov	r3, r0
    dfea:	2b00      	cmp	r3, #0
    dfec:	d034      	beq.n	e058 <auto_nav+0xc98>
    dfee:	f64a 031c 	movw	r3, #43036	; 0xa81c
    dff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff6:	2205      	movs	r2, #5
    dff8:	701a      	strb	r2, [r3, #0]
    dffa:	f64a 0310 	movw	r3, #43024	; 0xa810
    dffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e002:	781b      	ldrb	r3, [r3, #0]
    e004:	3301      	adds	r3, #1
    e006:	b2da      	uxtb	r2, r3
    e008:	f64a 0310 	movw	r3, #43024	; 0xa810
    e00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e010:	701a      	strb	r2, [r3, #0]
    e012:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01a:	681a      	ldr	r2, [r3, #0]
    e01c:	f64a 0314 	movw	r3, #43028	; 0xa814
    e020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e024:	601a      	str	r2, [r3, #0]
    e026:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e02e:	681a      	ldr	r2, [r3, #0]
    e030:	f64a 0318 	movw	r3, #43032	; 0xa818
    e034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e038:	601a      	str	r2, [r3, #0]
    e03a:	f64a 0324 	movw	r3, #43044	; 0xa824
    e03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e042:	2200      	movs	r2, #0
    e044:	801a      	strh	r2, [r3, #0]
    e046:	f64a 0328 	movw	r3, #43048	; 0xa828
    e04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04e:	f04f 0200 	mov.w	r2, #0
    e052:	601a      	str	r2, [r3, #0]
    e054:	f001 ba86 	b.w	f564 <auto_nav+0x21a4>
            route_to(last_wp, 5);
    e058:	f64a 031c 	movw	r3, #43036	; 0xa81c
    e05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e060:	781b      	ldrb	r3, [r3, #0]
    e062:	4618      	mov	r0, r3
    e064:	2105      	movs	r1, #5
    e066:	f001 fbe1 	bl	f82c <route_to>
            auto_pitch = FALSE;
    e06a:	f24a 439f 	movw	r3, #42143	; 0xa49f
    e06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e072:	2200      	movs	r2, #0
    e074:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e076:	f64a 033c 	movw	r3, #43068	; 0xa83c
    e07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e07e:	f04f 0200 	mov.w	r2, #0
    e082:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e084:	f24a 439d 	movw	r3, #42141	; 0xa49d
    e088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e08c:	2203      	movs	r2, #3
    e08e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
    e090:	f240 1340 	movw	r3, #320	; 0x140
    e094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e09a:	f240 133c 	movw	r3, #316	; 0x13c
    e09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e0a4:	f64a 0304 	movw	r3, #43012	; 0xa804
    e0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ac:	f04f 0200 	mov.w	r2, #0
    e0b0:	601a      	str	r2, [r3, #0]
          }
          return;
    e0b2:	f001 ba57 	b.w	f564 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
    e0b6:	f64a 0310 	movw	r3, #43024	; 0xa810
    e0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	2b07      	cmp	r3, #7
    e0c2:	d106      	bne.n	e0d2 <auto_nav+0xd12>
       {
	   nav_stage =7;
    e0c4:	f64a 0310 	movw	r3, #43024	; 0xa810
    e0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0cc:	2207      	movs	r2, #7
    e0ce:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
    e0d0:	e50a      	b.n	dae8 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
    e0d2:	f64a 0310 	movw	r3, #43024	; 0xa810
    e0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	2b08      	cmp	r3, #8
    e0de:	f041 8241 	bne.w	f564 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
    e0e2:	f64a 0310 	movw	r3, #43024	; 0xa810
    e0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ea:	2208      	movs	r2, #8
    e0ec:	701a      	strb	r2, [r3, #0]
          NextBlock();
    e0ee:	f64a 0311 	movw	r3, #43025	; 0xa811
    e0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f6:	781b      	ldrb	r3, [r3, #0]
    e0f8:	3301      	adds	r3, #1
    e0fa:	b2da      	uxtb	r2, r3
    e0fc:	f64a 0311 	movw	r3, #43025	; 0xa811
    e100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e104:	701a      	strb	r2, [r3, #0]
    e106:	f64a 0310 	movw	r3, #43024	; 0xa810
    e10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e10e:	2200      	movs	r2, #0
    e110:	701a      	strb	r2, [r3, #0]
    e112:	f64a 0326 	movw	r3, #43046	; 0xa826
    e116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11a:	2200      	movs	r2, #0
    e11c:	801a      	strh	r2, [r3, #0]
    e11e:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e126:	681a      	ldr	r2, [r3, #0]
    e128:	f64a 0314 	movw	r3, #43028	; 0xa814
    e12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e130:	601a      	str	r2, [r3, #0]
    e132:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e13a:	681a      	ldr	r2, [r3, #0]
    e13c:	f64a 0318 	movw	r3, #43032	; 0xa818
    e140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e144:	601a      	str	r2, [r3, #0]
    e146:	f64a 0324 	movw	r3, #43044	; 0xa824
    e14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14e:	2200      	movs	r2, #0
    e150:	801a      	strh	r2, [r3, #0]
    e152:	f64a 0328 	movw	r3, #43048	; 0xa828
    e156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15a:	f04f 0200 	mov.w	r2, #0
    e15e:	601a      	str	r2, [r3, #0]
    e160:	f001 ba00 	b.w	f564 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
    e164:	f64a 0311 	movw	r3, #43025	; 0xa811
    e168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e16c:	781b      	ldrb	r3, [r3, #0]
    e16e:	2b03      	cmp	r3, #3
    e170:	f040 8388 	bne.w	e884 <auto_nav+0x14c4>
{
    nav_block = 3;
    e174:	f64a 0311 	movw	r3, #43025	; 0xa811
    e178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17c:	2203      	movs	r2, #3
    e17e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
    e180:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    e184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e188:	781b      	ldrb	r3, [r3, #0]
    e18a:	2b00      	cmp	r3, #0
    e18c:	d007      	beq.n	e19e <auto_nav+0xdde>
    e18e:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    e192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e196:	2200      	movs	r2, #0
    e198:	701a      	strb	r2, [r3, #0]
    e19a:	2301      	movs	r3, #1
    e19c:	e000      	b.n	e1a0 <auto_nav+0xde0>
    e19e:	2300      	movs	r3, #0
    e1a0:	2b00      	cmp	r3, #0
    e1a2:	d034      	beq.n	e20e <auto_nav+0xe4e>
    e1a4:	f64a 0311 	movw	r3, #43025	; 0xa811
    e1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ac:	2204      	movs	r2, #4
    e1ae:	701a      	strb	r2, [r3, #0]
    e1b0:	f64a 0310 	movw	r3, #43024	; 0xa810
    e1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b8:	2200      	movs	r2, #0
    e1ba:	701a      	strb	r2, [r3, #0]
    e1bc:	f64a 0326 	movw	r3, #43046	; 0xa826
    e1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c4:	2200      	movs	r2, #0
    e1c6:	801a      	strh	r2, [r3, #0]
    e1c8:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d0:	681a      	ldr	r2, [r3, #0]
    e1d2:	f64a 0314 	movw	r3, #43028	; 0xa814
    e1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1da:	601a      	str	r2, [r3, #0]
    e1dc:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e4:	681a      	ldr	r2, [r3, #0]
    e1e6:	f64a 0318 	movw	r3, #43032	; 0xa818
    e1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ee:	601a      	str	r2, [r3, #0]
    e1f0:	f64a 0324 	movw	r3, #43044	; 0xa824
    e1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f8:	2200      	movs	r2, #0
    e1fa:	801a      	strh	r2, [r3, #0]
    e1fc:	f64a 0328 	movw	r3, #43048	; 0xa828
    e200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e204:	f04f 0200 	mov.w	r2, #0
    e208:	601a      	str	r2, [r3, #0]
    e20a:	f001 b9ab 	b.w	f564 <auto_nav+0x21a4>
    if(nav_stage == 0)
    e20e:	f64a 0310 	movw	r3, #43024	; 0xa810
    e212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e216:	781b      	ldrb	r3, [r3, #0]
    e218:	2b00      	cmp	r3, #0
    e21a:	f040 82ea 	bne.w	e7f2 <auto_nav+0x1432>
    {
        nav_stage = 0;
    e21e:	f64a 0310 	movw	r3, #43024	; 0xa810
    e222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e226:	2200      	movs	r2, #0
    e228:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
    e22a:	f24a 439c 	movw	r3, #42140	; 0xa49c
    e22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e232:	781b      	ldrb	r3, [r3, #0]
    e234:	2b02      	cmp	r3, #2
    e236:	f040 81a5 	bne.w	e584 <auto_nav+0x11c4>
    e23a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    e23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e242:	88db      	ldrh	r3, [r3, #6]
    e244:	84fb      	strh	r3, [r7, #38]	; 0x26
    e246:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e24a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e24e:	dc04      	bgt.n	e25a <auto_nav+0xe9a>
    e250:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e254:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e258:	da7e      	bge.n	e358 <auto_nav+0xf98>
    e25a:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e262:	681b      	ldr	r3, [r3, #0]
    e264:	4618      	mov	r0, r3
    e266:	f004 fbc9 	bl	129fc <__aeabi_f2d>
    e26a:	4604      	mov	r4, r0
    e26c:	460d      	mov	r5, r1
    e26e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e272:	4618      	mov	r0, r3
    e274:	f005 f802 	bl	1327c <__aeabi_i2f>
    e278:	4603      	mov	r3, r0
    e27a:	4618      	mov	r0, r3
    e27c:	f04f 0100 	mov.w	r1, #0
    e280:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e284:	f005 f902 	bl	1348c <__aeabi_fdiv>
    e288:	4603      	mov	r3, r0
    e28a:	4618      	mov	r0, r3
    e28c:	f004 fbb6 	bl	129fc <__aeabi_f2d>
    e290:	4602      	mov	r2, r0
    e292:	460b      	mov	r3, r1
    e294:	4610      	mov	r0, r2
    e296:	4619      	mov	r1, r3
    e298:	f04f 0200 	mov.w	r2, #0
    e29c:	f04f 0300 	mov.w	r3, #0
    e2a0:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e2a4:	f004 fbfe 	bl	12aa4 <__aeabi_dmul>
    e2a8:	4602      	mov	r2, r0
    e2aa:	460b      	mov	r3, r1
    e2ac:	4610      	mov	r0, r2
    e2ae:	4619      	mov	r1, r3
    e2b0:	f04f 0200 	mov.w	r2, #0
    e2b4:	f04f 0300 	mov.w	r3, #0
    e2b8:	f004 fa42 	bl	12740 <__adddf3>
    e2bc:	4602      	mov	r2, r0
    e2be:	460b      	mov	r3, r1
    e2c0:	4620      	mov	r0, r4
    e2c2:	4629      	mov	r1, r5
    e2c4:	f004 fa3c 	bl	12740 <__adddf3>
    e2c8:	4602      	mov	r2, r0
    e2ca:	460b      	mov	r3, r1
    e2cc:	4610      	mov	r0, r2
    e2ce:	4619      	mov	r1, r3
    e2d0:	f004 feca 	bl	13068 <__aeabi_d2f>
    e2d4:	4602      	mov	r2, r0
    e2d6:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2de:	601a      	str	r2, [r3, #0]
    e2e0:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e8:	681b      	ldr	r3, [r3, #0]
    e2ea:	4618      	mov	r0, r3
    e2ec:	f04f 0100 	mov.w	r1, #0
    e2f0:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e2f4:	f005 f9be 	bl	13674 <__aeabi_fcmple>
    e2f8:	4603      	mov	r3, r0
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d005      	beq.n	e30a <auto_nav+0xf4a>
    e2fe:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e306:	681a      	ldr	r2, [r3, #0]
    e308:	e003      	b.n	e312 <auto_nav+0xf52>
    e30a:	f04f 0200 	mov.w	r2, #0
    e30e:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e312:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e31a:	601a      	str	r2, [r3, #0]
    e31c:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e324:	681b      	ldr	r3, [r3, #0]
    e326:	4618      	mov	r0, r3
    e328:	f04f 0100 	mov.w	r1, #0
    e32c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e330:	f005 f9aa 	bl	13688 <__aeabi_fcmpge>
    e334:	4603      	mov	r3, r0
    e336:	2b00      	cmp	r3, #0
    e338:	d005      	beq.n	e346 <auto_nav+0xf86>
    e33a:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e342:	681a      	ldr	r2, [r3, #0]
    e344:	e003      	b.n	e34e <auto_nav+0xf8e>
    e346:	f04f 0200 	mov.w	r2, #0
    e34a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e34e:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e356:	601a      	str	r2, [r3, #0]
    e358:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    e35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e360:	889b      	ldrh	r3, [r3, #4]
    e362:	84bb      	strh	r3, [r7, #36]	; 0x24
    e364:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e368:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e36c:	dc04      	bgt.n	e378 <auto_nav+0xfb8>
    e36e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e372:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e376:	da7e      	bge.n	e476 <auto_nav+0x10b6>
    e378:	f64a 0360 	movw	r3, #43104	; 0xa860
    e37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e380:	681b      	ldr	r3, [r3, #0]
    e382:	4618      	mov	r0, r3
    e384:	f004 fb3a 	bl	129fc <__aeabi_f2d>
    e388:	4604      	mov	r4, r0
    e38a:	460d      	mov	r5, r1
    e38c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e390:	4618      	mov	r0, r3
    e392:	f004 ff73 	bl	1327c <__aeabi_i2f>
    e396:	4603      	mov	r3, r0
    e398:	4618      	mov	r0, r3
    e39a:	f04f 0100 	mov.w	r1, #0
    e39e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e3a2:	f005 f873 	bl	1348c <__aeabi_fdiv>
    e3a6:	4603      	mov	r3, r0
    e3a8:	4618      	mov	r0, r3
    e3aa:	f004 fb27 	bl	129fc <__aeabi_f2d>
    e3ae:	4602      	mov	r2, r0
    e3b0:	460b      	mov	r3, r1
    e3b2:	4610      	mov	r0, r2
    e3b4:	4619      	mov	r1, r3
    e3b6:	f04f 0200 	mov.w	r2, #0
    e3ba:	f04f 0300 	mov.w	r3, #0
    e3be:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e3c2:	f004 fb6f 	bl	12aa4 <__aeabi_dmul>
    e3c6:	4602      	mov	r2, r0
    e3c8:	460b      	mov	r3, r1
    e3ca:	4610      	mov	r0, r2
    e3cc:	4619      	mov	r1, r3
    e3ce:	f04f 0200 	mov.w	r2, #0
    e3d2:	f04f 0300 	mov.w	r3, #0
    e3d6:	f004 f9b3 	bl	12740 <__adddf3>
    e3da:	4602      	mov	r2, r0
    e3dc:	460b      	mov	r3, r1
    e3de:	4620      	mov	r0, r4
    e3e0:	4629      	mov	r1, r5
    e3e2:	f004 f9ad 	bl	12740 <__adddf3>
    e3e6:	4602      	mov	r2, r0
    e3e8:	460b      	mov	r3, r1
    e3ea:	4610      	mov	r0, r2
    e3ec:	4619      	mov	r1, r3
    e3ee:	f004 fe3b 	bl	13068 <__aeabi_d2f>
    e3f2:	4602      	mov	r2, r0
    e3f4:	f64a 0360 	movw	r3, #43104	; 0xa860
    e3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fc:	601a      	str	r2, [r3, #0]
    e3fe:	f64a 0360 	movw	r3, #43104	; 0xa860
    e402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e406:	681b      	ldr	r3, [r3, #0]
    e408:	4618      	mov	r0, r3
    e40a:	f04f 0100 	mov.w	r1, #0
    e40e:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e412:	f005 f92f 	bl	13674 <__aeabi_fcmple>
    e416:	4603      	mov	r3, r0
    e418:	2b00      	cmp	r3, #0
    e41a:	d005      	beq.n	e428 <auto_nav+0x1068>
    e41c:	f64a 0360 	movw	r3, #43104	; 0xa860
    e420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e424:	681a      	ldr	r2, [r3, #0]
    e426:	e003      	b.n	e430 <auto_nav+0x1070>
    e428:	f04f 0200 	mov.w	r2, #0
    e42c:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e430:	f64a 0360 	movw	r3, #43104	; 0xa860
    e434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e438:	601a      	str	r2, [r3, #0]
    e43a:	f64a 0360 	movw	r3, #43104	; 0xa860
    e43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e442:	681b      	ldr	r3, [r3, #0]
    e444:	4618      	mov	r0, r3
    e446:	f04f 0100 	mov.w	r1, #0
    e44a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e44e:	f005 f91b 	bl	13688 <__aeabi_fcmpge>
    e452:	4603      	mov	r3, r0
    e454:	2b00      	cmp	r3, #0
    e456:	d005      	beq.n	e464 <auto_nav+0x10a4>
    e458:	f64a 0360 	movw	r3, #43104	; 0xa860
    e45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e460:	681a      	ldr	r2, [r3, #0]
    e462:	e003      	b.n	e46c <auto_nav+0x10ac>
    e464:	f04f 0200 	mov.w	r2, #0
    e468:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e46c:	f64a 0360 	movw	r3, #43104	; 0xa860
    e470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e474:	601a      	str	r2, [r3, #0]
    e476:	f24a 439d 	movw	r3, #42141	; 0xa49d
    e47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e47e:	2203      	movs	r2, #3
    e480:	701a      	strb	r2, [r3, #0]
    e482:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
    e486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48a:	885b      	ldrh	r3, [r3, #2]
    e48c:	847b      	strh	r3, [r7, #34]	; 0x22
    e48e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e492:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e496:	dc04      	bgt.n	e4a2 <auto_nav+0x10e2>
    e498:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e49c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e4a0:	da70      	bge.n	e584 <auto_nav+0x11c4>
    e4a2:	f240 133c 	movw	r3, #316	; 0x13c
    e4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4aa:	681b      	ldr	r3, [r3, #0]
    e4ac:	4618      	mov	r0, r3
    e4ae:	f004 faa5 	bl	129fc <__aeabi_f2d>
    e4b2:	4604      	mov	r4, r0
    e4b4:	460d      	mov	r5, r1
    e4b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e4ba:	4618      	mov	r0, r3
    e4bc:	f004 fede 	bl	1327c <__aeabi_i2f>
    e4c0:	4603      	mov	r3, r0
    e4c2:	4618      	mov	r0, r3
    e4c4:	f04f 0100 	mov.w	r1, #0
    e4c8:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e4cc:	f004 ffde 	bl	1348c <__aeabi_fdiv>
    e4d0:	4603      	mov	r3, r0
    e4d2:	4618      	mov	r0, r3
    e4d4:	f004 fa92 	bl	129fc <__aeabi_f2d>
    e4d8:	4602      	mov	r2, r0
    e4da:	460b      	mov	r3, r1
    e4dc:	f04f 0000 	mov.w	r0, #0
    e4e0:	f04f 0100 	mov.w	r1, #0
    e4e4:	f004 f92a 	bl	1273c <__aeabi_dsub>
    e4e8:	4602      	mov	r2, r0
    e4ea:	460b      	mov	r3, r1
    e4ec:	4620      	mov	r0, r4
    e4ee:	4629      	mov	r1, r5
    e4f0:	f004 f926 	bl	12740 <__adddf3>
    e4f4:	4602      	mov	r2, r0
    e4f6:	460b      	mov	r3, r1
    e4f8:	4610      	mov	r0, r2
    e4fa:	4619      	mov	r1, r3
    e4fc:	f004 fdb4 	bl	13068 <__aeabi_d2f>
    e500:	4602      	mov	r2, r0
    e502:	f240 133c 	movw	r3, #316	; 0x13c
    e506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50a:	601a      	str	r2, [r3, #0]
    e50c:	f240 133c 	movw	r3, #316	; 0x13c
    e510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e514:	681b      	ldr	r3, [r3, #0]
    e516:	4618      	mov	r0, r3
    e518:	f04f 0100 	mov.w	r1, #0
    e51c:	f2c4 312f 	movt	r1, #17199	; 0x432f
    e520:	f005 f8b2 	bl	13688 <__aeabi_fcmpge>
    e524:	4603      	mov	r3, r0
    e526:	2b00      	cmp	r3, #0
    e528:	d005      	beq.n	e536 <auto_nav+0x1176>
    e52a:	f240 133c 	movw	r3, #316	; 0x13c
    e52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e532:	681a      	ldr	r2, [r3, #0]
    e534:	e003      	b.n	e53e <auto_nav+0x117e>
    e536:	f04f 0200 	mov.w	r2, #0
    e53a:	f2c4 322f 	movt	r2, #17199	; 0x432f
    e53e:	f240 133c 	movw	r3, #316	; 0x13c
    e542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e546:	601a      	str	r2, [r3, #0]
    e548:	f240 133c 	movw	r3, #316	; 0x13c
    e54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e550:	681b      	ldr	r3, [r3, #0]
    e552:	4618      	mov	r0, r3
    e554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e558:	f2c4 3189 	movt	r1, #17289	; 0x4389
    e55c:	f005 f88a 	bl	13674 <__aeabi_fcmple>
    e560:	4603      	mov	r3, r0
    e562:	2b00      	cmp	r3, #0
    e564:	d005      	beq.n	e572 <auto_nav+0x11b2>
    e566:	f240 133c 	movw	r3, #316	; 0x13c
    e56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e56e:	681a      	ldr	r2, [r3, #0]
    e570:	e003      	b.n	e57a <auto_nav+0x11ba>
    e572:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e576:	f2c4 3289 	movt	r2, #17289	; 0x4389
    e57a:	f240 133c 	movw	r3, #316	; 0x13c
    e57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e582:	601a      	str	r2, [r3, #0]
    e584:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e58c:	681a      	ldr	r2, [r3, #0]
    e58e:	f64a 0360 	movw	r3, #43104	; 0xa860
    e592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e596:	681b      	ldr	r3, [r3, #0]
    e598:	4610      	mov	r0, r2
    e59a:	4619      	mov	r1, r3
    e59c:	f004 fdb8 	bl	13110 <__aeabi_fsub>
    e5a0:	4603      	mov	r3, r0
    e5a2:	4618      	mov	r0, r3
    e5a4:	f004 fa2a 	bl	129fc <__aeabi_f2d>
    e5a8:	4604      	mov	r4, r0
    e5aa:	460d      	mov	r5, r1
    e5ac:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b4:	681a      	ldr	r2, [r3, #0]
    e5b6:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5be:	681b      	ldr	r3, [r3, #0]
    e5c0:	4610      	mov	r0, r2
    e5c2:	4619      	mov	r1, r3
    e5c4:	f004 fda4 	bl	13110 <__aeabi_fsub>
    e5c8:	4603      	mov	r3, r0
    e5ca:	4618      	mov	r0, r3
    e5cc:	f004 fa16 	bl	129fc <__aeabi_f2d>
    e5d0:	4602      	mov	r2, r0
    e5d2:	460b      	mov	r3, r1
    e5d4:	4620      	mov	r0, r4
    e5d6:	4629      	mov	r1, r5
    e5d8:	f002 fa12 	bl	10a00 <pp_atan2>
    e5dc:	4602      	mov	r2, r0
    e5de:	460b      	mov	r3, r1
    e5e0:	4610      	mov	r0, r2
    e5e2:	4619      	mov	r1, r3
    e5e4:	f004 fd40 	bl	13068 <__aeabi_d2f>
    e5e8:	4603      	mov	r3, r0
    e5ea:	61fb      	str	r3, [r7, #28]
    e5ec:	69f8      	ldr	r0, [r7, #28]
    e5ee:	f004 fa05 	bl	129fc <__aeabi_f2d>
    e5f2:	4604      	mov	r4, r0
    e5f4:	460d      	mov	r5, r1
    e5f6:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    e5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fe:	681b      	ldr	r3, [r3, #0]
    e600:	4618      	mov	r0, r3
    e602:	f04f 0100 	mov.w	r1, #0
    e606:	f2cc 2148 	movt	r1, #49736	; 0xc248
    e60a:	f004 fe8b 	bl	13324 <__aeabi_fmul>
    e60e:	4603      	mov	r3, r0
    e610:	4618      	mov	r0, r3
    e612:	f004 f9f3 	bl	129fc <__aeabi_f2d>
    e616:	4602      	mov	r2, r0
    e618:	460b      	mov	r3, r1
    e61a:	f04f 0000 	mov.w	r0, #0
    e61e:	f04f 0100 	mov.w	r1, #0
    e622:	f2c4 0114 	movt	r1, #16404	; 0x4014
    e626:	f004 fb67 	bl	12cf8 <__aeabi_ddiv>
    e62a:	4602      	mov	r2, r0
    e62c:	460b      	mov	r3, r1
    e62e:	4620      	mov	r0, r4
    e630:	4629      	mov	r1, r5
    e632:	f004 f885 	bl	12740 <__adddf3>
    e636:	4602      	mov	r2, r0
    e638:	460b      	mov	r3, r1
    e63a:	4610      	mov	r0, r2
    e63c:	4619      	mov	r1, r3
    e63e:	f004 fd13 	bl	13068 <__aeabi_d2f>
    e642:	4603      	mov	r3, r0
    e644:	61bb      	str	r3, [r7, #24]
    e646:	f64a 035c 	movw	r3, #43100	; 0xa85c
    e64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e64e:	681b      	ldr	r3, [r3, #0]
    e650:	4618      	mov	r0, r3
    e652:	f004 f9d3 	bl	129fc <__aeabi_f2d>
    e656:	4604      	mov	r4, r0
    e658:	460d      	mov	r5, r1
    e65a:	69b8      	ldr	r0, [r7, #24]
    e65c:	f004 f9ce 	bl	129fc <__aeabi_f2d>
    e660:	4602      	mov	r2, r0
    e662:	460b      	mov	r3, r1
    e664:	4610      	mov	r0, r2
    e666:	4619      	mov	r1, r3
    e668:	a3b1      	add	r3, pc, #708	; (adr r3, e930 <auto_nav+0x1570>)
    e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e66e:	f004 f867 	bl	12740 <__adddf3>
    e672:	4602      	mov	r2, r0
    e674:	460b      	mov	r3, r1
    e676:	4610      	mov	r0, r2
    e678:	4619      	mov	r1, r3
    e67a:	f002 fa81 	bl	10b80 <pp_sin>
    e67e:	4602      	mov	r2, r0
    e680:	460b      	mov	r3, r1
    e682:	4610      	mov	r0, r2
    e684:	4619      	mov	r1, r3
    e686:	f04f 0200 	mov.w	r2, #0
    e68a:	f04f 0300 	mov.w	r3, #0
    e68e:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e692:	f004 fa07 	bl	12aa4 <__aeabi_dmul>
    e696:	4602      	mov	r2, r0
    e698:	460b      	mov	r3, r1
    e69a:	4620      	mov	r0, r4
    e69c:	4629      	mov	r1, r5
    e69e:	f004 f84f 	bl	12740 <__adddf3>
    e6a2:	4602      	mov	r2, r0
    e6a4:	460b      	mov	r3, r1
    e6a6:	4610      	mov	r0, r2
    e6a8:	4619      	mov	r1, r3
    e6aa:	f004 fcdd 	bl	13068 <__aeabi_d2f>
    e6ae:	4606      	mov	r6, r0
    e6b0:	f64a 0360 	movw	r3, #43104	; 0xa860
    e6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b8:	681b      	ldr	r3, [r3, #0]
    e6ba:	4618      	mov	r0, r3
    e6bc:	f004 f99e 	bl	129fc <__aeabi_f2d>
    e6c0:	4604      	mov	r4, r0
    e6c2:	460d      	mov	r5, r1
    e6c4:	69b8      	ldr	r0, [r7, #24]
    e6c6:	f004 f999 	bl	129fc <__aeabi_f2d>
    e6ca:	4602      	mov	r2, r0
    e6cc:	460b      	mov	r3, r1
    e6ce:	4610      	mov	r0, r2
    e6d0:	4619      	mov	r1, r3
    e6d2:	f002 fa55 	bl	10b80 <pp_sin>
    e6d6:	4602      	mov	r2, r0
    e6d8:	460b      	mov	r3, r1
    e6da:	4610      	mov	r0, r2
    e6dc:	4619      	mov	r1, r3
    e6de:	f04f 0200 	mov.w	r2, #0
    e6e2:	f04f 0300 	mov.w	r3, #0
    e6e6:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e6ea:	f004 f9db 	bl	12aa4 <__aeabi_dmul>
    e6ee:	4602      	mov	r2, r0
    e6f0:	460b      	mov	r3, r1
    e6f2:	4620      	mov	r0, r4
    e6f4:	4629      	mov	r1, r5
    e6f6:	f004 f823 	bl	12740 <__adddf3>
    e6fa:	4602      	mov	r2, r0
    e6fc:	460b      	mov	r3, r1
    e6fe:	4610      	mov	r0, r2
    e700:	4619      	mov	r1, r3
    e702:	f004 fcb1 	bl	13068 <__aeabi_d2f>
    e706:	4603      	mov	r3, r0
    e708:	4630      	mov	r0, r6
    e70a:	4619      	mov	r1, r3
    e70c:	f001 f81c 	bl	f748 <fly_to_xy>
    e710:	69b8      	ldr	r0, [r7, #24]
    e712:	f004 f973 	bl	129fc <__aeabi_f2d>
    e716:	4602      	mov	r2, r0
    e718:	460b      	mov	r3, r1
    e71a:	a185      	add	r1, pc, #532	; (adr r1, e930 <auto_nav+0x1570>)
    e71c:	e9d1 0100 	ldrd	r0, r1, [r1]
    e720:	f004 f80c 	bl	1273c <__aeabi_dsub>
    e724:	4602      	mov	r2, r0
    e726:	460b      	mov	r3, r1
    e728:	4610      	mov	r0, r2
    e72a:	4619      	mov	r1, r3
    e72c:	a382      	add	r3, pc, #520	; (adr r3, e938 <auto_nav+0x1578>)
    e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e732:	f004 fae1 	bl	12cf8 <__aeabi_ddiv>
    e736:	4602      	mov	r2, r0
    e738:	460b      	mov	r3, r1
    e73a:	4610      	mov	r0, r2
    e73c:	4619      	mov	r1, r3
    e73e:	f04f 0200 	mov.w	r2, #0
    e742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e746:	f2c4 0366 	movt	r3, #16486	; 0x4066
    e74a:	f004 f9ab 	bl	12aa4 <__aeabi_dmul>
    e74e:	4602      	mov	r2, r0
    e750:	460b      	mov	r3, r1
    e752:	4610      	mov	r0, r2
    e754:	4619      	mov	r1, r3
    e756:	f004 fc87 	bl	13068 <__aeabi_d2f>
    e75a:	4602      	mov	r2, r0
    e75c:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e764:	601a      	str	r2, [r3, #0]
    e766:	e012      	b.n	e78e <auto_nav+0x13ce>
    e768:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e770:	681b      	ldr	r3, [r3, #0]
    e772:	4618      	mov	r0, r3
    e774:	f04f 0100 	mov.w	r1, #0
    e778:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e77c:	f004 fcca 	bl	13114 <__addsf3>
    e780:	4603      	mov	r3, r0
    e782:	461a      	mov	r2, r3
    e784:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e78c:	601a      	str	r2, [r3, #0]
    e78e:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e796:	681b      	ldr	r3, [r3, #0]
    e798:	4618      	mov	r0, r3
    e79a:	f04f 0100 	mov.w	r1, #0
    e79e:	f004 ff5f 	bl	13660 <__aeabi_fcmplt>
    e7a2:	4603      	mov	r3, r0
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d1df      	bne.n	e768 <auto_nav+0x13a8>
    e7a8:	e012      	b.n	e7d0 <auto_nav+0x1410>
    e7aa:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b2:	681b      	ldr	r3, [r3, #0]
    e7b4:	4618      	mov	r0, r3
    e7b6:	f04f 0100 	mov.w	r1, #0
    e7ba:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e7be:	f004 fca7 	bl	13110 <__aeabi_fsub>
    e7c2:	4603      	mov	r3, r0
    e7c4:	461a      	mov	r2, r3
    e7c6:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ce:	601a      	str	r2, [r3, #0]
    e7d0:	f64a 032c 	movw	r3, #43052	; 0xa82c
    e7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d8:	681b      	ldr	r3, [r3, #0]
    e7da:	4618      	mov	r0, r3
    e7dc:	f04f 0100 	mov.w	r1, #0
    e7e0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e7e4:	f004 ff50 	bl	13688 <__aeabi_fcmpge>
    e7e8:	4603      	mov	r3, r0
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	d1dd      	bne.n	e7aa <auto_nav+0x13ea>
        return;
    e7ee:	f000 beb9 	b.w	f564 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    e7f2:	f64a 0310 	movw	r3, #43024	; 0xa810
    e7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7fa:	781b      	ldrb	r3, [r3, #0]
    e7fc:	2b01      	cmp	r3, #1
    e7fe:	f040 86b1 	bne.w	f564 <auto_nav+0x21a4>
    {
        nav_stage = 1;
    e802:	f64a 0310 	movw	r3, #43024	; 0xa810
    e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80a:	2201      	movs	r2, #1
    e80c:	701a      	strb	r2, [r3, #0]
        NextBlock()
    e80e:	f64a 0311 	movw	r3, #43025	; 0xa811
    e812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e816:	781b      	ldrb	r3, [r3, #0]
    e818:	3301      	adds	r3, #1
    e81a:	b2da      	uxtb	r2, r3
    e81c:	f64a 0311 	movw	r3, #43025	; 0xa811
    e820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e824:	701a      	strb	r2, [r3, #0]
    e826:	f64a 0310 	movw	r3, #43024	; 0xa810
    e82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e82e:	2200      	movs	r2, #0
    e830:	701a      	strb	r2, [r3, #0]
    e832:	f64a 0326 	movw	r3, #43046	; 0xa826
    e836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83a:	2200      	movs	r2, #0
    e83c:	801a      	strh	r2, [r3, #0]
    e83e:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e846:	681a      	ldr	r2, [r3, #0]
    e848:	f64a 0314 	movw	r3, #43028	; 0xa814
    e84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e850:	601a      	str	r2, [r3, #0]
    e852:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e85a:	681a      	ldr	r2, [r3, #0]
    e85c:	f64a 0318 	movw	r3, #43032	; 0xa818
    e860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e864:	601a      	str	r2, [r3, #0]
    e866:	f64a 0324 	movw	r3, #43044	; 0xa824
    e86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e86e:	2200      	movs	r2, #0
    e870:	801a      	strh	r2, [r3, #0]
    e872:	f64a 0328 	movw	r3, #43048	; 0xa828
    e876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87a:	f04f 0200 	mov.w	r2, #0
    e87e:	601a      	str	r2, [r3, #0]
    e880:	f000 be70 	b.w	f564 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
    e884:	f64a 0311 	movw	r3, #43025	; 0xa811
    e888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	2b04      	cmp	r3, #4
    e890:	f040 8202 	bne.w	ec98 <auto_nav+0x18d8>
{
    nav_block = 4;
    e894:	f64a 0311 	movw	r3, #43025	; 0xa811
    e898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e89c:	2204      	movs	r2, #4
    e89e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
    e8a0:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    e8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	2b00      	cmp	r3, #0
    e8ac:	d007      	beq.n	e8be <auto_nav+0x14fe>
    e8ae:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    e8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8b6:	2200      	movs	r2, #0
    e8b8:	701a      	strb	r2, [r3, #0]
    e8ba:	2301      	movs	r3, #1
    e8bc:	e000      	b.n	e8c0 <auto_nav+0x1500>
    e8be:	2300      	movs	r3, #0
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d03d      	beq.n	e940 <auto_nav+0x1580>
    e8c4:	f64a 0311 	movw	r3, #43025	; 0xa811
    e8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8cc:	2205      	movs	r2, #5
    e8ce:	701a      	strb	r2, [r3, #0]
    e8d0:	f64a 0310 	movw	r3, #43024	; 0xa810
    e8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d8:	2200      	movs	r2, #0
    e8da:	701a      	strb	r2, [r3, #0]
    e8dc:	f64a 0326 	movw	r3, #43046	; 0xa826
    e8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e4:	2200      	movs	r2, #0
    e8e6:	801a      	strh	r2, [r3, #0]
    e8e8:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f0:	681a      	ldr	r2, [r3, #0]
    e8f2:	f64a 0314 	movw	r3, #43028	; 0xa814
    e8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8fa:	601a      	str	r2, [r3, #0]
    e8fc:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e904:	681a      	ldr	r2, [r3, #0]
    e906:	f64a 0318 	movw	r3, #43032	; 0xa818
    e90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e90e:	601a      	str	r2, [r3, #0]
    e910:	f64a 0324 	movw	r3, #43044	; 0xa824
    e914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e918:	2200      	movs	r2, #0
    e91a:	801a      	strh	r2, [r3, #0]
    e91c:	f64a 0328 	movw	r3, #43048	; 0xa828
    e920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e924:	f04f 0200 	mov.w	r2, #0
    e928:	601a      	str	r2, [r3, #0]
    e92a:	f000 be1b 	b.w	f564 <auto_nav+0x21a4>
    e92e:	bf00      	nop
    e930:	54442d18 	.word	0x54442d18
    e934:	3ff921fb 	.word	0x3ff921fb
    e938:	54442d18 	.word	0x54442d18
    e93c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
    e940:	f64a 0310 	movw	r3, #43024	; 0xa810
    e944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e948:	781b      	ldrb	r3, [r3, #0]
    e94a:	2b00      	cmp	r3, #0
    e94c:	f040 815b 	bne.w	ec06 <auto_nav+0x1846>
    {
        nav_stage = 0;
    e950:	f64a 0310 	movw	r3, #43024	; 0xa810
    e954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e958:	2200      	movs	r2, #0
    e95a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    e95c:	f24a 439f 	movw	r3, #42143	; 0xa49f
    e960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e964:	2200      	movs	r2, #0
    e966:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    e968:	f64a 033c 	movw	r3, #43068	; 0xa83c
    e96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e970:	f04f 0200 	mov.w	r2, #0
    e974:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e976:	f24a 439d 	movw	r3, #42141	; 0xa49d
    e97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e97e:	2203      	movs	r2, #3
    e980:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
    e982:	f240 1340 	movw	r3, #320	; 0x140
    e986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e98a:	689a      	ldr	r2, [r3, #8]
    e98c:	f240 133c 	movw	r3, #316	; 0x13c
    e990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e994:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    e996:	f64a 0304 	movw	r3, #43012	; 0xa804
    e99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e99e:	f04f 0200 	mov.w	r2, #0
    e9a2:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
    e9a4:	f64a 2370 	movw	r3, #43632	; 0xaa70
    e9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ac:	681a      	ldr	r2, [r3, #0]
    e9ae:	f240 1340 	movw	r3, #320	; 0x140
    e9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b6:	685b      	ldr	r3, [r3, #4]
    e9b8:	4610      	mov	r0, r2
    e9ba:	4619      	mov	r1, r3
    e9bc:	f004 fba8 	bl	13110 <__aeabi_fsub>
    e9c0:	4603      	mov	r3, r0
    e9c2:	4618      	mov	r0, r3
    e9c4:	f004 f81a 	bl	129fc <__aeabi_f2d>
    e9c8:	4604      	mov	r4, r0
    e9ca:	460d      	mov	r5, r1
    e9cc:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    e9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d4:	681a      	ldr	r2, [r3, #0]
    e9d6:	f240 1340 	movw	r3, #320	; 0x140
    e9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9de:	681b      	ldr	r3, [r3, #0]
    e9e0:	4610      	mov	r0, r2
    e9e2:	4619      	mov	r1, r3
    e9e4:	f004 fb94 	bl	13110 <__aeabi_fsub>
    e9e8:	4603      	mov	r3, r0
    e9ea:	4618      	mov	r0, r3
    e9ec:	f004 f806 	bl	129fc <__aeabi_f2d>
    e9f0:	4602      	mov	r2, r0
    e9f2:	460b      	mov	r3, r1
    e9f4:	4620      	mov	r0, r4
    e9f6:	4629      	mov	r1, r5
    e9f8:	f002 f802 	bl	10a00 <pp_atan2>
    e9fc:	4602      	mov	r2, r0
    e9fe:	460b      	mov	r3, r1
    ea00:	4610      	mov	r0, r2
    ea02:	4619      	mov	r1, r3
    ea04:	f004 fb30 	bl	13068 <__aeabi_d2f>
    ea08:	4603      	mov	r3, r0
    ea0a:	617b      	str	r3, [r7, #20]
    ea0c:	6978      	ldr	r0, [r7, #20]
    ea0e:	f003 fff5 	bl	129fc <__aeabi_f2d>
    ea12:	4604      	mov	r4, r0
    ea14:	460d      	mov	r5, r1
    ea16:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    ea1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea1e:	681b      	ldr	r3, [r3, #0]
    ea20:	4618      	mov	r0, r3
    ea22:	f04f 0100 	mov.w	r1, #0
    ea26:	f2cc 3116 	movt	r1, #49942	; 0xc316
    ea2a:	f004 fc7b 	bl	13324 <__aeabi_fmul>
    ea2e:	4603      	mov	r3, r0
    ea30:	4618      	mov	r0, r3
    ea32:	f003 ffe3 	bl	129fc <__aeabi_f2d>
    ea36:	4602      	mov	r2, r0
    ea38:	460b      	mov	r3, r1
    ea3a:	f04f 0000 	mov.w	r0, #0
    ea3e:	f04f 0100 	mov.w	r1, #0
    ea42:	f2c4 0114 	movt	r1, #16404	; 0x4014
    ea46:	f004 f957 	bl	12cf8 <__aeabi_ddiv>
    ea4a:	4602      	mov	r2, r0
    ea4c:	460b      	mov	r3, r1
    ea4e:	4620      	mov	r0, r4
    ea50:	4629      	mov	r1, r5
    ea52:	f003 fe75 	bl	12740 <__adddf3>
    ea56:	4602      	mov	r2, r0
    ea58:	460b      	mov	r3, r1
    ea5a:	4610      	mov	r0, r2
    ea5c:	4619      	mov	r1, r3
    ea5e:	f004 fb03 	bl	13068 <__aeabi_d2f>
    ea62:	4603      	mov	r3, r0
    ea64:	613b      	str	r3, [r7, #16]
    ea66:	f240 1340 	movw	r3, #320	; 0x140
    ea6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea6e:	681b      	ldr	r3, [r3, #0]
    ea70:	4618      	mov	r0, r3
    ea72:	f003 ffc3 	bl	129fc <__aeabi_f2d>
    ea76:	4604      	mov	r4, r0
    ea78:	460d      	mov	r5, r1
    ea7a:	6938      	ldr	r0, [r7, #16]
    ea7c:	f003 ffbe 	bl	129fc <__aeabi_f2d>
    ea80:	4602      	mov	r2, r0
    ea82:	460b      	mov	r3, r1
    ea84:	4610      	mov	r0, r2
    ea86:	4619      	mov	r1, r3
    ea88:	a3af      	add	r3, pc, #700	; (adr r3, ed48 <auto_nav+0x1988>)
    ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea8e:	f003 fe57 	bl	12740 <__adddf3>
    ea92:	4602      	mov	r2, r0
    ea94:	460b      	mov	r3, r1
    ea96:	4610      	mov	r0, r2
    ea98:	4619      	mov	r1, r3
    ea9a:	f002 f871 	bl	10b80 <pp_sin>
    ea9e:	4602      	mov	r2, r0
    eaa0:	460b      	mov	r3, r1
    eaa2:	4610      	mov	r0, r2
    eaa4:	4619      	mov	r1, r3
    eaa6:	a3aa      	add	r3, pc, #680	; (adr r3, ed50 <auto_nav+0x1990>)
    eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    eaac:	f003 fffa 	bl	12aa4 <__aeabi_dmul>
    eab0:	4602      	mov	r2, r0
    eab2:	460b      	mov	r3, r1
    eab4:	4620      	mov	r0, r4
    eab6:	4629      	mov	r1, r5
    eab8:	f003 fe42 	bl	12740 <__adddf3>
    eabc:	4602      	mov	r2, r0
    eabe:	460b      	mov	r3, r1
    eac0:	4610      	mov	r0, r2
    eac2:	4619      	mov	r1, r3
    eac4:	f004 fad0 	bl	13068 <__aeabi_d2f>
    eac8:	4606      	mov	r6, r0
    eaca:	f240 1340 	movw	r3, #320	; 0x140
    eace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead2:	685b      	ldr	r3, [r3, #4]
    ead4:	4618      	mov	r0, r3
    ead6:	f003 ff91 	bl	129fc <__aeabi_f2d>
    eada:	4604      	mov	r4, r0
    eadc:	460d      	mov	r5, r1
    eade:	6938      	ldr	r0, [r7, #16]
    eae0:	f003 ff8c 	bl	129fc <__aeabi_f2d>
    eae4:	4602      	mov	r2, r0
    eae6:	460b      	mov	r3, r1
    eae8:	4610      	mov	r0, r2
    eaea:	4619      	mov	r1, r3
    eaec:	f002 f848 	bl	10b80 <pp_sin>
    eaf0:	4602      	mov	r2, r0
    eaf2:	460b      	mov	r3, r1
    eaf4:	4610      	mov	r0, r2
    eaf6:	4619      	mov	r1, r3
    eaf8:	a395      	add	r3, pc, #596	; (adr r3, ed50 <auto_nav+0x1990>)
    eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
    eafe:	f003 ffd1 	bl	12aa4 <__aeabi_dmul>
    eb02:	4602      	mov	r2, r0
    eb04:	460b      	mov	r3, r1
    eb06:	4620      	mov	r0, r4
    eb08:	4629      	mov	r1, r5
    eb0a:	f003 fe19 	bl	12740 <__adddf3>
    eb0e:	4602      	mov	r2, r0
    eb10:	460b      	mov	r3, r1
    eb12:	4610      	mov	r0, r2
    eb14:	4619      	mov	r1, r3
    eb16:	f004 faa7 	bl	13068 <__aeabi_d2f>
    eb1a:	4603      	mov	r3, r0
    eb1c:	4630      	mov	r0, r6
    eb1e:	4619      	mov	r1, r3
    eb20:	f000 fe12 	bl	f748 <fly_to_xy>
    eb24:	6938      	ldr	r0, [r7, #16]
    eb26:	f003 ff69 	bl	129fc <__aeabi_f2d>
    eb2a:	4602      	mov	r2, r0
    eb2c:	460b      	mov	r3, r1
    eb2e:	a186      	add	r1, pc, #536	; (adr r1, ed48 <auto_nav+0x1988>)
    eb30:	e9d1 0100 	ldrd	r0, r1, [r1]
    eb34:	f003 fe02 	bl	1273c <__aeabi_dsub>
    eb38:	4602      	mov	r2, r0
    eb3a:	460b      	mov	r3, r1
    eb3c:	4610      	mov	r0, r2
    eb3e:	4619      	mov	r1, r3
    eb40:	a385      	add	r3, pc, #532	; (adr r3, ed58 <auto_nav+0x1998>)
    eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb46:	f004 f8d7 	bl	12cf8 <__aeabi_ddiv>
    eb4a:	4602      	mov	r2, r0
    eb4c:	460b      	mov	r3, r1
    eb4e:	4610      	mov	r0, r2
    eb50:	4619      	mov	r1, r3
    eb52:	f04f 0200 	mov.w	r2, #0
    eb56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    eb5a:	f2c4 0366 	movt	r3, #16486	; 0x4066
    eb5e:	f003 ffa1 	bl	12aa4 <__aeabi_dmul>
    eb62:	4602      	mov	r2, r0
    eb64:	460b      	mov	r3, r1
    eb66:	4610      	mov	r0, r2
    eb68:	4619      	mov	r1, r3
    eb6a:	f004 fa7d 	bl	13068 <__aeabi_d2f>
    eb6e:	4602      	mov	r2, r0
    eb70:	f64a 032c 	movw	r3, #43052	; 0xa82c
    eb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb78:	601a      	str	r2, [r3, #0]
    eb7a:	e012      	b.n	eba2 <auto_nav+0x17e2>
    eb7c:	f64a 032c 	movw	r3, #43052	; 0xa82c
    eb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb84:	681b      	ldr	r3, [r3, #0]
    eb86:	4618      	mov	r0, r3
    eb88:	f04f 0100 	mov.w	r1, #0
    eb8c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    eb90:	f004 fac0 	bl	13114 <__addsf3>
    eb94:	4603      	mov	r3, r0
    eb96:	461a      	mov	r2, r3
    eb98:	f64a 032c 	movw	r3, #43052	; 0xa82c
    eb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba0:	601a      	str	r2, [r3, #0]
    eba2:	f64a 032c 	movw	r3, #43052	; 0xa82c
    eba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebaa:	681b      	ldr	r3, [r3, #0]
    ebac:	4618      	mov	r0, r3
    ebae:	f04f 0100 	mov.w	r1, #0
    ebb2:	f004 fd55 	bl	13660 <__aeabi_fcmplt>
    ebb6:	4603      	mov	r3, r0
    ebb8:	2b00      	cmp	r3, #0
    ebba:	d1df      	bne.n	eb7c <auto_nav+0x17bc>
    ebbc:	e012      	b.n	ebe4 <auto_nav+0x1824>
    ebbe:	f64a 032c 	movw	r3, #43052	; 0xa82c
    ebc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc6:	681b      	ldr	r3, [r3, #0]
    ebc8:	4618      	mov	r0, r3
    ebca:	f04f 0100 	mov.w	r1, #0
    ebce:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ebd2:	f004 fa9d 	bl	13110 <__aeabi_fsub>
    ebd6:	4603      	mov	r3, r0
    ebd8:	461a      	mov	r2, r3
    ebda:	f64a 032c 	movw	r3, #43052	; 0xa82c
    ebde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe2:	601a      	str	r2, [r3, #0]
    ebe4:	f64a 032c 	movw	r3, #43052	; 0xa82c
    ebe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebec:	681b      	ldr	r3, [r3, #0]
    ebee:	4618      	mov	r0, r3
    ebf0:	f04f 0100 	mov.w	r1, #0
    ebf4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ebf8:	f004 fd46 	bl	13688 <__aeabi_fcmpge>
    ebfc:	4603      	mov	r3, r0
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d1dd      	bne.n	ebbe <auto_nav+0x17fe>
        return;
    ec02:	f000 bcaf 	b.w	f564 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ec06:	f64a 0310 	movw	r3, #43024	; 0xa810
    ec0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec0e:	781b      	ldrb	r3, [r3, #0]
    ec10:	2b01      	cmp	r3, #1
    ec12:	f040 84a7 	bne.w	f564 <auto_nav+0x21a4>
    {
        nav_stage =1;
    ec16:	f64a 0310 	movw	r3, #43024	; 0xa810
    ec1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec1e:	2201      	movs	r2, #1
    ec20:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ec22:	f64a 0311 	movw	r3, #43025	; 0xa811
    ec26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	3301      	adds	r3, #1
    ec2e:	b2da      	uxtb	r2, r3
    ec30:	f64a 0311 	movw	r3, #43025	; 0xa811
    ec34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec38:	701a      	strb	r2, [r3, #0]
    ec3a:	f64a 0310 	movw	r3, #43024	; 0xa810
    ec3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec42:	2200      	movs	r2, #0
    ec44:	701a      	strb	r2, [r3, #0]
    ec46:	f64a 0326 	movw	r3, #43046	; 0xa826
    ec4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4e:	2200      	movs	r2, #0
    ec50:	801a      	strh	r2, [r3, #0]
    ec52:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ec56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5a:	681a      	ldr	r2, [r3, #0]
    ec5c:	f64a 0314 	movw	r3, #43028	; 0xa814
    ec60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec64:	601a      	str	r2, [r3, #0]
    ec66:	f64a 2370 	movw	r3, #43632	; 0xaa70
    ec6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec6e:	681a      	ldr	r2, [r3, #0]
    ec70:	f64a 0318 	movw	r3, #43032	; 0xa818
    ec74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec78:	601a      	str	r2, [r3, #0]
    ec7a:	f64a 0324 	movw	r3, #43044	; 0xa824
    ec7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec82:	2200      	movs	r2, #0
    ec84:	801a      	strh	r2, [r3, #0]
    ec86:	f64a 0328 	movw	r3, #43048	; 0xa828
    ec8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec8e:	f04f 0200 	mov.w	r2, #0
    ec92:	601a      	str	r2, [r3, #0]
    ec94:	f000 bc66 	b.w	f564 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
    ec98:	f64a 0311 	movw	r3, #43025	; 0xa811
    ec9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca0:	781b      	ldrb	r3, [r3, #0]
    eca2:	2b05      	cmp	r3, #5
    eca4:	f040 845e 	bne.w	f564 <auto_nav+0x21a4>
{
    nav_block = 5;
    eca8:	f64a 0311 	movw	r3, #43025	; 0xa811
    ecac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb0:	2205      	movs	r2, #5
    ecb2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
    ecb4:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    ecb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecbc:	781b      	ldrb	r3, [r3, #0]
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d007      	beq.n	ecd2 <auto_nav+0x1912>
    ecc2:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
    ecc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecca:	2200      	movs	r2, #0
    eccc:	701a      	strb	r2, [r3, #0]
    ecce:	2301      	movs	r3, #1
    ecd0:	e000      	b.n	ecd4 <auto_nav+0x1914>
    ecd2:	2300      	movs	r3, #0
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d043      	beq.n	ed60 <auto_nav+0x19a0>
    ecd8:	f64a 0311 	movw	r3, #43025	; 0xa811
    ecdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece0:	2201      	movs	r2, #1
    ece2:	701a      	strb	r2, [r3, #0]
    ece4:	f64a 0310 	movw	r3, #43024	; 0xa810
    ece8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecec:	2200      	movs	r2, #0
    ecee:	701a      	strb	r2, [r3, #0]
    ecf0:	f64a 0326 	movw	r3, #43046	; 0xa826
    ecf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf8:	2200      	movs	r2, #0
    ecfa:	801a      	strh	r2, [r3, #0]
    ecfc:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ed00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed04:	681a      	ldr	r2, [r3, #0]
    ed06:	f64a 0314 	movw	r3, #43028	; 0xa814
    ed0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed0e:	601a      	str	r2, [r3, #0]
    ed10:	f64a 2370 	movw	r3, #43632	; 0xaa70
    ed14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed18:	681a      	ldr	r2, [r3, #0]
    ed1a:	f64a 0318 	movw	r3, #43032	; 0xa818
    ed1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed22:	601a      	str	r2, [r3, #0]
    ed24:	f64a 0324 	movw	r3, #43044	; 0xa824
    ed28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed2c:	2200      	movs	r2, #0
    ed2e:	801a      	strh	r2, [r3, #0]
    ed30:	f64a 0328 	movw	r3, #43048	; 0xa828
    ed34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed38:	f04f 0200 	mov.w	r2, #0
    ed3c:	601a      	str	r2, [r3, #0]
    ed3e:	f000 bc11 	b.w	f564 <auto_nav+0x21a4>
    ed42:	bf00      	nop
    ed44:	f3af 8000 	nop.w
    ed48:	54442d18 	.word	0x54442d18
    ed4c:	3ff921fb 	.word	0x3ff921fb
    ed50:	00000000 	.word	0x00000000
    ed54:	4062c000 	.word	0x4062c000
    ed58:	54442d18 	.word	0x54442d18
    ed5c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
    ed60:	f64a 0310 	movw	r3, #43024	; 0xa810
    ed64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed68:	781b      	ldrb	r3, [r3, #0]
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d133      	bne.n	edd6 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
    ed6e:	f64a 0310 	movw	r3, #43024	; 0xa810
    ed72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed76:	2200      	movs	r2, #0
    ed78:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
    ed7a:	f64a 0310 	movw	r3, #43024	; 0xa810
    ed7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed82:	781b      	ldrb	r3, [r3, #0]
    ed84:	3301      	adds	r3, #1
    ed86:	b2da      	uxtb	r2, r3
    ed88:	f64a 0310 	movw	r3, #43024	; 0xa810
    ed8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed90:	701a      	strb	r2, [r3, #0]
    ed92:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ed96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed9a:	681a      	ldr	r2, [r3, #0]
    ed9c:	f64a 0314 	movw	r3, #43028	; 0xa814
    eda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda4:	601a      	str	r2, [r3, #0]
    eda6:	f64a 2370 	movw	r3, #43632	; 0xaa70
    edaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edae:	681a      	ldr	r2, [r3, #0]
    edb0:	f64a 0318 	movw	r3, #43032	; 0xa818
    edb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb8:	601a      	str	r2, [r3, #0]
    edba:	f64a 0324 	movw	r3, #43044	; 0xa824
    edbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc2:	2200      	movs	r2, #0
    edc4:	801a      	strh	r2, [r3, #0]
    edc6:	f64a 0328 	movw	r3, #43048	; 0xa828
    edca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edce:	f04f 0200 	mov.w	r2, #0
    edd2:	601a      	str	r2, [r3, #0]
    edd4:	e3c6      	b.n	f564 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
    edd6:	f64a 0310 	movw	r3, #43024	; 0xa810
    edda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edde:	781b      	ldrb	r3, [r3, #0]
    ede0:	2b01      	cmp	r3, #1
    ede2:	f040 81b5 	bne.w	f150 <auto_nav+0x1d90>
    {
        nav_stage =1;
    ede6:	f64a 0310 	movw	r3, #43024	; 0xa810
    edea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edee:	2201      	movs	r2, #1
    edf0:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    edf2:	f24a 439f 	movw	r3, #42143	; 0xa49f
    edf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edfa:	2200      	movs	r2, #0
    edfc:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    edfe:	f64a 033c 	movw	r3, #43068	; 0xa83c
    ee02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee06:	f04f 0200 	mov.w	r2, #0
    ee0a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ee0c:	f24a 439d 	movw	r3, #42141	; 0xa49d
    ee10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee14:	2203      	movs	r2, #3
    ee16:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
    ee18:	f240 1340 	movw	r3, #320	; 0x140
    ee1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee20:	695a      	ldr	r2, [r3, #20]
    ee22:	f240 133c 	movw	r3, #316	; 0x13c
    ee26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ee2c:	f64a 0304 	movw	r3, #43012	; 0xa804
    ee30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee34:	f04f 0200 	mov.w	r2, #0
    ee38:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
    ee3a:	f64a 2370 	movw	r3, #43632	; 0xaa70
    ee3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee42:	681a      	ldr	r2, [r3, #0]
    ee44:	f240 1340 	movw	r3, #320	; 0x140
    ee48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee4c:	691b      	ldr	r3, [r3, #16]
    ee4e:	4610      	mov	r0, r2
    ee50:	4619      	mov	r1, r3
    ee52:	f004 f95d 	bl	13110 <__aeabi_fsub>
    ee56:	4603      	mov	r3, r0
    ee58:	4618      	mov	r0, r3
    ee5a:	f003 fdcf 	bl	129fc <__aeabi_f2d>
    ee5e:	4604      	mov	r4, r0
    ee60:	460d      	mov	r5, r1
    ee62:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ee66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6a:	681a      	ldr	r2, [r3, #0]
    ee6c:	f240 1340 	movw	r3, #320	; 0x140
    ee70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee74:	68db      	ldr	r3, [r3, #12]
    ee76:	4610      	mov	r0, r2
    ee78:	4619      	mov	r1, r3
    ee7a:	f004 f949 	bl	13110 <__aeabi_fsub>
    ee7e:	4603      	mov	r3, r0
    ee80:	4618      	mov	r0, r3
    ee82:	f003 fdbb 	bl	129fc <__aeabi_f2d>
    ee86:	4602      	mov	r2, r0
    ee88:	460b      	mov	r3, r1
    ee8a:	4620      	mov	r0, r4
    ee8c:	4629      	mov	r1, r5
    ee8e:	f001 fdb7 	bl	10a00 <pp_atan2>
    ee92:	4602      	mov	r2, r0
    ee94:	460b      	mov	r3, r1
    ee96:	4610      	mov	r0, r2
    ee98:	4619      	mov	r1, r3
    ee9a:	f004 f8e5 	bl	13068 <__aeabi_d2f>
    ee9e:	4603      	mov	r3, r0
    eea0:	60fb      	str	r3, [r7, #12]
    eea2:	68f8      	ldr	r0, [r7, #12]
    eea4:	f003 fdaa 	bl	129fc <__aeabi_f2d>
    eea8:	4604      	mov	r4, r0
    eeaa:	460d      	mov	r5, r1
    eeac:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    eeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb4:	681b      	ldr	r3, [r3, #0]
    eeb6:	4618      	mov	r0, r3
    eeb8:	f04f 0100 	mov.w	r1, #0
    eebc:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    eec0:	f004 fa30 	bl	13324 <__aeabi_fmul>
    eec4:	4603      	mov	r3, r0
    eec6:	4618      	mov	r0, r3
    eec8:	f003 fd98 	bl	129fc <__aeabi_f2d>
    eecc:	4602      	mov	r2, r0
    eece:	460b      	mov	r3, r1
    eed0:	f04f 0000 	mov.w	r0, #0
    eed4:	f04f 0100 	mov.w	r1, #0
    eed8:	f2c4 0114 	movt	r1, #16404	; 0x4014
    eedc:	f003 ff0c 	bl	12cf8 <__aeabi_ddiv>
    eee0:	4602      	mov	r2, r0
    eee2:	460b      	mov	r3, r1
    eee4:	4620      	mov	r0, r4
    eee6:	4629      	mov	r1, r5
    eee8:	f003 fc2a 	bl	12740 <__adddf3>
    eeec:	4602      	mov	r2, r0
    eeee:	460b      	mov	r3, r1
    eef0:	4610      	mov	r0, r2
    eef2:	4619      	mov	r1, r3
    eef4:	f004 f8b8 	bl	13068 <__aeabi_d2f>
    eef8:	4603      	mov	r3, r0
    eefa:	60bb      	str	r3, [r7, #8]
    eefc:	f240 1340 	movw	r3, #320	; 0x140
    ef00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef04:	68db      	ldr	r3, [r3, #12]
    ef06:	4618      	mov	r0, r3
    ef08:	f003 fd78 	bl	129fc <__aeabi_f2d>
    ef0c:	4604      	mov	r4, r0
    ef0e:	460d      	mov	r5, r1
    ef10:	68b8      	ldr	r0, [r7, #8]
    ef12:	f003 fd73 	bl	129fc <__aeabi_f2d>
    ef16:	4602      	mov	r2, r0
    ef18:	460b      	mov	r3, r1
    ef1a:	4610      	mov	r0, r2
    ef1c:	4619      	mov	r1, r3
    ef1e:	a388      	add	r3, pc, #544	; (adr r3, f140 <auto_nav+0x1d80>)
    ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef24:	f003 fc0c 	bl	12740 <__adddf3>
    ef28:	4602      	mov	r2, r0
    ef2a:	460b      	mov	r3, r1
    ef2c:	4610      	mov	r0, r2
    ef2e:	4619      	mov	r1, r3
    ef30:	f001 fe26 	bl	10b80 <pp_sin>
    ef34:	4602      	mov	r2, r0
    ef36:	460b      	mov	r3, r1
    ef38:	4610      	mov	r0, r2
    ef3a:	4619      	mov	r1, r3
    ef3c:	f04f 0200 	mov.w	r2, #0
    ef40:	f04f 0300 	mov.w	r3, #0
    ef44:	f2c4 0359 	movt	r3, #16473	; 0x4059
    ef48:	f003 fdac 	bl	12aa4 <__aeabi_dmul>
    ef4c:	4602      	mov	r2, r0
    ef4e:	460b      	mov	r3, r1
    ef50:	4620      	mov	r0, r4
    ef52:	4629      	mov	r1, r5
    ef54:	f003 fbf4 	bl	12740 <__adddf3>
    ef58:	4602      	mov	r2, r0
    ef5a:	460b      	mov	r3, r1
    ef5c:	4610      	mov	r0, r2
    ef5e:	4619      	mov	r1, r3
    ef60:	f004 f882 	bl	13068 <__aeabi_d2f>
    ef64:	4606      	mov	r6, r0
    ef66:	f240 1340 	movw	r3, #320	; 0x140
    ef6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6e:	691b      	ldr	r3, [r3, #16]
    ef70:	4618      	mov	r0, r3
    ef72:	f003 fd43 	bl	129fc <__aeabi_f2d>
    ef76:	4604      	mov	r4, r0
    ef78:	460d      	mov	r5, r1
    ef7a:	68b8      	ldr	r0, [r7, #8]
    ef7c:	f003 fd3e 	bl	129fc <__aeabi_f2d>
    ef80:	4602      	mov	r2, r0
    ef82:	460b      	mov	r3, r1
    ef84:	4610      	mov	r0, r2
    ef86:	4619      	mov	r1, r3
    ef88:	f001 fdfa 	bl	10b80 <pp_sin>
    ef8c:	4602      	mov	r2, r0
    ef8e:	460b      	mov	r3, r1
    ef90:	4610      	mov	r0, r2
    ef92:	4619      	mov	r1, r3
    ef94:	f04f 0200 	mov.w	r2, #0
    ef98:	f04f 0300 	mov.w	r3, #0
    ef9c:	f2c4 0359 	movt	r3, #16473	; 0x4059
    efa0:	f003 fd80 	bl	12aa4 <__aeabi_dmul>
    efa4:	4602      	mov	r2, r0
    efa6:	460b      	mov	r3, r1
    efa8:	4620      	mov	r0, r4
    efaa:	4629      	mov	r1, r5
    efac:	f003 fbc8 	bl	12740 <__adddf3>
    efb0:	4602      	mov	r2, r0
    efb2:	460b      	mov	r3, r1
    efb4:	4610      	mov	r0, r2
    efb6:	4619      	mov	r1, r3
    efb8:	f004 f856 	bl	13068 <__aeabi_d2f>
    efbc:	4603      	mov	r3, r0
    efbe:	4630      	mov	r0, r6
    efc0:	4619      	mov	r1, r3
    efc2:	f000 fbc1 	bl	f748 <fly_to_xy>
    efc6:	68b8      	ldr	r0, [r7, #8]
    efc8:	f003 fd18 	bl	129fc <__aeabi_f2d>
    efcc:	4602      	mov	r2, r0
    efce:	460b      	mov	r3, r1
    efd0:	a15b      	add	r1, pc, #364	; (adr r1, f140 <auto_nav+0x1d80>)
    efd2:	e9d1 0100 	ldrd	r0, r1, [r1]
    efd6:	f003 fbb1 	bl	1273c <__aeabi_dsub>
    efda:	4602      	mov	r2, r0
    efdc:	460b      	mov	r3, r1
    efde:	4610      	mov	r0, r2
    efe0:	4619      	mov	r1, r3
    efe2:	a359      	add	r3, pc, #356	; (adr r3, f148 <auto_nav+0x1d88>)
    efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
    efe8:	f003 fe86 	bl	12cf8 <__aeabi_ddiv>
    efec:	4602      	mov	r2, r0
    efee:	460b      	mov	r3, r1
    eff0:	4610      	mov	r0, r2
    eff2:	4619      	mov	r1, r3
    eff4:	f04f 0200 	mov.w	r2, #0
    eff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    effc:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f000:	f003 fd50 	bl	12aa4 <__aeabi_dmul>
    f004:	4602      	mov	r2, r0
    f006:	460b      	mov	r3, r1
    f008:	4610      	mov	r0, r2
    f00a:	4619      	mov	r1, r3
    f00c:	f004 f82c 	bl	13068 <__aeabi_d2f>
    f010:	4602      	mov	r2, r0
    f012:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f01a:	601a      	str	r2, [r3, #0]
    f01c:	e012      	b.n	f044 <auto_nav+0x1c84>
    f01e:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f026:	681b      	ldr	r3, [r3, #0]
    f028:	4618      	mov	r0, r3
    f02a:	f04f 0100 	mov.w	r1, #0
    f02e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f032:	f004 f86f 	bl	13114 <__addsf3>
    f036:	4603      	mov	r3, r0
    f038:	461a      	mov	r2, r3
    f03a:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f042:	601a      	str	r2, [r3, #0]
    f044:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f04c:	681b      	ldr	r3, [r3, #0]
    f04e:	4618      	mov	r0, r3
    f050:	f04f 0100 	mov.w	r1, #0
    f054:	f004 fb04 	bl	13660 <__aeabi_fcmplt>
    f058:	4603      	mov	r3, r0
    f05a:	2b00      	cmp	r3, #0
    f05c:	d1df      	bne.n	f01e <auto_nav+0x1c5e>
    f05e:	e012      	b.n	f086 <auto_nav+0x1cc6>
    f060:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f068:	681b      	ldr	r3, [r3, #0]
    f06a:	4618      	mov	r0, r3
    f06c:	f04f 0100 	mov.w	r1, #0
    f070:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f074:	f004 f84c 	bl	13110 <__aeabi_fsub>
    f078:	4603      	mov	r3, r0
    f07a:	461a      	mov	r2, r3
    f07c:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f084:	601a      	str	r2, [r3, #0]
    f086:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08e:	681b      	ldr	r3, [r3, #0]
    f090:	4618      	mov	r0, r3
    f092:	f04f 0100 	mov.w	r1, #0
    f096:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f09a:	f004 faf5 	bl	13688 <__aeabi_fcmpge>
    f09e:	4603      	mov	r3, r0
    f0a0:	2b00      	cmp	r3, #0
    f0a2:	d1dd      	bne.n	f060 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
    f0a4:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ac:	681b      	ldr	r3, [r3, #0]
    f0ae:	4618      	mov	r0, r3
    f0b0:	f04f 0100 	mov.w	r1, #0
    f0b4:	f004 faf2 	bl	1369c <__aeabi_fcmpgt>
    f0b8:	4603      	mov	r3, r0
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d100      	bne.n	f0c0 <auto_nav+0x1d00>
        return;
    f0be:	e251      	b.n	f564 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f0c0:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c8:	681b      	ldr	r3, [r3, #0]
    f0ca:	4618      	mov	r0, r3
    f0cc:	f04f 0100 	mov.w	r1, #0
    f0d0:	f2c4 1120 	movt	r1, #16672	; 0x4120
    f0d4:	f004 fac4 	bl	13660 <__aeabi_fcmplt>
    f0d8:	4603      	mov	r3, r0
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d100      	bne.n	f0e0 <auto_nav+0x1d20>
        return;
    f0de:	e241      	b.n	f564 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f0e0:	f64a 0310 	movw	r3, #43024	; 0xa810
    f0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e8:	781b      	ldrb	r3, [r3, #0]
    f0ea:	3301      	adds	r3, #1
    f0ec:	b2da      	uxtb	r2, r3
    f0ee:	f64a 0310 	movw	r3, #43024	; 0xa810
    f0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f6:	701a      	strb	r2, [r3, #0]
    f0f8:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f100:	681a      	ldr	r2, [r3, #0]
    f102:	f64a 0314 	movw	r3, #43028	; 0xa814
    f106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f10a:	601a      	str	r2, [r3, #0]
    f10c:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f114:	681a      	ldr	r2, [r3, #0]
    f116:	f64a 0318 	movw	r3, #43032	; 0xa818
    f11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11e:	601a      	str	r2, [r3, #0]
    f120:	f64a 0324 	movw	r3, #43044	; 0xa824
    f124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f128:	2200      	movs	r2, #0
    f12a:	801a      	strh	r2, [r3, #0]
    f12c:	f64a 0328 	movw	r3, #43048	; 0xa828
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	f04f 0200 	mov.w	r2, #0
    f138:	601a      	str	r2, [r3, #0]
    f13a:	e213      	b.n	f564 <auto_nav+0x21a4>
    f13c:	f3af 8000 	nop.w
    f140:	54442d18 	.word	0x54442d18
    f144:	3ff921fb 	.word	0x3ff921fb
    f148:	54442d18 	.word	0x54442d18
    f14c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
    f150:	f64a 0310 	movw	r3, #43024	; 0xa810
    f154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f158:	781b      	ldrb	r3, [r3, #0]
    f15a:	2b02      	cmp	r3, #2
    f15c:	f040 81ad 	bne.w	f4ba <auto_nav+0x20fa>
    {
         nav_stage = 2;
    f160:	f64a 0310 	movw	r3, #43024	; 0xa810
    f164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f168:	2202      	movs	r2, #2
    f16a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
    f16c:	f24a 439f 	movw	r3, #42143	; 0xa49f
    f170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f174:	2200      	movs	r2, #0
    f176:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    f178:	f64a 033c 	movw	r3, #43068	; 0xa83c
    f17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f180:	f04f 0200 	mov.w	r2, #0
    f184:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f186:	f24a 439d 	movw	r3, #42141	; 0xa49d
    f18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18e:	2203      	movs	r2, #3
    f190:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
    f192:	f240 1340 	movw	r3, #320	; 0x140
    f196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f19c:	f240 133c 	movw	r3, #316	; 0x13c
    f1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a4:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
    f1a6:	f64a 0304 	movw	r3, #43012	; 0xa804
    f1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ae:	f04f 0200 	mov.w	r2, #0
    f1b2:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
    f1b4:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1bc:	681a      	ldr	r2, [r3, #0]
    f1be:	f240 1340 	movw	r3, #320	; 0x140
    f1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f1c8:	4610      	mov	r0, r2
    f1ca:	4619      	mov	r1, r3
    f1cc:	f003 ffa0 	bl	13110 <__aeabi_fsub>
    f1d0:	4603      	mov	r3, r0
    f1d2:	4618      	mov	r0, r3
    f1d4:	f003 fc12 	bl	129fc <__aeabi_f2d>
    f1d8:	4604      	mov	r4, r0
    f1da:	460d      	mov	r5, r1
    f1dc:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e4:	681a      	ldr	r2, [r3, #0]
    f1e6:	f240 1340 	movw	r3, #320	; 0x140
    f1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f1f0:	4610      	mov	r0, r2
    f1f2:	4619      	mov	r1, r3
    f1f4:	f003 ff8c 	bl	13110 <__aeabi_fsub>
    f1f8:	4603      	mov	r3, r0
    f1fa:	4618      	mov	r0, r3
    f1fc:	f003 fbfe 	bl	129fc <__aeabi_f2d>
    f200:	4602      	mov	r2, r0
    f202:	460b      	mov	r3, r1
    f204:	4620      	mov	r0, r4
    f206:	4629      	mov	r1, r5
    f208:	f001 fbfa 	bl	10a00 <pp_atan2>
    f20c:	4602      	mov	r2, r0
    f20e:	460b      	mov	r3, r1
    f210:	4610      	mov	r0, r2
    f212:	4619      	mov	r1, r3
    f214:	f003 ff28 	bl	13068 <__aeabi_d2f>
    f218:	4603      	mov	r3, r0
    f21a:	607b      	str	r3, [r7, #4]
    f21c:	6878      	ldr	r0, [r7, #4]
    f21e:	f003 fbed 	bl	129fc <__aeabi_f2d>
    f222:	4604      	mov	r4, r0
    f224:	460d      	mov	r5, r1
    f226:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    f22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22e:	681b      	ldr	r3, [r3, #0]
    f230:	4618      	mov	r0, r3
    f232:	f04f 0100 	mov.w	r1, #0
    f236:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f23a:	f004 f873 	bl	13324 <__aeabi_fmul>
    f23e:	4603      	mov	r3, r0
    f240:	4618      	mov	r0, r3
    f242:	f003 fbdb 	bl	129fc <__aeabi_f2d>
    f246:	4602      	mov	r2, r0
    f248:	460b      	mov	r3, r1
    f24a:	f04f 0000 	mov.w	r0, #0
    f24e:	f04f 0100 	mov.w	r1, #0
    f252:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f256:	f003 fd4f 	bl	12cf8 <__aeabi_ddiv>
    f25a:	4602      	mov	r2, r0
    f25c:	460b      	mov	r3, r1
    f25e:	4620      	mov	r0, r4
    f260:	4629      	mov	r1, r5
    f262:	f003 fa6d 	bl	12740 <__adddf3>
    f266:	4602      	mov	r2, r0
    f268:	460b      	mov	r3, r1
    f26a:	4610      	mov	r0, r2
    f26c:	4619      	mov	r1, r3
    f26e:	f003 fefb 	bl	13068 <__aeabi_d2f>
    f272:	4603      	mov	r3, r0
    f274:	603b      	str	r3, [r7, #0]
    f276:	f240 1340 	movw	r3, #320	; 0x140
    f27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f280:	4618      	mov	r0, r3
    f282:	f003 fbbb 	bl	129fc <__aeabi_f2d>
    f286:	4604      	mov	r4, r0
    f288:	460d      	mov	r5, r1
    f28a:	6838      	ldr	r0, [r7, #0]
    f28c:	f003 fbb6 	bl	129fc <__aeabi_f2d>
    f290:	4602      	mov	r2, r0
    f292:	460b      	mov	r3, r1
    f294:	4610      	mov	r0, r2
    f296:	4619      	mov	r1, r3
    f298:	a3b5      	add	r3, pc, #724	; (adr r3, f570 <auto_nav+0x21b0>)
    f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f29e:	f003 fa4f 	bl	12740 <__adddf3>
    f2a2:	4602      	mov	r2, r0
    f2a4:	460b      	mov	r3, r1
    f2a6:	4610      	mov	r0, r2
    f2a8:	4619      	mov	r1, r3
    f2aa:	f001 fc69 	bl	10b80 <pp_sin>
    f2ae:	4602      	mov	r2, r0
    f2b0:	460b      	mov	r3, r1
    f2b2:	4610      	mov	r0, r2
    f2b4:	4619      	mov	r1, r3
    f2b6:	f04f 0200 	mov.w	r2, #0
    f2ba:	f04f 0300 	mov.w	r3, #0
    f2be:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f2c2:	f003 fbef 	bl	12aa4 <__aeabi_dmul>
    f2c6:	4602      	mov	r2, r0
    f2c8:	460b      	mov	r3, r1
    f2ca:	4620      	mov	r0, r4
    f2cc:	4629      	mov	r1, r5
    f2ce:	f003 fa37 	bl	12740 <__adddf3>
    f2d2:	4602      	mov	r2, r0
    f2d4:	460b      	mov	r3, r1
    f2d6:	4610      	mov	r0, r2
    f2d8:	4619      	mov	r1, r3
    f2da:	f003 fec5 	bl	13068 <__aeabi_d2f>
    f2de:	4606      	mov	r6, r0
    f2e0:	f240 1340 	movw	r3, #320	; 0x140
    f2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f2ea:	4618      	mov	r0, r3
    f2ec:	f003 fb86 	bl	129fc <__aeabi_f2d>
    f2f0:	4604      	mov	r4, r0
    f2f2:	460d      	mov	r5, r1
    f2f4:	6838      	ldr	r0, [r7, #0]
    f2f6:	f003 fb81 	bl	129fc <__aeabi_f2d>
    f2fa:	4602      	mov	r2, r0
    f2fc:	460b      	mov	r3, r1
    f2fe:	4610      	mov	r0, r2
    f300:	4619      	mov	r1, r3
    f302:	f001 fc3d 	bl	10b80 <pp_sin>
    f306:	4602      	mov	r2, r0
    f308:	460b      	mov	r3, r1
    f30a:	4610      	mov	r0, r2
    f30c:	4619      	mov	r1, r3
    f30e:	f04f 0200 	mov.w	r2, #0
    f312:	f04f 0300 	mov.w	r3, #0
    f316:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f31a:	f003 fbc3 	bl	12aa4 <__aeabi_dmul>
    f31e:	4602      	mov	r2, r0
    f320:	460b      	mov	r3, r1
    f322:	4620      	mov	r0, r4
    f324:	4629      	mov	r1, r5
    f326:	f003 fa0b 	bl	12740 <__adddf3>
    f32a:	4602      	mov	r2, r0
    f32c:	460b      	mov	r3, r1
    f32e:	4610      	mov	r0, r2
    f330:	4619      	mov	r1, r3
    f332:	f003 fe99 	bl	13068 <__aeabi_d2f>
    f336:	4603      	mov	r3, r0
    f338:	4630      	mov	r0, r6
    f33a:	4619      	mov	r1, r3
    f33c:	f000 fa04 	bl	f748 <fly_to_xy>
    f340:	6838      	ldr	r0, [r7, #0]
    f342:	f003 fb5b 	bl	129fc <__aeabi_f2d>
    f346:	4602      	mov	r2, r0
    f348:	460b      	mov	r3, r1
    f34a:	a189      	add	r1, pc, #548	; (adr r1, f570 <auto_nav+0x21b0>)
    f34c:	e9d1 0100 	ldrd	r0, r1, [r1]
    f350:	f003 f9f4 	bl	1273c <__aeabi_dsub>
    f354:	4602      	mov	r2, r0
    f356:	460b      	mov	r3, r1
    f358:	4610      	mov	r0, r2
    f35a:	4619      	mov	r1, r3
    f35c:	a386      	add	r3, pc, #536	; (adr r3, f578 <auto_nav+0x21b8>)
    f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f362:	f003 fcc9 	bl	12cf8 <__aeabi_ddiv>
    f366:	4602      	mov	r2, r0
    f368:	460b      	mov	r3, r1
    f36a:	4610      	mov	r0, r2
    f36c:	4619      	mov	r1, r3
    f36e:	f04f 0200 	mov.w	r2, #0
    f372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f376:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f37a:	f003 fb93 	bl	12aa4 <__aeabi_dmul>
    f37e:	4602      	mov	r2, r0
    f380:	460b      	mov	r3, r1
    f382:	4610      	mov	r0, r2
    f384:	4619      	mov	r1, r3
    f386:	f003 fe6f 	bl	13068 <__aeabi_d2f>
    f38a:	4602      	mov	r2, r0
    f38c:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f394:	601a      	str	r2, [r3, #0]
    f396:	e012      	b.n	f3be <auto_nav+0x1ffe>
    f398:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a0:	681b      	ldr	r3, [r3, #0]
    f3a2:	4618      	mov	r0, r3
    f3a4:	f04f 0100 	mov.w	r1, #0
    f3a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f3ac:	f003 feb2 	bl	13114 <__addsf3>
    f3b0:	4603      	mov	r3, r0
    f3b2:	461a      	mov	r2, r3
    f3b4:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3bc:	601a      	str	r2, [r3, #0]
    f3be:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c6:	681b      	ldr	r3, [r3, #0]
    f3c8:	4618      	mov	r0, r3
    f3ca:	f04f 0100 	mov.w	r1, #0
    f3ce:	f004 f947 	bl	13660 <__aeabi_fcmplt>
    f3d2:	4603      	mov	r3, r0
    f3d4:	2b00      	cmp	r3, #0
    f3d6:	d1df      	bne.n	f398 <auto_nav+0x1fd8>
    f3d8:	e012      	b.n	f400 <auto_nav+0x2040>
    f3da:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e2:	681b      	ldr	r3, [r3, #0]
    f3e4:	4618      	mov	r0, r3
    f3e6:	f04f 0100 	mov.w	r1, #0
    f3ea:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f3ee:	f003 fe8f 	bl	13110 <__aeabi_fsub>
    f3f2:	4603      	mov	r3, r0
    f3f4:	461a      	mov	r2, r3
    f3f6:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3fe:	601a      	str	r2, [r3, #0]
    f400:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f408:	681b      	ldr	r3, [r3, #0]
    f40a:	4618      	mov	r0, r3
    f40c:	f04f 0100 	mov.w	r1, #0
    f410:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f414:	f004 f938 	bl	13688 <__aeabi_fcmpge>
    f418:	4603      	mov	r3, r0
    f41a:	2b00      	cmp	r3, #0
    f41c:	d1dd      	bne.n	f3da <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
    f41e:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f426:	681b      	ldr	r3, [r3, #0]
    f428:	4618      	mov	r0, r3
    f42a:	f04f 0100 	mov.w	r1, #0
    f42e:	f2c4 3134 	movt	r1, #17204	; 0x4334
    f432:	f004 f933 	bl	1369c <__aeabi_fcmpgt>
    f436:	4603      	mov	r3, r0
    f438:	2b00      	cmp	r3, #0
    f43a:	d100      	bne.n	f43e <auto_nav+0x207e>
          return;
    f43c:	e092      	b.n	f564 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f43e:	f64a 032c 	movw	r3, #43052	; 0xa82c
    f442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f446:	681b      	ldr	r3, [r3, #0]
    f448:	4618      	mov	r0, r3
    f44a:	f04f 0100 	mov.w	r1, #0
    f44e:	f2c4 313e 	movt	r1, #17214	; 0x433e
    f452:	f004 f905 	bl	13660 <__aeabi_fcmplt>
    f456:	4603      	mov	r3, r0
    f458:	2b00      	cmp	r3, #0
    f45a:	d100      	bne.n	f45e <auto_nav+0x209e>
          return;
    f45c:	e082      	b.n	f564 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f45e:	f64a 0310 	movw	r3, #43024	; 0xa810
    f462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f466:	781b      	ldrb	r3, [r3, #0]
    f468:	3301      	adds	r3, #1
    f46a:	b2da      	uxtb	r2, r3
    f46c:	f64a 0310 	movw	r3, #43024	; 0xa810
    f470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f474:	701a      	strb	r2, [r3, #0]
    f476:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f47e:	681a      	ldr	r2, [r3, #0]
    f480:	f64a 0314 	movw	r3, #43028	; 0xa814
    f484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f488:	601a      	str	r2, [r3, #0]
    f48a:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f492:	681a      	ldr	r2, [r3, #0]
    f494:	f64a 0318 	movw	r3, #43032	; 0xa818
    f498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49c:	601a      	str	r2, [r3, #0]
    f49e:	f64a 0324 	movw	r3, #43044	; 0xa824
    f4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a6:	2200      	movs	r2, #0
    f4a8:	801a      	strh	r2, [r3, #0]
    f4aa:	f64a 0328 	movw	r3, #43048	; 0xa828
    f4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b2:	f04f 0200 	mov.w	r2, #0
    f4b6:	601a      	str	r2, [r3, #0]
    f4b8:	e054      	b.n	f564 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
    f4ba:	f64a 0310 	movw	r3, #43024	; 0xa810
    f4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c2:	781b      	ldrb	r3, [r3, #0]
    f4c4:	2b03      	cmp	r3, #3
    f4c6:	d106      	bne.n	f4d6 <auto_nav+0x2116>
    {
	  nav_stage = 3;
    f4c8:	f64a 0310 	movw	r3, #43024	; 0xa810
    f4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d0:	2203      	movs	r2, #3
    f4d2:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
    f4d4:	e44b      	b.n	ed6e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
    f4d6:	f64a 0310 	movw	r3, #43024	; 0xa810
    f4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4de:	781b      	ldrb	r3, [r3, #0]
    f4e0:	2b04      	cmp	r3, #4
    f4e2:	d13f      	bne.n	f564 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
    f4e4:	f64a 0310 	movw	r3, #43024	; 0xa810
    f4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ec:	2204      	movs	r2, #4
    f4ee:	701a      	strb	r2, [r3, #0]
        NextBlock()
    f4f0:	f64a 0311 	movw	r3, #43025	; 0xa811
    f4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f8:	781b      	ldrb	r3, [r3, #0]
    f4fa:	3301      	adds	r3, #1
    f4fc:	b2da      	uxtb	r2, r3
    f4fe:	f64a 0311 	movw	r3, #43025	; 0xa811
    f502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f506:	701a      	strb	r2, [r3, #0]
    f508:	f64a 0310 	movw	r3, #43024	; 0xa810
    f50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f510:	2200      	movs	r2, #0
    f512:	701a      	strb	r2, [r3, #0]
    f514:	f64a 0326 	movw	r3, #43046	; 0xa826
    f518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f51c:	2200      	movs	r2, #0
    f51e:	801a      	strh	r2, [r3, #0]
    f520:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f528:	681a      	ldr	r2, [r3, #0]
    f52a:	f64a 0314 	movw	r3, #43028	; 0xa814
    f52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f532:	601a      	str	r2, [r3, #0]
    f534:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f53c:	681a      	ldr	r2, [r3, #0]
    f53e:	f64a 0318 	movw	r3, #43032	; 0xa818
    f542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f546:	601a      	str	r2, [r3, #0]
    f548:	f64a 0324 	movw	r3, #43044	; 0xa824
    f54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f550:	2200      	movs	r2, #0
    f552:	801a      	strh	r2, [r3, #0]
    f554:	f64a 0328 	movw	r3, #43048	; 0xa828
    f558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55c:	f04f 0200 	mov.w	r2, #0
    f560:	601a      	str	r2, [r3, #0]
    f562:	bf00      	nop
    else { }
}
else { }

//#endif
}
    f564:	372c      	adds	r7, #44	; 0x2c
    f566:	46bd      	mov	sp, r7
    f568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f56a:	bf00      	nop
    f56c:	f3af 8000 	nop.w
    f570:	54442d18 	.word	0x54442d18
    f574:	3ff921fb 	.word	0x3ff921fb
    f578:	54442d18 	.word	0x54442d18
    f57c:	400921fb 	.word	0x400921fb

0000f580 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
    f580:	b590      	push	{r4, r7, lr}
    f582:	b087      	sub	sp, #28
    f584:	af00      	add	r7, sp, #0
    f586:	4603      	mov	r3, r0
    f588:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
    f58a:	79f9      	ldrb	r1, [r7, #7]
    f58c:	f240 1240 	movw	r2, #320	; 0x140
    f590:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f594:	460b      	mov	r3, r1
    f596:	005b      	lsls	r3, r3, #1
    f598:	440b      	add	r3, r1
    f59a:	009b      	lsls	r3, r3, #2
    f59c:	4413      	add	r3, r2
    f59e:	681a      	ldr	r2, [r3, #0]
    f5a0:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a8:	681b      	ldr	r3, [r3, #0]
    f5aa:	4610      	mov	r0, r2
    f5ac:	4619      	mov	r1, r3
    f5ae:	f003 fdaf 	bl	13110 <__aeabi_fsub>
    f5b2:	4603      	mov	r3, r0
    f5b4:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
    f5b6:	79f9      	ldrb	r1, [r7, #7]
    f5b8:	f240 1240 	movw	r2, #320	; 0x140
    f5bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f5c0:	460b      	mov	r3, r1
    f5c2:	005b      	lsls	r3, r3, #1
    f5c4:	440b      	add	r3, r1
    f5c6:	009b      	lsls	r3, r3, #2
    f5c8:	4413      	add	r3, r2
    f5ca:	3304      	adds	r3, #4
    f5cc:	681a      	ldr	r2, [r3, #0]
    f5ce:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d6:	681b      	ldr	r3, [r3, #0]
    f5d8:	4610      	mov	r0, r2
    f5da:	4619      	mov	r1, r3
    f5dc:	f003 fd98 	bl	13110 <__aeabi_fsub>
    f5e0:	4603      	mov	r3, r0
    f5e2:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
    f5e4:	6978      	ldr	r0, [r7, #20]
    f5e6:	6979      	ldr	r1, [r7, #20]
    f5e8:	f003 fe9c 	bl	13324 <__aeabi_fmul>
    f5ec:	4603      	mov	r3, r0
    f5ee:	461c      	mov	r4, r3
    f5f0:	6938      	ldr	r0, [r7, #16]
    f5f2:	6939      	ldr	r1, [r7, #16]
    f5f4:	f003 fe96 	bl	13324 <__aeabi_fmul>
    f5f8:	4603      	mov	r3, r0
    f5fa:	4620      	mov	r0, r4
    f5fc:	4619      	mov	r1, r3
    f5fe:	f003 fd89 	bl	13114 <__addsf3>
    f602:	4603      	mov	r3, r0
    f604:	461a      	mov	r2, r3
    f606:	f64a 0344 	movw	r3, #43076	; 0xa844
    f60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f60e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
    f610:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    f614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f618:	681b      	ldr	r3, [r3, #0]
    f61a:	4618      	mov	r0, r3
    f61c:	f04f 0100 	mov.w	r1, #0
    f620:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f624:	f003 fe7e 	bl	13324 <__aeabi_fmul>
    f628:	4603      	mov	r3, r0
    f62a:	461a      	mov	r2, r3
    f62c:	f64a 0350 	movw	r3, #43088	; 0xa850
    f630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f634:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
    f636:	f64a 0350 	movw	r3, #43088	; 0xa850
    f63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63e:	681b      	ldr	r3, [r3, #0]
    f640:	4618      	mov	r0, r3
    f642:	f04f 0100 	mov.w	r1, #0
    f646:	f2c4 2120 	movt	r1, #16928	; 0x4220
    f64a:	f004 f809 	bl	13660 <__aeabi_fcmplt>
    f64e:	4603      	mov	r3, r0
    f650:	2b00      	cmp	r3, #0
    f652:	d004      	beq.n	f65e <approaching+0xde>
    f654:	f04f 0200 	mov.w	r2, #0
    f658:	f2c4 2220 	movt	r2, #16928	; 0x4220
    f65c:	e004      	b.n	f668 <approaching+0xe8>
    f65e:	f64a 0350 	movw	r3, #43088	; 0xa850
    f662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f666:	681a      	ldr	r2, [r3, #0]
    f668:	f64a 0350 	movw	r3, #43088	; 0xa850
    f66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f670:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
    f672:	f64a 0350 	movw	r3, #43088	; 0xa850
    f676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f67a:	681a      	ldr	r2, [r3, #0]
    f67c:	f64a 0350 	movw	r3, #43088	; 0xa850
    f680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f684:	681b      	ldr	r3, [r3, #0]
    f686:	4610      	mov	r0, r2
    f688:	4619      	mov	r1, r3
    f68a:	f003 fe4b 	bl	13324 <__aeabi_fmul>
    f68e:	4603      	mov	r3, r0
    f690:	461a      	mov	r2, r3
    f692:	f64a 0344 	movw	r3, #43076	; 0xa844
    f696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f69a:	681b      	ldr	r3, [r3, #0]
    f69c:	4610      	mov	r0, r2
    f69e:	4619      	mov	r1, r3
    f6a0:	f003 fffc 	bl	1369c <__aeabi_fcmpgt>
    f6a4:	4603      	mov	r3, r0
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d001      	beq.n	f6ae <approaching+0x12e>
    return TRUE;
    f6aa:	2301      	movs	r3, #1
    f6ac:	e048      	b.n	f740 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
    f6ae:	79f9      	ldrb	r1, [r7, #7]
    f6b0:	f240 1240 	movw	r2, #320	; 0x140
    f6b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f6b8:	460b      	mov	r3, r1
    f6ba:	005b      	lsls	r3, r3, #1
    f6bc:	440b      	add	r3, r1
    f6be:	009b      	lsls	r3, r3, #2
    f6c0:	4413      	add	r3, r2
    f6c2:	681a      	ldr	r2, [r3, #0]
    f6c4:	f64a 0314 	movw	r3, #43028	; 0xa814
    f6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6cc:	681b      	ldr	r3, [r3, #0]
    f6ce:	4610      	mov	r0, r2
    f6d0:	4619      	mov	r1, r3
    f6d2:	f003 fd1d 	bl	13110 <__aeabi_fsub>
    f6d6:	4603      	mov	r3, r0
    f6d8:	4618      	mov	r0, r3
    f6da:	6979      	ldr	r1, [r7, #20]
    f6dc:	f003 fe22 	bl	13324 <__aeabi_fmul>
    f6e0:	4603      	mov	r3, r0
    f6e2:	461c      	mov	r4, r3
    f6e4:	79f9      	ldrb	r1, [r7, #7]
    f6e6:	f240 1240 	movw	r2, #320	; 0x140
    f6ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f6ee:	460b      	mov	r3, r1
    f6f0:	005b      	lsls	r3, r3, #1
    f6f2:	440b      	add	r3, r1
    f6f4:	009b      	lsls	r3, r3, #2
    f6f6:	4413      	add	r3, r2
    f6f8:	3304      	adds	r3, #4
    f6fa:	681a      	ldr	r2, [r3, #0]
    f6fc:	f64a 0318 	movw	r3, #43032	; 0xa818
    f700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f704:	681b      	ldr	r3, [r3, #0]
    f706:	4610      	mov	r0, r2
    f708:	4619      	mov	r1, r3
    f70a:	f003 fd01 	bl	13110 <__aeabi_fsub>
    f70e:	4603      	mov	r3, r0
    f710:	4618      	mov	r0, r3
    f712:	6939      	ldr	r1, [r7, #16]
    f714:	f003 fe06 	bl	13324 <__aeabi_fmul>
    f718:	4603      	mov	r3, r0
    f71a:	4620      	mov	r0, r4
    f71c:	4619      	mov	r1, r3
    f71e:	f003 fcf9 	bl	13114 <__addsf3>
    f722:	4603      	mov	r3, r0
    f724:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
    f726:	2301      	movs	r3, #1
    f728:	461c      	mov	r4, r3
    f72a:	68f8      	ldr	r0, [r7, #12]
    f72c:	f04f 0100 	mov.w	r1, #0
    f730:	f003 ff96 	bl	13660 <__aeabi_fcmplt>
    f734:	4603      	mov	r3, r0
    f736:	2b00      	cmp	r3, #0
    f738:	d101      	bne.n	f73e <approaching+0x1be>
    f73a:	2300      	movs	r3, #0
    f73c:	461c      	mov	r4, r3
    f73e:	b2e3      	uxtb	r3, r4
}
    f740:	4618      	mov	r0, r3
    f742:	371c      	adds	r7, #28
    f744:	46bd      	mov	sp, r7
    f746:	bd90      	pop	{r4, r7, pc}

0000f748 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
    f748:	b5b0      	push	{r4, r5, r7, lr}
    f74a:	b082      	sub	sp, #8
    f74c:	af00      	add	r7, sp, #0
    f74e:	6078      	str	r0, [r7, #4]
    f750:	6039      	str	r1, [r7, #0]
  desired_x = x;
    f752:	f64a 0330 	movw	r3, #43056	; 0xa830
    f756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f75a:	687a      	ldr	r2, [r7, #4]
    f75c:	601a      	str	r2, [r3, #0]
  desired_y = y;
    f75e:	f64a 0334 	movw	r3, #43060	; 0xa834
    f762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f766:	683a      	ldr	r2, [r7, #0]
    f768:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
    f76a:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f772:	681b      	ldr	r3, [r3, #0]
    f774:	6838      	ldr	r0, [r7, #0]
    f776:	4619      	mov	r1, r3
    f778:	f003 fcca 	bl	13110 <__aeabi_fsub>
    f77c:	4603      	mov	r3, r0
    f77e:	4618      	mov	r0, r3
    f780:	f003 f93c 	bl	129fc <__aeabi_f2d>
    f784:	4604      	mov	r4, r0
    f786:	460d      	mov	r5, r1
    f788:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f790:	681b      	ldr	r3, [r3, #0]
    f792:	6878      	ldr	r0, [r7, #4]
    f794:	4619      	mov	r1, r3
    f796:	f003 fcbb 	bl	13110 <__aeabi_fsub>
    f79a:	4603      	mov	r3, r0
    f79c:	4618      	mov	r0, r3
    f79e:	f003 f92d 	bl	129fc <__aeabi_f2d>
    f7a2:	4602      	mov	r2, r0
    f7a4:	460b      	mov	r3, r1
    f7a6:	4620      	mov	r0, r4
    f7a8:	4629      	mov	r1, r5
    f7aa:	f001 f929 	bl	10a00 <pp_atan2>
    f7ae:	4602      	mov	r2, r0
    f7b0:	460b      	mov	r3, r1
    f7b2:	a10b      	add	r1, pc, #44	; (adr r1, f7e0 <fly_to_xy+0x98>)
    f7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
    f7b8:	f002 ffc0 	bl	1273c <__aeabi_dsub>
    f7bc:	4602      	mov	r2, r0
    f7be:	460b      	mov	r3, r1
    f7c0:	4610      	mov	r0, r2
    f7c2:	4619      	mov	r1, r3
    f7c4:	f003 fc50 	bl	13068 <__aeabi_d2f>
    f7c8:	4602      	mov	r2, r0
    f7ca:	f24a 73fc 	movw	r3, #43004	; 0xa7fc
    f7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d2:	601a      	str	r2, [r3, #0]
}
    f7d4:	3708      	adds	r7, #8
    f7d6:	46bd      	mov	sp, r7
    f7d8:	bdb0      	pop	{r4, r5, r7, pc}
    f7da:	bf00      	nop
    f7dc:	f3af 8000 	nop.w
    f7e0:	54442d18 	.word	0x54442d18
    f7e4:	3ff921fb 	.word	0x3ff921fb

0000f7e8 <fly_to>:

static void fly_to(uint8_t wp) { 
    f7e8:	b580      	push	{r7, lr}
    f7ea:	b082      	sub	sp, #8
    f7ec:	af00      	add	r7, sp, #0
    f7ee:	4603      	mov	r3, r0
    f7f0:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
    f7f2:	79f9      	ldrb	r1, [r7, #7]
    f7f4:	f240 1240 	movw	r2, #320	; 0x140
    f7f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7fc:	460b      	mov	r3, r1
    f7fe:	005b      	lsls	r3, r3, #1
    f800:	440b      	add	r3, r1
    f802:	009b      	lsls	r3, r3, #2
    f804:	4413      	add	r3, r2
    f806:	6818      	ldr	r0, [r3, #0]
    f808:	79f9      	ldrb	r1, [r7, #7]
    f80a:	f240 1240 	movw	r2, #320	; 0x140
    f80e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f812:	460b      	mov	r3, r1
    f814:	005b      	lsls	r3, r3, #1
    f816:	440b      	add	r3, r1
    f818:	009b      	lsls	r3, r3, #2
    f81a:	4413      	add	r3, r2
    f81c:	3304      	adds	r3, #4
    f81e:	681b      	ldr	r3, [r3, #0]
    f820:	4619      	mov	r1, r3
    f822:	f7ff ff91 	bl	f748 <fly_to_xy>
}
    f826:	3708      	adds	r7, #8
    f828:	46bd      	mov	sp, r7
    f82a:	bd80      	pop	{r7, pc}

0000f82c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
    f82c:	b5b0      	push	{r4, r5, r7, lr}
    f82e:	b088      	sub	sp, #32
    f830:	af00      	add	r7, sp, #0
    f832:	4602      	mov	r2, r0
    f834:	460b      	mov	r3, r1
    f836:	71fa      	strb	r2, [r7, #7]
    f838:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
    f83a:	79f9      	ldrb	r1, [r7, #7]
    f83c:	f240 1240 	movw	r2, #320	; 0x140
    f840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f844:	460b      	mov	r3, r1
    f846:	005b      	lsls	r3, r3, #1
    f848:	440b      	add	r3, r1
    f84a:	009b      	lsls	r3, r3, #2
    f84c:	4413      	add	r3, r2
    f84e:	681b      	ldr	r3, [r3, #0]
    f850:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
    f852:	79f9      	ldrb	r1, [r7, #7]
    f854:	f240 1240 	movw	r2, #320	; 0x140
    f858:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f85c:	460b      	mov	r3, r1
    f85e:	005b      	lsls	r3, r3, #1
    f860:	440b      	add	r3, r1
    f862:	009b      	lsls	r3, r3, #2
    f864:	4413      	add	r3, r2
    f866:	3304      	adds	r3, #4
    f868:	681b      	ldr	r3, [r3, #0]
    f86a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
    f86c:	79b9      	ldrb	r1, [r7, #6]
    f86e:	f240 1240 	movw	r2, #320	; 0x140
    f872:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f876:	460b      	mov	r3, r1
    f878:	005b      	lsls	r3, r3, #1
    f87a:	440b      	add	r3, r1
    f87c:	009b      	lsls	r3, r3, #2
    f87e:	4413      	add	r3, r2
    f880:	681b      	ldr	r3, [r3, #0]
    f882:	4618      	mov	r0, r3
    f884:	69f9      	ldr	r1, [r7, #28]
    f886:	f003 fc43 	bl	13110 <__aeabi_fsub>
    f88a:	4603      	mov	r3, r0
    f88c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
    f88e:	79b9      	ldrb	r1, [r7, #6]
    f890:	f240 1240 	movw	r2, #320	; 0x140
    f894:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f898:	460b      	mov	r3, r1
    f89a:	005b      	lsls	r3, r3, #1
    f89c:	440b      	add	r3, r1
    f89e:	009b      	lsls	r3, r3, #2
    f8a0:	4413      	add	r3, r2
    f8a2:	3304      	adds	r3, #4
    f8a4:	681b      	ldr	r3, [r3, #0]
    f8a6:	4618      	mov	r0, r3
    f8a8:	69b9      	ldr	r1, [r7, #24]
    f8aa:	f003 fc31 	bl	13110 <__aeabi_fsub>
    f8ae:	4603      	mov	r3, r0
    f8b0:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
    f8b2:	6978      	ldr	r0, [r7, #20]
    f8b4:	6979      	ldr	r1, [r7, #20]
    f8b6:	f003 fd35 	bl	13324 <__aeabi_fmul>
    f8ba:	4603      	mov	r3, r0
    f8bc:	461c      	mov	r4, r3
    f8be:	6938      	ldr	r0, [r7, #16]
    f8c0:	6939      	ldr	r1, [r7, #16]
    f8c2:	f003 fd2f 	bl	13324 <__aeabi_fmul>
    f8c6:	4603      	mov	r3, r0
    f8c8:	4620      	mov	r0, r4
    f8ca:	4619      	mov	r1, r3
    f8cc:	f003 fc22 	bl	13114 <__addsf3>
    f8d0:	4603      	mov	r3, r0
    f8d2:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
    f8d4:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    f8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8dc:	681b      	ldr	r3, [r3, #0]
    f8de:	4618      	mov	r0, r3
    f8e0:	69f9      	ldr	r1, [r7, #28]
    f8e2:	f003 fc15 	bl	13110 <__aeabi_fsub>
    f8e6:	4603      	mov	r3, r0
    f8e8:	4618      	mov	r0, r3
    f8ea:	6979      	ldr	r1, [r7, #20]
    f8ec:	f003 fd1a 	bl	13324 <__aeabi_fmul>
    f8f0:	4603      	mov	r3, r0
    f8f2:	461c      	mov	r4, r3
    f8f4:	f64a 2370 	movw	r3, #43632	; 0xaa70
    f8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8fc:	681b      	ldr	r3, [r3, #0]
    f8fe:	4618      	mov	r0, r3
    f900:	69b9      	ldr	r1, [r7, #24]
    f902:	f003 fc05 	bl	13110 <__aeabi_fsub>
    f906:	4603      	mov	r3, r0
    f908:	4618      	mov	r0, r3
    f90a:	6939      	ldr	r1, [r7, #16]
    f90c:	f003 fd0a 	bl	13324 <__aeabi_fmul>
    f910:	4603      	mov	r3, r0
    f912:	4620      	mov	r0, r4
    f914:	4619      	mov	r1, r3
    f916:	f003 fbfd 	bl	13114 <__addsf3>
    f91a:	4603      	mov	r3, r0
    f91c:	4618      	mov	r0, r3
    f91e:	68f9      	ldr	r1, [r7, #12]
    f920:	f003 fdb4 	bl	1348c <__aeabi_fdiv>
    f924:	4603      	mov	r3, r0
    f926:	461a      	mov	r2, r3
    f928:	f64a 0354 	movw	r3, #43092	; 0xa854
    f92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f930:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
    f932:	f64a 0354 	movw	r3, #43092	; 0xa854
    f936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93a:	681b      	ldr	r3, [r3, #0]
    f93c:	4618      	mov	r0, r3
    f93e:	f04f 0100 	mov.w	r1, #0
    f942:	f003 fea1 	bl	13688 <__aeabi_fcmpge>
    f946:	4603      	mov	r3, r0
    f948:	2b00      	cmp	r3, #0
    f94a:	d005      	beq.n	f958 <route_to+0x12c>
    f94c:	f64a 0354 	movw	r3, #43092	; 0xa854
    f950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f954:	681a      	ldr	r2, [r3, #0]
    f956:	e001      	b.n	f95c <route_to+0x130>
    f958:	f04f 0200 	mov.w	r2, #0
    f95c:	f64a 0354 	movw	r3, #43092	; 0xa854
    f960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f964:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
    f966:	68f8      	ldr	r0, [r7, #12]
    f968:	f003 f848 	bl	129fc <__aeabi_f2d>
    f96c:	4602      	mov	r2, r0
    f96e:	460b      	mov	r3, r1
    f970:	4610      	mov	r0, r2
    f972:	4619      	mov	r1, r3
    f974:	f001 f9f4 	bl	10d60 <pp_sqrt>
    f978:	4602      	mov	r2, r0
    f97a:	460b      	mov	r3, r1
    f97c:	4610      	mov	r0, r2
    f97e:	4619      	mov	r1, r3
    f980:	f003 fb72 	bl	13068 <__aeabi_d2f>
    f984:	4602      	mov	r2, r0
    f986:	f64a 0358 	movw	r3, #43096	; 0xa858
    f98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
    f990:	f64a 0354 	movw	r3, #43092	; 0xa854
    f994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f998:	681b      	ldr	r3, [r3, #0]
    f99a:	4618      	mov	r0, r3
    f99c:	f003 f82e 	bl	129fc <__aeabi_f2d>
    f9a0:	4604      	mov	r4, r0
    f9a2:	460d      	mov	r5, r1
    f9a4:	f64a 0350 	movw	r3, #43088	; 0xa850
    f9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ac:	681a      	ldr	r2, [r3, #0]
    f9ae:	f64a 0358 	movw	r3, #43096	; 0xa858
    f9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b6:	681b      	ldr	r3, [r3, #0]
    f9b8:	4610      	mov	r0, r2
    f9ba:	4619      	mov	r1, r3
    f9bc:	f003 fd66 	bl	1348c <__aeabi_fdiv>
    f9c0:	4603      	mov	r3, r0
    f9c2:	4618      	mov	r0, r3
    f9c4:	f04f 0100 	mov.w	r1, #0
    f9c8:	f003 fe5e 	bl	13688 <__aeabi_fcmpge>
    f9cc:	4603      	mov	r3, r0
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	d014      	beq.n	f9fc <route_to+0x1d0>
    f9d2:	f64a 0350 	movw	r3, #43088	; 0xa850
    f9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9da:	681a      	ldr	r2, [r3, #0]
    f9dc:	f64a 0358 	movw	r3, #43096	; 0xa858
    f9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e4:	681b      	ldr	r3, [r3, #0]
    f9e6:	4610      	mov	r0, r2
    f9e8:	4619      	mov	r1, r3
    f9ea:	f003 fd4f 	bl	1348c <__aeabi_fdiv>
    f9ee:	4603      	mov	r3, r0
    f9f0:	4618      	mov	r0, r3
    f9f2:	f003 f803 	bl	129fc <__aeabi_f2d>
    f9f6:	4602      	mov	r2, r0
    f9f8:	460b      	mov	r3, r1
    f9fa:	e003      	b.n	fa04 <route_to+0x1d8>
    f9fc:	f04f 0200 	mov.w	r2, #0
    fa00:	f04f 0300 	mov.w	r3, #0
    fa04:	4620      	mov	r0, r4
    fa06:	4629      	mov	r1, r5
    fa08:	f002 fe9a 	bl	12740 <__adddf3>
    fa0c:	4602      	mov	r2, r0
    fa0e:	460b      	mov	r3, r1
    fa10:	4610      	mov	r0, r2
    fa12:	4619      	mov	r1, r3
    fa14:	f003 fb28 	bl	13068 <__aeabi_d2f>
    fa18:	4602      	mov	r2, r0
    fa1a:	f64a 0354 	movw	r3, #43092	; 0xa854
    fa1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa22:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
    fa24:	f64a 0354 	movw	r3, #43092	; 0xa854
    fa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	4618      	mov	r0, r3
    fa30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    fa34:	f003 fe28 	bl	13688 <__aeabi_fcmpge>
    fa38:	4603      	mov	r3, r0
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	d002      	beq.n	fa44 <route_to+0x218>
    fa3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    fa42:	e004      	b.n	fa4e <route_to+0x222>
    fa44:	f64a 0354 	movw	r3, #43092	; 0xa854
    fa48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4c:	681a      	ldr	r2, [r3, #0]
    fa4e:	f64a 0354 	movw	r3, #43092	; 0xa854
    fa52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa56:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
    fa58:	f64a 0354 	movw	r3, #43092	; 0xa854
    fa5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa60:	681b      	ldr	r3, [r3, #0]
    fa62:	4618      	mov	r0, r3
    fa64:	6979      	ldr	r1, [r7, #20]
    fa66:	f003 fc5d 	bl	13324 <__aeabi_fmul>
    fa6a:	4603      	mov	r3, r0
    fa6c:	4618      	mov	r0, r3
    fa6e:	69f9      	ldr	r1, [r7, #28]
    fa70:	f003 fb50 	bl	13114 <__addsf3>
    fa74:	4603      	mov	r3, r0
    fa76:	461c      	mov	r4, r3
    fa78:	f64a 0354 	movw	r3, #43092	; 0xa854
    fa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa80:	681b      	ldr	r3, [r3, #0]
    fa82:	4618      	mov	r0, r3
    fa84:	6939      	ldr	r1, [r7, #16]
    fa86:	f003 fc4d 	bl	13324 <__aeabi_fmul>
    fa8a:	4603      	mov	r3, r0
    fa8c:	4618      	mov	r0, r3
    fa8e:	69b9      	ldr	r1, [r7, #24]
    fa90:	f003 fb40 	bl	13114 <__addsf3>
    fa94:	4603      	mov	r3, r0
    fa96:	4620      	mov	r0, r4
    fa98:	4619      	mov	r1, r3
    fa9a:	f7ff fe55 	bl	f748 <fly_to_xy>
}
    fa9e:	3720      	adds	r7, #32
    faa0:	46bd      	mov	sp, r7
    faa2:	bdb0      	pop	{r4, r5, r7, pc}

0000faa4 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
    faa4:	b590      	push	{r4, r7, lr}
    faa6:	b083      	sub	sp, #12
    faa8:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
    faaa:	f240 1340 	movw	r3, #320	; 0x140
    faae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab2:	681a      	ldr	r2, [r3, #0]
    fab4:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    fab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fabc:	681b      	ldr	r3, [r3, #0]
    fabe:	4610      	mov	r0, r2
    fac0:	4619      	mov	r1, r3
    fac2:	f003 fb25 	bl	13110 <__aeabi_fsub>
    fac6:	4603      	mov	r3, r0
    fac8:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
    faca:	f240 1340 	movw	r3, #320	; 0x140
    face:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad2:	685a      	ldr	r2, [r3, #4]
    fad4:	f64a 2370 	movw	r3, #43632	; 0xaa70
    fad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fadc:	681b      	ldr	r3, [r3, #0]
    fade:	4610      	mov	r0, r2
    fae0:	4619      	mov	r1, r3
    fae2:	f003 fb15 	bl	13110 <__aeabi_fsub>
    fae6:	4603      	mov	r3, r0
    fae8:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
    faea:	6878      	ldr	r0, [r7, #4]
    faec:	6879      	ldr	r1, [r7, #4]
    faee:	f003 fc19 	bl	13324 <__aeabi_fmul>
    faf2:	4603      	mov	r3, r0
    faf4:	461c      	mov	r4, r3
    faf6:	6838      	ldr	r0, [r7, #0]
    faf8:	6839      	ldr	r1, [r7, #0]
    fafa:	f003 fc13 	bl	13324 <__aeabi_fmul>
    fafe:	4603      	mov	r3, r0
    fb00:	4620      	mov	r0, r4
    fb02:	4619      	mov	r1, r3
    fb04:	f003 fb06 	bl	13114 <__addsf3>
    fb08:	4603      	mov	r3, r0
    fb0a:	461a      	mov	r2, r3
    fb0c:	f64a 0348 	movw	r3, #43080	; 0xa848
    fb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb14:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
    fb16:	f64a 0348 	movw	r3, #43080	; 0xa848
    fb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb1e:	681b      	ldr	r3, [r3, #0]
    fb20:	2201      	movs	r2, #1
    fb22:	4614      	mov	r4, r2
    fb24:	4618      	mov	r0, r3
    fb26:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    fb2a:	f6c4 0174 	movt	r1, #18548	; 0x4874
    fb2e:	f003 fdb5 	bl	1369c <__aeabi_fcmpgt>
    fb32:	4603      	mov	r3, r0
    fb34:	2b00      	cmp	r3, #0
    fb36:	d101      	bne.n	fb3c <compute_dist2_to_home+0x98>
    fb38:	2300      	movs	r3, #0
    fb3a:	461c      	mov	r4, r3
    fb3c:	b2e3      	uxtb	r3, r4
    fb3e:	461a      	mov	r2, r3
    fb40:	f64a 034c 	movw	r3, #43084	; 0xa84c
    fb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb48:	701a      	strb	r2, [r3, #0]
}
    fb4a:	370c      	adds	r7, #12
    fb4c:	46bd      	mov	sp, r7
    fb4e:	bd90      	pop	{r4, r7, pc}

0000fb50 <nav_home>:

void nav_home(void) {
    fb50:	b580      	push	{r7, lr}
    fb52:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
    fb54:	f64a 033c 	movw	r3, #43068	; 0xa83c
    fb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5c:	f04f 0200 	mov.w	r2, #0
    fb60:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
    fb62:	f24a 439d 	movw	r3, #42141	; 0xa49d
    fb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6a:	2203      	movs	r2, #3
    fb6c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
    fb6e:	f240 133c 	movw	r3, #316	; 0x13c
    fb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb76:	f04f 0200 	mov.w	r2, #0
    fb7a:	f2c4 322f 	movt	r2, #17199	; 0x432f
    fb7e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
    fb80:	f7ff ff90 	bl	faa4 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
    fb84:	f64a 0348 	movw	r3, #43080	; 0xa848
    fb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8c:	681a      	ldr	r2, [r3, #0]
    fb8e:	f64a 0344 	movw	r3, #43076	; 0xa844
    fb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb96:	601a      	str	r2, [r3, #0]
}
    fb98:	bd80      	pop	{r7, pc}
    fb9a:	bf00      	nop

0000fb9c <nav_update>:

void nav_update(void) {
    fb9c:	b580      	push	{r7, lr}
    fb9e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
    fba0:	f7ff ff80 	bl	faa4 <compute_dist2_to_home>

  auto_nav();
    fba4:	f7fd fc0c 	bl	d3c0 <auto_nav>
}
    fba8:	bd80      	pop	{r7, pc}
    fbaa:	bf00      	nop

0000fbac <nav_init>:


void nav_init(void) {
    fbac:	b480      	push	{r7}
    fbae:	af00      	add	r7, sp, #0
  nav_block = 0;
    fbb0:	f64a 0311 	movw	r3, #43025	; 0xa811
    fbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb8:	2200      	movs	r2, #0
    fbba:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
    fbbc:	f64a 0310 	movw	r3, #43024	; 0xa810
    fbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc4:	2200      	movs	r2, #0
    fbc6:	701a      	strb	r2, [r3, #0]
}
    fbc8:	46bd      	mov	sp, r7
    fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbce:	4770      	bx	lr

0000fbd0 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
    fbd0:	b480      	push	{r7}
    fbd2:	b083      	sub	sp, #12
    fbd4:	af00      	add	r7, sp, #0
    fbd6:	4603      	mov	r3, r0
    fbd8:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
    fbda:	f248 030a 	movw	r3, #32778	; 0x800a
    fbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe2:	781b      	ldrb	r3, [r3, #0]
    fbe4:	b2db      	uxtb	r3, r3
    fbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fbea:	2b00      	cmp	r3, #0
    fbec:	d028      	beq.n	fc40 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
    fbee:	f64a 0365 	movw	r3, #43109	; 0xa865
    fbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf6:	781b      	ldrb	r3, [r3, #0]
    fbf8:	b2db      	uxtb	r3, r3
    fbfa:	461a      	mov	r2, r3
    fbfc:	f64a 0364 	movw	r3, #43108	; 0xa864
    fc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc04:	781b      	ldrb	r3, [r3, #0]
    fc06:	3301      	adds	r3, #1
    fc08:	429a      	cmp	r2, r3
    fc0a:	d100      	bne.n	fc0e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fc0c:	e02c      	b.n	fc68 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
    fc0e:	f64a 0364 	movw	r3, #43108	; 0xa864
    fc12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc16:	781b      	ldrb	r3, [r3, #0]
    fc18:	461a      	mov	r2, r3
    fc1a:	f64a 0368 	movw	r3, #43112	; 0xa868
    fc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc22:	79f9      	ldrb	r1, [r7, #7]
    fc24:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
    fc26:	f64a 0364 	movw	r3, #43108	; 0xa864
    fc2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc2e:	781b      	ldrb	r3, [r3, #0]
    fc30:	3301      	adds	r3, #1
    fc32:	b2da      	uxtb	r2, r3
    fc34:	f64a 0364 	movw	r3, #43108	; 0xa864
    fc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3c:	701a      	strb	r2, [r3, #0]
    fc3e:	e013      	b.n	fc68 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
    fc40:	f248 030c 	movw	r3, #32780	; 0x800c
    fc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc48:	79fa      	ldrb	r2, [r7, #7]
    fc4a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
    fc4c:	f248 030a 	movw	r3, #32778	; 0x800a
    fc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc54:	f248 020a 	movw	r2, #32778	; 0x800a
    fc58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc5c:	7812      	ldrb	r2, [r2, #0]
    fc5e:	b2d2      	uxtb	r2, r2
    fc60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fc64:	b2d2      	uxtb	r2, r2
    fc66:	701a      	strb	r2, [r3, #0]
  }
}
    fc68:	370c      	adds	r7, #12
    fc6a:	46bd      	mov	sp, r7
    fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc70:	4770      	bx	lr
    fc72:	bf00      	nop

0000fc74 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
    fc74:	b480      	push	{r7}
    fc76:	b083      	sub	sp, #12
    fc78:	af00      	add	r7, sp, #0
    fc7a:	4603      	mov	r3, r0
    fc7c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
    fc7e:	f248 039a 	movw	r3, #32922	; 0x809a
    fc82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc86:	781b      	ldrb	r3, [r3, #0]
    fc88:	b2db      	uxtb	r3, r3
    fc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc8e:	2b00      	cmp	r3, #0
    fc90:	d028      	beq.n	fce4 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
    fc92:	f64a 1369 	movw	r3, #43369	; 0xa969
    fc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	b2db      	uxtb	r3, r3
    fc9e:	461a      	mov	r2, r3
    fca0:	f64a 1368 	movw	r3, #43368	; 0xa968
    fca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fca8:	781b      	ldrb	r3, [r3, #0]
    fcaa:	3301      	adds	r3, #1
    fcac:	429a      	cmp	r2, r3
    fcae:	d100      	bne.n	fcb2 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fcb0:	e02c      	b.n	fd0c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
    fcb2:	f64a 1368 	movw	r3, #43368	; 0xa968
    fcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcba:	781b      	ldrb	r3, [r3, #0]
    fcbc:	461a      	mov	r2, r3
    fcbe:	f64a 136c 	movw	r3, #43372	; 0xa96c
    fcc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc6:	79f9      	ldrb	r1, [r7, #7]
    fcc8:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
    fcca:	f64a 1368 	movw	r3, #43368	; 0xa968
    fcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd2:	781b      	ldrb	r3, [r3, #0]
    fcd4:	3301      	adds	r3, #1
    fcd6:	b2da      	uxtb	r2, r3
    fcd8:	f64a 1368 	movw	r3, #43368	; 0xa968
    fcdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce0:	701a      	strb	r2, [r3, #0]
    fce2:	e013      	b.n	fd0c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
    fce4:	f248 039c 	movw	r3, #32924	; 0x809c
    fce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcec:	79fa      	ldrb	r2, [r7, #7]
    fcee:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
    fcf0:	f248 039a 	movw	r3, #32922	; 0x809a
    fcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf8:	f248 029a 	movw	r2, #32922	; 0x809a
    fcfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd00:	7812      	ldrb	r2, [r2, #0]
    fd02:	b2d2      	uxtb	r2, r2
    fd04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fd08:	b2d2      	uxtb	r2, r2
    fd0a:	701a      	strb	r2, [r3, #0]
  }
}
    fd0c:	370c      	adds	r7, #12
    fd0e:	46bd      	mov	sp, r7
    fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd14:	4770      	bx	lr
    fd16:	bf00      	nop

0000fd18 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
    fd18:	b580      	push	{r7, lr}
    fd1a:	b084      	sub	sp, #16
    fd1c:	af00      	add	r7, sp, #0
    fd1e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
    fd20:	2300      	movs	r3, #0
    fd22:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
    fd24:	e009      	b.n	fd3a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
    fd26:	7bfb      	ldrb	r3, [r7, #15]
    fd28:	687a      	ldr	r2, [r7, #4]
    fd2a:	4413      	add	r3, r2
    fd2c:	781b      	ldrb	r3, [r3, #0]
    fd2e:	4618      	mov	r0, r3
    fd30:	f7ff ff4e 	bl	fbd0 <uart0_transmit>
    i++;
    fd34:	7bfb      	ldrb	r3, [r7, #15]
    fd36:	3301      	adds	r3, #1
    fd38:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
    fd3a:	7bfb      	ldrb	r3, [r7, #15]
    fd3c:	687a      	ldr	r2, [r7, #4]
    fd3e:	4413      	add	r3, r2
    fd40:	781b      	ldrb	r3, [r3, #0]
    fd42:	2b00      	cmp	r3, #0
    fd44:	d1ef      	bne.n	fd26 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
    fd46:	3710      	adds	r7, #16
    fd48:	46bd      	mov	sp, r7
    fd4a:	bd80      	pop	{r7, pc}

0000fd4c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
    fd4c:	b590      	push	{r4, r7, lr}
    fd4e:	b089      	sub	sp, #36	; 0x24
    fd50:	af00      	add	r7, sp, #0
    fd52:	4603      	mov	r3, r0
    fd54:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
    fd56:	f643 1358 	movw	r3, #14680	; 0x3958
    fd5a:	f2c0 0301 	movt	r3, #1
    fd5e:	f107 040c 	add.w	r4, r7, #12
    fd62:	6818      	ldr	r0, [r3, #0]
    fd64:	6859      	ldr	r1, [r3, #4]
    fd66:	689a      	ldr	r2, [r3, #8]
    fd68:	68db      	ldr	r3, [r3, #12]
    fd6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
    fd6c:	79fb      	ldrb	r3, [r7, #7]
    fd6e:	091b      	lsrs	r3, r3, #4
    fd70:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
    fd72:	79fb      	ldrb	r3, [r7, #7]
    fd74:	f003 030f 	and.w	r3, r3, #15
    fd78:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
    fd7a:	230f      	movs	r3, #15
    fd7c:	77fb      	strb	r3, [r7, #31]
    low = 15;
    fd7e:	230f      	movs	r3, #15
    fd80:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
    fd82:	7ffb      	ldrb	r3, [r7, #31]
    fd84:	f107 0220 	add.w	r2, r7, #32
    fd88:	4413      	add	r3, r2
    fd8a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fd8e:	4618      	mov	r0, r3
    fd90:	f7ff ff1e 	bl	fbd0 <uart0_transmit>
  uart0_transmit(hex[low]);
    fd94:	7fbb      	ldrb	r3, [r7, #30]
    fd96:	f107 0220 	add.w	r2, r7, #32
    fd9a:	4413      	add	r3, r2
    fd9c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fda0:	4618      	mov	r0, r3
    fda2:	f7ff ff15 	bl	fbd0 <uart0_transmit>
}
    fda6:	3724      	adds	r7, #36	; 0x24
    fda8:	46bd      	mov	sp, r7
    fdaa:	bd90      	pop	{r4, r7, pc}

0000fdac <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
    fdac:	b480      	push	{r7}
    fdae:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
    fdb0:	f64a 0364 	movw	r3, #43108	; 0xa864
    fdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb8:	781a      	ldrb	r2, [r3, #0]
    fdba:	f64a 0365 	movw	r3, #43109	; 0xa865
    fdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	b2db      	uxtb	r3, r3
    fdc6:	429a      	cmp	r2, r3
    fdc8:	d10e      	bne.n	fde8 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
    fdca:	f248 030a 	movw	r3, #32778	; 0x800a
    fdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd2:	f248 020a 	movw	r2, #32778	; 0x800a
    fdd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdda:	7812      	ldrb	r2, [r2, #0]
    fddc:	b2d2      	uxtb	r2, r2
    fdde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fde2:	b2d2      	uxtb	r2, r2
    fde4:	701a      	strb	r2, [r3, #0]
    fde6:	e01d      	b.n	fe24 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
    fde8:	f248 030c 	movw	r3, #32780	; 0x800c
    fdec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf0:	f64a 0265 	movw	r2, #43109	; 0xa865
    fdf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdf8:	7812      	ldrb	r2, [r2, #0]
    fdfa:	b2d2      	uxtb	r2, r2
    fdfc:	4611      	mov	r1, r2
    fdfe:	f64a 0268 	movw	r2, #43112	; 0xa868
    fe02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe06:	5c52      	ldrb	r2, [r2, r1]
    fe08:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
    fe0a:	f64a 0365 	movw	r3, #43109	; 0xa865
    fe0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe12:	781b      	ldrb	r3, [r3, #0]
    fe14:	b2db      	uxtb	r3, r3
    fe16:	3301      	adds	r3, #1
    fe18:	b2da      	uxtb	r2, r3
    fe1a:	f64a 0365 	movw	r3, #43109	; 0xa865
    fe1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe22:	701a      	strb	r2, [r3, #0]
  }
}
    fe24:	46bd      	mov	sp, r7
    fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe2a:	4770      	bx	lr

0000fe2c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
    fe2c:	b480      	push	{r7}
    fe2e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
    fe30:	f64a 1368 	movw	r3, #43368	; 0xa968
    fe34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe38:	781a      	ldrb	r2, [r3, #0]
    fe3a:	f64a 1369 	movw	r3, #43369	; 0xa969
    fe3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe42:	781b      	ldrb	r3, [r3, #0]
    fe44:	b2db      	uxtb	r3, r3
    fe46:	429a      	cmp	r2, r3
    fe48:	d10e      	bne.n	fe68 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
    fe4a:	f248 039a 	movw	r3, #32922	; 0x809a
    fe4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe52:	f248 029a 	movw	r2, #32922	; 0x809a
    fe56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe5a:	7812      	ldrb	r2, [r2, #0]
    fe5c:	b2d2      	uxtb	r2, r2
    fe5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    fe62:	b2d2      	uxtb	r2, r2
    fe64:	701a      	strb	r2, [r3, #0]
    fe66:	e01d      	b.n	fea4 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
    fe68:	f248 039c 	movw	r3, #32924	; 0x809c
    fe6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe70:	f64a 1269 	movw	r2, #43369	; 0xa969
    fe74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe78:	7812      	ldrb	r2, [r2, #0]
    fe7a:	b2d2      	uxtb	r2, r2
    fe7c:	4611      	mov	r1, r2
    fe7e:	f64a 126c 	movw	r2, #43372	; 0xa96c
    fe82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fe86:	5c52      	ldrb	r2, [r2, r1]
    fe88:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
    fe8a:	f64a 1369 	movw	r3, #43369	; 0xa969
    fe8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe92:	781b      	ldrb	r3, [r3, #0]
    fe94:	b2db      	uxtb	r3, r3
    fe96:	3301      	adds	r3, #1
    fe98:	b2da      	uxtb	r2, r3
    fe9a:	f64a 1369 	movw	r3, #43369	; 0xa969
    fe9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea2:	701a      	strb	r2, [r3, #0]
  }
}
    fea4:	46bd      	mov	sp, r7
    fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    feaa:	4770      	bx	lr

0000feac <uart0_init>:

void uart0_init( void ) {
    feac:	b480      	push	{r7}
    feae:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
    feb0:	f248 0390 	movw	r3, #32912	; 0x8090
    feb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb8:	2200      	movs	r2, #0
    feba:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
    febc:	f248 0309 	movw	r3, #32777	; 0x8009
    fec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec4:	2219      	movs	r2, #25
    fec6:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
    fec8:	f248 030b 	movw	r3, #32779	; 0x800b
    fecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed0:	2200      	movs	r2, #0
    fed2:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
    fed4:	f248 030a 	movw	r3, #32778	; 0x800a
    fed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fedc:	2218      	movs	r2, #24
    fede:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
    fee0:	f248 0395 	movw	r3, #32917	; 0x8095
    fee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee8:	2206      	movs	r2, #6
    feea:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
    feec:	f248 030a 	movw	r3, #32778	; 0x800a
    fef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef4:	f248 020a 	movw	r2, #32778	; 0x800a
    fef8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fefc:	7812      	ldrb	r2, [r2, #0]
    fefe:	b2d2      	uxtb	r2, r2
    ff00:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff04:	b2d2      	uxtb	r2, r2
    ff06:	701a      	strb	r2, [r3, #0]
}
    ff08:	46bd      	mov	sp, r7
    ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff0e:	4770      	bx	lr

0000ff10 <uart1_init>:

void uart1_init( void ) {
    ff10:	b480      	push	{r7}
    ff12:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
    ff14:	f248 0398 	movw	r3, #32920	; 0x8098
    ff18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1c:	2200      	movs	r2, #0
    ff1e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
    ff20:	f248 0399 	movw	r3, #32921	; 0x8099
    ff24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff28:	2219      	movs	r2, #25
    ff2a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
    ff2c:	f248 039b 	movw	r3, #32923	; 0x809b
    ff30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff34:	2200      	movs	r2, #0
    ff36:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
    ff38:	f248 039a 	movw	r3, #32922	; 0x809a
    ff3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff40:	2218      	movs	r2, #24
    ff42:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
    ff44:	f248 039d 	movw	r3, #32925	; 0x809d
    ff48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff4c:	2206      	movs	r2, #6
    ff4e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
    ff50:	f248 039a 	movw	r3, #32922	; 0x809a
    ff54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff58:	f248 029a 	movw	r2, #32922	; 0x809a
    ff5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff60:	7812      	ldrb	r2, [r2, #0]
    ff62:	b2d2      	uxtb	r2, r2
    ff64:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ff68:	b2d2      	uxtb	r2, r2
    ff6a:	701a      	strb	r2, [r3, #0]
}
    ff6c:	46bd      	mov	sp, r7
    ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff72:	4770      	bx	lr
    ff74:	0000      	movs	r0, r0
	...

0000ff78 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
    ff78:	b480      	push	{r7}
    ff7a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
    ff7c:	f64a 236c 	movw	r3, #43628	; 0xaa6c
    ff80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff84:	f04f 0200 	mov.w	r2, #0
    ff88:	601a      	str	r2, [r3, #0]
    ff8a:	f64a 2370 	movw	r3, #43632	; 0xaa70
    ff8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff92:	f04f 0200 	mov.w	r2, #0
    ff96:	601a      	str	r2, [r3, #0]
    ff98:	f64a 2374 	movw	r3, #43636	; 0xaa74
    ff9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa0:	f04f 0200 	mov.w	r2, #0
    ffa4:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
    ffa6:	f64a 2378 	movw	r3, #43640	; 0xaa78
    ffaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffae:	f04f 0200 	mov.w	r2, #0
    ffb2:	601a      	str	r2, [r3, #0]
    ffb4:	f64a 237c 	movw	r3, #43644	; 0xaa7c
    ffb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffbc:	f04f 0200 	mov.w	r2, #0
    ffc0:	601a      	str	r2, [r3, #0]
    ffc2:	f64a 2380 	movw	r3, #43648	; 0xaa80
    ffc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffca:	f04f 0200 	mov.w	r2, #0
    ffce:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
    ffd0:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    ffd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd8:	f04f 0200 	mov.w	r2, #0
    ffdc:	601a      	str	r2, [r3, #0]
    ffde:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    ffe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe6:	f04f 0200 	mov.w	r2, #0
    ffea:	601a      	str	r2, [r3, #0]
    ffec:	f64a 238c 	movw	r3, #43660	; 0xaa8c
    fff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff4:	f04f 0200 	mov.w	r2, #0
    fff8:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
    fffa:	f64a 2390 	movw	r3, #43664	; 0xaa90
    fffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10002:	f04f 0200 	mov.w	r2, #0
   10006:	601a      	str	r2, [r3, #0]
   10008:	f64a 2394 	movw	r3, #43668	; 0xaa94
   1000c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10010:	f04f 0200 	mov.w	r2, #0
   10014:	601a      	str	r2, [r3, #0]
   10016:	f64a 2398 	movw	r3, #43672	; 0xaa98
   1001a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1001e:	f04f 0200 	mov.w	r2, #0
   10022:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   10024:	f64a 239c 	movw	r3, #43676	; 0xaa9c
   10028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002c:	2200      	movs	r2, #0
   1002e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   10030:	f240 1310 	movw	r3, #272	; 0x110
   10034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10038:	681a      	ldr	r2, [r3, #0]
   1003a:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   1003e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10042:	601a      	str	r2, [r3, #0]
}
   10044:	46bd      	mov	sp, r7
   10046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1004a:	4770      	bx	lr

0001004c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1004c:	b580      	push	{r7, lr}
   1004e:	b082      	sub	sp, #8
   10050:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   10052:	f240 1304 	movw	r3, #260	; 0x104
   10056:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1005a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   1005c:	2b01      	cmp	r3, #1
   1005e:	d105      	bne.n	1006c <estimator_update_state_infrared+0x20>
   10060:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   10064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10068:	681b      	ldr	r3, [r3, #0]
   1006a:	e004      	b.n	10076 <estimator_update_state_infrared+0x2a>
   1006c:	f240 1310 	movw	r3, #272	; 0x110
   10070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10074:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   10076:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   10078:	f24a 7358 	movw	r3, #42840	; 0xa758
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	881b      	ldrh	r3, [r3, #0]
   10082:	b21b      	sxth	r3, r3
   10084:	4618      	mov	r0, r3
   10086:	f003 f8f9 	bl	1327c <__aeabi_i2f>
   1008a:	4603      	mov	r3, r0
   1008c:	4618      	mov	r0, r3
   1008e:	6879      	ldr	r1, [r7, #4]
   10090:	f003 f948 	bl	13324 <__aeabi_fmul>
   10094:	4603      	mov	r3, r0
   10096:	461a      	mov	r2, r3
   10098:	f64a 2378 	movw	r3, #43640	; 0xaa78
   1009c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a0:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   100a2:	f24a 735a 	movw	r3, #42842	; 0xa75a
   100a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100aa:	881b      	ldrh	r3, [r3, #0]
   100ac:	b21b      	sxth	r3, r3
   100ae:	4618      	mov	r0, r3
   100b0:	f003 f8e4 	bl	1327c <__aeabi_i2f>
   100b4:	4603      	mov	r3, r0
   100b6:	4618      	mov	r0, r3
   100b8:	6879      	ldr	r1, [r7, #4]
   100ba:	f003 f933 	bl	13324 <__aeabi_fmul>
   100be:	4603      	mov	r3, r0
   100c0:	461a      	mov	r2, r3
   100c2:	f64a 2380 	movw	r3, #43648	; 0xaa80
   100c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ca:	601a      	str	r2, [r3, #0]
}
   100cc:	3708      	adds	r7, #8
   100ce:	46bd      	mov	sp, r7
   100d0:	bd80      	pop	{r7, pc}
   100d2:	bf00      	nop

000100d4 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   100d4:	b5b0      	push	{r4, r5, r7, lr}
   100d6:	b084      	sub	sp, #16
   100d8:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   100da:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   100de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e2:	781b      	ldrb	r3, [r3, #0]
   100e4:	2b00      	cmp	r3, #0
   100e6:	f000 81e8 	beq.w	104ba <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   100ea:	f24a 6328 	movw	r3, #42536	; 0xa628
   100ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f2:	681a      	ldr	r2, [r3, #0]
   100f4:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   100f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100fc:	681b      	ldr	r3, [r3, #0]
   100fe:	4610      	mov	r0, r2
   10100:	4619      	mov	r1, r3
   10102:	f003 f805 	bl	13110 <__aeabi_fsub>
   10106:	4603      	mov	r3, r0
   10108:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1010a:	68b8      	ldr	r0, [r7, #8]
   1010c:	f002 fc76 	bl	129fc <__aeabi_f2d>
   10110:	4602      	mov	r2, r0
   10112:	460b      	mov	r3, r1
   10114:	4610      	mov	r0, r2
   10116:	4619      	mov	r1, r3
   10118:	a385      	add	r3, pc, #532	; (adr r3, 10330 <estimator_update_ir_estim+0x25c>)
   1011a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1011e:	f002 ff51 	bl	12fc4 <__aeabi_dcmpgt>
   10122:	4603      	mov	r3, r0
   10124:	2b00      	cmp	r3, #0
   10126:	d100      	bne.n	1012a <estimator_update_ir_estim+0x56>
   10128:	e219      	b.n	1055e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1012a:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   1012e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10132:	681a      	ldr	r2, [r3, #0]
   10134:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   10138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1013c:	681b      	ldr	r3, [r3, #0]
   1013e:	4610      	mov	r0, r2
   10140:	4619      	mov	r1, r3
   10142:	f002 ffe5 	bl	13110 <__aeabi_fsub>
   10146:	4603      	mov	r3, r0
   10148:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1014a:	e013      	b.n	10174 <estimator_update_ir_estim+0xa0>
   1014c:	68f8      	ldr	r0, [r7, #12]
   1014e:	f002 fc55 	bl	129fc <__aeabi_f2d>
   10152:	4602      	mov	r2, r0
   10154:	460b      	mov	r3, r1
   10156:	4610      	mov	r0, r2
   10158:	4619      	mov	r1, r3
   1015a:	a377      	add	r3, pc, #476	; (adr r3, 10338 <estimator_update_ir_estim+0x264>)
   1015c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10160:	f002 faec 	bl	1273c <__aeabi_dsub>
   10164:	4602      	mov	r2, r0
   10166:	460b      	mov	r3, r1
   10168:	4610      	mov	r0, r2
   1016a:	4619      	mov	r1, r3
   1016c:	f002 ff7c 	bl	13068 <__aeabi_d2f>
   10170:	4603      	mov	r3, r0
   10172:	60fb      	str	r3, [r7, #12]
   10174:	68f8      	ldr	r0, [r7, #12]
   10176:	f002 fc41 	bl	129fc <__aeabi_f2d>
   1017a:	4602      	mov	r2, r0
   1017c:	460b      	mov	r3, r1
   1017e:	4610      	mov	r0, r2
   10180:	4619      	mov	r1, r3
   10182:	a36f      	add	r3, pc, #444	; (adr r3, 10340 <estimator_update_ir_estim+0x26c>)
   10184:	e9d3 2300 	ldrd	r2, r3, [r3]
   10188:	f002 ff1c 	bl	12fc4 <__aeabi_dcmpgt>
   1018c:	4603      	mov	r3, r0
   1018e:	2b00      	cmp	r3, #0
   10190:	d1dc      	bne.n	1014c <estimator_update_ir_estim+0x78>
   10192:	e013      	b.n	101bc <estimator_update_ir_estim+0xe8>
   10194:	68f8      	ldr	r0, [r7, #12]
   10196:	f002 fc31 	bl	129fc <__aeabi_f2d>
   1019a:	4602      	mov	r2, r0
   1019c:	460b      	mov	r3, r1
   1019e:	4610      	mov	r0, r2
   101a0:	4619      	mov	r1, r3
   101a2:	a365      	add	r3, pc, #404	; (adr r3, 10338 <estimator_update_ir_estim+0x264>)
   101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   101a8:	f002 faca 	bl	12740 <__adddf3>
   101ac:	4602      	mov	r2, r0
   101ae:	460b      	mov	r3, r1
   101b0:	4610      	mov	r0, r2
   101b2:	4619      	mov	r1, r3
   101b4:	f002 ff58 	bl	13068 <__aeabi_d2f>
   101b8:	4603      	mov	r3, r0
   101ba:	60fb      	str	r3, [r7, #12]
   101bc:	68f8      	ldr	r0, [r7, #12]
   101be:	f002 fc1d 	bl	129fc <__aeabi_f2d>
   101c2:	4602      	mov	r2, r0
   101c4:	460b      	mov	r3, r1
   101c6:	4610      	mov	r0, r2
   101c8:	4619      	mov	r1, r3
   101ca:	a35f      	add	r3, pc, #380	; (adr r3, 10348 <estimator_update_ir_estim+0x274>)
   101cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   101d0:	f002 feda 	bl	12f88 <__aeabi_dcmplt>
   101d4:	4603      	mov	r3, r0
   101d6:	2b00      	cmp	r3, #0
   101d8:	d1dc      	bne.n	10194 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   101da:	68f8      	ldr	r0, [r7, #12]
   101dc:	68b9      	ldr	r1, [r7, #8]
   101de:	f003 f955 	bl	1348c <__aeabi_fdiv>
   101e2:	4603      	mov	r3, r0
   101e4:	4618      	mov	r0, r3
   101e6:	f002 fc09 	bl	129fc <__aeabi_f2d>
   101ea:	4602      	mov	r2, r0
   101ec:	460b      	mov	r3, r1
   101ee:	4610      	mov	r0, r2
   101f0:	4619      	mov	r1, r3
   101f2:	f04f 0200 	mov.w	r2, #0
   101f6:	f04f 0300 	mov.w	r3, #0
   101fa:	f2c4 0324 	movt	r3, #16420	; 0x4024
   101fe:	f002 fc51 	bl	12aa4 <__aeabi_dmul>
   10202:	4602      	mov	r2, r0
   10204:	460b      	mov	r3, r1
   10206:	4610      	mov	r0, r2
   10208:	4619      	mov	r1, r3
   1020a:	a351      	add	r3, pc, #324	; (adr r3, 10350 <estimator_update_ir_estim+0x27c>)
   1020c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10210:	f002 fd72 	bl	12cf8 <__aeabi_ddiv>
   10214:	4602      	mov	r2, r0
   10216:	460b      	mov	r3, r1
   10218:	4610      	mov	r0, r2
   1021a:	4619      	mov	r1, r3
   1021c:	f002 ff24 	bl	13068 <__aeabi_d2f>
   10220:	4603      	mov	r3, r0
   10222:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   10224:	e013      	b.n	1024e <estimator_update_ir_estim+0x17a>
   10226:	68f8      	ldr	r0, [r7, #12]
   10228:	f002 fbe8 	bl	129fc <__aeabi_f2d>
   1022c:	4602      	mov	r2, r0
   1022e:	460b      	mov	r3, r1
   10230:	4610      	mov	r0, r2
   10232:	4619      	mov	r1, r3
   10234:	a340      	add	r3, pc, #256	; (adr r3, 10338 <estimator_update_ir_estim+0x264>)
   10236:	e9d3 2300 	ldrd	r2, r3, [r3]
   1023a:	f002 fa7f 	bl	1273c <__aeabi_dsub>
   1023e:	4602      	mov	r2, r0
   10240:	460b      	mov	r3, r1
   10242:	4610      	mov	r0, r2
   10244:	4619      	mov	r1, r3
   10246:	f002 ff0f 	bl	13068 <__aeabi_d2f>
   1024a:	4603      	mov	r3, r0
   1024c:	60fb      	str	r3, [r7, #12]
   1024e:	68f8      	ldr	r0, [r7, #12]
   10250:	f002 fbd4 	bl	129fc <__aeabi_f2d>
   10254:	4602      	mov	r2, r0
   10256:	460b      	mov	r3, r1
   10258:	4610      	mov	r0, r2
   1025a:	4619      	mov	r1, r3
   1025c:	a338      	add	r3, pc, #224	; (adr r3, 10340 <estimator_update_ir_estim+0x26c>)
   1025e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10262:	f002 feaf 	bl	12fc4 <__aeabi_dcmpgt>
   10266:	4603      	mov	r3, r0
   10268:	2b00      	cmp	r3, #0
   1026a:	d1dc      	bne.n	10226 <estimator_update_ir_estim+0x152>
   1026c:	e013      	b.n	10296 <estimator_update_ir_estim+0x1c2>
   1026e:	68f8      	ldr	r0, [r7, #12]
   10270:	f002 fbc4 	bl	129fc <__aeabi_f2d>
   10274:	4602      	mov	r2, r0
   10276:	460b      	mov	r3, r1
   10278:	4610      	mov	r0, r2
   1027a:	4619      	mov	r1, r3
   1027c:	a32e      	add	r3, pc, #184	; (adr r3, 10338 <estimator_update_ir_estim+0x264>)
   1027e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10282:	f002 fa5d 	bl	12740 <__adddf3>
   10286:	4602      	mov	r2, r0
   10288:	460b      	mov	r3, r1
   1028a:	4610      	mov	r0, r2
   1028c:	4619      	mov	r1, r3
   1028e:	f002 feeb 	bl	13068 <__aeabi_d2f>
   10292:	4603      	mov	r3, r0
   10294:	60fb      	str	r3, [r7, #12]
   10296:	68f8      	ldr	r0, [r7, #12]
   10298:	f002 fbb0 	bl	129fc <__aeabi_f2d>
   1029c:	4602      	mov	r2, r0
   1029e:	460b      	mov	r3, r1
   102a0:	4610      	mov	r0, r2
   102a2:	4619      	mov	r1, r3
   102a4:	a328      	add	r3, pc, #160	; (adr r3, 10348 <estimator_update_ir_estim+0x274>)
   102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   102aa:	f002 fe6d 	bl	12f88 <__aeabi_dcmplt>
   102ae:	4603      	mov	r3, r0
   102b0:	2b00      	cmp	r3, #0
   102b2:	d1dc      	bne.n	1026e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   102b4:	f24a 7358 	movw	r3, #42840	; 0xa758
   102b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102bc:	881b      	ldrh	r3, [r3, #0]
   102be:	b21b      	sxth	r3, r3
   102c0:	4618      	mov	r0, r3
   102c2:	f002 ffdb 	bl	1327c <__aeabi_i2f>
   102c6:	4602      	mov	r2, r0
   102c8:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   102cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d0:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   102d2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   102d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102da:	68fa      	ldr	r2, [r7, #12]
   102dc:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   102de:	68f8      	ldr	r0, [r7, #12]
   102e0:	f04f 0100 	mov.w	r1, #0
   102e4:	f003 f9bc 	bl	13660 <__aeabi_fcmplt>
   102e8:	4603      	mov	r3, r0
   102ea:	2b00      	cmp	r3, #0
   102ec:	d003      	beq.n	102f6 <estimator_update_ir_estim+0x222>
   102ee:	68fb      	ldr	r3, [r7, #12]
   102f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   102f4:	e000      	b.n	102f8 <estimator_update_ir_estim+0x224>
   102f6:	68fb      	ldr	r3, [r7, #12]
   102f8:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   102fa:	6878      	ldr	r0, [r7, #4]
   102fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10300:	f003 f9ae 	bl	13660 <__aeabi_fcmplt>
   10304:	4603      	mov	r3, r0
   10306:	2b00      	cmp	r3, #0
   10308:	d100      	bne.n	1030c <estimator_update_ir_estim+0x238>
   1030a:	e128      	b.n	1055e <estimator_update_ir_estim+0x48a>
   1030c:	6878      	ldr	r0, [r7, #4]
   1030e:	f002 fb75 	bl	129fc <__aeabi_f2d>
   10312:	4602      	mov	r2, r0
   10314:	460b      	mov	r3, r1
   10316:	4610      	mov	r0, r2
   10318:	4619      	mov	r1, r3
   1031a:	a30f      	add	r3, pc, #60	; (adr r3, 10358 <estimator_update_ir_estim+0x284>)
   1031c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10320:	f002 fe50 	bl	12fc4 <__aeabi_dcmpgt>
   10324:	4603      	mov	r3, r0
   10326:	2b00      	cmp	r3, #0
   10328:	d11a      	bne.n	10360 <estimator_update_ir_estim+0x28c>
   1032a:	e118      	b.n	1055e <estimator_update_ir_estim+0x48a>
   1032c:	f3af 8000 	nop.w
   10330:	9999999a 	.word	0x9999999a
   10334:	3fb99999 	.word	0x3fb99999
   10338:	54442d18 	.word	0x54442d18
   1033c:	401921fb 	.word	0x401921fb
   10340:	54442d18 	.word	0x54442d18
   10344:	400921fb 	.word	0x400921fb
   10348:	54442d18 	.word	0x54442d18
   1034c:	c00921fb 	.word	0xc00921fb
   10350:	51eb851f 	.word	0x51eb851f
   10354:	40239eb8 	.word	0x40239eb8
   10358:	9999999a 	.word	0x9999999a
   1035c:	3fa99999 	.word	0x3fa99999
   10360:	f240 1308 	movw	r3, #264	; 0x108
   10364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10368:	881b      	ldrh	r3, [r3, #0]
   1036a:	b21b      	sxth	r3, r3
   1036c:	425b      	negs	r3, r3
   1036e:	0fda      	lsrs	r2, r3, #31
   10370:	4413      	add	r3, r2
   10372:	105b      	asrs	r3, r3, #1
   10374:	461a      	mov	r2, r3
   10376:	f24a 7358 	movw	r3, #42840	; 0xa758
   1037a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1037e:	881b      	ldrh	r3, [r3, #0]
   10380:	b21b      	sxth	r3, r3
   10382:	429a      	cmp	r2, r3
   10384:	f280 8098 	bge.w	104b8 <estimator_update_ir_estim+0x3e4>
   10388:	f240 1308 	movw	r3, #264	; 0x108
   1038c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10390:	881b      	ldrh	r3, [r3, #0]
   10392:	b21b      	sxth	r3, r3
   10394:	0fda      	lsrs	r2, r3, #31
   10396:	4413      	add	r3, r2
   10398:	105b      	asrs	r3, r3, #1
   1039a:	b29a      	uxth	r2, r3
   1039c:	f24a 7358 	movw	r3, #42840	; 0xa758
   103a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a4:	881b      	ldrh	r3, [r3, #0]
   103a6:	b212      	sxth	r2, r2
   103a8:	b21b      	sxth	r3, r3
   103aa:	429a      	cmp	r2, r3
   103ac:	f340 8084 	ble.w	104b8 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   103b0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   103b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b8:	681a      	ldr	r2, [r3, #0]
   103ba:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   103be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c2:	681b      	ldr	r3, [r3, #0]
   103c4:	4610      	mov	r0, r2
   103c6:	4619      	mov	r1, r3
   103c8:	f002 ffac 	bl	13324 <__aeabi_fmul>
   103cc:	4603      	mov	r3, r0
   103ce:	4618      	mov	r0, r3
   103d0:	f002 fb14 	bl	129fc <__aeabi_f2d>
   103d4:	4604      	mov	r4, r0
   103d6:	460d      	mov	r5, r1
   103d8:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   103dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e0:	681b      	ldr	r3, [r3, #0]
   103e2:	4618      	mov	r0, r3
   103e4:	f002 fb0a 	bl	129fc <__aeabi_f2d>
   103e8:	4602      	mov	r2, r0
   103ea:	460b      	mov	r3, r1
   103ec:	4610      	mov	r0, r2
   103ee:	4619      	mov	r1, r3
   103f0:	a367      	add	r3, pc, #412	; (adr r3, 10590 <estimator_update_ir_estim+0x4bc>)
   103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   103f6:	f002 fb55 	bl	12aa4 <__aeabi_dmul>
   103fa:	4602      	mov	r2, r0
   103fc:	460b      	mov	r3, r1
   103fe:	4620      	mov	r0, r4
   10400:	4629      	mov	r1, r5
   10402:	f002 f99d 	bl	12740 <__adddf3>
   10406:	4602      	mov	r2, r0
   10408:	460b      	mov	r3, r1
   1040a:	4610      	mov	r0, r2
   1040c:	4619      	mov	r1, r3
   1040e:	f002 fe2b 	bl	13068 <__aeabi_d2f>
   10412:	4602      	mov	r2, r0
   10414:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   10418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1041c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1041e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10426:	681a      	ldr	r2, [r3, #0]
   10428:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   1042c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10430:	681b      	ldr	r3, [r3, #0]
   10432:	4610      	mov	r0, r2
   10434:	4619      	mov	r1, r3
   10436:	f002 ff75 	bl	13324 <__aeabi_fmul>
   1043a:	4603      	mov	r3, r0
   1043c:	4618      	mov	r0, r3
   1043e:	f002 fadd 	bl	129fc <__aeabi_f2d>
   10442:	4604      	mov	r4, r0
   10444:	460d      	mov	r5, r1
   10446:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   1044a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1044e:	681b      	ldr	r3, [r3, #0]
   10450:	4618      	mov	r0, r3
   10452:	f002 fad3 	bl	129fc <__aeabi_f2d>
   10456:	4602      	mov	r2, r0
   10458:	460b      	mov	r3, r1
   1045a:	4610      	mov	r0, r2
   1045c:	4619      	mov	r1, r3
   1045e:	a34c      	add	r3, pc, #304	; (adr r3, 10590 <estimator_update_ir_estim+0x4bc>)
   10460:	e9d3 2300 	ldrd	r2, r3, [r3]
   10464:	f002 fb1e 	bl	12aa4 <__aeabi_dmul>
   10468:	4602      	mov	r2, r0
   1046a:	460b      	mov	r3, r1
   1046c:	4620      	mov	r0, r4
   1046e:	4629      	mov	r1, r5
   10470:	f002 f966 	bl	12740 <__adddf3>
   10474:	4602      	mov	r2, r0
   10476:	460b      	mov	r3, r1
   10478:	4610      	mov	r0, r2
   1047a:	4619      	mov	r1, r3
   1047c:	f002 fdf4 	bl	13068 <__aeabi_d2f>
   10480:	4602      	mov	r2, r0
   10482:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   10486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1048a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1048c:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   10490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10494:	681a      	ldr	r2, [r3, #0]
   10496:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   1049a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1049e:	681b      	ldr	r3, [r3, #0]
   104a0:	4610      	mov	r0, r2
   104a2:	4619      	mov	r1, r3
   104a4:	f002 fff2 	bl	1348c <__aeabi_fdiv>
   104a8:	4603      	mov	r3, r0
   104aa:	461a      	mov	r2, r3
   104ac:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   104b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b4:	601a      	str	r2, [r3, #0]
   104b6:	e052      	b.n	1055e <estimator_update_ir_estim+0x48a>
   104b8:	e051      	b.n	1055e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   104ba:	f64a 23b8 	movw	r3, #43704	; 0xaab8
   104be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c2:	2201      	movs	r2, #1
   104c4:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   104c6:	f240 1308 	movw	r3, #264	; 0x108
   104ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ce:	881b      	ldrh	r3, [r3, #0]
   104d0:	b21b      	sxth	r3, r3
   104d2:	4618      	mov	r0, r3
   104d4:	f002 fed2 	bl	1327c <__aeabi_i2f>
   104d8:	4603      	mov	r3, r0
   104da:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   104dc:	6838      	ldr	r0, [r7, #0]
   104de:	6839      	ldr	r1, [r7, #0]
   104e0:	f002 ff20 	bl	13324 <__aeabi_fmul>
   104e4:	4603      	mov	r3, r0
   104e6:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   104e8:	f64a 23ac 	movw	r3, #43692	; 0xaaac
   104ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f0:	681b      	ldr	r3, [r3, #0]
   104f2:	4618      	mov	r0, r3
   104f4:	f002 fa82 	bl	129fc <__aeabi_f2d>
   104f8:	4602      	mov	r2, r0
   104fa:	460b      	mov	r3, r1
   104fc:	4610      	mov	r0, r2
   104fe:	4619      	mov	r1, r3
   10500:	f04f 0200 	mov.w	r2, #0
   10504:	f04f 0300 	mov.w	r3, #0
   10508:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1050c:	f002 faca 	bl	12aa4 <__aeabi_dmul>
   10510:	4602      	mov	r2, r0
   10512:	460b      	mov	r3, r1
   10514:	4614      	mov	r4, r2
   10516:	461d      	mov	r5, r3
   10518:	6838      	ldr	r0, [r7, #0]
   1051a:	f002 fa6f 	bl	129fc <__aeabi_f2d>
   1051e:	4602      	mov	r2, r0
   10520:	460b      	mov	r3, r1
   10522:	4620      	mov	r0, r4
   10524:	4629      	mov	r1, r5
   10526:	f002 fabd 	bl	12aa4 <__aeabi_dmul>
   1052a:	4602      	mov	r2, r0
   1052c:	460b      	mov	r3, r1
   1052e:	4610      	mov	r0, r2
   10530:	4619      	mov	r1, r3
   10532:	f002 fd99 	bl	13068 <__aeabi_d2f>
   10536:	4602      	mov	r2, r0
   10538:	f64a 23c4 	movw	r3, #43716	; 0xaac4
   1053c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10540:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   10542:	6838      	ldr	r0, [r7, #0]
   10544:	f04f 0100 	mov.w	r1, #0
   10548:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1054c:	f002 feea 	bl	13324 <__aeabi_fmul>
   10550:	4603      	mov	r3, r0
   10552:	461a      	mov	r2, r3
   10554:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   10558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1055e:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   10562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10566:	681a      	ldr	r2, [r3, #0]
   10568:	f64a 23c0 	movw	r3, #43712	; 0xaac0
   1056c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10570:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   10572:	f24a 6328 	movw	r3, #42536	; 0xa628
   10576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057a:	681a      	ldr	r2, [r3, #0]
   1057c:	f64a 23bc 	movw	r3, #43708	; 0xaabc
   10580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10584:	601a      	str	r2, [r3, #0]
}
   10586:	3710      	adds	r7, #16
   10588:	46bd      	mov	sp, r7
   1058a:	bdb0      	pop	{r4, r5, r7, pc}
   1058c:	f3af 8000 	nop.w
   10590:	d916872b 	.word	0xd916872b
   10594:	3feff7ce 	.word	0x3feff7ce

00010598 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   10598:	b580      	push	{r7, lr}
   1059a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1059c:	f24a 634c 	movw	r3, #42572	; 0xa64c
   105a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a4:	781b      	ldrb	r3, [r3, #0]
   105a6:	f003 0320 	and.w	r3, r3, #32
   105aa:	2b00      	cmp	r3, #0
   105ac:	d044      	beq.n	10638 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   105ae:	f24a 6344 	movw	r3, #42564	; 0xa644
   105b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b6:	681a      	ldr	r2, [r3, #0]
   105b8:	f64a 236c 	movw	r3, #43628	; 0xaa6c
   105bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c0:	601a      	str	r2, [r3, #0]
   105c2:	f24a 6348 	movw	r3, #42568	; 0xa648
   105c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ca:	681a      	ldr	r2, [r3, #0]
   105cc:	f64a 2370 	movw	r3, #43632	; 0xaa70
   105d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d4:	601a      	str	r2, [r3, #0]
   105d6:	f24a 632c 	movw	r3, #42540	; 0xa62c
   105da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105de:	681a      	ldr	r2, [r3, #0]
   105e0:	f64a 2374 	movw	r3, #43636	; 0xaa74
   105e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e8:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   105ea:	f24a 6330 	movw	r3, #42544	; 0xa630
   105ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105f2:	681a      	ldr	r2, [r3, #0]
   105f4:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   105f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105fc:	601a      	str	r2, [r3, #0]
   105fe:	f24a 6338 	movw	r3, #42552	; 0xa638
   10602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10606:	681a      	ldr	r2, [r3, #0]
   10608:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   1060c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10610:	601a      	str	r2, [r3, #0]
   10612:	f24a 6334 	movw	r3, #42548	; 0xa634
   10616:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1061a:	681a      	ldr	r2, [r3, #0]
   1061c:	f64a 238c 	movw	r3, #43660	; 0xaa8c
   10620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10624:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   10626:	f64a 239c 	movw	r3, #43676	; 0xaa9c
   1062a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062e:	881b      	ldrh	r3, [r3, #0]
   10630:	2b00      	cmp	r3, #0
   10632:	d001      	beq.n	10638 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   10634:	f7ff fd4e 	bl	100d4 <estimator_update_ir_estim>
  }
}
   10638:	bd80      	pop	{r7, pc}
   1063a:	bf00      	nop

0001063c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1063c:	b480      	push	{r7}
   1063e:	af00      	add	r7, sp, #0
  
}
   10640:	46bd      	mov	sp, r7
   10642:	f85d 7b04 	ldr.w	r7, [sp], #4
   10646:	4770      	bx	lr

00010648 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   10648:	b5b0      	push	{r4, r5, r7, lr}
   1064a:	b082      	sub	sp, #8
   1064c:	af00      	add	r7, sp, #0
   1064e:	4603      	mov	r3, r0
   10650:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   10652:	f24a 439c 	movw	r3, #42140	; 0xa49c
   10656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1065a:	781b      	ldrb	r3, [r3, #0]
   1065c:	2b01      	cmp	r3, #1
   1065e:	f040 80e0 	bne.w	10822 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10662:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   10666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066a:	781b      	ldrb	r3, [r3, #0]
   1066c:	2b02      	cmp	r3, #2
   1066e:	d168      	bne.n	10742 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   10670:	79fb      	ldrb	r3, [r7, #7]
   10672:	2b00      	cmp	r3, #0
   10674:	d013      	beq.n	1069e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   10676:	f240 130c 	movw	r3, #268	; 0x10c
   1067a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1067e:	881a      	ldrh	r2, [r3, #0]
   10680:	f64a 23d2 	movw	r3, #43730	; 0xaad2
   10684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10688:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1068a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   1068e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10692:	895a      	ldrh	r2, [r3, #10]
   10694:	f64a 23ce 	movw	r3, #43726	; 0xaace
   10698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1069c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1069e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   106a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a6:	895b      	ldrh	r3, [r3, #10]
   106a8:	b21a      	sxth	r2, r3
   106aa:	f64a 23ce 	movw	r3, #43726	; 0xaace
   106ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b2:	881b      	ldrh	r3, [r3, #0]
   106b4:	b21b      	sxth	r3, r3
   106b6:	1ad3      	subs	r3, r2, r3
   106b8:	4618      	mov	r0, r3
   106ba:	f002 fddf 	bl	1327c <__aeabi_i2f>
   106be:	4603      	mov	r3, r0
   106c0:	4618      	mov	r0, r3
   106c2:	f002 f99b 	bl	129fc <__aeabi_f2d>
   106c6:	4602      	mov	r2, r0
   106c8:	460b      	mov	r3, r1
   106ca:	4610      	mov	r0, r2
   106cc:	4619      	mov	r1, r3
   106ce:	f04f 0200 	mov.w	r2, #0
   106d2:	f04f 0300 	mov.w	r3, #0
   106d6:	f2c4 034e 	movt	r3, #16462	; 0x404e
   106da:	f002 f9e3 	bl	12aa4 <__aeabi_dmul>
   106de:	4602      	mov	r2, r0
   106e0:	460b      	mov	r3, r1
   106e2:	4610      	mov	r0, r2
   106e4:	4619      	mov	r1, r3
   106e6:	f04f 0200 	mov.w	r2, #0
   106ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   106ee:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   106f2:	f002 fb01 	bl	12cf8 <__aeabi_ddiv>
   106f6:	4602      	mov	r2, r0
   106f8:	460b      	mov	r3, r1
   106fa:	4610      	mov	r0, r2
   106fc:	4619      	mov	r1, r3
   106fe:	f002 fc6b 	bl	12fd8 <__aeabi_d2iz>
   10702:	4603      	mov	r3, r0
   10704:	b29b      	uxth	r3, r3
   10706:	b29a      	uxth	r2, r3
   10708:	f64a 23d2 	movw	r3, #43730	; 0xaad2
   1070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10710:	881b      	ldrh	r3, [r3, #0]
   10712:	b29b      	uxth	r3, r3
   10714:	4413      	add	r3, r2
   10716:	b29b      	uxth	r3, r3
   10718:	b29a      	uxth	r2, r3
   1071a:	f240 130c 	movw	r3, #268	; 0x10c
   1071e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10722:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   10724:	f240 130c 	movw	r3, #268	; 0x10c
   10728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1072c:	881b      	ldrh	r3, [r3, #0]
   1072e:	b21b      	sxth	r3, r3
   10730:	4618      	mov	r0, r3
   10732:	f002 fda3 	bl	1327c <__aeabi_i2f>
   10736:	4602      	mov	r2, r0
   10738:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
   1073c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10740:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10742:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   10746:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074a:	781b      	ldrb	r3, [r3, #0]
   1074c:	2b02      	cmp	r3, #2
   1074e:	d168      	bne.n	10822 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   10750:	79fb      	ldrb	r3, [r7, #7]
   10752:	2b00      	cmp	r3, #0
   10754:	d013      	beq.n	1077e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   10756:	f240 130a 	movw	r3, #266	; 0x10a
   1075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1075e:	881a      	ldrh	r2, [r3, #0]
   10760:	f64a 23d4 	movw	r3, #43732	; 0xaad4
   10764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10768:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1076a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   1076e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10772:	899a      	ldrh	r2, [r3, #12]
   10774:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   10778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1077c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1077e:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   10782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10786:	899b      	ldrh	r3, [r3, #12]
   10788:	b21a      	sxth	r2, r3
   1078a:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   1078e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10792:	881b      	ldrh	r3, [r3, #0]
   10794:	b21b      	sxth	r3, r3
   10796:	1ad3      	subs	r3, r2, r3
   10798:	4618      	mov	r0, r3
   1079a:	f002 fd6f 	bl	1327c <__aeabi_i2f>
   1079e:	4603      	mov	r3, r0
   107a0:	4618      	mov	r0, r3
   107a2:	f002 f92b 	bl	129fc <__aeabi_f2d>
   107a6:	4602      	mov	r2, r0
   107a8:	460b      	mov	r3, r1
   107aa:	4610      	mov	r0, r2
   107ac:	4619      	mov	r1, r3
   107ae:	f04f 0200 	mov.w	r2, #0
   107b2:	f04f 0300 	mov.w	r3, #0
   107b6:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   107ba:	f002 f973 	bl	12aa4 <__aeabi_dmul>
   107be:	4602      	mov	r2, r0
   107c0:	460b      	mov	r3, r1
   107c2:	4610      	mov	r0, r2
   107c4:	4619      	mov	r1, r3
   107c6:	f04f 0200 	mov.w	r2, #0
   107ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   107ce:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   107d2:	f002 fa91 	bl	12cf8 <__aeabi_ddiv>
   107d6:	4602      	mov	r2, r0
   107d8:	460b      	mov	r3, r1
   107da:	4610      	mov	r0, r2
   107dc:	4619      	mov	r1, r3
   107de:	f002 fbfb 	bl	12fd8 <__aeabi_d2iz>
   107e2:	4603      	mov	r3, r0
   107e4:	b29b      	uxth	r3, r3
   107e6:	b29a      	uxth	r2, r3
   107e8:	f64a 23d4 	movw	r3, #43732	; 0xaad4
   107ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f0:	881b      	ldrh	r3, [r3, #0]
   107f2:	b29b      	uxth	r3, r3
   107f4:	4413      	add	r3, r2
   107f6:	b29b      	uxth	r3, r3
   107f8:	b29a      	uxth	r2, r3
   107fa:	f240 130a 	movw	r3, #266	; 0x10a
   107fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10802:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   10804:	f240 130a 	movw	r3, #266	; 0x10a
   10808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080c:	881b      	ldrh	r3, [r3, #0]
   1080e:	b21b      	sxth	r3, r3
   10810:	4618      	mov	r0, r3
   10812:	f002 fd33 	bl	1327c <__aeabi_i2f>
   10816:	4602      	mov	r2, r0
   10818:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
   1081c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10820:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   10822:	f24a 439c 	movw	r3, #42140	; 0xa49c
   10826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1082a:	781b      	ldrb	r3, [r3, #0]
   1082c:	2b02      	cmp	r3, #2
   1082e:	f040 80da 	bne.w	109e6 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   10832:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   10836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083a:	781b      	ldrb	r3, [r3, #0]
   1083c:	2b02      	cmp	r3, #2
   1083e:	d165      	bne.n	1090c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   10840:	79fb      	ldrb	r3, [r7, #7]
   10842:	2b00      	cmp	r3, #0
   10844:	d013      	beq.n	1086e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   10846:	f240 1320 	movw	r3, #288	; 0x120
   1084a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084e:	681a      	ldr	r2, [r3, #0]
   10850:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   10854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10858:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1085a:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   1085e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10862:	895a      	ldrh	r2, [r3, #10]
   10864:	f64a 23ce 	movw	r3, #43726	; 0xaace
   10868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1086e:	f64a 23d8 	movw	r3, #43736	; 0xaad8
   10872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10876:	681b      	ldr	r3, [r3, #0]
   10878:	4618      	mov	r0, r3
   1087a:	f002 f8bf 	bl	129fc <__aeabi_f2d>
   1087e:	4604      	mov	r4, r0
   10880:	460d      	mov	r5, r1
   10882:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   10886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1088a:	895b      	ldrh	r3, [r3, #10]
   1088c:	b21a      	sxth	r2, r3
   1088e:	f64a 23ce 	movw	r3, #43726	; 0xaace
   10892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10896:	881b      	ldrh	r3, [r3, #0]
   10898:	b21b      	sxth	r3, r3
   1089a:	1ad3      	subs	r3, r2, r3
   1089c:	4618      	mov	r0, r3
   1089e:	f002 fced 	bl	1327c <__aeabi_i2f>
   108a2:	4603      	mov	r3, r0
   108a4:	4618      	mov	r0, r3
   108a6:	f002 f8a9 	bl	129fc <__aeabi_f2d>
   108aa:	4602      	mov	r2, r0
   108ac:	460b      	mov	r3, r1
   108ae:	4610      	mov	r0, r2
   108b0:	4619      	mov	r1, r3
   108b2:	a34f      	add	r3, pc, #316	; (adr r3, 109f0 <inflight_calib+0x3a8>)
   108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   108b8:	f002 f8f4 	bl	12aa4 <__aeabi_dmul>
   108bc:	4602      	mov	r2, r0
   108be:	460b      	mov	r3, r1
   108c0:	4610      	mov	r0, r2
   108c2:	4619      	mov	r1, r3
   108c4:	f04f 0200 	mov.w	r2, #0
   108c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   108cc:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   108d0:	f002 fa12 	bl	12cf8 <__aeabi_ddiv>
   108d4:	4602      	mov	r2, r0
   108d6:	460b      	mov	r3, r1
   108d8:	4620      	mov	r0, r4
   108da:	4629      	mov	r1, r5
   108dc:	f001 ff30 	bl	12740 <__adddf3>
   108e0:	4602      	mov	r2, r0
   108e2:	460b      	mov	r3, r1
   108e4:	4610      	mov	r0, r2
   108e6:	4619      	mov	r1, r3
   108e8:	f002 fbbe 	bl	13068 <__aeabi_d2f>
   108ec:	4602      	mov	r2, r0
   108ee:	f240 1320 	movw	r3, #288	; 0x120
   108f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f6:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   108f8:	f240 1320 	movw	r3, #288	; 0x120
   108fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10900:	681a      	ldr	r2, [r3, #0]
   10902:	f24a 43a8 	movw	r3, #42152	; 0xa4a8
   10906:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1090a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1090c:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   10910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10914:	781b      	ldrb	r3, [r3, #0]
   10916:	2b02      	cmp	r3, #2
   10918:	d165      	bne.n	109e6 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   1091a:	79fb      	ldrb	r3, [r7, #7]
   1091c:	2b00      	cmp	r3, #0
   1091e:	d013      	beq.n	10948 <inflight_calib+0x300>
        max_roll_init = max_roll;
   10920:	f240 1324 	movw	r3, #292	; 0x124
   10924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10928:	681a      	ldr	r2, [r3, #0]
   1092a:	f64a 23dc 	movw	r3, #43740	; 0xaadc
   1092e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10932:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   10934:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   10938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1093c:	899a      	ldrh	r2, [r3, #12]
   1093e:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   10942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10946:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10948:	f64a 23dc 	movw	r3, #43740	; 0xaadc
   1094c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10950:	681b      	ldr	r3, [r3, #0]
   10952:	4618      	mov	r0, r3
   10954:	f002 f852 	bl	129fc <__aeabi_f2d>
   10958:	4604      	mov	r4, r0
   1095a:	460d      	mov	r5, r1
   1095c:	f24a 53c0 	movw	r3, #42432	; 0xa5c0
   10960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10964:	899b      	ldrh	r3, [r3, #12]
   10966:	b21a      	sxth	r2, r3
   10968:	f64a 23d0 	movw	r3, #43728	; 0xaad0
   1096c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10970:	881b      	ldrh	r3, [r3, #0]
   10972:	b21b      	sxth	r3, r3
   10974:	1ad3      	subs	r3, r2, r3
   10976:	4618      	mov	r0, r3
   10978:	f002 fc80 	bl	1327c <__aeabi_i2f>
   1097c:	4603      	mov	r3, r0
   1097e:	4618      	mov	r0, r3
   10980:	f002 f83c 	bl	129fc <__aeabi_f2d>
   10984:	4602      	mov	r2, r0
   10986:	460b      	mov	r3, r1
   10988:	4610      	mov	r0, r2
   1098a:	4619      	mov	r1, r3
   1098c:	a31a      	add	r3, pc, #104	; (adr r3, 109f8 <inflight_calib+0x3b0>)
   1098e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10992:	f002 f887 	bl	12aa4 <__aeabi_dmul>
   10996:	4602      	mov	r2, r0
   10998:	460b      	mov	r3, r1
   1099a:	4610      	mov	r0, r2
   1099c:	4619      	mov	r1, r3
   1099e:	f04f 0200 	mov.w	r2, #0
   109a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   109a6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   109aa:	f002 f9a5 	bl	12cf8 <__aeabi_ddiv>
   109ae:	4602      	mov	r2, r0
   109b0:	460b      	mov	r3, r1
   109b2:	4620      	mov	r0, r4
   109b4:	4629      	mov	r1, r5
   109b6:	f001 fec3 	bl	12740 <__adddf3>
   109ba:	4602      	mov	r2, r0
   109bc:	460b      	mov	r3, r1
   109be:	4610      	mov	r0, r2
   109c0:	4619      	mov	r1, r3
   109c2:	f002 fb51 	bl	13068 <__aeabi_d2f>
   109c6:	4602      	mov	r2, r0
   109c8:	f240 1324 	movw	r3, #292	; 0x124
   109cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d0:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   109d2:	f240 1324 	movw	r3, #292	; 0x124
   109d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109da:	681a      	ldr	r2, [r3, #0]
   109dc:	f24a 43ac 	movw	r3, #42156	; 0xa4ac
   109e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e4:	601a      	str	r2, [r3, #0]
    }
  }
}
   109e6:	3708      	adds	r7, #8
   109e8:	46bd      	mov	sp, r7
   109ea:	bdb0      	pop	{r4, r5, r7, pc}
   109ec:	f3af 8000 	nop.w
   109f0:	9999999a 	.word	0x9999999a
   109f4:	3fb99999 	.word	0x3fb99999
   109f8:	9999999a 	.word	0x9999999a
   109fc:	bfc99999 	.word	0xbfc99999

00010a00 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   10a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10a04:	b08e      	sub	sp, #56	; 0x38
   10a06:	af00      	add	r7, sp, #0
   10a08:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10a0c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   10a10:	a357      	add	r3, pc, #348	; (adr r3, 10b70 <pp_atan2+0x170>)
   10a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   10a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10a1e:	f04f 0200 	mov.w	r2, #0
   10a22:	f04f 0300 	mov.w	r3, #0
   10a26:	f2c4 0308 	movt	r3, #16392	; 0x4008
   10a2a:	f002 f83b 	bl	12aa4 <__aeabi_dmul>
   10a2e:	4602      	mov	r2, r0
   10a30:	460b      	mov	r3, r1
   10a32:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   10a36:	e9d7 0100 	ldrd	r0, r1, [r7]
   10a3a:	f04f 0200 	mov.w	r2, #0
   10a3e:	f04f 0300 	mov.w	r3, #0
   10a42:	f002 faa1 	bl	12f88 <__aeabi_dcmplt>
   10a46:	4603      	mov	r3, r0
   10a48:	2b00      	cmp	r3, #0
   10a4a:	d009      	beq.n	10a60 <pp_atan2+0x60>
   10a4c:	a14a      	add	r1, pc, #296	; (adr r1, 10b78 <pp_atan2+0x178>)
   10a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
   10a52:	e9d7 2300 	ldrd	r2, r3, [r7]
   10a56:	f001 fe71 	bl	1273c <__aeabi_dsub>
   10a5a:	4602      	mov	r2, r0
   10a5c:	460b      	mov	r3, r1
   10a5e:	e008      	b.n	10a72 <pp_atan2+0x72>
   10a60:	e9d7 0100 	ldrd	r0, r1, [r7]
   10a64:	a344      	add	r3, pc, #272	; (adr r3, 10b78 <pp_atan2+0x178>)
   10a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a6a:	f001 fe69 	bl	12740 <__adddf3>
   10a6e:	4602      	mov	r2, r0
   10a70:	460b      	mov	r3, r1
   10a72:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   10a76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10a7a:	f04f 0200 	mov.w	r2, #0
   10a7e:	f04f 0300 	mov.w	r3, #0
   10a82:	f002 fa9f 	bl	12fc4 <__aeabi_dcmpgt>
   10a86:	4603      	mov	r3, r0
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d02a      	beq.n	10ae2 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   10a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10a94:	f001 fe52 	bl	1273c <__aeabi_dsub>
   10a98:	4602      	mov	r2, r0
   10a9a:	460b      	mov	r3, r1
   10a9c:	4690      	mov	r8, r2
   10a9e:	4699      	mov	r9, r3
   10aa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10aa8:	f001 fe4a 	bl	12740 <__adddf3>
   10aac:	4602      	mov	r2, r0
   10aae:	460b      	mov	r3, r1
   10ab0:	4640      	mov	r0, r8
   10ab2:	4649      	mov	r1, r9
   10ab4:	f002 f920 	bl	12cf8 <__aeabi_ddiv>
   10ab8:	4602      	mov	r2, r0
   10aba:	460b      	mov	r3, r1
   10abc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   10ac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10ac4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10ac8:	f001 ffec 	bl	12aa4 <__aeabi_dmul>
   10acc:	4602      	mov	r2, r0
   10ace:	460b      	mov	r3, r1
   10ad0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10ad4:	f001 fe32 	bl	1273c <__aeabi_dsub>
   10ad8:	4602      	mov	r2, r0
   10ada:	460b      	mov	r3, r1
   10adc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   10ae0:	e029      	b.n	10b36 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   10ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10aea:	f001 fe29 	bl	12740 <__adddf3>
   10aee:	4602      	mov	r2, r0
   10af0:	460b      	mov	r3, r1
   10af2:	4690      	mov	r8, r2
   10af4:	4699      	mov	r9, r3
   10af6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10afa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10afe:	f001 fe1d 	bl	1273c <__aeabi_dsub>
   10b02:	4602      	mov	r2, r0
   10b04:	460b      	mov	r3, r1
   10b06:	4640      	mov	r0, r8
   10b08:	4649      	mov	r1, r9
   10b0a:	f002 f8f5 	bl	12cf8 <__aeabi_ddiv>
   10b0e:	4602      	mov	r2, r0
   10b10:	460b      	mov	r3, r1
   10b12:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   10b16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10b1e:	f001 ffc1 	bl	12aa4 <__aeabi_dmul>
   10b22:	4602      	mov	r2, r0
   10b24:	460b      	mov	r3, r1
   10b26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   10b2a:	f001 fe07 	bl	1273c <__aeabi_dsub>
   10b2e:	4602      	mov	r2, r0
   10b30:	460b      	mov	r3, r1
   10b32:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   10b36:	e9d7 0100 	ldrd	r0, r1, [r7]
   10b3a:	f04f 0200 	mov.w	r2, #0
   10b3e:	f04f 0300 	mov.w	r3, #0
   10b42:	f002 fa21 	bl	12f88 <__aeabi_dcmplt>
   10b46:	4603      	mov	r3, r0
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d004      	beq.n	10b56 <pp_atan2+0x156>
		return (-angle);
   10b4c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10b54:	e001      	b.n	10b5a <pp_atan2+0x15a>
	else
		return angle;
   10b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   10b5a:	4622      	mov	r2, r4
   10b5c:	462b      	mov	r3, r5
}
   10b5e:	4610      	mov	r0, r2
   10b60:	4619      	mov	r1, r3
   10b62:	3738      	adds	r7, #56	; 0x38
   10b64:	46bd      	mov	sp, r7
   10b66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   10b6a:	bf00      	nop
   10b6c:	f3af 8000 	nop.w
   10b70:	54442d18 	.word	0x54442d18
   10b74:	3fe921fb 	.word	0x3fe921fb
   10b78:	d9d7bdbb 	.word	0xd9d7bdbb
   10b7c:	3ddb7cdf 	.word	0x3ddb7cdf

00010b80 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   10b80:	b5b0      	push	{r4, r5, r7, lr}
   10b82:	b08c      	sub	sp, #48	; 0x30
   10b84:	af00      	add	r7, sp, #0
   10b86:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   10b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
   10b8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10b92:	2301      	movs	r3, #1
   10b94:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   10b96:	e00a      	b.n	10bae <pp_sin+0x2e>
   10b98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b9c:	a35a      	add	r3, pc, #360	; (adr r3, 10d08 <pp_sin+0x188>)
   10b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ba2:	f001 fdcd 	bl	12740 <__adddf3>
   10ba6:	4602      	mov	r2, r0
   10ba8:	460b      	mov	r3, r1
   10baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bb2:	a357      	add	r3, pc, #348	; (adr r3, 10d10 <pp_sin+0x190>)
   10bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bb8:	f002 f9e6 	bl	12f88 <__aeabi_dcmplt>
   10bbc:	4603      	mov	r3, r0
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d1ea      	bne.n	10b98 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   10bc2:	e00a      	b.n	10bda <pp_sin+0x5a>
   10bc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bc8:	a34f      	add	r3, pc, #316	; (adr r3, 10d08 <pp_sin+0x188>)
   10bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bce:	f001 fdb5 	bl	1273c <__aeabi_dsub>
   10bd2:	4602      	mov	r2, r0
   10bd4:	460b      	mov	r3, r1
   10bd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10bda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bde:	a34e      	add	r3, pc, #312	; (adr r3, 10d18 <pp_sin+0x198>)
   10be0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10be4:	f002 f9ee 	bl	12fc4 <__aeabi_dcmpgt>
   10be8:	4603      	mov	r3, r0
   10bea:	2b00      	cmp	r3, #0
   10bec:	d1ea      	bne.n	10bc4 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   10bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bf2:	a34b      	add	r3, pc, #300	; (adr r3, 10d20 <pp_sin+0x1a0>)
   10bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bf8:	f002 f9e4 	bl	12fc4 <__aeabi_dcmpgt>
   10bfc:	4603      	mov	r3, r0
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d00d      	beq.n	10c1e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   10c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c06:	a348      	add	r3, pc, #288	; (adr r3, 10d28 <pp_sin+0x1a8>)
   10c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c0c:	f001 fd96 	bl	1273c <__aeabi_dsub>
   10c10:	4602      	mov	r2, r0
   10c12:	460b      	mov	r3, r1
   10c14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   10c18:	f04f 33ff 	mov.w	r3, #4294967295
   10c1c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   10c1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c22:	a343      	add	r3, pc, #268	; (adr r3, 10d30 <pp_sin+0x1b0>)
   10c24:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c28:	f002 f866 	bl	12cf8 <__aeabi_ddiv>
   10c2c:	4602      	mov	r2, r0
   10c2e:	460b      	mov	r3, r1
   10c30:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10c3c:	f001 ff32 	bl	12aa4 <__aeabi_dmul>
   10c40:	4602      	mov	r2, r0
   10c42:	460b      	mov	r3, r1
   10c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   10c48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10c4c:	a33a      	add	r3, pc, #232	; (adr r3, 10d38 <pp_sin+0x1b8>)
   10c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c52:	f001 ff27 	bl	12aa4 <__aeabi_dmul>
   10c56:	4602      	mov	r2, r0
   10c58:	460b      	mov	r3, r1
	      - .00467376557) * q2
   10c5a:	4610      	mov	r0, r2
   10c5c:	4619      	mov	r1, r3
   10c5e:	a338      	add	r3, pc, #224	; (adr r3, 10d40 <pp_sin+0x1c0>)
   10c60:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c64:	f001 fd6a 	bl	1273c <__aeabi_dsub>
   10c68:	4602      	mov	r2, r0
   10c6a:	460b      	mov	r3, r1
   10c6c:	4610      	mov	r0, r2
   10c6e:	4619      	mov	r1, r3
   10c70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10c74:	f001 ff16 	bl	12aa4 <__aeabi_dmul>
   10c78:	4602      	mov	r2, r0
   10c7a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   10c7c:	4610      	mov	r0, r2
   10c7e:	4619      	mov	r1, r3
   10c80:	a331      	add	r3, pc, #196	; (adr r3, 10d48 <pp_sin+0x1c8>)
   10c82:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c86:	f001 fd5b 	bl	12740 <__adddf3>
   10c8a:	4602      	mov	r2, r0
   10c8c:	460b      	mov	r3, r1
   10c8e:	4610      	mov	r0, r2
   10c90:	4619      	mov	r1, r3
   10c92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10c96:	f001 ff05 	bl	12aa4 <__aeabi_dmul>
   10c9a:	4602      	mov	r2, r0
   10c9c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   10c9e:	4610      	mov	r0, r2
   10ca0:	4619      	mov	r1, r3
   10ca2:	a32b      	add	r3, pc, #172	; (adr r3, 10d50 <pp_sin+0x1d0>)
   10ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ca8:	f001 fd48 	bl	1273c <__aeabi_dsub>
   10cac:	4602      	mov	r2, r0
   10cae:	460b      	mov	r3, r1
   10cb0:	4610      	mov	r0, r2
   10cb2:	4619      	mov	r1, r3
   10cb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10cb8:	f001 fef4 	bl	12aa4 <__aeabi_dmul>
   10cbc:	4602      	mov	r2, r0
   10cbe:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   10cc0:	4610      	mov	r0, r2
   10cc2:	4619      	mov	r1, r3
   10cc4:	a324      	add	r3, pc, #144	; (adr r3, 10d58 <pp_sin+0x1d8>)
   10cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cca:	f001 fd39 	bl	12740 <__adddf3>
   10cce:	4602      	mov	r2, r0
   10cd0:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   10cd2:	4610      	mov	r0, r2
   10cd4:	4619      	mov	r1, r3
   10cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10cda:	f001 fee3 	bl	12aa4 <__aeabi_dmul>
   10cde:	4602      	mov	r2, r0
   10ce0:	460b      	mov	r3, r1
   10ce2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   10ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ce8:	2b00      	cmp	r3, #0
   10cea:	da04      	bge.n	10cf6 <pp_sin+0x176>
   10cec:	68bc      	ldr	r4, [r7, #8]
   10cee:	68fb      	ldr	r3, [r7, #12]
   10cf0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10cf4:	e001      	b.n	10cfa <pp_sin+0x17a>
   10cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   10cfa:	4622      	mov	r2, r4
   10cfc:	462b      	mov	r3, r5
}
   10cfe:	4610      	mov	r0, r2
   10d00:	4619      	mov	r1, r3
   10d02:	3730      	adds	r7, #48	; 0x30
   10d04:	46bd      	mov	sp, r7
   10d06:	bdb0      	pop	{r4, r5, r7, pc}
   10d08:	54442d18 	.word	0x54442d18
   10d0c:	401921fb 	.word	0x401921fb
   10d10:	54442d18 	.word	0x54442d18
   10d14:	bff921fb 	.word	0xbff921fb
   10d18:	7f3321d2 	.word	0x7f3321d2
   10d1c:	4012d97c 	.word	0x4012d97c
   10d20:	54442d18 	.word	0x54442d18
   10d24:	3ff921fb 	.word	0x3ff921fb
   10d28:	54442d18 	.word	0x54442d18
   10d2c:	400921fb 	.word	0x400921fb
   10d30:	5443d6f4 	.word	0x5443d6f4
   10d34:	3ff921fb 	.word	0x3ff921fb
   10d38:	48a890af 	.word	0x48a890af
   10d3c:	3f23daf7 	.word	0x3f23daf7
   10d40:	645b6d0e 	.word	0x645b6d0e
   10d44:	3f7324cc 	.word	0x3f7324cc
   10d48:	f65619a5 	.word	0xf65619a5
   10d4c:	3fb4668a 	.word	0x3fb4668a
   10d50:	16acf9cd 	.word	0x16acf9cd
   10d54:	3fe4abbc 	.word	0x3fe4abbc
   10d58:	520817f7 	.word	0x520817f7
   10d5c:	3ff921fb 	.word	0x3ff921fb

00010d60 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   10d60:	b480      	push	{r7}
   10d62:	b083      	sub	sp, #12
   10d64:	af00      	add	r7, sp, #0
   10d66:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   10d6a:	4610      	mov	r0, r2
   10d6c:	4619      	mov	r1, r3
   10d6e:	370c      	adds	r7, #12
   10d70:	46bd      	mov	sp, r7
   10d72:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d76:	4770      	bx	lr

00010d78 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   10d78:	b480      	push	{r7}
   10d7a:	b083      	sub	sp, #12
   10d7c:	af00      	add	r7, sp, #0
   10d7e:	4603      	mov	r3, r0
   10d80:	6039      	str	r1, [r7, #0]
   10d82:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10d84:	79fa      	ldrb	r2, [r7, #7]
   10d86:	f64a 23f0 	movw	r3, #43760	; 0xaaf0
   10d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d8e:	6839      	ldr	r1, [r7, #0]
   10d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10d94:	370c      	adds	r7, #12
   10d96:	46bd      	mov	sp, r7
   10d98:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d9c:	4770      	bx	lr
   10d9e:	bf00      	nop

00010da0 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   10da0:	b480      	push	{r7}
   10da2:	b083      	sub	sp, #12
   10da4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10da6:	f248 0315 	movw	r3, #32789	; 0x8015
   10daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dae:	2200      	movs	r2, #0
   10db0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10db2:	f248 0314 	movw	r3, #32788	; 0x8014
   10db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dba:	2200      	movs	r2, #0
   10dbc:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   10dbe:	f248 0307 	movw	r3, #32775	; 0x8007
   10dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dc6:	22c0      	movs	r2, #192	; 0xc0
   10dc8:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   10dca:	f248 0306 	movw	r3, #32774	; 0x8006
   10dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dd2:	22cf      	movs	r2, #207	; 0xcf
   10dd4:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10dd6:	2300      	movs	r3, #0
   10dd8:	71fb      	strb	r3, [r7, #7]
   10dda:	e00a      	b.n	10df2 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   10ddc:	79fa      	ldrb	r2, [r7, #7]
   10dde:	f64a 23f0 	movw	r3, #43760	; 0xaaf0
   10de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de6:	2100      	movs	r1, #0
   10de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10dec:	79fb      	ldrb	r3, [r7, #7]
   10dee:	3301      	adds	r3, #1
   10df0:	71fb      	strb	r3, [r7, #7]
   10df2:	79fb      	ldrb	r3, [r7, #7]
   10df4:	2b07      	cmp	r3, #7
   10df6:	d9f1      	bls.n	10ddc <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   10df8:	370c      	adds	r7, #12
   10dfa:	46bd      	mov	sp, r7
   10dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e00:	4770      	bx	lr
   10e02:	bf00      	nop

00010e04 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   10e04:	b480      	push	{r7}
   10e06:	b083      	sub	sp, #12
   10e08:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   10e0a:	f248 0326 	movw	r3, #32806	; 0x8026
   10e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e12:	881b      	ldrh	r3, [r3, #0]
   10e14:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   10e16:	f64a 334c 	movw	r3, #43852	; 0xab4c
   10e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1e:	881b      	ldrh	r3, [r3, #0]
   10e20:	88fa      	ldrh	r2, [r7, #6]
   10e22:	1ad3      	subs	r3, r2, r3
   10e24:	80bb      	strh	r3, [r7, #4]
  last		= this;
   10e26:	f64a 334c 	movw	r3, #43852	; 0xab4c
   10e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e2e:	88fa      	ldrh	r2, [r7, #6]
   10e30:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   10e32:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e3a:	781b      	ldrb	r3, [r3, #0]
   10e3c:	2b00      	cmp	r3, #0
   10e3e:	d11e      	bne.n	10e7e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   10e40:	f248 0324 	movw	r3, #32804	; 0x8024
   10e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e48:	781b      	ldrb	r3, [r3, #0]
   10e4a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   10e4c:	f64a 334f 	movw	r3, #43855	; 0xab4f
   10e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e54:	781b      	ldrb	r3, [r3, #0]
   10e56:	78fa      	ldrb	r2, [r7, #3]
   10e58:	1ad3      	subs	r3, r2, r3
   10e5a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   10e5c:	f64a 334f 	movw	r3, #43855	; 0xab4f
   10e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e64:	78fa      	ldrb	r2, [r7, #3]
   10e66:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   10e68:	78bb      	ldrb	r3, [r7, #2]
   10e6a:	2b6d      	cmp	r3, #109	; 0x6d
   10e6c:	d906      	bls.n	10e7c <__vector_34+0x78>
      state = 1;
   10e6e:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e76:	2201      	movs	r2, #1
   10e78:	701a      	strb	r2, [r3, #0]
   10e7a:	e053      	b.n	10f24 <__vector_34+0x120>
   10e7c:	e052      	b.n	10f24 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   10e7e:	88bb      	ldrh	r3, [r7, #4]
   10e80:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   10e84:	d304      	bcc.n	10e90 <__vector_34+0x8c>
   10e86:	88ba      	ldrh	r2, [r7, #4]
   10e88:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   10e8c:	429a      	cmp	r2, r3
   10e8e:	d911      	bls.n	10eb4 <__vector_34+0xb0>
      RestartPpmCycle();
   10e90:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e98:	2200      	movs	r2, #0
   10e9a:	701a      	strb	r2, [r3, #0]
   10e9c:	f248 0324 	movw	r3, #32804	; 0x8024
   10ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	b2da      	uxtb	r2, r3
   10ea8:	f64a 334f 	movw	r3, #43855	; 0xab4f
   10eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb0:	701a      	strb	r2, [r3, #0]
   10eb2:	e038      	b.n	10f26 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   10eb4:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ebc:	781b      	ldrb	r3, [r3, #0]
   10ebe:	1e5a      	subs	r2, r3, #1
   10ec0:	f64a 3310 	movw	r3, #43792	; 0xab10
   10ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec8:	88b9      	ldrh	r1, [r7, #4]
   10eca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   10ece:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed6:	781b      	ldrb	r3, [r3, #0]
   10ed8:	2b08      	cmp	r3, #8
   10eda:	d917      	bls.n	10f0c <__vector_34+0x108>
      ppm_valid	= 1;
   10edc:	f64a 334b 	movw	r3, #43851	; 0xab4b
   10ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee4:	2201      	movs	r2, #1
   10ee6:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   10ee8:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef0:	2200      	movs	r2, #0
   10ef2:	701a      	strb	r2, [r3, #0]
   10ef4:	f248 0324 	movw	r3, #32804	; 0x8024
   10ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10efc:	781b      	ldrb	r3, [r3, #0]
   10efe:	b2da      	uxtb	r2, r3
   10f00:	f64a 334f 	movw	r3, #43855	; 0xab4f
   10f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f08:	701a      	strb	r2, [r3, #0]
   10f0a:	e00c      	b.n	10f26 <__vector_34+0x122>
    } else 
      state++;
   10f0c:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f14:	781b      	ldrb	r3, [r3, #0]
   10f16:	3301      	adds	r3, #1
   10f18:	b2da      	uxtb	r2, r3
   10f1a:	f64a 334e 	movw	r3, #43854	; 0xab4e
   10f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f22:	701a      	strb	r2, [r3, #0]
  }
  return;
   10f24:	bf00      	nop
}
   10f26:	370c      	adds	r7, #12
   10f28:	46bd      	mov	sp, r7
   10f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f2e:	4770      	bx	lr

00010f30 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   10f30:	b590      	push	{r4, r7, lr}
   10f32:	b083      	sub	sp, #12
   10f34:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   10f36:	f64a 3310 	movw	r3, #43792	; 0xab10
   10f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3e:	881b      	ldrh	r3, [r3, #0]
   10f40:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   10f44:	b29b      	uxth	r3, r3
   10f46:	80fb      	strh	r3, [r7, #6]
   10f48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10f4c:	4618      	mov	r0, r3
   10f4e:	f002 f995 	bl	1327c <__aeabi_i2f>
   10f52:	4603      	mov	r3, r0
   10f54:	4618      	mov	r0, r3
   10f56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10f5a:	f002 f9e3 	bl	13324 <__aeabi_fmul>
   10f5e:	4603      	mov	r3, r0
   10f60:	4618      	mov	r0, r3
   10f62:	f002 fba5 	bl	136b0 <__aeabi_f2iz>
   10f66:	4603      	mov	r3, r0
   10f68:	b29a      	uxth	r2, r3
   10f6a:	f64a 3324 	movw	r3, #43812	; 0xab24
   10f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f72:	801a      	strh	r2, [r3, #0]
   10f74:	f64a 3324 	movw	r3, #43812	; 0xab24
   10f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7c:	881b      	ldrh	r3, [r3, #0]
   10f7e:	b21b      	sxth	r3, r3
   10f80:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10f84:	dd07      	ble.n	10f96 <last_radio_from_ppm+0x66>
   10f86:	f64a 3324 	movw	r3, #43812	; 0xab24
   10f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   10f92:	801a      	strh	r2, [r3, #0]
   10f94:	e00d      	b.n	10fb2 <last_radio_from_ppm+0x82>
   10f96:	f64a 3324 	movw	r3, #43812	; 0xab24
   10f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f9e:	881b      	ldrh	r3, [r3, #0]
   10fa0:	b21b      	sxth	r3, r3
   10fa2:	2b00      	cmp	r3, #0
   10fa4:	da05      	bge.n	10fb2 <last_radio_from_ppm+0x82>
   10fa6:	f64a 3324 	movw	r3, #43812	; 0xab24
   10faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fae:	2200      	movs	r2, #0
   10fb0:	801a      	strh	r2, [r3, #0]
   10fb2:	f64a 3310 	movw	r3, #43792	; 0xab10
   10fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fba:	885b      	ldrh	r3, [r3, #2]
   10fbc:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   10fc0:	b29b      	uxth	r3, r3
   10fc2:	80fb      	strh	r3, [r7, #6]
   10fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10fc8:	4618      	mov	r0, r3
   10fca:	f002 f957 	bl	1327c <__aeabi_i2f>
   10fce:	4603      	mov	r3, r0
   10fd0:	4618      	mov	r0, r3
   10fd2:	f002 fb6d 	bl	136b0 <__aeabi_f2iz>
   10fd6:	4603      	mov	r3, r0
   10fd8:	b29a      	uxth	r2, r3
   10fda:	f64a 3324 	movw	r3, #43812	; 0xab24
   10fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe2:	805a      	strh	r2, [r3, #2]
   10fe4:	f64a 3324 	movw	r3, #43812	; 0xab24
   10fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fec:	885b      	ldrh	r3, [r3, #2]
   10fee:	b21b      	sxth	r3, r3
   10ff0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10ff4:	dd07      	ble.n	11006 <last_radio_from_ppm+0xd6>
   10ff6:	f64a 3324 	movw	r3, #43812	; 0xab24
   10ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ffe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11002:	805a      	strh	r2, [r3, #2]
   11004:	e00f      	b.n	11026 <last_radio_from_ppm+0xf6>
   11006:	f64a 3324 	movw	r3, #43812	; 0xab24
   1100a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100e:	885b      	ldrh	r3, [r3, #2]
   11010:	b21b      	sxth	r3, r3
   11012:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11016:	da06      	bge.n	11026 <last_radio_from_ppm+0xf6>
   11018:	f64a 3324 	movw	r3, #43812	; 0xab24
   1101c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11020:	f64d 2280 	movw	r2, #55936	; 0xda80
   11024:	805a      	strh	r2, [r3, #2]
   11026:	f64a 3310 	movw	r3, #43792	; 0xab10
   1102a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1102e:	889b      	ldrh	r3, [r3, #4]
   11030:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11034:	b29b      	uxth	r3, r3
   11036:	80fb      	strh	r3, [r7, #6]
   11038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1103c:	4618      	mov	r0, r3
   1103e:	f002 f91d 	bl	1327c <__aeabi_i2f>
   11042:	4603      	mov	r3, r0
   11044:	4618      	mov	r0, r3
   11046:	f002 fb33 	bl	136b0 <__aeabi_f2iz>
   1104a:	4603      	mov	r3, r0
   1104c:	b29a      	uxth	r2, r3
   1104e:	f64a 3324 	movw	r3, #43812	; 0xab24
   11052:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11056:	809a      	strh	r2, [r3, #4]
   11058:	f64a 3324 	movw	r3, #43812	; 0xab24
   1105c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11060:	889b      	ldrh	r3, [r3, #4]
   11062:	b21b      	sxth	r3, r3
   11064:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11068:	dd07      	ble.n	1107a <last_radio_from_ppm+0x14a>
   1106a:	f64a 3324 	movw	r3, #43812	; 0xab24
   1106e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11072:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11076:	809a      	strh	r2, [r3, #4]
   11078:	e00f      	b.n	1109a <last_radio_from_ppm+0x16a>
   1107a:	f64a 3324 	movw	r3, #43812	; 0xab24
   1107e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11082:	889b      	ldrh	r3, [r3, #4]
   11084:	b21b      	sxth	r3, r3
   11086:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1108a:	da06      	bge.n	1109a <last_radio_from_ppm+0x16a>
   1108c:	f64a 3324 	movw	r3, #43812	; 0xab24
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	f64d 2280 	movw	r2, #55936	; 0xda80
   11098:	809a      	strh	r2, [r3, #4]
   1109a:	f64a 3310 	movw	r3, #43792	; 0xab10
   1109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a2:	88db      	ldrh	r3, [r3, #6]
   110a4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   110a8:	b29b      	uxth	r3, r3
   110aa:	80fb      	strh	r3, [r7, #6]
   110ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   110b0:	4618      	mov	r0, r3
   110b2:	f002 f8e3 	bl	1327c <__aeabi_i2f>
   110b6:	4603      	mov	r3, r0
   110b8:	4618      	mov	r0, r3
   110ba:	f002 faf9 	bl	136b0 <__aeabi_f2iz>
   110be:	4603      	mov	r3, r0
   110c0:	b29a      	uxth	r2, r3
   110c2:	f64a 3324 	movw	r3, #43812	; 0xab24
   110c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ca:	80da      	strh	r2, [r3, #6]
   110cc:	f64a 3324 	movw	r3, #43812	; 0xab24
   110d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d4:	88db      	ldrh	r3, [r3, #6]
   110d6:	b21b      	sxth	r3, r3
   110d8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   110dc:	dd07      	ble.n	110ee <last_radio_from_ppm+0x1be>
   110de:	f64a 3324 	movw	r3, #43812	; 0xab24
   110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   110ea:	80da      	strh	r2, [r3, #6]
   110ec:	e00f      	b.n	1110e <last_radio_from_ppm+0x1de>
   110ee:	f64a 3324 	movw	r3, #43812	; 0xab24
   110f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f6:	88db      	ldrh	r3, [r3, #6]
   110f8:	b21b      	sxth	r3, r3
   110fa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   110fe:	da06      	bge.n	1110e <last_radio_from_ppm+0x1de>
   11100:	f64a 3324 	movw	r3, #43812	; 0xab24
   11104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11108:	f64d 2280 	movw	r2, #55936	; 0xda80
   1110c:	80da      	strh	r2, [r3, #6]
   1110e:	f64a 3310 	movw	r3, #43792	; 0xab10
   11112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11116:	891b      	ldrh	r3, [r3, #8]
   11118:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1111c:	b29b      	uxth	r3, r3
   1111e:	80fb      	strh	r3, [r7, #6]
   11120:	f64a 3338 	movw	r3, #43832	; 0xab38
   11124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11128:	891b      	ldrh	r3, [r3, #8]
   1112a:	b21b      	sxth	r3, r3
   1112c:	4618      	mov	r0, r3
   1112e:	f002 f8a5 	bl	1327c <__aeabi_i2f>
   11132:	4604      	mov	r4, r0
   11134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11138:	4618      	mov	r0, r3
   1113a:	f002 f89f 	bl	1327c <__aeabi_i2f>
   1113e:	4603      	mov	r3, r0
   11140:	4618      	mov	r0, r3
   11142:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11146:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1114a:	f002 f8eb 	bl	13324 <__aeabi_fmul>
   1114e:	4603      	mov	r3, r0
   11150:	4620      	mov	r0, r4
   11152:	4619      	mov	r1, r3
   11154:	f001 ffde 	bl	13114 <__addsf3>
   11158:	4603      	mov	r3, r0
   1115a:	4618      	mov	r0, r3
   1115c:	f002 faa8 	bl	136b0 <__aeabi_f2iz>
   11160:	4603      	mov	r3, r0
   11162:	b29a      	uxth	r2, r3
   11164:	f64a 3338 	movw	r3, #43832	; 0xab38
   11168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116c:	811a      	strh	r2, [r3, #8]
   1116e:	f64a 3310 	movw	r3, #43792	; 0xab10
   11172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11176:	895b      	ldrh	r3, [r3, #10]
   11178:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1117c:	b29b      	uxth	r3, r3
   1117e:	80fb      	strh	r3, [r7, #6]
   11180:	f64a 3338 	movw	r3, #43832	; 0xab38
   11184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11188:	895b      	ldrh	r3, [r3, #10]
   1118a:	b21b      	sxth	r3, r3
   1118c:	4618      	mov	r0, r3
   1118e:	f002 f875 	bl	1327c <__aeabi_i2f>
   11192:	4604      	mov	r4, r0
   11194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11198:	4618      	mov	r0, r3
   1119a:	f002 f86f 	bl	1327c <__aeabi_i2f>
   1119e:	4603      	mov	r3, r0
   111a0:	4618      	mov	r0, r3
   111a2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   111a6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   111aa:	f002 f8bb 	bl	13324 <__aeabi_fmul>
   111ae:	4603      	mov	r3, r0
   111b0:	4620      	mov	r0, r4
   111b2:	4619      	mov	r1, r3
   111b4:	f001 ffae 	bl	13114 <__addsf3>
   111b8:	4603      	mov	r3, r0
   111ba:	4618      	mov	r0, r3
   111bc:	f002 fa78 	bl	136b0 <__aeabi_f2iz>
   111c0:	4603      	mov	r3, r0
   111c2:	b29a      	uxth	r2, r3
   111c4:	f64a 3338 	movw	r3, #43832	; 0xab38
   111c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111cc:	815a      	strh	r2, [r3, #10]
   111ce:	f64a 3310 	movw	r3, #43792	; 0xab10
   111d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d6:	899b      	ldrh	r3, [r3, #12]
   111d8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   111dc:	b29b      	uxth	r3, r3
   111de:	80fb      	strh	r3, [r7, #6]
   111e0:	f64a 3338 	movw	r3, #43832	; 0xab38
   111e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e8:	899b      	ldrh	r3, [r3, #12]
   111ea:	b21b      	sxth	r3, r3
   111ec:	4618      	mov	r0, r3
   111ee:	f002 f845 	bl	1327c <__aeabi_i2f>
   111f2:	4604      	mov	r4, r0
   111f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   111f8:	4618      	mov	r0, r3
   111fa:	f002 f83f 	bl	1327c <__aeabi_i2f>
   111fe:	4603      	mov	r3, r0
   11200:	4618      	mov	r0, r3
   11202:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11206:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1120a:	f002 f88b 	bl	13324 <__aeabi_fmul>
   1120e:	4603      	mov	r3, r0
   11210:	4620      	mov	r0, r4
   11212:	4619      	mov	r1, r3
   11214:	f001 ff7e 	bl	13114 <__addsf3>
   11218:	4603      	mov	r3, r0
   1121a:	4618      	mov	r0, r3
   1121c:	f002 fa48 	bl	136b0 <__aeabi_f2iz>
   11220:	4603      	mov	r3, r0
   11222:	b29a      	uxth	r2, r3
   11224:	f64a 3338 	movw	r3, #43832	; 0xab38
   11228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122c:	819a      	strh	r2, [r3, #12]
   1122e:	f64a 3310 	movw	r3, #43792	; 0xab10
   11232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11236:	89db      	ldrh	r3, [r3, #14]
   11238:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1123c:	b29b      	uxth	r3, r3
   1123e:	80fb      	strh	r3, [r7, #6]
   11240:	f64a 3338 	movw	r3, #43832	; 0xab38
   11244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11248:	89db      	ldrh	r3, [r3, #14]
   1124a:	b21b      	sxth	r3, r3
   1124c:	4618      	mov	r0, r3
   1124e:	f002 f815 	bl	1327c <__aeabi_i2f>
   11252:	4604      	mov	r4, r0
   11254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11258:	4618      	mov	r0, r3
   1125a:	f002 f80f 	bl	1327c <__aeabi_i2f>
   1125e:	4603      	mov	r3, r0
   11260:	4618      	mov	r0, r3
   11262:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   11266:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1126a:	f002 f85b 	bl	13324 <__aeabi_fmul>
   1126e:	4603      	mov	r3, r0
   11270:	4620      	mov	r0, r4
   11272:	4619      	mov	r1, r3
   11274:	f001 ff4e 	bl	13114 <__addsf3>
   11278:	4603      	mov	r3, r0
   1127a:	4618      	mov	r0, r3
   1127c:	f002 fa18 	bl	136b0 <__aeabi_f2iz>
   11280:	4603      	mov	r3, r0
   11282:	b29a      	uxth	r2, r3
   11284:	f64a 3338 	movw	r3, #43832	; 0xab38
   11288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128c:	81da      	strh	r2, [r3, #14]
   1128e:	f64a 3310 	movw	r3, #43792	; 0xab10
   11292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11296:	8a1b      	ldrh	r3, [r3, #16]
   11298:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1129c:	b29b      	uxth	r3, r3
   1129e:	80fb      	strh	r3, [r7, #6]
   112a0:	f64a 3338 	movw	r3, #43832	; 0xab38
   112a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a8:	8a1b      	ldrh	r3, [r3, #16]
   112aa:	b21b      	sxth	r3, r3
   112ac:	4618      	mov	r0, r3
   112ae:	f001 ffe5 	bl	1327c <__aeabi_i2f>
   112b2:	4604      	mov	r4, r0
   112b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   112b8:	4618      	mov	r0, r3
   112ba:	f001 ffdf 	bl	1327c <__aeabi_i2f>
   112be:	4603      	mov	r3, r0
   112c0:	4618      	mov	r0, r3
   112c2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   112c6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   112ca:	f002 f82b 	bl	13324 <__aeabi_fmul>
   112ce:	4603      	mov	r3, r0
   112d0:	4620      	mov	r0, r4
   112d2:	4619      	mov	r1, r3
   112d4:	f001 ff1e 	bl	13114 <__addsf3>
   112d8:	4603      	mov	r3, r0
   112da:	4618      	mov	r0, r3
   112dc:	f002 f9e8 	bl	136b0 <__aeabi_f2iz>
   112e0:	4603      	mov	r3, r0
   112e2:	b29a      	uxth	r2, r3
   112e4:	f64a 3338 	movw	r3, #43832	; 0xab38
   112e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ec:	821a      	strh	r2, [r3, #16]
   112ee:	f64a 3350 	movw	r3, #43856	; 0xab50
   112f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f6:	781b      	ldrb	r3, [r3, #0]
   112f8:	3301      	adds	r3, #1
   112fa:	b2da      	uxtb	r2, r3
   112fc:	f64a 3350 	movw	r3, #43856	; 0xab50
   11300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11304:	701a      	strb	r2, [r3, #0]
   11306:	f64a 3350 	movw	r3, #43856	; 0xab50
   1130a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1130e:	781b      	ldrb	r3, [r3, #0]
   11310:	2b0a      	cmp	r3, #10
   11312:	f040 8101 	bne.w	11518 <last_radio_from_ppm+0x5e8>
   11316:	f64a 3350 	movw	r3, #43856	; 0xab50
   1131a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1131e:	2200      	movs	r2, #0
   11320:	701a      	strb	r2, [r3, #0]
   11322:	f64a 3338 	movw	r3, #43832	; 0xab38
   11326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132a:	891a      	ldrh	r2, [r3, #8]
   1132c:	f64a 3324 	movw	r3, #43812	; 0xab24
   11330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11334:	811a      	strh	r2, [r3, #8]
   11336:	f64a 3338 	movw	r3, #43832	; 0xab38
   1133a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133e:	2200      	movs	r2, #0
   11340:	811a      	strh	r2, [r3, #8]
   11342:	f64a 3324 	movw	r3, #43812	; 0xab24
   11346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134a:	891b      	ldrh	r3, [r3, #8]
   1134c:	b21b      	sxth	r3, r3
   1134e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11352:	dd07      	ble.n	11364 <last_radio_from_ppm+0x434>
   11354:	f64a 3324 	movw	r3, #43812	; 0xab24
   11358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11360:	811a      	strh	r2, [r3, #8]
   11362:	e00f      	b.n	11384 <last_radio_from_ppm+0x454>
   11364:	f64a 3324 	movw	r3, #43812	; 0xab24
   11368:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1136c:	891b      	ldrh	r3, [r3, #8]
   1136e:	b21b      	sxth	r3, r3
   11370:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11374:	da06      	bge.n	11384 <last_radio_from_ppm+0x454>
   11376:	f64a 3324 	movw	r3, #43812	; 0xab24
   1137a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11382:	811a      	strh	r2, [r3, #8]
   11384:	f64a 3338 	movw	r3, #43832	; 0xab38
   11388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138c:	895a      	ldrh	r2, [r3, #10]
   1138e:	f64a 3324 	movw	r3, #43812	; 0xab24
   11392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11396:	815a      	strh	r2, [r3, #10]
   11398:	f64a 3338 	movw	r3, #43832	; 0xab38
   1139c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a0:	2200      	movs	r2, #0
   113a2:	815a      	strh	r2, [r3, #10]
   113a4:	f64a 3324 	movw	r3, #43812	; 0xab24
   113a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ac:	895b      	ldrh	r3, [r3, #10]
   113ae:	b21b      	sxth	r3, r3
   113b0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   113b4:	dd07      	ble.n	113c6 <last_radio_from_ppm+0x496>
   113b6:	f64a 3324 	movw	r3, #43812	; 0xab24
   113ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113be:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   113c2:	815a      	strh	r2, [r3, #10]
   113c4:	e00f      	b.n	113e6 <last_radio_from_ppm+0x4b6>
   113c6:	f64a 3324 	movw	r3, #43812	; 0xab24
   113ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ce:	895b      	ldrh	r3, [r3, #10]
   113d0:	b21b      	sxth	r3, r3
   113d2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   113d6:	da06      	bge.n	113e6 <last_radio_from_ppm+0x4b6>
   113d8:	f64a 3324 	movw	r3, #43812	; 0xab24
   113dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e0:	f64d 2280 	movw	r2, #55936	; 0xda80
   113e4:	815a      	strh	r2, [r3, #10]
   113e6:	f64a 3338 	movw	r3, #43832	; 0xab38
   113ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ee:	899a      	ldrh	r2, [r3, #12]
   113f0:	f64a 3324 	movw	r3, #43812	; 0xab24
   113f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f8:	819a      	strh	r2, [r3, #12]
   113fa:	f64a 3338 	movw	r3, #43832	; 0xab38
   113fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11402:	2200      	movs	r2, #0
   11404:	819a      	strh	r2, [r3, #12]
   11406:	f64a 3324 	movw	r3, #43812	; 0xab24
   1140a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1140e:	899b      	ldrh	r3, [r3, #12]
   11410:	b21b      	sxth	r3, r3
   11412:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11416:	dd07      	ble.n	11428 <last_radio_from_ppm+0x4f8>
   11418:	f64a 3324 	movw	r3, #43812	; 0xab24
   1141c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11424:	819a      	strh	r2, [r3, #12]
   11426:	e00f      	b.n	11448 <last_radio_from_ppm+0x518>
   11428:	f64a 3324 	movw	r3, #43812	; 0xab24
   1142c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11430:	899b      	ldrh	r3, [r3, #12]
   11432:	b21b      	sxth	r3, r3
   11434:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11438:	da06      	bge.n	11448 <last_radio_from_ppm+0x518>
   1143a:	f64a 3324 	movw	r3, #43812	; 0xab24
   1143e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11442:	f64d 2280 	movw	r2, #55936	; 0xda80
   11446:	819a      	strh	r2, [r3, #12]
   11448:	f64a 3338 	movw	r3, #43832	; 0xab38
   1144c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11450:	89da      	ldrh	r2, [r3, #14]
   11452:	f64a 3324 	movw	r3, #43812	; 0xab24
   11456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1145a:	81da      	strh	r2, [r3, #14]
   1145c:	f64a 3338 	movw	r3, #43832	; 0xab38
   11460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11464:	2200      	movs	r2, #0
   11466:	81da      	strh	r2, [r3, #14]
   11468:	f64a 3324 	movw	r3, #43812	; 0xab24
   1146c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11470:	89db      	ldrh	r3, [r3, #14]
   11472:	b21b      	sxth	r3, r3
   11474:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11478:	dd07      	ble.n	1148a <last_radio_from_ppm+0x55a>
   1147a:	f64a 3324 	movw	r3, #43812	; 0xab24
   1147e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11482:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11486:	81da      	strh	r2, [r3, #14]
   11488:	e00f      	b.n	114aa <last_radio_from_ppm+0x57a>
   1148a:	f64a 3324 	movw	r3, #43812	; 0xab24
   1148e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11492:	89db      	ldrh	r3, [r3, #14]
   11494:	b21b      	sxth	r3, r3
   11496:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1149a:	da06      	bge.n	114aa <last_radio_from_ppm+0x57a>
   1149c:	f64a 3324 	movw	r3, #43812	; 0xab24
   114a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a4:	f64d 2280 	movw	r2, #55936	; 0xda80
   114a8:	81da      	strh	r2, [r3, #14]
   114aa:	f64a 3338 	movw	r3, #43832	; 0xab38
   114ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b2:	8a1a      	ldrh	r2, [r3, #16]
   114b4:	f64a 3324 	movw	r3, #43812	; 0xab24
   114b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114bc:	821a      	strh	r2, [r3, #16]
   114be:	f64a 3338 	movw	r3, #43832	; 0xab38
   114c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c6:	2200      	movs	r2, #0
   114c8:	821a      	strh	r2, [r3, #16]
   114ca:	f64a 3324 	movw	r3, #43812	; 0xab24
   114ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d2:	8a1b      	ldrh	r3, [r3, #16]
   114d4:	b21b      	sxth	r3, r3
   114d6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   114da:	dd07      	ble.n	114ec <last_radio_from_ppm+0x5bc>
   114dc:	f64a 3324 	movw	r3, #43812	; 0xab24
   114e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   114e8:	821a      	strh	r2, [r3, #16]
   114ea:	e00f      	b.n	1150c <last_radio_from_ppm+0x5dc>
   114ec:	f64a 3324 	movw	r3, #43812	; 0xab24
   114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f4:	8a1b      	ldrh	r3, [r3, #16]
   114f6:	b21b      	sxth	r3, r3
   114f8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   114fc:	da06      	bge.n	1150c <last_radio_from_ppm+0x5dc>
   114fe:	f64a 3324 	movw	r3, #43812	; 0xab24
   11502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11506:	f64d 2280 	movw	r2, #55936	; 0xda80
   1150a:	821a      	strh	r2, [r3, #16]
   1150c:	f64a 334a 	movw	r3, #43850	; 0xab4a
   11510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11514:	2201      	movs	r2, #1
   11516:	701a      	strb	r2, [r3, #0]
}
   11518:	370c      	adds	r7, #12
   1151a:	46bd      	mov	sp, r7
   1151c:	bd90      	pop	{r4, r7, pc}
   1151e:	bf00      	nop

00011520 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   11520:	b480      	push	{r7}
   11522:	af00      	add	r7, sp, #0
  idx_buf = 0;
   11524:	f64a 3384 	movw	r3, #43908	; 0xab84
   11528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152c:	2200      	movs	r2, #0
   1152e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   11530:	f64a 3385 	movw	r3, #43909	; 0xab85
   11534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11538:	2200      	movs	r2, #0
   1153a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1153c:	f64a 3384 	movw	r3, #43908	; 0xab84
   11540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11544:	781b      	ldrb	r3, [r3, #0]
   11546:	b2db      	uxtb	r3, r3
   11548:	461a      	mov	r2, r3
   1154a:	f64a 336c 	movw	r3, #43884	; 0xab6c
   1154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11552:	4413      	add	r3, r2
   11554:	781a      	ldrb	r2, [r3, #0]
   11556:	f64a 3386 	movw	r3, #43910	; 0xab86
   1155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1155e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   11560:	f248 030f 	movw	r3, #32783	; 0x800f
   11564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11568:	f64a 3286 	movw	r2, #43910	; 0xab86
   1156c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11570:	7812      	ldrb	r2, [r2, #0]
   11572:	b2d2      	uxtb	r2, r2
   11574:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   11576:	f64a 3382 	movw	r3, #43906	; 0xab82
   1157a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157e:	2200      	movs	r2, #0
   11580:	701a      	strb	r2, [r3, #0]
}
   11582:	46bd      	mov	sp, r7
   11584:	f85d 7b04 	ldr.w	r7, [sp], #4
   11588:	4770      	bx	lr
   1158a:	bf00      	nop

0001158c <fbw_spi_init>:

void fbw_spi_init(void) {
   1158c:	b480      	push	{r7}
   1158e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   11590:	f64a 336c 	movw	r3, #43884	; 0xab6c
   11594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11598:	2200      	movs	r2, #0
   1159a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1159c:	f64a 336c 	movw	r3, #43884	; 0xab6c
   115a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a4:	2200      	movs	r2, #0
   115a6:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   115a8:	f248 0317 	movw	r3, #32791	; 0x8017
   115ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b0:	f248 0217 	movw	r2, #32791	; 0x8017
   115b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115b8:	7812      	ldrb	r2, [r2, #0]
   115ba:	b2d2      	uxtb	r2, r2
   115bc:	f042 0210 	orr.w	r2, r2, #16
   115c0:	b2d2      	uxtb	r2, r2
   115c2:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   115c4:	f248 030d 	movw	r3, #32781	; 0x800d
   115c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115cc:	2240      	movs	r2, #64	; 0x40
   115ce:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   115d0:	f248 030d 	movw	r3, #32781	; 0x800d
   115d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d8:	f248 020d 	movw	r2, #32781	; 0x800d
   115dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115e0:	7812      	ldrb	r2, [r2, #0]
   115e2:	b2d2      	uxtb	r2, r2
   115e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115e8:	b2d2      	uxtb	r2, r2
   115ea:	701a      	strb	r2, [r3, #0]
}
   115ec:	46bd      	mov	sp, r7
   115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   115f2:	4770      	bx	lr
   115f4:	0000      	movs	r0, r0
	...

000115f8 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   115f8:	b480      	push	{r7}
   115fa:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   115fc:	f248 032f 	movw	r3, #32815	; 0x802f
   11600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11604:	2200      	movs	r2, #0
   11606:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   11608:	f248 032e 	movw	r3, #32814	; 0x802e
   1160c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11610:	2201      	movs	r2, #1
   11612:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   11614:	f248 0325 	movw	r3, #32805	; 0x8025
   11618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1161c:	2207      	movs	r2, #7
   1161e:	701a      	strb	r2, [r3, #0]
}
   11620:	46bd      	mov	sp, r7
   11622:	f85d 7b04 	ldr.w	r7, [sp], #4
   11626:	4770      	bx	lr

00011628 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   11628:	b480      	push	{r7}
   1162a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1162c:	f248 032e 	movw	r3, #32814	; 0x802e
   11630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11634:	f248 022e 	movw	r2, #32814	; 0x802e
   11638:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1163c:	7812      	ldrb	r2, [r2, #0]
   1163e:	b2d2      	uxtb	r2, r2
   11640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11644:	b2d2      	uxtb	r2, r2
   11646:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   11648:	f248 032e 	movw	r3, #32814	; 0x802e
   1164c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11650:	f248 022e 	movw	r2, #32814	; 0x802e
   11654:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11658:	7812      	ldrb	r2, [r2, #0]
   1165a:	b2d2      	uxtb	r2, r2
   1165c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11660:	b2d2      	uxtb	r2, r2
   11662:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   11664:	f248 0317 	movw	r3, #32791	; 0x8017
   11668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166c:	f248 0217 	movw	r2, #32791	; 0x8017
   11670:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11674:	7812      	ldrb	r2, [r2, #0]
   11676:	b2d2      	uxtb	r2, r2
   11678:	f022 0201 	bic.w	r2, r2, #1
   1167c:	b2d2      	uxtb	r2, r2
   1167e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   11680:	f248 0337 	movw	r3, #32823	; 0x8037
   11684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11688:	f248 0237 	movw	r2, #32823	; 0x8037
   1168c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11690:	7812      	ldrb	r2, [r2, #0]
   11692:	b2d2      	uxtb	r2, r2
   11694:	f042 0220 	orr.w	r2, r2, #32
   11698:	b2d2      	uxtb	r2, r2
   1169a:	701a      	strb	r2, [r3, #0]
}
   1169c:	46bd      	mov	sp, r7
   1169e:	f85d 7b04 	ldr.w	r7, [sp], #4
   116a2:	4770      	bx	lr

000116a4 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   116a4:	b580      	push	{r7, lr}
   116a6:	b082      	sub	sp, #8
   116a8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   116aa:	2300      	movs	r3, #0
   116ac:	71fb      	strb	r3, [r7, #7]
   116ae:	e010      	b.n	116d2 <to_autopilot_from_last_radio+0x2e>
      to_mega128.channels[i] = last_radio[i];
   116b0:	79fa      	ldrb	r2, [r7, #7]
   116b2:	79f9      	ldrb	r1, [r7, #7]
   116b4:	f64a 3324 	movw	r3, #43812	; 0xab24
   116b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116bc:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   116c0:	f64a 336c 	movw	r3, #43884	; 0xab6c
   116c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   116cc:	79fb      	ldrb	r3, [r7, #7]
   116ce:	3301      	adds	r3, #1
   116d0:	71fb      	strb	r3, [r7, #7]
   116d2:	79fb      	ldrb	r3, [r7, #7]
   116d4:	2b08      	cmp	r3, #8
   116d6:	d9eb      	bls.n	116b0 <to_autopilot_from_last_radio+0xc>
      to_mega128.channels[i] = last_radio[i];

  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   116d8:	f64a 4314 	movw	r3, #44052	; 0xac14
   116dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e0:	781b      	ldrb	r3, [r3, #0]
   116e2:	2b00      	cmp	r3, #0
   116e4:	bf0c      	ite	eq
   116e6:	2300      	moveq	r3, #0
   116e8:	2301      	movne	r3, #1
   116ea:	b2db      	uxtb	r3, r3
   116ec:	461a      	mov	r2, r3
   116ee:	f64a 336c 	movw	r3, #43884	; 0xab6c
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   116f8:	f64a 336c 	movw	r3, #43884	; 0xab6c
   116fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11700:	7cdb      	ldrb	r3, [r3, #19]
   11702:	b2da      	uxtb	r2, r3
   11704:	f64a 4316 	movw	r3, #44054	; 0xac16
   11708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1170c:	781b      	ldrb	r3, [r3, #0]
   1170e:	2b00      	cmp	r3, #0
   11710:	d001      	beq.n	11716 <to_autopilot_from_last_radio+0x72>
   11712:	2302      	movs	r3, #2
   11714:	e000      	b.n	11718 <to_autopilot_from_last_radio+0x74>
   11716:	2300      	movs	r3, #0
   11718:	4313      	orrs	r3, r2
   1171a:	b2db      	uxtb	r3, r3
   1171c:	b2da      	uxtb	r2, r3
   1171e:	f64a 336c 	movw	r3, #43884	; 0xab6c
   11722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11726:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   11728:	f64a 334a 	movw	r3, #43850	; 0xab4a
   1172c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11730:	781b      	ldrb	r3, [r3, #0]
   11732:	2b00      	cmp	r3, #0
   11734:	d012      	beq.n	1175c <to_autopilot_from_last_radio+0xb8>
      to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   11736:	f64a 336c 	movw	r3, #43884	; 0xab6c
   1173a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173e:	7cdb      	ldrb	r3, [r3, #19]
   11740:	f043 0304 	orr.w	r3, r3, #4
   11744:	b2da      	uxtb	r2, r3
   11746:	f64a 336c 	movw	r3, #43884	; 0xab6c
   1174a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1174e:	74da      	strb	r2, [r3, #19]
      last_radio_contains_avg_channels = FALSE;
   11750:	f64a 334a 	movw	r3, #43850	; 0xab4a
   11754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11758:	2200      	movs	r2, #0
   1175a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1175c:	f64a 4318 	movw	r3, #44056	; 0xac18
   11760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11764:	781a      	ldrb	r2, [r3, #0]
   11766:	f64a 336c 	movw	r3, #43884	; 0xab6c
   1176a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   11770:	f64a 3388 	movw	r3, #43912	; 0xab88
   11774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11778:	881b      	ldrh	r3, [r3, #0]
   1177a:	4618      	mov	r0, r3
   1177c:	f001 f92c 	bl	129d8 <__aeabi_i2d>
   11780:	4602      	mov	r2, r0
   11782:	460b      	mov	r3, r1
   11784:	4610      	mov	r0, r2
   11786:	4619      	mov	r1, r3
   11788:	a31b      	add	r3, pc, #108	; (adr r3, 117f8 <to_autopilot_from_last_radio+0x154>)
   1178a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1178e:	f001 f989 	bl	12aa4 <__aeabi_dmul>
   11792:	4602      	mov	r2, r0
   11794:	460b      	mov	r3, r1
   11796:	4610      	mov	r0, r2
   11798:	4619      	mov	r1, r3
   1179a:	f04f 0200 	mov.w	r2, #0
   1179e:	f04f 0300 	mov.w	r3, #0
   117a2:	f2c4 0340 	movt	r3, #16448	; 0x4040
   117a6:	f001 faa7 	bl	12cf8 <__aeabi_ddiv>
   117aa:	4602      	mov	r2, r0
   117ac:	460b      	mov	r3, r1
   117ae:	4610      	mov	r0, r2
   117b0:	4619      	mov	r1, r3
   117b2:	a313      	add	r3, pc, #76	; (adr r3, 11800 <to_autopilot_from_last_radio+0x15c>)
   117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   117b8:	f000 ffc2 	bl	12740 <__adddf3>
   117bc:	4602      	mov	r2, r0
   117be:	460b      	mov	r3, r1
   117c0:	4610      	mov	r0, r2
   117c2:	4619      	mov	r1, r3
   117c4:	f04f 0200 	mov.w	r2, #0
   117c8:	f04f 0300 	mov.w	r3, #0
   117cc:	f2c4 0324 	movt	r3, #16420	; 0x4024
   117d0:	f001 f968 	bl	12aa4 <__aeabi_dmul>
   117d4:	4602      	mov	r2, r0
   117d6:	460b      	mov	r3, r1
   117d8:	4610      	mov	r0, r2
   117da:	4619      	mov	r1, r3
   117dc:	f001 fc24 	bl	13028 <__aeabi_d2uiz>
   117e0:	4603      	mov	r3, r0
   117e2:	b2da      	uxtb	r2, r3
   117e4:	f64a 336c 	movw	r3, #43884	; 0xab6c
   117e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ec:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   117ee:	3708      	adds	r7, #8
   117f0:	46bd      	mov	sp, r7
   117f2:	bd80      	pop	{r7, pc}
   117f4:	f3af 8000 	nop.w
   117f8:	1eb851ec 	.word	0x1eb851ec
   117fc:	3f91eb85 	.word	0x3f91eb85
   11800:	020c49ba 	.word	0x020c49ba
   11804:	3fb6872b 	.word	0x3fb6872b

00011808 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   11808:	b580      	push	{r7, lr}
   1180a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   1180c:	f64a 3383 	movw	r3, #43907	; 0xab83
   11810:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11814:	2200      	movs	r2, #0
   11816:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   11818:	f7ff ff44 	bl	116a4 <to_autopilot_from_last_radio>
      spi_reset();
   1181c:	f7ff fe80 	bl	11520 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   11820:	bd80      	pop	{r7, pc}
   11822:	bf00      	nop

00011824 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   11824:	b580      	push	{r7, lr}
   11826:	af00      	add	r7, sp, #0
  uart_init_tx();
   11828:	f000 fb02 	bl	11e30 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   1182c:	f643 107c 	movw	r0, #14716	; 0x397c
   11830:	f2c0 0001 	movt	r0, #1
   11834:	f000 fbda 	bl	11fec <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   11838:	f7ff fab2 	bl	10da0 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   1183c:	2003      	movs	r0, #3
   1183e:	f64a 3188 	movw	r1, #43912	; 0xab88
   11842:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11846:	f7ff fa97 	bl	10d78 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   1184a:	2006      	movs	r0, #6
   1184c:	f64a 31cc 	movw	r1, #43980	; 0xabcc
   11850:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11854:	f7ff fa90 	bl	10d78 <fbw_adc_buf_channel>
#endif
  timer_init();
   11858:	f7ff fece 	bl	115f8 <timer_init>
  servo_init();
   1185c:	f000 f894 	bl	11988 <servo_init>
  ppm_init();
   11860:	f7ff fee2 	bl	11628 <ppm_init>
  fbw_spi_init();
   11864:	f7ff fe92 	bl	1158c <fbw_spi_init>
  //sei(); //FN
}
   11868:	bd80      	pop	{r7, pc}
   1186a:	bf00      	nop

0001186c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   1186c:	b580      	push	{r7, lr}
   1186e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   11870:	f64a 334b 	movw	r3, #43851	; 0xab4b
   11874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11878:	2200      	movs	r2, #0
   1187a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   1187c:	f64a 4317 	movw	r3, #44055	; 0xac17
   11880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11884:	781b      	ldrb	r3, [r3, #0]
   11886:	3301      	adds	r3, #1
   11888:	b2da      	uxtb	r2, r3
   1188a:	f64a 4317 	movw	r3, #44055	; 0xac17
   1188e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11892:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   11894:	f64a 4314 	movw	r3, #44052	; 0xac14
   11898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1189c:	2201      	movs	r2, #1
   1189e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   118a0:	f64a 4316 	movw	r3, #44054	; 0xac16
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	2200      	movs	r2, #0
   118aa:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   118ac:	f64a 4312 	movw	r3, #44050	; 0xac12
   118b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b4:	2200      	movs	r2, #0
   118b6:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   118b8:	f7ff fb3a 	bl	10f30 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   118bc:	f64a 3324 	movw	r3, #43812	; 0xab24
   118c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c4:	891b      	ldrh	r3, [r3, #8]
   118c6:	b21b      	sxth	r3, r3
   118c8:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   118cc:	bfb4      	ite	lt
   118ce:	2300      	movlt	r3, #0
   118d0:	2301      	movge	r3, #1
   118d2:	b2db      	uxtb	r3, r3
   118d4:	461a      	mov	r2, r3
   118d6:	f64a 4310 	movw	r3, #44048	; 0xac10
   118da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118de:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   118e0:	f64a 4310 	movw	r3, #44048	; 0xac10
   118e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e8:	781b      	ldrb	r3, [r3, #0]
   118ea:	2b00      	cmp	r3, #0
   118ec:	d105      	bne.n	118fa <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   118ee:	f64a 3024 	movw	r0, #43812	; 0xab24
   118f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   118f6:	f000 f925 	bl	11b44 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   118fa:	f64a 4310 	movw	r3, #44048	; 0xac10
   118fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11902:	2201      	movs	r2, #1
   11904:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   11906:	f64a 4314 	movw	r3, #44052	; 0xac14
   1190a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1190e:	2200      	movs	r2, #0
   11910:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   11912:	f64a 4316 	movw	r3, #44054	; 0xac16
   11916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1191a:	2201      	movs	r2, #1
   1191c:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   1191e:	bd80      	pop	{r7, pc}

00011920 <check_failsafe_task>:
void check_failsafe_task(void)
{
   11920:	b580      	push	{r7, lr}
   11922:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   11924:	f643 1068 	movw	r0, #14696	; 0x3968
   11928:	f2c0 0001 	movt	r0, #1
   1192c:	f000 f90a 	bl	11b44 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   11930:	bd80      	pop	{r7, pc}
   11932:	bf00      	nop

00011934 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   11934:	b580      	push	{r7, lr}
   11936:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   11938:	f64a 3382 	movw	r3, #43906	; 0xab82
   1193c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11940:	781b      	ldrb	r3, [r3, #0]
   11942:	b2db      	uxtb	r3, r3
   11944:	2b00      	cmp	r3, #0
   11946:	d018      	beq.n	1197a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   11948:	f64a 4311 	movw	r3, #44049	; 0xac11
   1194c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11950:	2200      	movs	r2, #0
   11952:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   11954:	f64a 4315 	movw	r3, #44053	; 0xac15
   11958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1195c:	2201      	movs	r2, #1
   1195e:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   11960:	f64a 4310 	movw	r3, #44048	; 0xac10
   11964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11968:	781b      	ldrb	r3, [r3, #0]
   1196a:	2b01      	cmp	r3, #1
   1196c:	d105      	bne.n	1197a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   1196e:	f64a 3054 	movw	r0, #43860	; 0xab54
   11972:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11976:	f000 f8e5 	bl	11b44 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   1197a:	f64a 4315 	movw	r3, #44053	; 0xac15
   1197e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11982:	2200      	movs	r2, #0
   11984:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   11986:	bd80      	pop	{r7, pc}

00011988 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   11988:	b480      	push	{r7}
   1198a:	b083      	sub	sp, #12
   1198c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1198e:	f248 0311 	movw	r3, #32785	; 0x8011
   11992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11996:	f248 0211 	movw	r2, #32785	; 0x8011
   1199a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1199e:	7812      	ldrb	r2, [r2, #0]
   119a0:	b2d2      	uxtb	r2, r2
   119a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   119a6:	b2d2      	uxtb	r2, r2
   119a8:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   119aa:	f248 0317 	movw	r3, #32791	; 0x8017
   119ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b2:	f248 0217 	movw	r2, #32791	; 0x8017
   119b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   119ba:	7812      	ldrb	r2, [r2, #0]
   119bc:	b2d2      	uxtb	r2, r2
   119be:	f042 0202 	orr.w	r2, r2, #2
   119c2:	b2d2      	uxtb	r2, r2
   119c4:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   119c6:	f248 0312 	movw	r3, #32786	; 0x8012
   119ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ce:	f248 0212 	movw	r2, #32786	; 0x8012
   119d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   119d6:	7812      	ldrb	r2, [r2, #0]
   119d8:	b2d2      	uxtb	r2, r2
   119da:	f062 027f 	orn	r2, r2, #127	; 0x7f
   119de:	b2d2      	uxtb	r2, r2
   119e0:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   119e2:	f248 0318 	movw	r3, #32792	; 0x8018
   119e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ea:	f248 0218 	movw	r2, #32792	; 0x8018
   119ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   119f2:	7812      	ldrb	r2, [r2, #0]
   119f4:	b2d2      	uxtb	r2, r2
   119f6:	f022 0202 	bic.w	r2, r2, #2
   119fa:	b2d2      	uxtb	r2, r2
   119fc:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   119fe:	2300      	movs	r3, #0
   11a00:	71fb      	strb	r3, [r7, #7]
   11a02:	e00b      	b.n	11a1c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   11a04:	79fa      	ldrb	r2, [r7, #7]
   11a06:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   11a12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11a16:	79fb      	ldrb	r3, [r7, #7]
   11a18:	3301      	adds	r3, #1
   11a1a:	71fb      	strb	r3, [r7, #7]
   11a1c:	79fb      	ldrb	r3, [r7, #7]
   11a1e:	2b09      	cmp	r3, #9
   11a20:	d9f0      	bls.n	11a04 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   11a22:	f248 032a 	movw	r3, #32810	; 0x802a
   11a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11a2e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   11a30:	f248 032f 	movw	r3, #32815	; 0x802f
   11a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a38:	f248 022f 	movw	r2, #32815	; 0x802f
   11a3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a40:	7812      	ldrb	r2, [r2, #0]
   11a42:	b2d2      	uxtb	r2, r2
   11a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11a48:	b2d2      	uxtb	r2, r2
   11a4a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   11a4c:	f248 0336 	movw	r3, #32822	; 0x8036
   11a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a54:	2210      	movs	r2, #16
   11a56:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11a58:	f248 0312 	movw	r3, #32786	; 0x8012
   11a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a60:	f248 0212 	movw	r2, #32786	; 0x8012
   11a64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a68:	7812      	ldrb	r2, [r2, #0]
   11a6a:	b2d2      	uxtb	r2, r2
   11a6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11a70:	b2d2      	uxtb	r2, r2
   11a72:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   11a74:	f248 0337 	movw	r3, #32823	; 0x8037
   11a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7c:	f248 0237 	movw	r2, #32823	; 0x8037
   11a80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a84:	7812      	ldrb	r2, [r2, #0]
   11a86:	b2d2      	uxtb	r2, r2
   11a88:	f042 0210 	orr.w	r2, r2, #16
   11a8c:	b2d2      	uxtb	r2, r2
   11a8e:	701a      	strb	r2, [r3, #0]
}
   11a90:	370c      	adds	r7, #12
   11a92:	46bd      	mov	sp, r7
   11a94:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a98:	4770      	bx	lr
   11a9a:	bf00      	nop

00011a9c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   11a9c:	b480      	push	{r7}
   11a9e:	b083      	sub	sp, #12
   11aa0:	af00      	add	r7, sp, #0
   11aa2:	4602      	mov	r2, r0
   11aa4:	460b      	mov	r3, r1
   11aa6:	71fa      	strb	r2, [r7, #7]
   11aa8:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   11aaa:	79f9      	ldrb	r1, [r7, #7]
   11aac:	88bb      	ldrh	r3, [r7, #4]
   11aae:	011b      	lsls	r3, r3, #4
   11ab0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11ab4:	d308      	bcc.n	11ac8 <servo_set_one+0x2c>
   11ab6:	88bb      	ldrh	r3, [r7, #4]
   11ab8:	011b      	lsls	r3, r3, #4
   11aba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11abe:	bf28      	it	cs
   11ac0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11ac4:	b29a      	uxth	r2, r3
   11ac6:	e001      	b.n	11acc <servo_set_one+0x30>
   11ac8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11acc:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   11ad8:	370c      	adds	r7, #12
   11ada:	46bd      	mov	sp, r7
   11adc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ae0:	4770      	bx	lr
   11ae2:	bf00      	nop

00011ae4 <servo_transmit>:

void 
servo_transmit(void) {
   11ae4:	b580      	push	{r7, lr}
   11ae6:	b082      	sub	sp, #8
   11ae8:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   11aea:	2000      	movs	r0, #0
   11aec:	f000 f9e6 	bl	11ebc <uart_transmit>
   11af0:	2000      	movs	r0, #0
   11af2:	f000 f9e3 	bl	11ebc <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11af6:	2300      	movs	r3, #0
   11af8:	71fb      	strb	r3, [r7, #7]
   11afa:	e01a      	b.n	11b32 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   11afc:	79fa      	ldrb	r2, [r7, #7]
   11afe:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11b0a:	0a1b      	lsrs	r3, r3, #8
   11b0c:	b29b      	uxth	r3, r3
   11b0e:	b2db      	uxtb	r3, r3
   11b10:	4618      	mov	r0, r3
   11b12:	f000 f9d3 	bl	11ebc <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   11b16:	79fa      	ldrb	r2, [r7, #7]
   11b18:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11b24:	b2db      	uxtb	r3, r3
   11b26:	4618      	mov	r0, r3
   11b28:	f000 f9c8 	bl	11ebc <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11b2c:	79fb      	ldrb	r3, [r7, #7]
   11b2e:	3301      	adds	r3, #1
   11b30:	71fb      	strb	r3, [r7, #7]
   11b32:	79fb      	ldrb	r3, [r7, #7]
   11b34:	2b09      	cmp	r3, #9
   11b36:	d9e1      	bls.n	11afc <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   11b38:	200a      	movs	r0, #10
   11b3a:	f000 f9bf 	bl	11ebc <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   11b3e:	3708      	adds	r7, #8
   11b40:	46bd      	mov	sp, r7
   11b42:	bd80      	pop	{r7, pc}

00011b44 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   11b44:	b5b0      	push	{r4, r5, r7, lr}
   11b46:	b084      	sub	sp, #16
   11b48:	af00      	add	r7, sp, #0
   11b4a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	330a      	adds	r3, #10
   11b50:	881b      	ldrh	r3, [r3, #0]
   11b52:	b21b      	sxth	r3, r3
   11b54:	005b      	lsls	r3, r3, #1
   11b56:	4618      	mov	r0, r3
   11b58:	f000 ff3e 	bl	129d8 <__aeabi_i2d>
   11b5c:	4602      	mov	r2, r0
   11b5e:	460b      	mov	r3, r1
   11b60:	4610      	mov	r0, r2
   11b62:	4619      	mov	r1, r3
   11b64:	a3a6      	add	r3, pc, #664	; (adr r3, 11e00 <servo_set+0x2bc>)
   11b66:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b6a:	f000 ff9b 	bl	12aa4 <__aeabi_dmul>
   11b6e:	4602      	mov	r2, r0
   11b70:	460b      	mov	r3, r1
   11b72:	4610      	mov	r0, r2
   11b74:	4619      	mov	r1, r3
   11b76:	f001 fa2f 	bl	12fd8 <__aeabi_d2iz>
   11b7a:	4603      	mov	r3, r0
   11b7c:	b29b      	uxth	r3, r3
   11b7e:	b29b      	uxth	r3, r3
   11b80:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11b84:	81fb      	strh	r3, [r7, #14]
   11b86:	89fb      	ldrh	r3, [r7, #14]
   11b88:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11b8c:	d307      	bcc.n	11b9e <servo_set+0x5a>
   11b8e:	89fb      	ldrh	r3, [r7, #14]
   11b90:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11b94:	bf28      	it	cs
   11b96:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11b9a:	b29a      	uxth	r2, r3
   11b9c:	e001      	b.n	11ba2 <servo_set+0x5e>
   11b9e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11ba2:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11baa:	80da      	strh	r2, [r3, #6]
   11bac:	687b      	ldr	r3, [r7, #4]
   11bae:	881b      	ldrh	r3, [r3, #0]
   11bb0:	b21b      	sxth	r3, r3
   11bb2:	005b      	lsls	r3, r3, #1
   11bb4:	4618      	mov	r0, r3
   11bb6:	f000 ff0f 	bl	129d8 <__aeabi_i2d>
   11bba:	4602      	mov	r2, r0
   11bbc:	460b      	mov	r3, r1
   11bbe:	4610      	mov	r0, r2
   11bc0:	4619      	mov	r1, r3
   11bc2:	a38f      	add	r3, pc, #572	; (adr r3, 11e00 <servo_set+0x2bc>)
   11bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bc8:	f000 ff6c 	bl	12aa4 <__aeabi_dmul>
   11bcc:	4602      	mov	r2, r0
   11bce:	460b      	mov	r3, r1
   11bd0:	4610      	mov	r0, r2
   11bd2:	4619      	mov	r1, r3
   11bd4:	f001 fa00 	bl	12fd8 <__aeabi_d2iz>
   11bd8:	4603      	mov	r3, r0
   11bda:	b29b      	uxth	r3, r3
   11bdc:	b29b      	uxth	r3, r3
   11bde:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11be2:	81fb      	strh	r3, [r7, #14]
   11be4:	89fb      	ldrh	r3, [r7, #14]
   11be6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11bea:	d307      	bcc.n	11bfc <servo_set+0xb8>
   11bec:	89fb      	ldrh	r3, [r7, #14]
   11bee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11bf2:	bf28      	it	cs
   11bf4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11bf8:	b29a      	uxth	r2, r3
   11bfa:	e001      	b.n	11c00 <servo_set+0xbc>
   11bfc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c00:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c08:	825a      	strh	r2, [r3, #18]
   11c0a:	687b      	ldr	r3, [r7, #4]
   11c0c:	3304      	adds	r3, #4
   11c0e:	881b      	ldrh	r3, [r3, #0]
   11c10:	b21b      	sxth	r3, r3
   11c12:	4618      	mov	r0, r3
   11c14:	f000 fee0 	bl	129d8 <__aeabi_i2d>
   11c18:	4602      	mov	r2, r0
   11c1a:	460b      	mov	r3, r1
   11c1c:	4610      	mov	r0, r2
   11c1e:	4619      	mov	r1, r3
   11c20:	a379      	add	r3, pc, #484	; (adr r3, 11e08 <servo_set+0x2c4>)
   11c22:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c26:	f000 ff3d 	bl	12aa4 <__aeabi_dmul>
   11c2a:	4602      	mov	r2, r0
   11c2c:	460b      	mov	r3, r1
   11c2e:	4610      	mov	r0, r2
   11c30:	4619      	mov	r1, r3
   11c32:	f001 f9d1 	bl	12fd8 <__aeabi_d2iz>
   11c36:	4603      	mov	r3, r0
   11c38:	b29b      	uxth	r3, r3
   11c3a:	b29b      	uxth	r3, r3
   11c3c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   11c40:	3320      	adds	r3, #32
   11c42:	81fb      	strh	r3, [r7, #14]
   11c44:	89fb      	ldrh	r3, [r7, #14]
   11c46:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11c4a:	d307      	bcc.n	11c5c <servo_set+0x118>
   11c4c:	89fb      	ldrh	r3, [r7, #14]
   11c4e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c52:	bf28      	it	cs
   11c54:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c58:	b29a      	uxth	r2, r3
   11c5a:	e001      	b.n	11c60 <servo_set+0x11c>
   11c5c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11c60:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c68:	819a      	strh	r2, [r3, #12]
   11c6a:	687b      	ldr	r3, [r7, #4]
   11c6c:	885b      	ldrh	r3, [r3, #2]
   11c6e:	81bb      	strh	r3, [r7, #12]
   11c70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11c74:	2b00      	cmp	r3, #0
   11c76:	dd06      	ble.n	11c86 <servo_set+0x142>
   11c78:	f04f 0400 	mov.w	r4, #0
   11c7c:	f04f 0500 	mov.w	r5, #0
   11c80:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11c84:	e002      	b.n	11c8c <servo_set+0x148>
   11c86:	a562      	add	r5, pc, #392	; (adr r5, 11e10 <servo_set+0x2cc>)
   11c88:	e9d5 4500 	ldrd	r4, r5, [r5]
   11c8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11c90:	4618      	mov	r0, r3
   11c92:	f000 fea1 	bl	129d8 <__aeabi_i2d>
   11c96:	4602      	mov	r2, r0
   11c98:	460b      	mov	r3, r1
   11c9a:	4620      	mov	r0, r4
   11c9c:	4629      	mov	r1, r5
   11c9e:	f000 ff01 	bl	12aa4 <__aeabi_dmul>
   11ca2:	4602      	mov	r2, r0
   11ca4:	460b      	mov	r3, r1
   11ca6:	4610      	mov	r0, r2
   11ca8:	4619      	mov	r1, r3
   11caa:	a35b      	add	r3, pc, #364	; (adr r3, 11e18 <servo_set+0x2d4>)
   11cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cb0:	f000 fef8 	bl	12aa4 <__aeabi_dmul>
   11cb4:	4602      	mov	r2, r0
   11cb6:	460b      	mov	r3, r1
   11cb8:	4610      	mov	r0, r2
   11cba:	4619      	mov	r1, r3
   11cbc:	f001 f98c 	bl	12fd8 <__aeabi_d2iz>
   11cc0:	4603      	mov	r3, r0
   11cc2:	b29b      	uxth	r3, r3
   11cc4:	b29b      	uxth	r3, r3
   11cc6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   11cca:	81fb      	strh	r3, [r7, #14]
   11ccc:	89fb      	ldrh	r3, [r7, #14]
   11cce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11cd2:	d307      	bcc.n	11ce4 <servo_set+0x1a0>
   11cd4:	89fb      	ldrh	r3, [r7, #14]
   11cd6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11cda:	bf28      	it	cs
   11cdc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11ce0:	b29a      	uxth	r2, r3
   11ce2:	e001      	b.n	11ce8 <servo_set+0x1a4>
   11ce4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11ce8:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf0:	801a      	strh	r2, [r3, #0]
   11cf2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	dd03      	ble.n	11d02 <servo_set+0x1be>
   11cfa:	a545      	add	r5, pc, #276	; (adr r5, 11e10 <servo_set+0x2cc>)
   11cfc:	e9d5 4500 	ldrd	r4, r5, [r5]
   11d00:	e005      	b.n	11d0e <servo_set+0x1ca>
   11d02:	f04f 0400 	mov.w	r4, #0
   11d06:	f04f 0500 	mov.w	r5, #0
   11d0a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11d0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d12:	4618      	mov	r0, r3
   11d14:	f000 fe60 	bl	129d8 <__aeabi_i2d>
   11d18:	4602      	mov	r2, r0
   11d1a:	460b      	mov	r3, r1
   11d1c:	4620      	mov	r0, r4
   11d1e:	4629      	mov	r1, r5
   11d20:	f000 fec0 	bl	12aa4 <__aeabi_dmul>
   11d24:	4602      	mov	r2, r0
   11d26:	460b      	mov	r3, r1
   11d28:	4610      	mov	r0, r2
   11d2a:	4619      	mov	r1, r3
   11d2c:	a33c      	add	r3, pc, #240	; (adr r3, 11e20 <servo_set+0x2dc>)
   11d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d32:	f000 feb7 	bl	12aa4 <__aeabi_dmul>
   11d36:	4602      	mov	r2, r0
   11d38:	460b      	mov	r3, r1
   11d3a:	4610      	mov	r0, r2
   11d3c:	4619      	mov	r1, r3
   11d3e:	f001 f94b 	bl	12fd8 <__aeabi_d2iz>
   11d42:	4603      	mov	r3, r0
   11d44:	b29b      	uxth	r3, r3
   11d46:	b29b      	uxth	r3, r3
   11d48:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   11d4c:	3320      	adds	r3, #32
   11d4e:	81fb      	strh	r3, [r7, #14]
   11d50:	89fb      	ldrh	r3, [r7, #14]
   11d52:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11d56:	d307      	bcc.n	11d68 <servo_set+0x224>
   11d58:	89fb      	ldrh	r3, [r7, #14]
   11d5a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11d5e:	bf28      	it	cs
   11d60:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11d64:	b29a      	uxth	r2, r3
   11d66:	e001      	b.n	11d6c <servo_set+0x228>
   11d68:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d6c:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d74:	809a      	strh	r2, [r3, #4]
   11d76:	687b      	ldr	r3, [r7, #4]
   11d78:	3306      	adds	r3, #6
   11d7a:	881b      	ldrh	r3, [r3, #0]
   11d7c:	b21b      	sxth	r3, r3
   11d7e:	4618      	mov	r0, r3
   11d80:	f000 fe2a 	bl	129d8 <__aeabi_i2d>
   11d84:	4604      	mov	r4, r0
   11d86:	460d      	mov	r5, r1
   11d88:	687b      	ldr	r3, [r7, #4]
   11d8a:	3302      	adds	r3, #2
   11d8c:	881b      	ldrh	r3, [r3, #0]
   11d8e:	b21b      	sxth	r3, r3
   11d90:	4618      	mov	r0, r3
   11d92:	f000 fe21 	bl	129d8 <__aeabi_i2d>
   11d96:	4602      	mov	r2, r0
   11d98:	460b      	mov	r3, r1
   11d9a:	4620      	mov	r0, r4
   11d9c:	4629      	mov	r1, r5
   11d9e:	f000 fccf 	bl	12740 <__adddf3>
   11da2:	4602      	mov	r2, r0
   11da4:	460b      	mov	r3, r1
   11da6:	4610      	mov	r0, r2
   11da8:	4619      	mov	r1, r3
   11daa:	a31f      	add	r3, pc, #124	; (adr r3, 11e28 <servo_set+0x2e4>)
   11dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11db0:	f000 fe78 	bl	12aa4 <__aeabi_dmul>
   11db4:	4602      	mov	r2, r0
   11db6:	460b      	mov	r3, r1
   11db8:	4610      	mov	r0, r2
   11dba:	4619      	mov	r1, r3
   11dbc:	f001 f90c 	bl	12fd8 <__aeabi_d2iz>
   11dc0:	4603      	mov	r3, r0
   11dc2:	b29b      	uxth	r3, r3
   11dc4:	b29b      	uxth	r3, r3
   11dc6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   11dca:	3320      	adds	r3, #32
   11dcc:	81fb      	strh	r3, [r7, #14]
   11dce:	89fb      	ldrh	r3, [r7, #14]
   11dd0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11dd4:	d307      	bcc.n	11de6 <servo_set+0x2a2>
   11dd6:	89fb      	ldrh	r3, [r7, #14]
   11dd8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11ddc:	bf28      	it	cs
   11dde:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11de2:	b29a      	uxth	r2, r3
   11de4:	e001      	b.n	11dea <servo_set+0x2a6>
   11de6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11dea:	f64a 431c 	movw	r3, #44060	; 0xac1c
   11dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11df2:	81da      	strh	r2, [r3, #14]
}
   11df4:	3710      	adds	r7, #16
   11df6:	46bd      	mov	sp, r7
   11df8:	bdb0      	pop	{r4, r5, r7, pc}
   11dfa:	bf00      	nop
   11dfc:	f3af 8000 	nop.w
   11e00:	aaaa9ef0 	.word	0xaaaa9ef0
   11e04:	3feaaaaa 	.word	0x3feaaaaa
   11e08:	fc96473e 	.word	0xfc96473e
   11e0c:	3fdfc962 	.word	0x3fdfc962
   11e10:	51eb851f 	.word	0x51eb851f
   11e14:	3fe51eb8 	.word	0x3fe51eb8
   11e18:	9999999a 	.word	0x9999999a
   11e1c:	bfe19999 	.word	0xbfe19999
   11e20:	aaaa9ef0 	.word	0xaaaa9ef0
   11e24:	bfe0aaaa 	.word	0xbfe0aaaa
   11e28:	eeeed77a 	.word	0xeeeed77a
   11e2c:	bfdeeeee 	.word	0xbfdeeeee

00011e30 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   11e30:	b480      	push	{r7}
   11e32:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   11e34:	f248 0320 	movw	r3, #32800	; 0x8020
   11e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3c:	2200      	movs	r2, #0
   11e3e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   11e40:	f248 0309 	movw	r3, #32777	; 0x8009
   11e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e48:	2219      	movs	r2, #25
   11e4a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   11e4c:	f248 030b 	movw	r3, #32779	; 0x800b
   11e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e54:	2200      	movs	r2, #0
   11e56:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   11e58:	f248 030a 	movw	r3, #32778	; 0x800a
   11e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e60:	2208      	movs	r2, #8
   11e62:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   11e64:	f248 0320 	movw	r3, #32800	; 0x8020
   11e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e6c:	2286      	movs	r2, #134	; 0x86
   11e6e:	701a      	strb	r2, [r3, #0]
}
   11e70:	46bd      	mov	sp, r7
   11e72:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e76:	4770      	bx	lr

00011e78 <uart_init_rx>:

void uart_init_rx() {
   11e78:	b480      	push	{r7}
   11e7a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   11e7c:	f248 030a 	movw	r3, #32778	; 0x800a
   11e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e84:	f248 020a 	movw	r2, #32778	; 0x800a
   11e88:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11e8c:	7812      	ldrb	r2, [r2, #0]
   11e8e:	b2d2      	uxtb	r2, r2
   11e90:	f042 0210 	orr.w	r2, r2, #16
   11e94:	b2d2      	uxtb	r2, r2
   11e96:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   11e98:	f248 030a 	movw	r3, #32778	; 0x800a
   11e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea0:	f248 020a 	movw	r2, #32778	; 0x800a
   11ea4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11ea8:	7812      	ldrb	r2, [r2, #0]
   11eaa:	b2d2      	uxtb	r2, r2
   11eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11eb0:	b2d2      	uxtb	r2, r2
   11eb2:	701a      	strb	r2, [r3, #0]
}
   11eb4:	46bd      	mov	sp, r7
   11eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   11eba:	4770      	bx	lr

00011ebc <uart_transmit>:

void uart_transmit( unsigned char data ) {
   11ebc:	b480      	push	{r7}
   11ebe:	b083      	sub	sp, #12
   11ec0:	af00      	add	r7, sp, #0
   11ec2:	4603      	mov	r3, r0
   11ec4:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   11ec6:	f248 030a 	movw	r3, #32778	; 0x800a
   11eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ece:	781b      	ldrb	r3, [r3, #0]
   11ed0:	b2db      	uxtb	r3, r3
   11ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	d028      	beq.n	11f2c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   11eda:	f64a 4331 	movw	r3, #44081	; 0xac31
   11ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee2:	781b      	ldrb	r3, [r3, #0]
   11ee4:	b2db      	uxtb	r3, r3
   11ee6:	461a      	mov	r2, r3
   11ee8:	f64a 4330 	movw	r3, #44080	; 0xac30
   11eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef0:	781b      	ldrb	r3, [r3, #0]
   11ef2:	3301      	adds	r3, #1
   11ef4:	429a      	cmp	r2, r3
   11ef6:	d100      	bne.n	11efa <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   11ef8:	e02c      	b.n	11f54 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   11efa:	f64a 4330 	movw	r3, #44080	; 0xac30
   11efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f02:	781b      	ldrb	r3, [r3, #0]
   11f04:	461a      	mov	r2, r3
   11f06:	f64a 4334 	movw	r3, #44084	; 0xac34
   11f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f0e:	79f9      	ldrb	r1, [r7, #7]
   11f10:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   11f12:	f64a 4330 	movw	r3, #44080	; 0xac30
   11f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f1a:	781b      	ldrb	r3, [r3, #0]
   11f1c:	3301      	adds	r3, #1
   11f1e:	b2da      	uxtb	r2, r3
   11f20:	f64a 4330 	movw	r3, #44080	; 0xac30
   11f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f28:	701a      	strb	r2, [r3, #0]
   11f2a:	e013      	b.n	11f54 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   11f2c:	f248 030c 	movw	r3, #32780	; 0x800c
   11f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f34:	79fa      	ldrb	r2, [r7, #7]
   11f36:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   11f38:	f248 030a 	movw	r3, #32778	; 0x800a
   11f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f40:	f248 020a 	movw	r2, #32778	; 0x800a
   11f44:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11f48:	7812      	ldrb	r2, [r2, #0]
   11f4a:	b2d2      	uxtb	r2, r2
   11f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11f50:	b2d2      	uxtb	r2, r2
   11f52:	701a      	strb	r2, [r3, #0]
  }
}
   11f54:	370c      	adds	r7, #12
   11f56:	46bd      	mov	sp, r7
   11f58:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f5c:	4770      	bx	lr
   11f5e:	bf00      	nop

00011f60 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   11f60:	b590      	push	{r4, r7, lr}
   11f62:	b089      	sub	sp, #36	; 0x24
   11f64:	af00      	add	r7, sp, #0
   11f66:	4603      	mov	r3, r0
   11f68:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   11f6a:	f643 13bc 	movw	r3, #14780	; 0x39bc
   11f6e:	f2c0 0301 	movt	r3, #1
   11f72:	f107 040c 	add.w	r4, r7, #12
   11f76:	6818      	ldr	r0, [r3, #0]
   11f78:	6859      	ldr	r1, [r3, #4]
   11f7a:	689a      	ldr	r2, [r3, #8]
   11f7c:	68db      	ldr	r3, [r3, #12]
   11f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   11f80:	79fb      	ldrb	r3, [r7, #7]
   11f82:	091b      	lsrs	r3, r3, #4
   11f84:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   11f86:	79fb      	ldrb	r3, [r7, #7]
   11f88:	f003 030f 	and.w	r3, r3, #15
   11f8c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   11f8e:	230f      	movs	r3, #15
   11f90:	77fb      	strb	r3, [r7, #31]
        low = 15;
   11f92:	230f      	movs	r3, #15
   11f94:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   11f96:	7ffb      	ldrb	r3, [r7, #31]
   11f98:	f107 0220 	add.w	r2, r7, #32
   11f9c:	4413      	add	r3, r2
   11f9e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   11fa2:	4618      	mov	r0, r3
   11fa4:	f7ff ff8a 	bl	11ebc <uart_transmit>
  uart_transmit(hex[low]);
   11fa8:	7fbb      	ldrb	r3, [r7, #30]
   11faa:	f107 0220 	add.w	r2, r7, #32
   11fae:	4413      	add	r3, r2
   11fb0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   11fb4:	4618      	mov	r0, r3
   11fb6:	f7ff ff81 	bl	11ebc <uart_transmit>
} 
   11fba:	3724      	adds	r7, #36	; 0x24
   11fbc:	46bd      	mov	sp, r7
   11fbe:	bd90      	pop	{r4, r7, pc}

00011fc0 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   11fc0:	b580      	push	{r7, lr}
   11fc2:	b084      	sub	sp, #16
   11fc4:	af00      	add	r7, sp, #0
   11fc6:	4603      	mov	r3, r0
   11fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   11fca:	88fb      	ldrh	r3, [r7, #6]
   11fcc:	0a1b      	lsrs	r3, r3, #8
   11fce:	b29b      	uxth	r3, r3
   11fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   11fd2:	88fb      	ldrh	r3, [r7, #6]
   11fd4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   11fd6:	7bfb      	ldrb	r3, [r7, #15]
   11fd8:	4618      	mov	r0, r3
   11fda:	f7ff ffc1 	bl	11f60 <uart_print_hex>
  uart_print_hex(low);
   11fde:	7bbb      	ldrb	r3, [r7, #14]
   11fe0:	4618      	mov	r0, r3
   11fe2:	f7ff ffbd 	bl	11f60 <uart_print_hex>
}
   11fe6:	3710      	adds	r7, #16
   11fe8:	46bd      	mov	sp, r7
   11fea:	bd80      	pop	{r7, pc}

00011fec <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   11fec:	b580      	push	{r7, lr}
   11fee:	b084      	sub	sp, #16
   11ff0:	af00      	add	r7, sp, #0
   11ff2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   11ff4:	2300      	movs	r3, #0
   11ff6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   11ff8:	e009      	b.n	1200e <uart_print_string+0x22>
    uart_transmit(s[i]);
   11ffa:	7bfb      	ldrb	r3, [r7, #15]
   11ffc:	687a      	ldr	r2, [r7, #4]
   11ffe:	4413      	add	r3, r2
   12000:	781b      	ldrb	r3, [r3, #0]
   12002:	4618      	mov	r0, r3
   12004:	f7ff ff5a 	bl	11ebc <uart_transmit>
    i++;
   12008:	7bfb      	ldrb	r3, [r7, #15]
   1200a:	3301      	adds	r3, #1
   1200c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1200e:	7bfb      	ldrb	r3, [r7, #15]
   12010:	687a      	ldr	r2, [r7, #4]
   12012:	4413      	add	r3, r2
   12014:	781b      	ldrb	r3, [r3, #0]
   12016:	2b00      	cmp	r3, #0
   12018:	d1ef      	bne.n	11ffa <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1201a:	3710      	adds	r7, #16
   1201c:	46bd      	mov	sp, r7
   1201e:	bd80      	pop	{r7, pc}

00012020 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   12020:	b480      	push	{r7}
   12022:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   12024:	f64a 4330 	movw	r3, #44080	; 0xac30
   12028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1202c:	781a      	ldrb	r2, [r3, #0]
   1202e:	f64a 4331 	movw	r3, #44081	; 0xac31
   12032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12036:	781b      	ldrb	r3, [r3, #0]
   12038:	b2db      	uxtb	r3, r3
   1203a:	429a      	cmp	r2, r3
   1203c:	d10e      	bne.n	1205c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1203e:	f248 030a 	movw	r3, #32778	; 0x800a
   12042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12046:	f248 020a 	movw	r2, #32778	; 0x800a
   1204a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1204e:	7812      	ldrb	r2, [r2, #0]
   12050:	b2d2      	uxtb	r2, r2
   12052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   12056:	b2d2      	uxtb	r2, r2
   12058:	701a      	strb	r2, [r3, #0]
   1205a:	e01d      	b.n	12098 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1205c:	f248 030c 	movw	r3, #32780	; 0x800c
   12060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12064:	f64a 4231 	movw	r2, #44081	; 0xac31
   12068:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1206c:	7812      	ldrb	r2, [r2, #0]
   1206e:	b2d2      	uxtb	r2, r2
   12070:	4611      	mov	r1, r2
   12072:	f64a 4234 	movw	r2, #44084	; 0xac34
   12076:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1207a:	5c52      	ldrb	r2, [r2, r1]
   1207c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1207e:	f64a 4331 	movw	r3, #44081	; 0xac31
   12082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12086:	781b      	ldrb	r3, [r3, #0]
   12088:	b2db      	uxtb	r3, r3
   1208a:	3301      	adds	r3, #1
   1208c:	b2da      	uxtb	r2, r3
   1208e:	f64a 4331 	movw	r3, #44081	; 0xac31
   12092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12096:	701a      	strb	r2, [r3, #0]
  }
}
   12098:	46bd      	mov	sp, r7
   1209a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1209e:	4770      	bx	lr

000120a0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   120a0:	b580      	push	{r7, lr}
   120a2:	b082      	sub	sp, #8
   120a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   120a6:	2010      	movs	r0, #16
   120a8:	2101      	movs	r1, #1
   120aa:	f7ee fe89 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   120ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   120b2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   120b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   120ba:	2201      	movs	r2, #1
   120bc:	f7ef f990 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   120c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   120c4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   120c6:	2310      	movs	r3, #16
   120c8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   120ca:	2303      	movs	r3, #3
   120cc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   120ce:	1d3b      	adds	r3, r7, #4
   120d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   120d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   120d8:	4619      	mov	r1, r3
   120da:	f7ef f845 	bl	1168 <GPIO_Init>
}
   120de:	3708      	adds	r7, #8
   120e0:	46bd      	mov	sp, r7
   120e2:	bd80      	pop	{r7, pc}

000120e4 <init_button>:

void init_button(void)
{
   120e4:	b580      	push	{r7, lr}
   120e6:	b082      	sub	sp, #8
   120e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   120ea:	2004      	movs	r0, #4
   120ec:	2101      	movs	r1, #1
   120ee:	f7ee fe67 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   120f2:	2301      	movs	r3, #1
   120f4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   120f6:	2304      	movs	r3, #4
   120f8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   120fa:	2303      	movs	r3, #3
   120fc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   120fe:	1d3b      	adds	r3, r7, #4
   12100:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12104:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12108:	4619      	mov	r1, r3
   1210a:	f7ef f82d 	bl	1168 <GPIO_Init>
}
   1210e:	3708      	adds	r7, #8
   12110:	46bd      	mov	sp, r7
   12112:	bd80      	pop	{r7, pc}

00012114 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1211a:	2001      	movs	r0, #1
   1211c:	2101      	movs	r1, #1
   1211e:	f7ee fe4f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   12122:	2000      	movs	r0, #0
   12124:	2100      	movs	r1, #0
   12126:	f7ef fa53 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1212a:	2301      	movs	r3, #1
   1212c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1212e:	2300      	movs	r3, #0
   12130:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   12132:	2308      	movs	r3, #8
   12134:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   12136:	2301      	movs	r3, #1
   12138:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1213a:	f107 0308 	add.w	r3, r7, #8
   1213e:	4618      	mov	r0, r3
   12140:	f7ef ff4c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   12144:	2306      	movs	r3, #6
   12146:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   12148:	230f      	movs	r3, #15
   1214a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1214c:	230f      	movs	r3, #15
   1214e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12150:	2301      	movs	r3, #1
   12152:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12154:	1d3b      	adds	r3, r7, #4
   12156:	4618      	mov	r0, r3
   12158:	f7f0 f87a 	bl	2250 <NVIC_Init>
}
   1215c:	3710      	adds	r7, #16
   1215e:	46bd      	mov	sp, r7
   12160:	bd80      	pop	{r7, pc}
   12162:	bf00      	nop

00012164 <init_rs232>:

void init_rs232(void)
{
   12164:	b580      	push	{r7, lr}
   12166:	b086      	sub	sp, #24
   12168:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1216a:	2005      	movs	r0, #5
   1216c:	2101      	movs	r1, #1
   1216e:	f7ee fe27 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   12172:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   12176:	2101      	movs	r1, #1
   12178:	f7ee fe4a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1217c:	2308      	movs	r3, #8
   1217e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   12180:	2304      	movs	r3, #4
   12182:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   12184:	1d3b      	adds	r3, r7, #4
   12186:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1218a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1218e:	4619      	mov	r1, r3
   12190:	f7ee ffea 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   12194:	2304      	movs	r3, #4
   12196:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12198:	2303      	movs	r3, #3
   1219a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1219c:	2318      	movs	r3, #24
   1219e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   121a0:	1d3b      	adds	r3, r7, #4
   121a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   121a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   121aa:	4619      	mov	r1, r3
   121ac:	f7ee ffdc 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   121b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   121b4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   121b6:	2300      	movs	r3, #0
   121b8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   121ba:	2300      	movs	r3, #0
   121bc:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   121be:	2300      	movs	r3, #0
   121c0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   121c2:	2300      	movs	r3, #0
   121c4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   121c6:	230c      	movs	r3, #12
   121c8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   121ca:	f107 0308 	add.w	r3, r7, #8
   121ce:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121d2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121d6:	4619      	mov	r1, r3
   121d8:	f7ef faae 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   121dc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121e4:	2101      	movs	r1, #1
   121e6:	f7ef fbc5 	bl	1974 <USART_Cmd>
}
   121ea:	3718      	adds	r7, #24
   121ec:	46bd      	mov	sp, r7
   121ee:	bd80      	pop	{r7, pc}

000121f0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   121f0:	b580      	push	{r7, lr}
   121f2:	b082      	sub	sp, #8
   121f4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   121f6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   121fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
   121fe:	f240 7127 	movw	r1, #1831	; 0x727
   12202:	2200      	movs	r2, #0
   12204:	f7ef fbd6 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   12208:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1220c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12210:	f240 5125 	movw	r1, #1317	; 0x525
   12214:	2201      	movs	r2, #1
   12216:	f7ef fbcd 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1221a:	2326      	movs	r3, #38	; 0x26
   1221c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1221e:	2300      	movs	r3, #0
   12220:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12222:	2301      	movs	r3, #1
   12224:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12226:	1d3b      	adds	r3, r7, #4
   12228:	4618      	mov	r0, r3
   1222a:	f7f0 f811 	bl	2250 <NVIC_Init>
}
   1222e:	3708      	adds	r7, #8
   12230:	46bd      	mov	sp, r7
   12232:	bd80      	pop	{r7, pc}

00012234 <enable_rs232>:

void enable_rs232(void)
{
   12234:	b580      	push	{r7, lr}
   12236:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   12238:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1223c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12240:	2101      	movs	r1, #1
   12242:	f7ef fb97 	bl	1974 <USART_Cmd>
}
   12246:	bd80      	pop	{r7, pc}

00012248 <send_byte>:


void send_byte(uint8_t b)
{
   12248:	b580      	push	{r7, lr}
   1224a:	b082      	sub	sp, #8
   1224c:	af00      	add	r7, sp, #0
   1224e:	4603      	mov	r3, r0
   12250:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   12252:	bf00      	nop
   12254:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12258:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1225c:	2180      	movs	r1, #128	; 0x80
   1225e:	f7ef fdf5 	bl	1e4c <USART_GetFlagStatus>
   12262:	4603      	mov	r3, r0
   12264:	2b00      	cmp	r3, #0
   12266:	d0f5      	beq.n	12254 <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   12268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1226c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   12270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12274:	f2c4 0201 	movt	r2, #16385	; 0x4001
   12278:	68d2      	ldr	r2, [r2, #12]
   1227a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1227e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   12280:	79fb      	ldrb	r3, [r7, #7]
   12282:	b29b      	uxth	r3, r3
   12284:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12288:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1228c:	4619      	mov	r1, r3
   1228e:	f7ef fc91 	bl	1bb4 <USART_SendData>
}
   12292:	3708      	adds	r7, #8
   12294:	46bd      	mov	sp, r7
   12296:	bd80      	pop	{r7, pc}

00012298 <send_num>:


void send_num(uint8_t b)
{
   12298:	b580      	push	{r7, lr}
   1229a:	b082      	sub	sp, #8
   1229c:	af00      	add	r7, sp, #0
   1229e:	4603      	mov	r3, r0
   122a0:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   122a2:	79fb      	ldrb	r3, [r7, #7]
   122a4:	3330      	adds	r3, #48	; 0x30
   122a6:	b2db      	uxtb	r3, r3
   122a8:	4618      	mov	r0, r3
   122aa:	f7ff ffcd 	bl	12248 <send_byte>
}
   122ae:	3708      	adds	r7, #8
   122b0:	46bd      	mov	sp, r7
   122b2:	bd80      	pop	{r7, pc}

000122b4 <vPrintString>:


void vPrintString( const char * string )
{
   122b4:	b580      	push	{r7, lr}
   122b6:	b084      	sub	sp, #16
   122b8:	af00      	add	r7, sp, #0
   122ba:	6078      	str	r0, [r7, #4]
    int i = 0;
   122bc:	2300      	movs	r3, #0
   122be:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   122c0:	e009      	b.n	122d6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   122c2:	68fb      	ldr	r3, [r7, #12]
   122c4:	687a      	ldr	r2, [r7, #4]
   122c6:	4413      	add	r3, r2
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	4618      	mov	r0, r3
   122cc:	f7ff ffbc 	bl	12248 <send_byte>
        i++;
   122d0:	68fb      	ldr	r3, [r7, #12]
   122d2:	3301      	adds	r3, #1
   122d4:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   122d6:	68fb      	ldr	r3, [r7, #12]
   122d8:	687a      	ldr	r2, [r7, #4]
   122da:	4413      	add	r3, r2
   122dc:	781b      	ldrb	r3, [r3, #0]
   122de:	2b00      	cmp	r3, #0
   122e0:	d1ef      	bne.n	122c2 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   122e2:	3710      	adds	r7, #16
   122e4:	46bd      	mov	sp, r7
   122e6:	bd80      	pop	{r7, pc}

000122e8 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   122e8:	b580      	push	{r7, lr}
   122ea:	b08e      	sub	sp, #56	; 0x38
   122ec:	af00      	add	r7, sp, #0
   122ee:	6078      	str	r0, [r7, #4]
    char time[33], tmp;
    unsigned int i, count = 0;
   122f0:	2300      	movs	r3, #0
   122f2:	633b      	str	r3, [r7, #48]	; 0x30
    long num = c_num;
   122f4:	687b      	ldr	r3, [r7, #4]
   122f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(num == 0)
   122f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   122fa:	2b00      	cmp	r3, #0
   122fc:	d106      	bne.n	1230c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   122fe:	f643 10cc 	movw	r0, #14796	; 0x39cc
   12302:	f2c0 0001 	movt	r0, #1
   12306:	f7ff ffd5 	bl	122b4 <vPrintString>
   1230a:	e064      	b.n	123d6 <vPrintNumber+0xee>
    }
    else
    {
        // transform long into char * 
        while( num   )
   1230c:	e024      	b.n	12358 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1230e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12310:	f246 6367 	movw	r3, #26215	; 0x6667
   12314:	f2c6 6366 	movt	r3, #26214	; 0x6666
   12318:	fb83 2301 	smull	r2, r3, r3, r1
   1231c:	109a      	asrs	r2, r3, #2
   1231e:	17cb      	asrs	r3, r1, #31
   12320:	1ad2      	subs	r2, r2, r3
   12322:	4613      	mov	r3, r2
   12324:	009b      	lsls	r3, r3, #2
   12326:	4413      	add	r3, r2
   12328:	005b      	lsls	r3, r3, #1
   1232a:	1aca      	subs	r2, r1, r3
   1232c:	b2d3      	uxtb	r3, r2
   1232e:	3330      	adds	r3, #48	; 0x30
   12330:	b2da      	uxtb	r2, r3
   12332:	f107 0108 	add.w	r1, r7, #8
   12336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12338:	440b      	add	r3, r1
   1233a:	701a      	strb	r2, [r3, #0]
            count ++;
   1233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1233e:	3301      	adds	r3, #1
   12340:	633b      	str	r3, [r7, #48]	; 0x30
            num /= 10;
   12342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12344:	f246 6367 	movw	r3, #26215	; 0x6667
   12348:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1234c:	fb83 1302 	smull	r1, r3, r3, r2
   12350:	1099      	asrs	r1, r3, #2
   12352:	17d3      	asrs	r3, r2, #31
   12354:	1acb      	subs	r3, r1, r3
   12356:	62fb      	str	r3, [r7, #44]	; 0x2c
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   12358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1235a:	2b00      	cmp	r3, #0
   1235c:	d1d7      	bne.n	1230e <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   1235e:	f107 0208 	add.w	r2, r7, #8
   12362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12364:	4413      	add	r3, r2
   12366:	2200      	movs	r2, #0
   12368:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   1236a:	2300      	movs	r3, #0
   1236c:	637b      	str	r3, [r7, #52]	; 0x34
   1236e:	e022      	b.n	123b6 <vPrintNumber+0xce>
        {
            tmp = time[i];
   12370:	f107 0208 	add.w	r2, r7, #8
   12374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12376:	4413      	add	r3, r2
   12378:	781b      	ldrb	r3, [r3, #0]
   1237a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            time[i] = time[count-1-i];
   1237e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12382:	1ad3      	subs	r3, r2, r3
   12384:	3b01      	subs	r3, #1
   12386:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1238a:	4413      	add	r3, r2
   1238c:	f813 2c30 	ldrb.w	r2, [r3, #-48]
   12390:	f107 0108 	add.w	r1, r7, #8
   12394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12396:	440b      	add	r3, r1
   12398:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   1239a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1239e:	1ad3      	subs	r3, r2, r3
   123a0:	3b01      	subs	r3, #1
   123a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
   123a6:	440b      	add	r3, r1
   123a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   123ac:	f803 2c30 	strb.w	r2, [r3, #-48]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   123b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   123b2:	3301      	adds	r3, #1
   123b4:	637b      	str	r3, [r7, #52]	; 0x34
   123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   123b8:	085a      	lsrs	r2, r3, #1
   123ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   123bc:	429a      	cmp	r2, r3
   123be:	d8d7      	bhi.n	12370 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   123c0:	f107 0308 	add.w	r3, r7, #8
   123c4:	4618      	mov	r0, r3
   123c6:	f7ff ff75 	bl	122b4 <vPrintString>
        vPrintString("\n\r");
   123ca:	f643 10d0 	movw	r0, #14800	; 0x39d0
   123ce:	f2c0 0001 	movt	r0, #1
   123d2:	f7ff ff6f 	bl	122b4 <vPrintString>
    }
}
   123d6:	3738      	adds	r7, #56	; 0x38
   123d8:	46bd      	mov	sp, r7
   123da:	bd80      	pop	{r7, pc}

000123dc <vSemaphoreInitialise>:
extern char * pcNameOfTask[NUMBEROFTASK];

portBASE_TYPE miss[NUMBEROFTASK];

void vSemaphoreInitialise()
{
   123dc:	b580      	push	{r7, lr}
   123de:	b082      	sub	sp, #8
   123e0:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   123e2:	2300      	movs	r3, #0
   123e4:	607b      	str	r3, [r7, #4]
   123e6:	e033      	b.n	12450 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
   123e8:	2001      	movs	r0, #1
   123ea:	2100      	movs	r1, #0
   123ec:	2203      	movs	r2, #3
   123ee:	f7f0 fbff 	bl	2bf0 <xQueueGenericCreate>
   123f2:	4601      	mov	r1, r0
   123f4:	f240 2320 	movw	r3, #544	; 0x220
   123f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123fc:	687a      	ldr	r2, [r7, #4]
   123fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   12402:	f240 2320 	movw	r3, #544	; 0x220
   12406:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1240a:	687a      	ldr	r2, [r7, #4]
   1240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12410:	2b00      	cmp	r3, #0
   12412:	d00c      	beq.n	1242e <vSemaphoreInitialise+0x52>
   12414:	f240 2320 	movw	r3, #544	; 0x220
   12418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241c:	687a      	ldr	r2, [r7, #4]
   1241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12422:	4618      	mov	r0, r3
   12424:	2100      	movs	r1, #0
   12426:	2200      	movs	r2, #0
   12428:	2300      	movs	r3, #0
   1242a:	f7f0 fc6f 	bl	2d0c <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
   1242e:	f240 2320 	movw	r3, #544	; 0x220
   12432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12436:	687a      	ldr	r2, [r7, #4]
   12438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1243c:	4618      	mov	r0, r3
   1243e:	2100      	movs	r1, #0
   12440:	f04f 32ff 	mov.w	r2, #4294967295
   12444:	2300      	movs	r3, #0
   12446:	f7f0 fd27 	bl	2e98 <xQueueGenericReceive>

void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTASK; ++ i  )
   1244a:	687b      	ldr	r3, [r7, #4]
   1244c:	3301      	adds	r3, #1
   1244e:	607b      	str	r3, [r7, #4]
   12450:	687b      	ldr	r3, [r7, #4]
   12452:	2b0c      	cmp	r3, #12
   12454:	ddc8      	ble.n	123e8 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xSemaphoreTable[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xSemaphoreTable[i], portMAX_DELAY);
    }
}
   12456:	3708      	adds	r7, #8
   12458:	46bd      	mov	sp, r7
   1245a:	bd80      	pop	{r7, pc}

0001245c <vParametersInit>:

void vParametersInit()
{
   1245c:	b480      	push	{r7}
   1245e:	b083      	sub	sp, #12
   12460:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12462:	2300      	movs	r3, #0
   12464:	607b      	str	r3, [r7, #4]
   12466:	e043      	b.n	124f0 <vParametersInit+0x94>
    {
        parameters[i].xMyId = i;
   12468:	f64a 5334 	movw	r3, #44340	; 0xad34
   1246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12470:	687a      	ldr	r2, [r7, #4]
   12472:	0112      	lsls	r2, r2, #4
   12474:	4413      	add	r3, r2
   12476:	687a      	ldr	r2, [r7, #4]
   12478:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   1247a:	f240 03c4 	movw	r3, #196	; 0xc4
   1247e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12482:	687a      	ldr	r2, [r7, #4]
   12484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12488:	f64a 5334 	movw	r3, #44340	; 0xad34
   1248c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12490:	6879      	ldr	r1, [r7, #4]
   12492:	0109      	lsls	r1, r1, #4
   12494:	440b      	add	r3, r1
   12496:	3304      	adds	r3, #4
   12498:	601a      	str	r2, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   1249a:	f240 035c 	movw	r3, #92	; 0x5c
   1249e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a2:	687a      	ldr	r2, [r7, #4]
   124a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   124a8:	f64a 5334 	movw	r3, #44340	; 0xad34
   124ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b0:	6879      	ldr	r1, [r7, #4]
   124b2:	0109      	lsls	r1, r1, #4
   124b4:	440b      	add	r3, r1
   124b6:	3308      	adds	r3, #8
   124b8:	601a      	str	r2, [r3, #0]
        parameters[i].xMySem = xSemaphoreTable[i];
   124ba:	f240 2320 	movw	r3, #544	; 0x220
   124be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c2:	687a      	ldr	r2, [r7, #4]
   124c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   124c8:	f64a 5334 	movw	r3, #44340	; 0xad34
   124cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d0:	6879      	ldr	r1, [r7, #4]
   124d2:	0109      	lsls	r1, r1, #4
   124d4:	440b      	add	r3, r1
   124d6:	330c      	adds	r3, #12
   124d8:	601a      	str	r2, [r3, #0]
        miss[i] = 0;
   124da:	f64a 6338 	movw	r3, #44600	; 0xae38
   124de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e2:	687a      	ldr	r2, [r7, #4]
   124e4:	2100      	movs	r1, #0
   124e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}

void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   124ea:	687b      	ldr	r3, [r7, #4]
   124ec:	3301      	adds	r3, #1
   124ee:	607b      	str	r3, [r7, #4]
   124f0:	687b      	ldr	r3, [r7, #4]
   124f2:	2b0c      	cmp	r3, #12
   124f4:	ddb8      	ble.n	12468 <vParametersInit+0xc>
        parameters[i].xMyFun = xTaskTable[i];
        parameters[i].xPeriod = xPeriodTable[i];
        parameters[i].xMySem = xSemaphoreTable[i];
        miss[i] = 0;
    }
}
   124f6:	370c      	adds	r7, #12
   124f8:	46bd      	mov	sp, r7
   124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   124fe:	4770      	bx	lr

00012500 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   12500:	b580      	push	{r7, lr}
   12502:	b08e      	sub	sp, #56	; 0x38
   12504:	af00      	add	r7, sp, #0
   12506:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   12508:	687b      	ldr	r3, [r7, #4]
   1250a:	627b      	str	r3, [r7, #36]	; 0x24
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   1250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1250e:	681b      	ldr	r3, [r3, #0]
   12510:	623b      	str	r3, [r7, #32]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   12512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12514:	685b      	ldr	r3, [r3, #4]
   12516:	61fb      	str	r3, [r7, #28]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   12518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1251a:	689b      	ldr	r3, [r3, #8]
   1251c:	61bb      	str	r3, [r7, #24]
    xSemaphoreHandle xMySem = xMyParameter->xMySem;
   1251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12520:	68db      	ldr	r3, [r3, #12]
   12522:	617b      	str	r3, [r7, #20]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
   12524:	2301      	movs	r3, #1
   12526:	633b      	str	r3, [r7, #48]	; 0x30
    
    // used for periodic task
    portTickType xLastExecutionTime = xMyPeriod ; 
   12528:	69bb      	ldr	r3, [r7, #24]
   1252a:	60bb      	str	r3, [r7, #8]
    portTickType xSystemDeadline = 20000;
   1252c:	f644 6320 	movw	r3, #20000	; 0x4e20
   12530:	613b      	str	r3, [r7, #16]

    portBASE_TYPE xCount = 1;
   12532:	2301      	movs	r3, #1
   12534:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xReadyTime = xCount * xMyPeriod;
   12536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12538:	69ba      	ldr	r2, [r7, #24]
   1253a:	fb02 f303 	mul.w	r3, r2, r3
   1253e:	62bb      	str	r3, [r7, #40]	; 0x28
    portTickType xDeadline ;
    while(1)
    {
        // all the task start to execute from 100 ms.
        if( IS_FIRST_TIME_TO_EXE == 1 )
   12540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12542:	2b01      	cmp	r3, #1
   12544:	d108      	bne.n	12558 <vTimeTask+0x58>
        {
            xSemaphoreTake(xMySem, portMAX_DELAY);
   12546:	6978      	ldr	r0, [r7, #20]
   12548:	2100      	movs	r1, #0
   1254a:	f04f 32ff 	mov.w	r2, #4294967295
   1254e:	2300      	movs	r3, #0
   12550:	f7f0 fca2 	bl	2e98 <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
   12554:	2300      	movs	r3, #0
   12556:	633b      	str	r3, [r7, #48]	; 0x30
        }

        vTaskSuspendAll();
   12558:	f7f1 faa8 	bl	3aac <vTaskSuspendAll>
        vPrintNumber(xMyId);
   1255c:	6a38      	ldr	r0, [r7, #32]
   1255e:	f7ff fec3 	bl	122e8 <vPrintNumber>
        vPrintNumber( xReadyTime );
   12562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12564:	f7ff fec0 	bl	122e8 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   12568:	f7f1 fb5c 	bl	3c24 <xTaskGetTickCount>
   1256c:	4603      	mov	r3, r0
   1256e:	4618      	mov	r0, r3
   12570:	f7ff feba 	bl	122e8 <vPrintNumber>
        xTaskResumeAll();
   12574:	f7f1 faac 	bl	3ad0 <xTaskResumeAll>

        for( i = 0; i < 500; ++ i )
   12578:	2300      	movs	r3, #0
   1257a:	637b      	str	r3, [r7, #52]	; 0x34
   1257c:	e004      	b.n	12588 <vTimeTask+0x88>
        {
            xMyFun();
   1257e:	69fb      	ldr	r3, [r7, #28]
   12580:	4798      	blx	r3
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();

        for( i = 0; i < 500; ++ i )
   12582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12584:	3301      	adds	r3, #1
   12586:	637b      	str	r3, [r7, #52]	; 0x34
   12588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1258a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1258e:	dbf6      	blt.n	1257e <vTimeTask+0x7e>
            vPrintNumber(xMyId);
            vPrintString("miss deadline\n\r");
            miss[xMyId] ++;
        }
        */
        xCount ++;
   12590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12592:	3301      	adds	r3, #1
   12594:	62fb      	str	r3, [r7, #44]	; 0x2c
        xReadyTime = xCount * xMyPeriod;
   12596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12598:	69ba      	ldr	r2, [r7, #24]
   1259a:	fb02 f303 	mul.w	r3, r2, r3
   1259e:	62bb      	str	r3, [r7, #40]	; 0x28
        xDeadline = xReadyTime ;
   125a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   125a2:	60fb      	str	r3, [r7, #12]


        vTaskSuspendAll();
   125a4:	f7f1 fa82 	bl	3aac <vTaskSuspendAll>
        vPrintNumber((xMyId + 10) * 3);
   125a8:	6a3b      	ldr	r3, [r7, #32]
   125aa:	f103 020a 	add.w	r2, r3, #10
   125ae:	4613      	mov	r3, r2
   125b0:	005b      	lsls	r3, r3, #1
   125b2:	4413      	add	r3, r2
   125b4:	4618      	mov	r0, r3
   125b6:	f7ff fe97 	bl	122e8 <vPrintNumber>
        vPrintNumber( xDeadline );
   125ba:	68f8      	ldr	r0, [r7, #12]
   125bc:	f7ff fe94 	bl	122e8 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   125c0:	f7f1 fb30 	bl	3c24 <xTaskGetTickCount>
   125c4:	4603      	mov	r3, r0
   125c6:	4618      	mov	r0, r3
   125c8:	f7ff fe8e 	bl	122e8 <vPrintNumber>
        xTaskResumeAll();
   125cc:	f7f1 fa80 	bl	3ad0 <xTaskResumeAll>
            xSystemDeadline += 20000;
            //break;
        }
        */

        if(xTaskGetTickCount() > 1000000)
   125d0:	f7f1 fb28 	bl	3c24 <xTaskGetTickCount>
   125d4:	4602      	mov	r2, r0
   125d6:	f244 2340 	movw	r3, #16960	; 0x4240
   125da:	f2c0 030f 	movt	r3, #15
   125de:	429a      	cmp	r2, r3
   125e0:	d900      	bls.n	125e4 <vTimeTask+0xe4>
        {
            break;
   125e2:	e006      	b.n	125f2 <vTimeTask+0xf2>
        }

        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   125e4:	f107 0308 	add.w	r3, r7, #8
   125e8:	4618      	mov	r0, r3
   125ea:	69b9      	ldr	r1, [r7, #24]
   125ec:	f7f0 ffca 	bl	3584 <vTaskDelayUntil>
    }
   125f0:	e7a6      	b.n	12540 <vTimeTask+0x40>
}
   125f2:	3738      	adds	r7, #56	; 0x38
   125f4:	46bd      	mov	sp, r7
   125f6:	bd80      	pop	{r7, pc}

000125f8 <main>:


int main()
{
   125f8:	b590      	push	{r4, r7, lr}
   125fa:	b087      	sub	sp, #28
   125fc:	af04      	add	r7, sp, #16

	init_led();
   125fe:	f7ff fd4f 	bl	120a0 <init_led>
	init_rs232();
   12602:	f7ff fdaf 	bl	12164 <init_rs232>
	enable_rs232_interrupts();
   12606:	f7ff fdf3 	bl	121f0 <enable_rs232_interrupts>
	enable_rs232();
   1260a:	f7ff fe13 	bl	12234 <enable_rs232>

    vSemaphoreInitialise();
   1260e:	f7ff fee5 	bl	123dc <vSemaphoreInitialise>
    vParametersInit();
   12612:	f7ff ff23 	bl	1245c <vParametersInit>

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12616:	2300      	movs	r3, #0
   12618:	607b      	str	r3, [r7, #4]
   1261a:	e02f      	b.n	1267c <main+0x84>
    {
        xTaskCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
   1261c:	f240 0390 	movw	r3, #144	; 0x90
   12620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12624:	687a      	ldr	r2, [r7, #4]
   12626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1262a:	687b      	ldr	r3, [r7, #4]
   1262c:	0119      	lsls	r1, r3, #4
   1262e:	f64a 5334 	movw	r3, #44340	; 0xad34
   12632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12636:	18cc      	adds	r4, r1, r3
   12638:	f240 0328 	movw	r3, #40	; 0x28
   1263c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12640:	6879      	ldr	r1, [r7, #4]
   12642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   12646:	4619      	mov	r1, r3
   12648:	687b      	ldr	r3, [r7, #4]
   1264a:	0098      	lsls	r0, r3, #2
   1264c:	f64a 6304 	movw	r3, #44548	; 0xae04
   12650:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12654:	4403      	add	r3, r0
   12656:	9100      	str	r1, [sp, #0]
   12658:	9301      	str	r3, [sp, #4]
   1265a:	2300      	movs	r3, #0
   1265c:	9302      	str	r3, [sp, #8]
   1265e:	2300      	movs	r3, #0
   12660:	9303      	str	r3, [sp, #12]
   12662:	f242 5001 	movw	r0, #9473	; 0x2501
   12666:	f2c0 0001 	movt	r0, #1
   1266a:	4611      	mov	r1, r2
   1266c:	f44f 7280 	mov.w	r2, #256	; 0x100
   12670:	4623      	mov	r3, r4
   12672:	f7f0 fe5d 	bl	3330 <xTaskGenericCreate>

    vSemaphoreInitialise();
    vParametersInit();

    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   12676:	687b      	ldr	r3, [r7, #4]
   12678:	3301      	adds	r3, #1
   1267a:	607b      	str	r3, [r7, #4]
   1267c:	687b      	ldr	r3, [r7, #4]
   1267e:	2b0c      	cmp	r3, #12
   12680:	ddcc      	ble.n	1261c <main+0x24>
    {
        xTaskCreate(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i]);
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   12682:	f7f1 f9d3 	bl	3a2c <vTaskStartScheduler>

	return 0;
   12686:	2300      	movs	r3, #0
}
   12688:	4618      	mov	r0, r3
   1268a:	370c      	adds	r7, #12
   1268c:	46bd      	mov	sp, r7
   1268e:	bd90      	pop	{r4, r7, pc}

00012690 <myTraceCreate>:

void myTraceCreate      (){
   12690:	b480      	push	{r7}
   12692:	af00      	add	r7, sp, #0
}
   12694:	46bd      	mov	sp, r7
   12696:	f85d 7b04 	ldr.w	r7, [sp], #4
   1269a:	4770      	bx	lr

0001269c <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   1269c:	b480      	push	{r7}
   1269e:	af00      	add	r7, sp, #0
}
   126a0:	46bd      	mov	sp, r7
   126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   126a6:	4770      	bx	lr

000126a8 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   126a8:	b480      	push	{r7}
   126aa:	af00      	add	r7, sp, #0
}
   126ac:	46bd      	mov	sp, r7
   126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   126b2:	4770      	bx	lr

000126b4 <myTraceGetTick>:

inline float myTraceGetTick(){
   126b4:	b480      	push	{r7}
   126b6:	af00      	add	r7, sp, #0
}
   126b8:	4618      	mov	r0, r3
   126ba:	46bd      	mov	sp, r7
   126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   126c0:	4770      	bx	lr
   126c2:	bf00      	nop

000126c4 <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
   126c4:	b480      	push	{r7}
   126c6:	af00      	add	r7, sp, #0
	//return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
}
   126c8:	4618      	mov	r0, r3
   126ca:	46bd      	mov	sp, r7
   126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   126d0:	4770      	bx	lr
   126d2:	bf00      	nop

000126d4 <vApplicationTickHook>:

void vApplicationTickHook()
{
   126d4:	b580      	push	{r7, lr}
   126d6:	b082      	sub	sp, #8
   126d8:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
   126da:	f7f1 faa3 	bl	3c24 <xTaskGetTickCount>
   126de:	6038      	str	r0, [r7, #0]
    
    if( xCurrentTime > 0 && xCurrentTime <1001 )
   126e0:	683b      	ldr	r3, [r7, #0]
   126e2:	2b00      	cmp	r3, #0
   126e4:	d023      	beq.n	1272e <vApplicationTickHook+0x5a>
   126e6:	683b      	ldr	r3, [r7, #0]
   126e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   126ec:	d81f      	bhi.n	1272e <vApplicationTickHook+0x5a>
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   126ee:	2300      	movs	r3, #0
   126f0:	607b      	str	r3, [r7, #4]
   126f2:	e019      	b.n	12728 <vApplicationTickHook+0x54>
        {
            if( xCurrentTime == xPeriodTable[i] )
   126f4:	f240 035c 	movw	r3, #92	; 0x5c
   126f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126fc:	687a      	ldr	r2, [r7, #4]
   126fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12702:	683b      	ldr	r3, [r7, #0]
   12704:	429a      	cmp	r2, r3
   12706:	d10c      	bne.n	12722 <vApplicationTickHook+0x4e>
            xSemaphoreGive( xSemaphoreTable[i] );
   12708:	f240 2320 	movw	r3, #544	; 0x220
   1270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12710:	687a      	ldr	r2, [r7, #4]
   12712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12716:	4618      	mov	r0, r3
   12718:	2100      	movs	r1, #0
   1271a:	2200      	movs	r2, #0
   1271c:	2300      	movs	r3, #0
   1271e:	f7f0 faf5 	bl	2d0c <xQueueGenericSend>
    portBASE_TYPE i;
    portTickType xCurrentTime = xTaskGetTickCount();
    
    if( xCurrentTime > 0 && xCurrentTime <1001 )
    {
        for( i = 0; i < NUMBEROFTASK; ++ i )
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	3301      	adds	r3, #1
   12726:	607b      	str	r3, [r7, #4]
   12728:	687b      	ldr	r3, [r7, #4]
   1272a:	2b0c      	cmp	r3, #12
   1272c:	dde2      	ble.n	126f4 <vApplicationTickHook+0x20>
        {
            if( xCurrentTime == xPeriodTable[i] )
            xSemaphoreGive( xSemaphoreTable[i] );
        }
    }
}
   1272e:	3708      	adds	r7, #8
   12730:	46bd      	mov	sp, r7
   12732:	bd80      	pop	{r7, pc}

00012734 <__aeabi_drsub>:
   12734:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12738:	e002      	b.n	12740 <__adddf3>
   1273a:	bf00      	nop

0001273c <__aeabi_dsub>:
   1273c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00012740 <__adddf3>:
   12740:	b530      	push	{r4, r5, lr}
   12742:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12746:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1274a:	ea94 0f05 	teq	r4, r5
   1274e:	bf08      	it	eq
   12750:	ea90 0f02 	teqeq	r0, r2
   12754:	bf1f      	itttt	ne
   12756:	ea54 0c00 	orrsne.w	ip, r4, r0
   1275a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1275e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   12762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12766:	f000 80e2 	beq.w	1292e <__adddf3+0x1ee>
   1276a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1276e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   12772:	bfb8      	it	lt
   12774:	426d      	neglt	r5, r5
   12776:	dd0c      	ble.n	12792 <__adddf3+0x52>
   12778:	442c      	add	r4, r5
   1277a:	ea80 0202 	eor.w	r2, r0, r2
   1277e:	ea81 0303 	eor.w	r3, r1, r3
   12782:	ea82 0000 	eor.w	r0, r2, r0
   12786:	ea83 0101 	eor.w	r1, r3, r1
   1278a:	ea80 0202 	eor.w	r2, r0, r2
   1278e:	ea81 0303 	eor.w	r3, r1, r3
   12792:	2d36      	cmp	r5, #54	; 0x36
   12794:	bf88      	it	hi
   12796:	bd30      	pophi	{r4, r5, pc}
   12798:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1279c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   127a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   127a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   127a8:	d002      	beq.n	127b0 <__adddf3+0x70>
   127aa:	4240      	negs	r0, r0
   127ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   127b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   127b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   127b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   127bc:	d002      	beq.n	127c4 <__adddf3+0x84>
   127be:	4252      	negs	r2, r2
   127c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   127c4:	ea94 0f05 	teq	r4, r5
   127c8:	f000 80a7 	beq.w	1291a <__adddf3+0x1da>
   127cc:	f1a4 0401 	sub.w	r4, r4, #1
   127d0:	f1d5 0e20 	rsbs	lr, r5, #32
   127d4:	db0d      	blt.n	127f2 <__adddf3+0xb2>
   127d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   127da:	fa22 f205 	lsr.w	r2, r2, r5
   127de:	1880      	adds	r0, r0, r2
   127e0:	f141 0100 	adc.w	r1, r1, #0
   127e4:	fa03 f20e 	lsl.w	r2, r3, lr
   127e8:	1880      	adds	r0, r0, r2
   127ea:	fa43 f305 	asr.w	r3, r3, r5
   127ee:	4159      	adcs	r1, r3
   127f0:	e00e      	b.n	12810 <__adddf3+0xd0>
   127f2:	f1a5 0520 	sub.w	r5, r5, #32
   127f6:	f10e 0e20 	add.w	lr, lr, #32
   127fa:	2a01      	cmp	r2, #1
   127fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   12800:	bf28      	it	cs
   12802:	f04c 0c02 	orrcs.w	ip, ip, #2
   12806:	fa43 f305 	asr.w	r3, r3, r5
   1280a:	18c0      	adds	r0, r0, r3
   1280c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   12810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12814:	d507      	bpl.n	12826 <__adddf3+0xe6>
   12816:	f04f 0e00 	mov.w	lr, #0
   1281a:	f1dc 0c00 	rsbs	ip, ip, #0
   1281e:	eb7e 0000 	sbcs.w	r0, lr, r0
   12822:	eb6e 0101 	sbc.w	r1, lr, r1
   12826:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1282a:	d31b      	bcc.n	12864 <__adddf3+0x124>
   1282c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   12830:	d30c      	bcc.n	1284c <__adddf3+0x10c>
   12832:	0849      	lsrs	r1, r1, #1
   12834:	ea5f 0030 	movs.w	r0, r0, rrx
   12838:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1283c:	f104 0401 	add.w	r4, r4, #1
   12840:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12844:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12848:	f080 809a 	bcs.w	12980 <__adddf3+0x240>
   1284c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12850:	bf08      	it	eq
   12852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12856:	f150 0000 	adcs.w	r0, r0, #0
   1285a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1285e:	ea41 0105 	orr.w	r1, r1, r5
   12862:	bd30      	pop	{r4, r5, pc}
   12864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   12868:	4140      	adcs	r0, r0
   1286a:	eb41 0101 	adc.w	r1, r1, r1
   1286e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12872:	f1a4 0401 	sub.w	r4, r4, #1
   12876:	d1e9      	bne.n	1284c <__adddf3+0x10c>
   12878:	f091 0f00 	teq	r1, #0
   1287c:	bf04      	itt	eq
   1287e:	4601      	moveq	r1, r0
   12880:	2000      	moveq	r0, #0
   12882:	fab1 f381 	clz	r3, r1
   12886:	bf08      	it	eq
   12888:	3320      	addeq	r3, #32
   1288a:	f1a3 030b 	sub.w	r3, r3, #11
   1288e:	f1b3 0220 	subs.w	r2, r3, #32
   12892:	da0c      	bge.n	128ae <__adddf3+0x16e>
   12894:	320c      	adds	r2, #12
   12896:	dd08      	ble.n	128aa <__adddf3+0x16a>
   12898:	f102 0c14 	add.w	ip, r2, #20
   1289c:	f1c2 020c 	rsb	r2, r2, #12
   128a0:	fa01 f00c 	lsl.w	r0, r1, ip
   128a4:	fa21 f102 	lsr.w	r1, r1, r2
   128a8:	e00c      	b.n	128c4 <__adddf3+0x184>
   128aa:	f102 0214 	add.w	r2, r2, #20
   128ae:	bfd8      	it	le
   128b0:	f1c2 0c20 	rsble	ip, r2, #32
   128b4:	fa01 f102 	lsl.w	r1, r1, r2
   128b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   128bc:	bfdc      	itt	le
   128be:	ea41 010c 	orrle.w	r1, r1, ip
   128c2:	4090      	lslle	r0, r2
   128c4:	1ae4      	subs	r4, r4, r3
   128c6:	bfa2      	ittt	ge
   128c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   128cc:	4329      	orrge	r1, r5
   128ce:	bd30      	popge	{r4, r5, pc}
   128d0:	ea6f 0404 	mvn.w	r4, r4
   128d4:	3c1f      	subs	r4, #31
   128d6:	da1c      	bge.n	12912 <__adddf3+0x1d2>
   128d8:	340c      	adds	r4, #12
   128da:	dc0e      	bgt.n	128fa <__adddf3+0x1ba>
   128dc:	f104 0414 	add.w	r4, r4, #20
   128e0:	f1c4 0220 	rsb	r2, r4, #32
   128e4:	fa20 f004 	lsr.w	r0, r0, r4
   128e8:	fa01 f302 	lsl.w	r3, r1, r2
   128ec:	ea40 0003 	orr.w	r0, r0, r3
   128f0:	fa21 f304 	lsr.w	r3, r1, r4
   128f4:	ea45 0103 	orr.w	r1, r5, r3
   128f8:	bd30      	pop	{r4, r5, pc}
   128fa:	f1c4 040c 	rsb	r4, r4, #12
   128fe:	f1c4 0220 	rsb	r2, r4, #32
   12902:	fa20 f002 	lsr.w	r0, r0, r2
   12906:	fa01 f304 	lsl.w	r3, r1, r4
   1290a:	ea40 0003 	orr.w	r0, r0, r3
   1290e:	4629      	mov	r1, r5
   12910:	bd30      	pop	{r4, r5, pc}
   12912:	fa21 f004 	lsr.w	r0, r1, r4
   12916:	4629      	mov	r1, r5
   12918:	bd30      	pop	{r4, r5, pc}
   1291a:	f094 0f00 	teq	r4, #0
   1291e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   12922:	bf06      	itte	eq
   12924:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12928:	3401      	addeq	r4, #1
   1292a:	3d01      	subne	r5, #1
   1292c:	e74e      	b.n	127cc <__adddf3+0x8c>
   1292e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12932:	bf18      	it	ne
   12934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12938:	d029      	beq.n	1298e <__adddf3+0x24e>
   1293a:	ea94 0f05 	teq	r4, r5
   1293e:	bf08      	it	eq
   12940:	ea90 0f02 	teqeq	r0, r2
   12944:	d005      	beq.n	12952 <__adddf3+0x212>
   12946:	ea54 0c00 	orrs.w	ip, r4, r0
   1294a:	bf04      	itt	eq
   1294c:	4619      	moveq	r1, r3
   1294e:	4610      	moveq	r0, r2
   12950:	bd30      	pop	{r4, r5, pc}
   12952:	ea91 0f03 	teq	r1, r3
   12956:	bf1e      	ittt	ne
   12958:	2100      	movne	r1, #0
   1295a:	2000      	movne	r0, #0
   1295c:	bd30      	popne	{r4, r5, pc}
   1295e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   12962:	d105      	bne.n	12970 <__adddf3+0x230>
   12964:	0040      	lsls	r0, r0, #1
   12966:	4149      	adcs	r1, r1
   12968:	bf28      	it	cs
   1296a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1296e:	bd30      	pop	{r4, r5, pc}
   12970:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   12974:	bf3c      	itt	cc
   12976:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1297a:	bd30      	popcc	{r4, r5, pc}
   1297c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12980:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   12984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12988:	f04f 0000 	mov.w	r0, #0
   1298c:	bd30      	pop	{r4, r5, pc}
   1298e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12992:	bf1a      	itte	ne
   12994:	4619      	movne	r1, r3
   12996:	4610      	movne	r0, r2
   12998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1299c:	bf1c      	itt	ne
   1299e:	460b      	movne	r3, r1
   129a0:	4602      	movne	r2, r0
   129a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   129a6:	bf06      	itte	eq
   129a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   129ac:	ea91 0f03 	teqeq	r1, r3
   129b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   129b4:	bd30      	pop	{r4, r5, pc}
   129b6:	bf00      	nop

000129b8 <__aeabi_ui2d>:
   129b8:	f090 0f00 	teq	r0, #0
   129bc:	bf04      	itt	eq
   129be:	2100      	moveq	r1, #0
   129c0:	4770      	bxeq	lr
   129c2:	b530      	push	{r4, r5, lr}
   129c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129cc:	f04f 0500 	mov.w	r5, #0
   129d0:	f04f 0100 	mov.w	r1, #0
   129d4:	e750      	b.n	12878 <__adddf3+0x138>
   129d6:	bf00      	nop

000129d8 <__aeabi_i2d>:
   129d8:	f090 0f00 	teq	r0, #0
   129dc:	bf04      	itt	eq
   129de:	2100      	moveq	r1, #0
   129e0:	4770      	bxeq	lr
   129e2:	b530      	push	{r4, r5, lr}
   129e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   129f0:	bf48      	it	mi
   129f2:	4240      	negmi	r0, r0
   129f4:	f04f 0100 	mov.w	r1, #0
   129f8:	e73e      	b.n	12878 <__adddf3+0x138>
   129fa:	bf00      	nop

000129fc <__aeabi_f2d>:
   129fc:	0042      	lsls	r2, r0, #1
   129fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   12a02:	ea4f 0131 	mov.w	r1, r1, rrx
   12a06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   12a0a:	bf1f      	itttt	ne
   12a0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   12a10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12a14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12a18:	4770      	bxne	lr
   12a1a:	f092 0f00 	teq	r2, #0
   12a1e:	bf14      	ite	ne
   12a20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12a24:	4770      	bxeq	lr
   12a26:	b530      	push	{r4, r5, lr}
   12a28:	f44f 7460 	mov.w	r4, #896	; 0x380
   12a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12a34:	e720      	b.n	12878 <__adddf3+0x138>
   12a36:	bf00      	nop

00012a38 <__aeabi_ul2d>:
   12a38:	ea50 0201 	orrs.w	r2, r0, r1
   12a3c:	bf08      	it	eq
   12a3e:	4770      	bxeq	lr
   12a40:	b530      	push	{r4, r5, lr}
   12a42:	f04f 0500 	mov.w	r5, #0
   12a46:	e00a      	b.n	12a5e <__aeabi_l2d+0x16>

00012a48 <__aeabi_l2d>:
   12a48:	ea50 0201 	orrs.w	r2, r0, r1
   12a4c:	bf08      	it	eq
   12a4e:	4770      	bxeq	lr
   12a50:	b530      	push	{r4, r5, lr}
   12a52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12a56:	d502      	bpl.n	12a5e <__aeabi_l2d+0x16>
   12a58:	4240      	negs	r0, r0
   12a5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12a5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12a62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12a66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   12a6a:	f43f aedc 	beq.w	12826 <__adddf3+0xe6>
   12a6e:	f04f 0203 	mov.w	r2, #3
   12a72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a76:	bf18      	it	ne
   12a78:	3203      	addne	r2, #3
   12a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a7e:	bf18      	it	ne
   12a80:	3203      	addne	r2, #3
   12a82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   12a86:	f1c2 0320 	rsb	r3, r2, #32
   12a8a:	fa00 fc03 	lsl.w	ip, r0, r3
   12a8e:	fa20 f002 	lsr.w	r0, r0, r2
   12a92:	fa01 fe03 	lsl.w	lr, r1, r3
   12a96:	ea40 000e 	orr.w	r0, r0, lr
   12a9a:	fa21 f102 	lsr.w	r1, r1, r2
   12a9e:	4414      	add	r4, r2
   12aa0:	e6c1      	b.n	12826 <__adddf3+0xe6>
   12aa2:	bf00      	nop

00012aa4 <__aeabi_dmul>:
   12aa4:	b570      	push	{r4, r5, r6, lr}
   12aa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12aaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12aae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12ab2:	bf1d      	ittte	ne
   12ab4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12ab8:	ea94 0f0c 	teqne	r4, ip
   12abc:	ea95 0f0c 	teqne	r5, ip
   12ac0:	f000 f8de 	bleq	12c80 <__aeabi_dmul+0x1dc>
   12ac4:	442c      	add	r4, r5
   12ac6:	ea81 0603 	eor.w	r6, r1, r3
   12aca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12ace:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12ad2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12ad6:	bf18      	it	ne
   12ad8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12ae4:	d038      	beq.n	12b58 <__aeabi_dmul+0xb4>
   12ae6:	fba0 ce02 	umull	ip, lr, r0, r2
   12aea:	f04f 0500 	mov.w	r5, #0
   12aee:	fbe1 e502 	umlal	lr, r5, r1, r2
   12af2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12af6:	fbe0 e503 	umlal	lr, r5, r0, r3
   12afa:	f04f 0600 	mov.w	r6, #0
   12afe:	fbe1 5603 	umlal	r5, r6, r1, r3
   12b02:	f09c 0f00 	teq	ip, #0
   12b06:	bf18      	it	ne
   12b08:	f04e 0e01 	orrne.w	lr, lr, #1
   12b0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12b10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12b14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12b18:	d204      	bcs.n	12b24 <__aeabi_dmul+0x80>
   12b1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12b1e:	416d      	adcs	r5, r5
   12b20:	eb46 0606 	adc.w	r6, r6, r6
   12b24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12b28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12b2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12b30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12b34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12b38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12b3c:	bf88      	it	hi
   12b3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12b42:	d81e      	bhi.n	12b82 <__aeabi_dmul+0xde>
   12b44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12b48:	bf08      	it	eq
   12b4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12b4e:	f150 0000 	adcs.w	r0, r0, #0
   12b52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12b56:	bd70      	pop	{r4, r5, r6, pc}
   12b58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12b5c:	ea46 0101 	orr.w	r1, r6, r1
   12b60:	ea40 0002 	orr.w	r0, r0, r2
   12b64:	ea81 0103 	eor.w	r1, r1, r3
   12b68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12b6c:	bfc2      	ittt	gt
   12b6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   12b72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12b76:	bd70      	popgt	{r4, r5, r6, pc}
   12b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12b7c:	f04f 0e00 	mov.w	lr, #0
   12b80:	3c01      	subs	r4, #1
   12b82:	f300 80ab 	bgt.w	12cdc <__aeabi_dmul+0x238>
   12b86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12b8a:	bfde      	ittt	le
   12b8c:	2000      	movle	r0, #0
   12b8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12b92:	bd70      	pople	{r4, r5, r6, pc}
   12b94:	f1c4 0400 	rsb	r4, r4, #0
   12b98:	3c20      	subs	r4, #32
   12b9a:	da35      	bge.n	12c08 <__aeabi_dmul+0x164>
   12b9c:	340c      	adds	r4, #12
   12b9e:	dc1b      	bgt.n	12bd8 <__aeabi_dmul+0x134>
   12ba0:	f104 0414 	add.w	r4, r4, #20
   12ba4:	f1c4 0520 	rsb	r5, r4, #32
   12ba8:	fa00 f305 	lsl.w	r3, r0, r5
   12bac:	fa20 f004 	lsr.w	r0, r0, r4
   12bb0:	fa01 f205 	lsl.w	r2, r1, r5
   12bb4:	ea40 0002 	orr.w	r0, r0, r2
   12bb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12bbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12bc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12bc4:	fa21 f604 	lsr.w	r6, r1, r4
   12bc8:	eb42 0106 	adc.w	r1, r2, r6
   12bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bd0:	bf08      	it	eq
   12bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bd6:	bd70      	pop	{r4, r5, r6, pc}
   12bd8:	f1c4 040c 	rsb	r4, r4, #12
   12bdc:	f1c4 0520 	rsb	r5, r4, #32
   12be0:	fa00 f304 	lsl.w	r3, r0, r4
   12be4:	fa20 f005 	lsr.w	r0, r0, r5
   12be8:	fa01 f204 	lsl.w	r2, r1, r4
   12bec:	ea40 0002 	orr.w	r0, r0, r2
   12bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12bf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12bf8:	f141 0100 	adc.w	r1, r1, #0
   12bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12c00:	bf08      	it	eq
   12c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12c06:	bd70      	pop	{r4, r5, r6, pc}
   12c08:	f1c4 0520 	rsb	r5, r4, #32
   12c0c:	fa00 f205 	lsl.w	r2, r0, r5
   12c10:	ea4e 0e02 	orr.w	lr, lr, r2
   12c14:	fa20 f304 	lsr.w	r3, r0, r4
   12c18:	fa01 f205 	lsl.w	r2, r1, r5
   12c1c:	ea43 0302 	orr.w	r3, r3, r2
   12c20:	fa21 f004 	lsr.w	r0, r1, r4
   12c24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c28:	fa21 f204 	lsr.w	r2, r1, r4
   12c2c:	ea20 0002 	bic.w	r0, r0, r2
   12c30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12c38:	bf08      	it	eq
   12c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12c3e:	bd70      	pop	{r4, r5, r6, pc}
   12c40:	f094 0f00 	teq	r4, #0
   12c44:	d10f      	bne.n	12c66 <__aeabi_dmul+0x1c2>
   12c46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12c4a:	0040      	lsls	r0, r0, #1
   12c4c:	eb41 0101 	adc.w	r1, r1, r1
   12c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12c54:	bf08      	it	eq
   12c56:	3c01      	subeq	r4, #1
   12c58:	d0f7      	beq.n	12c4a <__aeabi_dmul+0x1a6>
   12c5a:	ea41 0106 	orr.w	r1, r1, r6
   12c5e:	f095 0f00 	teq	r5, #0
   12c62:	bf18      	it	ne
   12c64:	4770      	bxne	lr
   12c66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12c6a:	0052      	lsls	r2, r2, #1
   12c6c:	eb43 0303 	adc.w	r3, r3, r3
   12c70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12c74:	bf08      	it	eq
   12c76:	3d01      	subeq	r5, #1
   12c78:	d0f7      	beq.n	12c6a <__aeabi_dmul+0x1c6>
   12c7a:	ea43 0306 	orr.w	r3, r3, r6
   12c7e:	4770      	bx	lr
   12c80:	ea94 0f0c 	teq	r4, ip
   12c84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12c88:	bf18      	it	ne
   12c8a:	ea95 0f0c 	teqne	r5, ip
   12c8e:	d00c      	beq.n	12caa <__aeabi_dmul+0x206>
   12c90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c94:	bf18      	it	ne
   12c96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c9a:	d1d1      	bne.n	12c40 <__aeabi_dmul+0x19c>
   12c9c:	ea81 0103 	eor.w	r1, r1, r3
   12ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12ca4:	f04f 0000 	mov.w	r0, #0
   12ca8:	bd70      	pop	{r4, r5, r6, pc}
   12caa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12cae:	bf06      	itte	eq
   12cb0:	4610      	moveq	r0, r2
   12cb2:	4619      	moveq	r1, r3
   12cb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12cb8:	d019      	beq.n	12cee <__aeabi_dmul+0x24a>
   12cba:	ea94 0f0c 	teq	r4, ip
   12cbe:	d102      	bne.n	12cc6 <__aeabi_dmul+0x222>
   12cc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12cc4:	d113      	bne.n	12cee <__aeabi_dmul+0x24a>
   12cc6:	ea95 0f0c 	teq	r5, ip
   12cca:	d105      	bne.n	12cd8 <__aeabi_dmul+0x234>
   12ccc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12cd0:	bf1c      	itt	ne
   12cd2:	4610      	movne	r0, r2
   12cd4:	4619      	movne	r1, r3
   12cd6:	d10a      	bne.n	12cee <__aeabi_dmul+0x24a>
   12cd8:	ea81 0103 	eor.w	r1, r1, r3
   12cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12ce0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12ce4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12ce8:	f04f 0000 	mov.w	r0, #0
   12cec:	bd70      	pop	{r4, r5, r6, pc}
   12cee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12cf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12cf6:	bd70      	pop	{r4, r5, r6, pc}

00012cf8 <__aeabi_ddiv>:
   12cf8:	b570      	push	{r4, r5, r6, lr}
   12cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12cfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12d02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12d06:	bf1d      	ittte	ne
   12d08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12d0c:	ea94 0f0c 	teqne	r4, ip
   12d10:	ea95 0f0c 	teqne	r5, ip
   12d14:	f000 f8a7 	bleq	12e66 <__aeabi_ddiv+0x16e>
   12d18:	eba4 0405 	sub.w	r4, r4, r5
   12d1c:	ea81 0e03 	eor.w	lr, r1, r3
   12d20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12d28:	f000 8088 	beq.w	12e3c <__aeabi_ddiv+0x144>
   12d2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12d30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12d34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12d38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12d3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12d40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12d44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12d48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12d4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12d50:	429d      	cmp	r5, r3
   12d52:	bf08      	it	eq
   12d54:	4296      	cmpeq	r6, r2
   12d56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12d5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12d5e:	d202      	bcs.n	12d66 <__aeabi_ddiv+0x6e>
   12d60:	085b      	lsrs	r3, r3, #1
   12d62:	ea4f 0232 	mov.w	r2, r2, rrx
   12d66:	1ab6      	subs	r6, r6, r2
   12d68:	eb65 0503 	sbc.w	r5, r5, r3
   12d6c:	085b      	lsrs	r3, r3, #1
   12d6e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12d76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   12d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d82:	bf22      	ittt	cs
   12d84:	1ab6      	subcs	r6, r6, r2
   12d86:	4675      	movcs	r5, lr
   12d88:	ea40 000c 	orrcs.w	r0, r0, ip
   12d8c:	085b      	lsrs	r3, r3, #1
   12d8e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d92:	ebb6 0e02 	subs.w	lr, r6, r2
   12d96:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d9a:	bf22      	ittt	cs
   12d9c:	1ab6      	subcs	r6, r6, r2
   12d9e:	4675      	movcs	r5, lr
   12da0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12da4:	085b      	lsrs	r3, r3, #1
   12da6:	ea4f 0232 	mov.w	r2, r2, rrx
   12daa:	ebb6 0e02 	subs.w	lr, r6, r2
   12dae:	eb75 0e03 	sbcs.w	lr, r5, r3
   12db2:	bf22      	ittt	cs
   12db4:	1ab6      	subcs	r6, r6, r2
   12db6:	4675      	movcs	r5, lr
   12db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12dbc:	085b      	lsrs	r3, r3, #1
   12dbe:	ea4f 0232 	mov.w	r2, r2, rrx
   12dc2:	ebb6 0e02 	subs.w	lr, r6, r2
   12dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   12dca:	bf22      	ittt	cs
   12dcc:	1ab6      	subcs	r6, r6, r2
   12dce:	4675      	movcs	r5, lr
   12dd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12dd4:	ea55 0e06 	orrs.w	lr, r5, r6
   12dd8:	d018      	beq.n	12e0c <__aeabi_ddiv+0x114>
   12dda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12dde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12de2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12de6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12dea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12dee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12df2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12df6:	d1c0      	bne.n	12d7a <__aeabi_ddiv+0x82>
   12df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12dfc:	d10b      	bne.n	12e16 <__aeabi_ddiv+0x11e>
   12dfe:	ea41 0100 	orr.w	r1, r1, r0
   12e02:	f04f 0000 	mov.w	r0, #0
   12e06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12e0a:	e7b6      	b.n	12d7a <__aeabi_ddiv+0x82>
   12e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12e10:	bf04      	itt	eq
   12e12:	4301      	orreq	r1, r0
   12e14:	2000      	moveq	r0, #0
   12e16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12e1a:	bf88      	it	hi
   12e1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12e20:	f63f aeaf 	bhi.w	12b82 <__aeabi_dmul+0xde>
   12e24:	ebb5 0c03 	subs.w	ip, r5, r3
   12e28:	bf04      	itt	eq
   12e2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   12e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12e32:	f150 0000 	adcs.w	r0, r0, #0
   12e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12e3a:	bd70      	pop	{r4, r5, r6, pc}
   12e3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12e40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12e44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12e48:	bfc2      	ittt	gt
   12e4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12e4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12e52:	bd70      	popgt	{r4, r5, r6, pc}
   12e54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12e58:	f04f 0e00 	mov.w	lr, #0
   12e5c:	3c01      	subs	r4, #1
   12e5e:	e690      	b.n	12b82 <__aeabi_dmul+0xde>
   12e60:	ea45 0e06 	orr.w	lr, r5, r6
   12e64:	e68d      	b.n	12b82 <__aeabi_dmul+0xde>
   12e66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12e6a:	ea94 0f0c 	teq	r4, ip
   12e6e:	bf08      	it	eq
   12e70:	ea95 0f0c 	teqeq	r5, ip
   12e74:	f43f af3b 	beq.w	12cee <__aeabi_dmul+0x24a>
   12e78:	ea94 0f0c 	teq	r4, ip
   12e7c:	d10a      	bne.n	12e94 <__aeabi_ddiv+0x19c>
   12e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12e82:	f47f af34 	bne.w	12cee <__aeabi_dmul+0x24a>
   12e86:	ea95 0f0c 	teq	r5, ip
   12e8a:	f47f af25 	bne.w	12cd8 <__aeabi_dmul+0x234>
   12e8e:	4610      	mov	r0, r2
   12e90:	4619      	mov	r1, r3
   12e92:	e72c      	b.n	12cee <__aeabi_dmul+0x24a>
   12e94:	ea95 0f0c 	teq	r5, ip
   12e98:	d106      	bne.n	12ea8 <__aeabi_ddiv+0x1b0>
   12e9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12e9e:	f43f aefd 	beq.w	12c9c <__aeabi_dmul+0x1f8>
   12ea2:	4610      	mov	r0, r2
   12ea4:	4619      	mov	r1, r3
   12ea6:	e722      	b.n	12cee <__aeabi_dmul+0x24a>
   12ea8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12eac:	bf18      	it	ne
   12eae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12eb2:	f47f aec5 	bne.w	12c40 <__aeabi_dmul+0x19c>
   12eb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12eba:	f47f af0d 	bne.w	12cd8 <__aeabi_dmul+0x234>
   12ebe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12ec2:	f47f aeeb 	bne.w	12c9c <__aeabi_dmul+0x1f8>
   12ec6:	e712      	b.n	12cee <__aeabi_dmul+0x24a>

00012ec8 <__gedf2>:
   12ec8:	f04f 3cff 	mov.w	ip, #4294967295
   12ecc:	e006      	b.n	12edc <__cmpdf2+0x4>
   12ece:	bf00      	nop

00012ed0 <__ledf2>:
   12ed0:	f04f 0c01 	mov.w	ip, #1
   12ed4:	e002      	b.n	12edc <__cmpdf2+0x4>
   12ed6:	bf00      	nop

00012ed8 <__cmpdf2>:
   12ed8:	f04f 0c01 	mov.w	ip, #1
   12edc:	f84d cd04 	str.w	ip, [sp, #-4]!
   12ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12ee8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12eec:	bf18      	it	ne
   12eee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   12ef2:	d01b      	beq.n	12f2c <__cmpdf2+0x54>
   12ef4:	b001      	add	sp, #4
   12ef6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   12efa:	bf0c      	ite	eq
   12efc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   12f00:	ea91 0f03 	teqne	r1, r3
   12f04:	bf02      	ittt	eq
   12f06:	ea90 0f02 	teqeq	r0, r2
   12f0a:	2000      	moveq	r0, #0
   12f0c:	4770      	bxeq	lr
   12f0e:	f110 0f00 	cmn.w	r0, #0
   12f12:	ea91 0f03 	teq	r1, r3
   12f16:	bf58      	it	pl
   12f18:	4299      	cmppl	r1, r3
   12f1a:	bf08      	it	eq
   12f1c:	4290      	cmpeq	r0, r2
   12f1e:	bf2c      	ite	cs
   12f20:	17d8      	asrcs	r0, r3, #31
   12f22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   12f26:	f040 0001 	orr.w	r0, r0, #1
   12f2a:	4770      	bx	lr
   12f2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12f30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f34:	d102      	bne.n	12f3c <__cmpdf2+0x64>
   12f36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   12f3a:	d107      	bne.n	12f4c <__cmpdf2+0x74>
   12f3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f44:	d1d6      	bne.n	12ef4 <__cmpdf2+0x1c>
   12f46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   12f4a:	d0d3      	beq.n	12ef4 <__cmpdf2+0x1c>
   12f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   12f50:	4770      	bx	lr
   12f52:	bf00      	nop

00012f54 <__aeabi_cdrcmple>:
   12f54:	4684      	mov	ip, r0
   12f56:	4610      	mov	r0, r2
   12f58:	4662      	mov	r2, ip
   12f5a:	468c      	mov	ip, r1
   12f5c:	4619      	mov	r1, r3
   12f5e:	4663      	mov	r3, ip
   12f60:	e000      	b.n	12f64 <__aeabi_cdcmpeq>
   12f62:	bf00      	nop

00012f64 <__aeabi_cdcmpeq>:
   12f64:	b501      	push	{r0, lr}
   12f66:	f7ff ffb7 	bl	12ed8 <__cmpdf2>
   12f6a:	2800      	cmp	r0, #0
   12f6c:	bf48      	it	mi
   12f6e:	f110 0f00 	cmnmi.w	r0, #0
   12f72:	bd01      	pop	{r0, pc}

00012f74 <__aeabi_dcmpeq>:
   12f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f78:	f7ff fff4 	bl	12f64 <__aeabi_cdcmpeq>
   12f7c:	bf0c      	ite	eq
   12f7e:	2001      	moveq	r0, #1
   12f80:	2000      	movne	r0, #0
   12f82:	f85d fb08 	ldr.w	pc, [sp], #8
   12f86:	bf00      	nop

00012f88 <__aeabi_dcmplt>:
   12f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f8c:	f7ff ffea 	bl	12f64 <__aeabi_cdcmpeq>
   12f90:	bf34      	ite	cc
   12f92:	2001      	movcc	r0, #1
   12f94:	2000      	movcs	r0, #0
   12f96:	f85d fb08 	ldr.w	pc, [sp], #8
   12f9a:	bf00      	nop

00012f9c <__aeabi_dcmple>:
   12f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   12fa0:	f7ff ffe0 	bl	12f64 <__aeabi_cdcmpeq>
   12fa4:	bf94      	ite	ls
   12fa6:	2001      	movls	r0, #1
   12fa8:	2000      	movhi	r0, #0
   12faa:	f85d fb08 	ldr.w	pc, [sp], #8
   12fae:	bf00      	nop

00012fb0 <__aeabi_dcmpge>:
   12fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   12fb4:	f7ff ffce 	bl	12f54 <__aeabi_cdrcmple>
   12fb8:	bf94      	ite	ls
   12fba:	2001      	movls	r0, #1
   12fbc:	2000      	movhi	r0, #0
   12fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   12fc2:	bf00      	nop

00012fc4 <__aeabi_dcmpgt>:
   12fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   12fc8:	f7ff ffc4 	bl	12f54 <__aeabi_cdrcmple>
   12fcc:	bf34      	ite	cc
   12fce:	2001      	movcc	r0, #1
   12fd0:	2000      	movcs	r0, #0
   12fd2:	f85d fb08 	ldr.w	pc, [sp], #8
   12fd6:	bf00      	nop

00012fd8 <__aeabi_d2iz>:
   12fd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12fdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12fe0:	d215      	bcs.n	1300e <__aeabi_d2iz+0x36>
   12fe2:	d511      	bpl.n	13008 <__aeabi_d2iz+0x30>
   12fe4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12fe8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12fec:	d912      	bls.n	13014 <__aeabi_d2iz+0x3c>
   12fee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12ff6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12ffa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12ffe:	fa23 f002 	lsr.w	r0, r3, r2
   13002:	bf18      	it	ne
   13004:	4240      	negne	r0, r0
   13006:	4770      	bx	lr
   13008:	f04f 0000 	mov.w	r0, #0
   1300c:	4770      	bx	lr
   1300e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13012:	d105      	bne.n	13020 <__aeabi_d2iz+0x48>
   13014:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13018:	bf08      	it	eq
   1301a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1301e:	4770      	bx	lr
   13020:	f04f 0000 	mov.w	r0, #0
   13024:	4770      	bx	lr
   13026:	bf00      	nop

00013028 <__aeabi_d2uiz>:
   13028:	004a      	lsls	r2, r1, #1
   1302a:	d211      	bcs.n	13050 <__aeabi_d2uiz+0x28>
   1302c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13030:	d211      	bcs.n	13056 <__aeabi_d2uiz+0x2e>
   13032:	d50d      	bpl.n	13050 <__aeabi_d2uiz+0x28>
   13034:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13038:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1303c:	d40e      	bmi.n	1305c <__aeabi_d2uiz+0x34>
   1303e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13046:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1304a:	fa23 f002 	lsr.w	r0, r3, r2
   1304e:	4770      	bx	lr
   13050:	f04f 0000 	mov.w	r0, #0
   13054:	4770      	bx	lr
   13056:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1305a:	d102      	bne.n	13062 <__aeabi_d2uiz+0x3a>
   1305c:	f04f 30ff 	mov.w	r0, #4294967295
   13060:	4770      	bx	lr
   13062:	f04f 0000 	mov.w	r0, #0
   13066:	4770      	bx	lr

00013068 <__aeabi_d2f>:
   13068:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1306c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   13070:	bf24      	itt	cs
   13072:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13076:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1307a:	d90d      	bls.n	13098 <__aeabi_d2f+0x30>
   1307c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13080:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13084:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13088:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1308c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   13090:	bf08      	it	eq
   13092:	f020 0001 	biceq.w	r0, r0, #1
   13096:	4770      	bx	lr
   13098:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1309c:	d121      	bne.n	130e2 <__aeabi_d2f+0x7a>
   1309e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   130a2:	bfbc      	itt	lt
   130a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   130a8:	4770      	bxlt	lr
   130aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   130ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   130b2:	f1c2 0218 	rsb	r2, r2, #24
   130b6:	f1c2 0c20 	rsb	ip, r2, #32
   130ba:	fa10 f30c 	lsls.w	r3, r0, ip
   130be:	fa20 f002 	lsr.w	r0, r0, r2
   130c2:	bf18      	it	ne
   130c4:	f040 0001 	orrne.w	r0, r0, #1
   130c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   130cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   130d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   130d4:	ea40 000c 	orr.w	r0, r0, ip
   130d8:	fa23 f302 	lsr.w	r3, r3, r2
   130dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   130e0:	e7cc      	b.n	1307c <__aeabi_d2f+0x14>
   130e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   130e6:	d107      	bne.n	130f8 <__aeabi_d2f+0x90>
   130e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   130ec:	bf1e      	ittt	ne
   130ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   130f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   130f6:	4770      	bxne	lr
   130f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   130fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13100:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13104:	4770      	bx	lr
   13106:	bf00      	nop

00013108 <__aeabi_frsub>:
   13108:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1310c:	e002      	b.n	13114 <__addsf3>
   1310e:	bf00      	nop

00013110 <__aeabi_fsub>:
   13110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013114 <__addsf3>:
   13114:	0042      	lsls	r2, r0, #1
   13116:	bf1f      	itttt	ne
   13118:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1311c:	ea92 0f03 	teqne	r2, r3
   13120:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13124:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13128:	d06a      	beq.n	13200 <__addsf3+0xec>
   1312a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1312e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   13132:	bfc1      	itttt	gt
   13134:	18d2      	addgt	r2, r2, r3
   13136:	4041      	eorgt	r1, r0
   13138:	4048      	eorgt	r0, r1
   1313a:	4041      	eorgt	r1, r0
   1313c:	bfb8      	it	lt
   1313e:	425b      	neglt	r3, r3
   13140:	2b19      	cmp	r3, #25
   13142:	bf88      	it	hi
   13144:	4770      	bxhi	lr
   13146:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1314a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1314e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13152:	bf18      	it	ne
   13154:	4240      	negne	r0, r0
   13156:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1315a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1315e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   13162:	bf18      	it	ne
   13164:	4249      	negne	r1, r1
   13166:	ea92 0f03 	teq	r2, r3
   1316a:	d03f      	beq.n	131ec <__addsf3+0xd8>
   1316c:	f1a2 0201 	sub.w	r2, r2, #1
   13170:	fa41 fc03 	asr.w	ip, r1, r3
   13174:	eb10 000c 	adds.w	r0, r0, ip
   13178:	f1c3 0320 	rsb	r3, r3, #32
   1317c:	fa01 f103 	lsl.w	r1, r1, r3
   13180:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13184:	d502      	bpl.n	1318c <__addsf3+0x78>
   13186:	4249      	negs	r1, r1
   13188:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1318c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13190:	d313      	bcc.n	131ba <__addsf3+0xa6>
   13192:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13196:	d306      	bcc.n	131a6 <__addsf3+0x92>
   13198:	0840      	lsrs	r0, r0, #1
   1319a:	ea4f 0131 	mov.w	r1, r1, rrx
   1319e:	f102 0201 	add.w	r2, r2, #1
   131a2:	2afe      	cmp	r2, #254	; 0xfe
   131a4:	d251      	bcs.n	1324a <__addsf3+0x136>
   131a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   131aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   131ae:	bf08      	it	eq
   131b0:	f020 0001 	biceq.w	r0, r0, #1
   131b4:	ea40 0003 	orr.w	r0, r0, r3
   131b8:	4770      	bx	lr
   131ba:	0049      	lsls	r1, r1, #1
   131bc:	eb40 0000 	adc.w	r0, r0, r0
   131c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   131c4:	f1a2 0201 	sub.w	r2, r2, #1
   131c8:	d1ed      	bne.n	131a6 <__addsf3+0x92>
   131ca:	fab0 fc80 	clz	ip, r0
   131ce:	f1ac 0c08 	sub.w	ip, ip, #8
   131d2:	ebb2 020c 	subs.w	r2, r2, ip
   131d6:	fa00 f00c 	lsl.w	r0, r0, ip
   131da:	bfaa      	itet	ge
   131dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   131e0:	4252      	neglt	r2, r2
   131e2:	4318      	orrge	r0, r3
   131e4:	bfbc      	itt	lt
   131e6:	40d0      	lsrlt	r0, r2
   131e8:	4318      	orrlt	r0, r3
   131ea:	4770      	bx	lr
   131ec:	f092 0f00 	teq	r2, #0
   131f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   131f4:	bf06      	itte	eq
   131f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   131fa:	3201      	addeq	r2, #1
   131fc:	3b01      	subne	r3, #1
   131fe:	e7b5      	b.n	1316c <__addsf3+0x58>
   13200:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13204:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13208:	bf18      	it	ne
   1320a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1320e:	d021      	beq.n	13254 <__addsf3+0x140>
   13210:	ea92 0f03 	teq	r2, r3
   13214:	d004      	beq.n	13220 <__addsf3+0x10c>
   13216:	f092 0f00 	teq	r2, #0
   1321a:	bf08      	it	eq
   1321c:	4608      	moveq	r0, r1
   1321e:	4770      	bx	lr
   13220:	ea90 0f01 	teq	r0, r1
   13224:	bf1c      	itt	ne
   13226:	2000      	movne	r0, #0
   13228:	4770      	bxne	lr
   1322a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1322e:	d104      	bne.n	1323a <__addsf3+0x126>
   13230:	0040      	lsls	r0, r0, #1
   13232:	bf28      	it	cs
   13234:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13238:	4770      	bx	lr
   1323a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1323e:	bf3c      	itt	cc
   13240:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13244:	4770      	bxcc	lr
   13246:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1324a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1324e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13252:	4770      	bx	lr
   13254:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13258:	bf16      	itet	ne
   1325a:	4608      	movne	r0, r1
   1325c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13260:	4601      	movne	r1, r0
   13262:	0242      	lsls	r2, r0, #9
   13264:	bf06      	itte	eq
   13266:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1326a:	ea90 0f01 	teqeq	r0, r1
   1326e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   13272:	4770      	bx	lr

00013274 <__aeabi_ui2f>:
   13274:	f04f 0300 	mov.w	r3, #0
   13278:	e004      	b.n	13284 <__aeabi_i2f+0x8>
   1327a:	bf00      	nop

0001327c <__aeabi_i2f>:
   1327c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13280:	bf48      	it	mi
   13282:	4240      	negmi	r0, r0
   13284:	ea5f 0c00 	movs.w	ip, r0
   13288:	bf08      	it	eq
   1328a:	4770      	bxeq	lr
   1328c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13290:	4601      	mov	r1, r0
   13292:	f04f 0000 	mov.w	r0, #0
   13296:	e01c      	b.n	132d2 <__aeabi_l2f+0x2a>

00013298 <__aeabi_ul2f>:
   13298:	ea50 0201 	orrs.w	r2, r0, r1
   1329c:	bf08      	it	eq
   1329e:	4770      	bxeq	lr
   132a0:	f04f 0300 	mov.w	r3, #0
   132a4:	e00a      	b.n	132bc <__aeabi_l2f+0x14>
   132a6:	bf00      	nop

000132a8 <__aeabi_l2f>:
   132a8:	ea50 0201 	orrs.w	r2, r0, r1
   132ac:	bf08      	it	eq
   132ae:	4770      	bxeq	lr
   132b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   132b4:	d502      	bpl.n	132bc <__aeabi_l2f+0x14>
   132b6:	4240      	negs	r0, r0
   132b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   132bc:	ea5f 0c01 	movs.w	ip, r1
   132c0:	bf02      	ittt	eq
   132c2:	4684      	moveq	ip, r0
   132c4:	4601      	moveq	r1, r0
   132c6:	2000      	moveq	r0, #0
   132c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   132cc:	bf08      	it	eq
   132ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   132d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   132d6:	fabc f28c 	clz	r2, ip
   132da:	3a08      	subs	r2, #8
   132dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   132e0:	db10      	blt.n	13304 <__aeabi_l2f+0x5c>
   132e2:	fa01 fc02 	lsl.w	ip, r1, r2
   132e6:	4463      	add	r3, ip
   132e8:	fa00 fc02 	lsl.w	ip, r0, r2
   132ec:	f1c2 0220 	rsb	r2, r2, #32
   132f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   132f4:	fa20 f202 	lsr.w	r2, r0, r2
   132f8:	eb43 0002 	adc.w	r0, r3, r2
   132fc:	bf08      	it	eq
   132fe:	f020 0001 	biceq.w	r0, r0, #1
   13302:	4770      	bx	lr
   13304:	f102 0220 	add.w	r2, r2, #32
   13308:	fa01 fc02 	lsl.w	ip, r1, r2
   1330c:	f1c2 0220 	rsb	r2, r2, #32
   13310:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13314:	fa21 f202 	lsr.w	r2, r1, r2
   13318:	eb43 0002 	adc.w	r0, r3, r2
   1331c:	bf08      	it	eq
   1331e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13322:	4770      	bx	lr

00013324 <__aeabi_fmul>:
   13324:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13328:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1332c:	bf1e      	ittt	ne
   1332e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13332:	ea92 0f0c 	teqne	r2, ip
   13336:	ea93 0f0c 	teqne	r3, ip
   1333a:	d06f      	beq.n	1341c <__aeabi_fmul+0xf8>
   1333c:	441a      	add	r2, r3
   1333e:	ea80 0c01 	eor.w	ip, r0, r1
   13342:	0240      	lsls	r0, r0, #9
   13344:	bf18      	it	ne
   13346:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1334a:	d01e      	beq.n	1338a <__aeabi_fmul+0x66>
   1334c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13350:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13354:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13358:	fba0 3101 	umull	r3, r1, r0, r1
   1335c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13360:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13364:	bf3e      	ittt	cc
   13366:	0049      	lslcc	r1, r1, #1
   13368:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1336c:	005b      	lslcc	r3, r3, #1
   1336e:	ea40 0001 	orr.w	r0, r0, r1
   13372:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13376:	2afd      	cmp	r2, #253	; 0xfd
   13378:	d81d      	bhi.n	133b6 <__aeabi_fmul+0x92>
   1337a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1337e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13382:	bf08      	it	eq
   13384:	f020 0001 	biceq.w	r0, r0, #1
   13388:	4770      	bx	lr
   1338a:	f090 0f00 	teq	r0, #0
   1338e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13392:	bf08      	it	eq
   13394:	0249      	lsleq	r1, r1, #9
   13396:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1339a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1339e:	3a7f      	subs	r2, #127	; 0x7f
   133a0:	bfc2      	ittt	gt
   133a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   133a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   133aa:	4770      	bxgt	lr
   133ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   133b0:	f04f 0300 	mov.w	r3, #0
   133b4:	3a01      	subs	r2, #1
   133b6:	dc5d      	bgt.n	13474 <__aeabi_fmul+0x150>
   133b8:	f112 0f19 	cmn.w	r2, #25
   133bc:	bfdc      	itt	le
   133be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   133c2:	4770      	bxle	lr
   133c4:	f1c2 0200 	rsb	r2, r2, #0
   133c8:	0041      	lsls	r1, r0, #1
   133ca:	fa21 f102 	lsr.w	r1, r1, r2
   133ce:	f1c2 0220 	rsb	r2, r2, #32
   133d2:	fa00 fc02 	lsl.w	ip, r0, r2
   133d6:	ea5f 0031 	movs.w	r0, r1, rrx
   133da:	f140 0000 	adc.w	r0, r0, #0
   133de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   133e2:	bf08      	it	eq
   133e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   133e8:	4770      	bx	lr
   133ea:	f092 0f00 	teq	r2, #0
   133ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   133f2:	bf02      	ittt	eq
   133f4:	0040      	lsleq	r0, r0, #1
   133f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   133fa:	3a01      	subeq	r2, #1
   133fc:	d0f9      	beq.n	133f2 <__aeabi_fmul+0xce>
   133fe:	ea40 000c 	orr.w	r0, r0, ip
   13402:	f093 0f00 	teq	r3, #0
   13406:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1340a:	bf02      	ittt	eq
   1340c:	0049      	lsleq	r1, r1, #1
   1340e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13412:	3b01      	subeq	r3, #1
   13414:	d0f9      	beq.n	1340a <__aeabi_fmul+0xe6>
   13416:	ea41 010c 	orr.w	r1, r1, ip
   1341a:	e78f      	b.n	1333c <__aeabi_fmul+0x18>
   1341c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13420:	ea92 0f0c 	teq	r2, ip
   13424:	bf18      	it	ne
   13426:	ea93 0f0c 	teqne	r3, ip
   1342a:	d00a      	beq.n	13442 <__aeabi_fmul+0x11e>
   1342c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13430:	bf18      	it	ne
   13432:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13436:	d1d8      	bne.n	133ea <__aeabi_fmul+0xc6>
   13438:	ea80 0001 	eor.w	r0, r0, r1
   1343c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13440:	4770      	bx	lr
   13442:	f090 0f00 	teq	r0, #0
   13446:	bf17      	itett	ne
   13448:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1344c:	4608      	moveq	r0, r1
   1344e:	f091 0f00 	teqne	r1, #0
   13452:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13456:	d014      	beq.n	13482 <__aeabi_fmul+0x15e>
   13458:	ea92 0f0c 	teq	r2, ip
   1345c:	d101      	bne.n	13462 <__aeabi_fmul+0x13e>
   1345e:	0242      	lsls	r2, r0, #9
   13460:	d10f      	bne.n	13482 <__aeabi_fmul+0x15e>
   13462:	ea93 0f0c 	teq	r3, ip
   13466:	d103      	bne.n	13470 <__aeabi_fmul+0x14c>
   13468:	024b      	lsls	r3, r1, #9
   1346a:	bf18      	it	ne
   1346c:	4608      	movne	r0, r1
   1346e:	d108      	bne.n	13482 <__aeabi_fmul+0x15e>
   13470:	ea80 0001 	eor.w	r0, r0, r1
   13474:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13478:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1347c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13480:	4770      	bx	lr
   13482:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13486:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1348a:	4770      	bx	lr

0001348c <__aeabi_fdiv>:
   1348c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13490:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13494:	bf1e      	ittt	ne
   13496:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1349a:	ea92 0f0c 	teqne	r2, ip
   1349e:	ea93 0f0c 	teqne	r3, ip
   134a2:	d069      	beq.n	13578 <__aeabi_fdiv+0xec>
   134a4:	eba2 0203 	sub.w	r2, r2, r3
   134a8:	ea80 0c01 	eor.w	ip, r0, r1
   134ac:	0249      	lsls	r1, r1, #9
   134ae:	ea4f 2040 	mov.w	r0, r0, lsl #9
   134b2:	d037      	beq.n	13524 <__aeabi_fdiv+0x98>
   134b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   134b8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   134bc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   134c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   134c4:	428b      	cmp	r3, r1
   134c6:	bf38      	it	cc
   134c8:	005b      	lslcc	r3, r3, #1
   134ca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   134ce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   134d2:	428b      	cmp	r3, r1
   134d4:	bf24      	itt	cs
   134d6:	1a5b      	subcs	r3, r3, r1
   134d8:	ea40 000c 	orrcs.w	r0, r0, ip
   134dc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   134e0:	bf24      	itt	cs
   134e2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   134e6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   134ea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   134ee:	bf24      	itt	cs
   134f0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   134f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   134f8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   134fc:	bf24      	itt	cs
   134fe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   13502:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13506:	011b      	lsls	r3, r3, #4
   13508:	bf18      	it	ne
   1350a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1350e:	d1e0      	bne.n	134d2 <__aeabi_fdiv+0x46>
   13510:	2afd      	cmp	r2, #253	; 0xfd
   13512:	f63f af50 	bhi.w	133b6 <__aeabi_fmul+0x92>
   13516:	428b      	cmp	r3, r1
   13518:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1351c:	bf08      	it	eq
   1351e:	f020 0001 	biceq.w	r0, r0, #1
   13522:	4770      	bx	lr
   13524:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13528:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1352c:	327f      	adds	r2, #127	; 0x7f
   1352e:	bfc2      	ittt	gt
   13530:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13534:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13538:	4770      	bxgt	lr
   1353a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1353e:	f04f 0300 	mov.w	r3, #0
   13542:	3a01      	subs	r2, #1
   13544:	e737      	b.n	133b6 <__aeabi_fmul+0x92>
   13546:	f092 0f00 	teq	r2, #0
   1354a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1354e:	bf02      	ittt	eq
   13550:	0040      	lsleq	r0, r0, #1
   13552:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13556:	3a01      	subeq	r2, #1
   13558:	d0f9      	beq.n	1354e <__aeabi_fdiv+0xc2>
   1355a:	ea40 000c 	orr.w	r0, r0, ip
   1355e:	f093 0f00 	teq	r3, #0
   13562:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13566:	bf02      	ittt	eq
   13568:	0049      	lsleq	r1, r1, #1
   1356a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1356e:	3b01      	subeq	r3, #1
   13570:	d0f9      	beq.n	13566 <__aeabi_fdiv+0xda>
   13572:	ea41 010c 	orr.w	r1, r1, ip
   13576:	e795      	b.n	134a4 <__aeabi_fdiv+0x18>
   13578:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1357c:	ea92 0f0c 	teq	r2, ip
   13580:	d108      	bne.n	13594 <__aeabi_fdiv+0x108>
   13582:	0242      	lsls	r2, r0, #9
   13584:	f47f af7d 	bne.w	13482 <__aeabi_fmul+0x15e>
   13588:	ea93 0f0c 	teq	r3, ip
   1358c:	f47f af70 	bne.w	13470 <__aeabi_fmul+0x14c>
   13590:	4608      	mov	r0, r1
   13592:	e776      	b.n	13482 <__aeabi_fmul+0x15e>
   13594:	ea93 0f0c 	teq	r3, ip
   13598:	d104      	bne.n	135a4 <__aeabi_fdiv+0x118>
   1359a:	024b      	lsls	r3, r1, #9
   1359c:	f43f af4c 	beq.w	13438 <__aeabi_fmul+0x114>
   135a0:	4608      	mov	r0, r1
   135a2:	e76e      	b.n	13482 <__aeabi_fmul+0x15e>
   135a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   135a8:	bf18      	it	ne
   135aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   135ae:	d1ca      	bne.n	13546 <__aeabi_fdiv+0xba>
   135b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   135b4:	f47f af5c 	bne.w	13470 <__aeabi_fmul+0x14c>
   135b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   135bc:	f47f af3c 	bne.w	13438 <__aeabi_fmul+0x114>
   135c0:	e75f      	b.n	13482 <__aeabi_fmul+0x15e>
   135c2:	bf00      	nop

000135c4 <__gesf2>:
   135c4:	f04f 3cff 	mov.w	ip, #4294967295
   135c8:	e006      	b.n	135d8 <__cmpsf2+0x4>
   135ca:	bf00      	nop

000135cc <__lesf2>:
   135cc:	f04f 0c01 	mov.w	ip, #1
   135d0:	e002      	b.n	135d8 <__cmpsf2+0x4>
   135d2:	bf00      	nop

000135d4 <__cmpsf2>:
   135d4:	f04f 0c01 	mov.w	ip, #1
   135d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   135dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   135e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   135e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135e8:	bf18      	it	ne
   135ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   135ee:	d011      	beq.n	13614 <__cmpsf2+0x40>
   135f0:	b001      	add	sp, #4
   135f2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   135f6:	bf18      	it	ne
   135f8:	ea90 0f01 	teqne	r0, r1
   135fc:	bf58      	it	pl
   135fe:	ebb2 0003 	subspl.w	r0, r2, r3
   13602:	bf88      	it	hi
   13604:	17c8      	asrhi	r0, r1, #31
   13606:	bf38      	it	cc
   13608:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1360c:	bf18      	it	ne
   1360e:	f040 0001 	orrne.w	r0, r0, #1
   13612:	4770      	bx	lr
   13614:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13618:	d102      	bne.n	13620 <__cmpsf2+0x4c>
   1361a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1361e:	d105      	bne.n	1362c <__cmpsf2+0x58>
   13620:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   13624:	d1e4      	bne.n	135f0 <__cmpsf2+0x1c>
   13626:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1362a:	d0e1      	beq.n	135f0 <__cmpsf2+0x1c>
   1362c:	f85d 0b04 	ldr.w	r0, [sp], #4
   13630:	4770      	bx	lr
   13632:	bf00      	nop

00013634 <__aeabi_cfrcmple>:
   13634:	4684      	mov	ip, r0
   13636:	4608      	mov	r0, r1
   13638:	4661      	mov	r1, ip
   1363a:	e7ff      	b.n	1363c <__aeabi_cfcmpeq>

0001363c <__aeabi_cfcmpeq>:
   1363c:	b50f      	push	{r0, r1, r2, r3, lr}
   1363e:	f7ff ffc9 	bl	135d4 <__cmpsf2>
   13642:	2800      	cmp	r0, #0
   13644:	bf48      	it	mi
   13646:	f110 0f00 	cmnmi.w	r0, #0
   1364a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001364c <__aeabi_fcmpeq>:
   1364c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13650:	f7ff fff4 	bl	1363c <__aeabi_cfcmpeq>
   13654:	bf0c      	ite	eq
   13656:	2001      	moveq	r0, #1
   13658:	2000      	movne	r0, #0
   1365a:	f85d fb08 	ldr.w	pc, [sp], #8
   1365e:	bf00      	nop

00013660 <__aeabi_fcmplt>:
   13660:	f84d ed08 	str.w	lr, [sp, #-8]!
   13664:	f7ff ffea 	bl	1363c <__aeabi_cfcmpeq>
   13668:	bf34      	ite	cc
   1366a:	2001      	movcc	r0, #1
   1366c:	2000      	movcs	r0, #0
   1366e:	f85d fb08 	ldr.w	pc, [sp], #8
   13672:	bf00      	nop

00013674 <__aeabi_fcmple>:
   13674:	f84d ed08 	str.w	lr, [sp, #-8]!
   13678:	f7ff ffe0 	bl	1363c <__aeabi_cfcmpeq>
   1367c:	bf94      	ite	ls
   1367e:	2001      	movls	r0, #1
   13680:	2000      	movhi	r0, #0
   13682:	f85d fb08 	ldr.w	pc, [sp], #8
   13686:	bf00      	nop

00013688 <__aeabi_fcmpge>:
   13688:	f84d ed08 	str.w	lr, [sp, #-8]!
   1368c:	f7ff ffd2 	bl	13634 <__aeabi_cfrcmple>
   13690:	bf94      	ite	ls
   13692:	2001      	movls	r0, #1
   13694:	2000      	movhi	r0, #0
   13696:	f85d fb08 	ldr.w	pc, [sp], #8
   1369a:	bf00      	nop

0001369c <__aeabi_fcmpgt>:
   1369c:	f84d ed08 	str.w	lr, [sp, #-8]!
   136a0:	f7ff ffc8 	bl	13634 <__aeabi_cfrcmple>
   136a4:	bf34      	ite	cc
   136a6:	2001      	movcc	r0, #1
   136a8:	2000      	movcs	r0, #0
   136aa:	f85d fb08 	ldr.w	pc, [sp], #8
   136ae:	bf00      	nop

000136b0 <__aeabi_f2iz>:
   136b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   136b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   136b8:	d30f      	bcc.n	136da <__aeabi_f2iz+0x2a>
   136ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
   136be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   136c2:	d90d      	bls.n	136e0 <__aeabi_f2iz+0x30>
   136c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   136c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   136cc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   136d0:	fa23 f002 	lsr.w	r0, r3, r2
   136d4:	bf18      	it	ne
   136d6:	4240      	negne	r0, r0
   136d8:	4770      	bx	lr
   136da:	f04f 0000 	mov.w	r0, #0
   136de:	4770      	bx	lr
   136e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   136e4:	d101      	bne.n	136ea <__aeabi_f2iz+0x3a>
   136e6:	0242      	lsls	r2, r0, #9
   136e8:	d105      	bne.n	136f6 <__aeabi_f2iz+0x46>
   136ea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   136ee:	bf08      	it	eq
   136f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   136f4:	4770      	bx	lr
   136f6:	f04f 0000 	mov.w	r0, #0
   136fa:	4770      	bx	lr

000136fc <memcpy>:
   136fc:	2a0f      	cmp	r2, #15
   136fe:	b4f0      	push	{r4, r5, r6, r7}
   13700:	d945      	bls.n	1378e <memcpy+0x92>
   13702:	ea40 0301 	orr.w	r3, r0, r1
   13706:	079b      	lsls	r3, r3, #30
   13708:	d145      	bne.n	13796 <memcpy+0x9a>
   1370a:	f1a2 0710 	sub.w	r7, r2, #16
   1370e:	460c      	mov	r4, r1
   13710:	4603      	mov	r3, r0
   13712:	093f      	lsrs	r7, r7, #4
   13714:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   13718:	3610      	adds	r6, #16
   1371a:	6825      	ldr	r5, [r4, #0]
   1371c:	3310      	adds	r3, #16
   1371e:	3410      	adds	r4, #16
   13720:	f843 5c10 	str.w	r5, [r3, #-16]
   13724:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   13728:	f843 5c0c 	str.w	r5, [r3, #-12]
   1372c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   13730:	f843 5c08 	str.w	r5, [r3, #-8]
   13734:	f854 5c04 	ldr.w	r5, [r4, #-4]
   13738:	f843 5c04 	str.w	r5, [r3, #-4]
   1373c:	42b3      	cmp	r3, r6
   1373e:	d1ec      	bne.n	1371a <memcpy+0x1e>
   13740:	1c7b      	adds	r3, r7, #1
   13742:	f002 0c0f 	and.w	ip, r2, #15
   13746:	f1bc 0f03 	cmp.w	ip, #3
   1374a:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1374e:	4419      	add	r1, r3
   13750:	4403      	add	r3, r0
   13752:	d922      	bls.n	1379a <memcpy+0x9e>
   13754:	460e      	mov	r6, r1
   13756:	461d      	mov	r5, r3
   13758:	4664      	mov	r4, ip
   1375a:	f856 7b04 	ldr.w	r7, [r6], #4
   1375e:	3c04      	subs	r4, #4
   13760:	2c03      	cmp	r4, #3
   13762:	f845 7b04 	str.w	r7, [r5], #4
   13766:	d8f8      	bhi.n	1375a <memcpy+0x5e>
   13768:	f1ac 0404 	sub.w	r4, ip, #4
   1376c:	f002 0203 	and.w	r2, r2, #3
   13770:	f024 0403 	bic.w	r4, r4, #3
   13774:	3404      	adds	r4, #4
   13776:	4423      	add	r3, r4
   13778:	4421      	add	r1, r4
   1377a:	b132      	cbz	r2, 1378a <memcpy+0x8e>
   1377c:	440a      	add	r2, r1
   1377e:	f811 4b01 	ldrb.w	r4, [r1], #1
   13782:	4291      	cmp	r1, r2
   13784:	f803 4b01 	strb.w	r4, [r3], #1
   13788:	d1f9      	bne.n	1377e <memcpy+0x82>
   1378a:	bcf0      	pop	{r4, r5, r6, r7}
   1378c:	4770      	bx	lr
   1378e:	4603      	mov	r3, r0
   13790:	2a00      	cmp	r2, #0
   13792:	d1f3      	bne.n	1377c <memcpy+0x80>
   13794:	e7f9      	b.n	1378a <memcpy+0x8e>
   13796:	4603      	mov	r3, r0
   13798:	e7f0      	b.n	1377c <memcpy+0x80>
   1379a:	4662      	mov	r2, ip
   1379c:	2a00      	cmp	r2, #0
   1379e:	d1ed      	bne.n	1377c <memcpy+0x80>
   137a0:	e7f3      	b.n	1378a <memcpy+0x8e>
   137a2:	bf00      	nop

000137a4 <memset>:
   137a4:	0783      	lsls	r3, r0, #30
   137a6:	b4f0      	push	{r4, r5, r6, r7}
   137a8:	d048      	beq.n	1383c <memset+0x98>
   137aa:	1e54      	subs	r4, r2, #1
   137ac:	2a00      	cmp	r2, #0
   137ae:	d043      	beq.n	13838 <memset+0x94>
   137b0:	b2cd      	uxtb	r5, r1
   137b2:	4603      	mov	r3, r0
   137b4:	e002      	b.n	137bc <memset+0x18>
   137b6:	2c00      	cmp	r4, #0
   137b8:	d03e      	beq.n	13838 <memset+0x94>
   137ba:	4614      	mov	r4, r2
   137bc:	f803 5b01 	strb.w	r5, [r3], #1
   137c0:	f013 0f03 	tst.w	r3, #3
   137c4:	f104 32ff 	add.w	r2, r4, #4294967295
   137c8:	d1f5      	bne.n	137b6 <memset+0x12>
   137ca:	2c03      	cmp	r4, #3
   137cc:	d92d      	bls.n	1382a <memset+0x86>
   137ce:	b2cd      	uxtb	r5, r1
   137d0:	2c0f      	cmp	r4, #15
   137d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   137d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   137da:	d918      	bls.n	1380e <memset+0x6a>
   137dc:	f1a4 0710 	sub.w	r7, r4, #16
   137e0:	f103 0610 	add.w	r6, r3, #16
   137e4:	461a      	mov	r2, r3
   137e6:	093f      	lsrs	r7, r7, #4
   137e8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   137ec:	6015      	str	r5, [r2, #0]
   137ee:	3210      	adds	r2, #16
   137f0:	f842 5c0c 	str.w	r5, [r2, #-12]
   137f4:	f842 5c08 	str.w	r5, [r2, #-8]
   137f8:	f842 5c04 	str.w	r5, [r2, #-4]
   137fc:	42b2      	cmp	r2, r6
   137fe:	d1f5      	bne.n	137ec <memset+0x48>
   13800:	f004 040f 	and.w	r4, r4, #15
   13804:	3701      	adds	r7, #1
   13806:	2c03      	cmp	r4, #3
   13808:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1380c:	d90d      	bls.n	1382a <memset+0x86>
   1380e:	461e      	mov	r6, r3
   13810:	4622      	mov	r2, r4
   13812:	3a04      	subs	r2, #4
   13814:	f846 5b04 	str.w	r5, [r6], #4
   13818:	2a03      	cmp	r2, #3
   1381a:	d8fa      	bhi.n	13812 <memset+0x6e>
   1381c:	1f22      	subs	r2, r4, #4
   1381e:	f004 0403 	and.w	r4, r4, #3
   13822:	f022 0203 	bic.w	r2, r2, #3
   13826:	3204      	adds	r2, #4
   13828:	4413      	add	r3, r2
   1382a:	b12c      	cbz	r4, 13838 <memset+0x94>
   1382c:	b2c9      	uxtb	r1, r1
   1382e:	441c      	add	r4, r3
   13830:	f803 1b01 	strb.w	r1, [r3], #1
   13834:	42a3      	cmp	r3, r4
   13836:	d1fb      	bne.n	13830 <memset+0x8c>
   13838:	bcf0      	pop	{r4, r5, r6, r7}
   1383a:	4770      	bx	lr
   1383c:	4614      	mov	r4, r2
   1383e:	4603      	mov	r3, r0
   13840:	e7c3      	b.n	137ca <memset+0x26>
   13842:	bf00      	nop

00013844 <strncpy>:
   13844:	ea40 0301 	orr.w	r3, r0, r1
   13848:	079b      	lsls	r3, r3, #30
   1384a:	b470      	push	{r4, r5, r6}
   1384c:	d12b      	bne.n	138a6 <strncpy+0x62>
   1384e:	2a03      	cmp	r2, #3
   13850:	bf84      	itt	hi
   13852:	460b      	movhi	r3, r1
   13854:	4605      	movhi	r5, r0
   13856:	d926      	bls.n	138a6 <strncpy+0x62>
   13858:	4619      	mov	r1, r3
   1385a:	f853 4b04 	ldr.w	r4, [r3], #4
   1385e:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   13862:	ea26 0604 	bic.w	r6, r6, r4
   13866:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1386a:	d105      	bne.n	13878 <strncpy+0x34>
   1386c:	3a04      	subs	r2, #4
   1386e:	f845 4b04 	str.w	r4, [r5], #4
   13872:	2a03      	cmp	r2, #3
   13874:	4619      	mov	r1, r3
   13876:	d8ef      	bhi.n	13858 <strncpy+0x14>
   13878:	b19a      	cbz	r2, 138a2 <strncpy+0x5e>
   1387a:	780c      	ldrb	r4, [r1, #0]
   1387c:	3a01      	subs	r2, #1
   1387e:	1c6b      	adds	r3, r5, #1
   13880:	702c      	strb	r4, [r5, #0]
   13882:	b13c      	cbz	r4, 13894 <strncpy+0x50>
   13884:	b16a      	cbz	r2, 138a2 <strncpy+0x5e>
   13886:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1388a:	3a01      	subs	r2, #1
   1388c:	f803 4b01 	strb.w	r4, [r3], #1
   13890:	2c00      	cmp	r4, #0
   13892:	d1f7      	bne.n	13884 <strncpy+0x40>
   13894:	b12a      	cbz	r2, 138a2 <strncpy+0x5e>
   13896:	441a      	add	r2, r3
   13898:	2100      	movs	r1, #0
   1389a:	f803 1b01 	strb.w	r1, [r3], #1
   1389e:	4293      	cmp	r3, r2
   138a0:	d1fb      	bne.n	1389a <strncpy+0x56>
   138a2:	bc70      	pop	{r4, r5, r6}
   138a4:	4770      	bx	lr
   138a6:	4605      	mov	r5, r0
   138a8:	e7e6      	b.n	13878 <strncpy+0x34>
   138aa:	bf00      	nop

000138ac <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   138ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   138ae:	e003      	b.n	138b8 <LoopCopyDataInit>

000138b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   138b0:	4b0a      	ldr	r3, [pc, #40]	; (138dc <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   138b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   138b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   138b6:	3104      	adds	r1, #4

000138b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   138b8:	4809      	ldr	r0, [pc, #36]	; (138e0 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   138ba:	4b0a      	ldr	r3, [pc, #40]	; (138e4 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   138bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   138be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   138c0:	d3f6      	bcc.n	138b0 <CopyDataInit>
	ldr	r2, =_sbss
   138c2:	4a09      	ldr	r2, [pc, #36]	; (138e8 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   138c4:	e002      	b.n	138cc <LoopFillZerobss>

000138c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   138c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
   138c8:	f842 3b04 	str.w	r3, [r2], #4

000138cc <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138cc:	4b07      	ldr	r3, [pc, #28]	; (138ec <LoopFillZerobss+0x20>)
	cmp	r2, r3
   138ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
   138d0:	d3f9      	bcc.n	138c6 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   138d2:	f7ec fd33 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   138d6:	f7fe fe8f 	bl	125f8 <main>
	bx	lr    
   138da:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   138dc:	000139d4 	.word	0x000139d4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   138e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   138e4:	200001a0 	.word	0x200001a0
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   138e8:	200001a0 	.word	0x200001a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138ec:	2000ae6c 	.word	0x2000ae6c

000138f0 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   138f0:	e7fe      	b.n	138f0 <ADC1_2_IRQHandler>
   138f2:	0000      	movs	r0, r0
   138f4:	00000031 	.word	0x00000031
   138f8:	00000032 	.word	0x00000032
   138fc:	00000033 	.word	0x00000033
   13900:	00000034 	.word	0x00000034
   13904:	00000035 	.word	0x00000035
   13908:	00000036 	.word	0x00000036
   1390c:	00000037 	.word	0x00000037
   13910:	00000038 	.word	0x00000038
   13914:	00000039 	.word	0x00000039
   13918:	00003031 	.word	0x00003031
   1391c:	00003131 	.word	0x00003131
   13920:	00003231 	.word	0x00003231
   13924:	00003331 	.word	0x00003331
   13928:	454c4449 	.word	0x454c4449
   1392c:	00000000 	.word	0x00000000

00013930 <ulKernelPriority>:
   13930:	0000007f                                ....

00013934 <heapSTRUCT_SIZE>:
   13934:	00010010                                         ..

00013936 <version>:
   13936:	3d5a0001                                         ..

00013938 <utm_east0>:
   13938:	00093d5a                                Z=..

0001393c <utm_north0>:
   1393c:	005875e6                                .uX.

00013940 <climb_pgain>:
   13940:	bcf5c28f                                ....

00013944 <climb_igain>:
   13944:	3dcccccd                                ...=

00013948 <level_gaz>:
   13948:	3e9eb852                                R..>

0001394c <nav_east0>:
   1394c:	00093d5a                                Z=..

00013950 <nav_north0>:
   13950:	005875e6                                .uX.

00013954 <nb_waypoint>:
   13954:	00000007 33323130 37363534 42413938     ....0123456789AB
   13964:	46454443                                CDEF

00013968 <failsafe>:
	...
   1397c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   1398c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   1399c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   139ac:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   139bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   139cc:	000d0a30 00000d0a                       0.......
