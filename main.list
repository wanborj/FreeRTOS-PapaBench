
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 8d 38 01 00 d1 38 01 00 d1 38 01 00     .P. .8...8...8..
      10:	d1 38 01 00 d1 38 01 00 d1 38 01 00 00 00 00 00     .8...8...8......
	...
      2c:	25 46 00 00 d1 38 01 00 00 00 00 00 31 47 00 00     %F...8......1G..
      3c:	6d 47 00 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     mG...8...8...8..
      4c:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      5c:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      6c:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      7c:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      8c:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      9c:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      ac:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      bc:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      cc:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
      dc:	d1 38 01 00 d1 38 01 00 d1 38 01 00 d1 38 01 00     .8...8...8...8..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000139c4 	.word	0x000139c4
     6d0:	20000000 	.word	0x20000000
     6d4:	200001a0 	.word	0x200001a0
     6d8:	200001a0 	.word	0x200001a0
     6dc:	2004be40 	.word	0x2004be40

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f002 f9e7 	bl	47cc <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 230c 	movw	r3, #524	; 0x20c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 230c 	movw	r3, #524	; 0x20c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f000 fa7c 	bl	2948 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f000 fa77 	bl	2948 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 2310 	movw	r3, #528	; 0x210
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 2310 	movw	r3, #528	; 0x210
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 12a0 	movw	r2, #416	; 0x1a0
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f000 fa57 	bl	2960 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 2314 	movw	r3, #532	; 0x214
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 230c 	movw	r3, #524	; 0x20c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f000 fa96 	bl	2a20 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 230c 	movw	r3, #524	; 0x20c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 2314 	movw	r3, #532	; 0x214
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 13f4 	movw	r3, #500	; 0x1f4
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 230c 	movw	r3, #524	; 0x20c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f000 fa40 	bl	29b0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 13f0 	movw	r3, #496	; 0x1f0
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 230c 	movw	r3, #524	; 0x20c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f000 fa30 	bl	29b0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 230c 	movw	r3, #524	; 0x20c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f000 fa23 	bl	29b0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 13f8 	movw	r3, #504	; 0x1f8
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f000 fa44 	bl	2a20 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f000 fa3b 	bl	2a20 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 2310 	movw	r3, #528	; 0x210
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 2310 	movw	r3, #528	; 0x210
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 12a0 	movw	r2, #416	; 0x1a0
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f000 f9ba 	bl	2960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 13f8 	movw	r3, #504	; 0x1f8
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f001 fb35 	bl	3c74 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 2318 	movw	r3, #536	; 0x218
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 231c 	movw	r3, #540	; 0x21c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 2314 	movw	r3, #532	; 0x214
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 2314 	movw	r3, #532	; 0x214
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 231c 	movw	r3, #540	; 0x21c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 231c 	movw	r3, #540	; 0x21c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 2314 	movw	r3, #532	; 0x214
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 13f4 	movw	r3, #500	; 0x1f4
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 13f0 	movw	r3, #496	; 0x1f0
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 13f4 	movw	r3, #500	; 0x1f4
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 13f0 	movw	r3, #496	; 0x1f0
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 2314 	movw	r3, #532	; 0x214
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f000 f9ae 	bl	2a20 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f000 f9a5 	bl	2a20 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 2310 	movw	r3, #528	; 0x210
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 2310 	movw	r3, #528	; 0x210
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 12a0 	movw	r2, #416	; 0x1a0
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f000 f920 	bl	2960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 13f0 	movw	r3, #496	; 0x1f0
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 231c 	movw	r3, #540	; 0x21c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 2314 	movw	r3, #532	; 0x214
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 2318 	movw	r3, #536	; 0x218
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 2310 	movw	r3, #528	; 0x210
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 2310 	movw	r3, #528	; 0x210
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 2310 	movw	r3, #528	; 0x210
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 2310 	movw	r3, #528	; 0x210
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 12a0 	movw	r2, #416	; 0x1a0
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 2310 	movw	r3, #528	; 0x210
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 12a0 	movw	r2, #416	; 0x1a0
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 230c 	movw	r3, #524	; 0x20c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 230c 	movw	r3, #524	; 0x20c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 230c 	movw	r3, #524	; 0x20c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 230c 	movw	r3, #524	; 0x20c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 12a0 	movw	r2, #416	; 0x1a0
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f000 f857 	bl	2908 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 10c8 	movw	r0, #456	; 0x1c8
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f000 f84b 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 10dc 	movw	r0, #476	; 0x1dc
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f000 f845 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 10f8 	movw	r0, #504	; 0x1f8
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f000 f83f 	bl	2908 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 13f0 	movw	r3, #496	; 0x1f0
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 12c8 	movw	r2, #456	; 0x1c8
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 13f4 	movw	r3, #500	; 0x1f4
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 12dc 	movw	r2, #476	; 0x1dc
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f000 f8a9 	bl	2a20 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 10f8 	movw	r0, #504	; 0x1f8
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f000 f840 	bl	2960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 230c 	movw	r3, #524	; 0x20c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2908:	b480      	push	{r7}
    290a:	b083      	sub	sp, #12
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	f103 0208 	add.w	r2, r3, #8
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	f04f 32ff 	mov.w	r2, #4294967295
    2920:	609a      	str	r2, [r3, #8]
    pxList->xListEnd.xDeadline = portMAX_DELAY;
#endif

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	f103 0208 	add.w	r2, r3, #8
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	f103 0208 	add.w	r2, r3, #8
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	370c      	adds	r7, #12
    293e:	46bd      	mov	sp, r7
    2940:	f85d 7b04 	ldr.w	r7, [sp], #4
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2948:	b480      	push	{r7}
    294a:	b083      	sub	sp, #12
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	611a      	str	r2, [r3, #16]
}
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2960:	b480      	push	{r7}
    2962:	b085      	sub	sp, #20
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	685a      	ldr	r2, [r3, #4]
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	683a      	ldr	r2, [r7, #0]
    2986:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	683a      	ldr	r2, [r7, #0]
    298c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	683a      	ldr	r2, [r7, #0]
    2992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	687a      	ldr	r2, [r7, #4]
    2998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    29c6:	d103      	bne.n	29d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	691b      	ldr	r3, [r3, #16]
    29cc:	60fb      	str	r3, [r7, #12]
    29ce:	e00c      	b.n	29ea <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	3308      	adds	r3, #8
    29d4:	60fb      	str	r3, [r7, #12]
    29d6:	e002      	b.n	29de <vListInsert+0x2e>
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	685b      	ldr	r3, [r3, #4]
    29dc:	60fb      	str	r3, [r7, #12]
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	685b      	ldr	r3, [r3, #4]
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	429a      	cmp	r2, r3
    29e8:	d9f6      	bls.n	29d8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	685a      	ldr	r2, [r3, #4]
    29ee:	683b      	ldr	r3, [r7, #0]
    29f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	685b      	ldr	r3, [r3, #4]
    29f6:	683a      	ldr	r2, [r7, #0]
    29f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    29fa:	683b      	ldr	r3, [r7, #0]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	683a      	ldr	r2, [r7, #0]
    2a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	1c5a      	adds	r2, r3, #1
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	601a      	str	r2, [r3, #0]
}
    2a16:	3714      	adds	r7, #20
    2a18:	46bd      	mov	sp, r7
    2a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1e:	4770      	bx	lr

00002a20 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a20:	b480      	push	{r7}
    2a22:	b085      	sub	sp, #20
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	687a      	ldr	r2, [r7, #4]
    2a2e:	6892      	ldr	r2, [r2, #8]
    2a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	689b      	ldr	r3, [r3, #8]
    2a36:	687a      	ldr	r2, [r7, #4]
    2a38:	6852      	ldr	r2, [r2, #4]
    2a3a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	691b      	ldr	r3, [r3, #16]
    2a40:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d103      	bne.n	2a54 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	1e5a      	subs	r2, r3, #1
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
}
    2a64:	3714      	adds	r7, #20
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    2a70:	b480      	push	{r7}
    2a72:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    2a74:	f248 032f 	movw	r3, #32815	; 0x802f
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	2200      	movs	r2, #0
    2a7e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    2a80:	f248 032e 	movw	r3, #32814	; 0x802e
    2a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a88:	2201      	movs	r2, #1
    2a8a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    2a8c:	f248 0325 	movw	r3, #32805	; 0x8025
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	2207      	movs	r2, #7
    2a96:	701a      	strb	r2, [r3, #0]
}
    2a98:	46bd      	mov	sp, r7
    2a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9e:	4770      	bx	lr

00002aa0 <vPapabenchInit>:

extern uint8_t mode ;
extern uint8_t pprz_mode;

void vPapabenchInit()
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	af00      	add	r7, sp, #0
    mode = MODE_AUTO;
    2aa4:	f64b 4318 	movw	r3, #48152	; 0xbc18
    2aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2aac:	2201      	movs	r2, #1
    2aae:	701a      	strb	r2, [r3, #0]
    pprz_mode = PPRZ_MODE_HOME;
    2ab0:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    2ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    2ab8:	2203      	movs	r2, #3
    2aba:	701a      	strb	r2, [r3, #0]
    timer_init();
    2abc:	f7ff ffd8 	bl	2a70 <timer_init>
    modem_init();
    2ac0:	f009 f9d2 	bl	be68 <modem_init>
    adc_init();
    2ac4:	f009 fd1c 	bl	c500 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(uint8_t adc_channel, struct adc_buf *s);
#endif 
    spi_init();
    2ac8:	f009 fc8e 	bl	c3e8 <spi_init>
    link_fbw_init();
    2acc:	f009 faea 	bl	c0a4 <link_fbw_init>
    gps_init();
    2ad0:	f009 fdc6 	bl	c660 <gps_init>
    nav_init();
    2ad4:	f00d f8d6 	bl	fc84 <nav_init>
    ir_init();
    2ad8:	f00a f882 	bl	cbe0 <ir_init>
    estimator_init();
    2adc:	f00d fab8 	bl	10050 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    2ae0:	bd80      	pop	{r7, pc}
    2ae2:	bf00      	nop

00002ae4 <vTask_0>:


void vTask_0()
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	af00      	add	r7, sp, #0
    last_radio_from_ppm(); //ppm.h
    2ae8:	f00e fa8e 	bl	11008 <last_radio_from_ppm>
}
    2aec:	bd80      	pop	{r7, pc}
    2aee:	bf00      	nop

00002af0 <vTask_1>:

void  vTask_1()
{
    2af0:	b580      	push	{r7, lr}
    2af2:	af00      	add	r7, sp, #0
    to_autopilot_from_last_radio();  //main_auto.c
    2af4:	f00e fe42 	bl	1177c <to_autopilot_from_last_radio>
    spi_reset(); // spi_fbw.h
    2af8:	f00e fd7e 	bl	115f8 <spi_reset>
}
    2afc:	bd80      	pop	{r7, pc}
    2afe:	bf00      	nop

00002b00 <vTask_2>:

void  vTask_2()
{
    2b00:	b580      	push	{r7, lr}
    2b02:	af00      	add	r7, sp, #0
    check_mega128_values_task(); // main_auto.c
    2b04:	f00e ff9e 	bl	11a44 <check_mega128_values_task>
}
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop

00002b0c <vTask_3>:

void vTask_3()
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
    servo_transmit(); //servo.h
    2b10:	f00f f868 	bl	11be4 <servo_transmit>
}
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop

00002b18 <vTask_4>:

void vTask_4()
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
    check_failsafe_task(); //main_auto.c
    2b1c:	f00e ff6c 	bl	119f8 <check_failsafe_task>
}
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop

00002b24 <vTask_5>:

void vTask_5()
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    radio_control_task(); //main_auto.c
    2b28:	f007 fe3c 	bl	a7a4 <radio_control_task>
    ir_gain_calib();
    2b2c:	f00a f8b0 	bl	cc90 <ir_gain_calib>
}
    2b30:	bd80      	pop	{r7, pc}
    2b32:	bf00      	nop

00002b34 <vTask_6>:

void vTask_6()
{
    2b34:	b580      	push	{r7, lr}
    2b36:	af00      	add	r7, sp, #0
    ir_update();
    2b38:	f00a f86c 	bl	cc14 <ir_update>
    estimator_update_state_infrared();
    2b3c:	f00d faf2 	bl	10124 <estimator_update_state_infrared>
    roll_pitch_pid_run();
    2b40:	f00a f8d6 	bl	ccf0 <roll_pitch_pid_run>
}
    2b44:	bd80      	pop	{r7, pc}
    2b46:	bf00      	nop

00002b48 <vTask_7>:

void vTask_7()
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	af00      	add	r7, sp, #0
    link_fbw_send(); // link_fbw.h
    2b4c:	f009 fabc 	bl	c0c8 <link_fbw_send>
}
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop

00002b54 <vTask_8>:

void vTask_8()
{
    2b54:	b580      	push	{r7, lr}
    2b56:	af00      	add	r7, sp, #0
    parse_gps_msg();
    2b58:	f009 fd8e 	bl	c678 <parse_gps_msg>
    use_gps_pos();
    2b5c:	f009 f930 	bl	bdc0 <use_gps_pos>
}
    2b60:	bd80      	pop	{r7, pc}
    2b62:	bf00      	nop

00002b64 <vTask_9>:

void vTask_9()
{
    2b64:	b580      	push	{r7, lr}
    2b66:	af00      	add	r7, sp, #0
    navigation_update();
    2b68:	f007 ff16 	bl	a998 <navigation_update>
    send_nav_values();
    2b6c:	f007 ff2a 	bl	a9c4 <send_nav_values>
    course_run();
    2b70:	f009 f804 	bl	bb7c <course_run>
}
    2b74:	bd80      	pop	{r7, pc}
    2b76:	bf00      	nop

00002b78 <vTask_10>:

void vTask_10()
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0
    altitude_control_task();
    2b7c:	f009 f822 	bl	bbc4 <altitude_control_task>
}
    2b80:	bd80      	pop	{r7, pc}
    2b82:	bf00      	nop

00002b84 <vTask_11>:

void vTask_11()
{
    2b84:	b580      	push	{r7, lr}
    2b86:	af00      	add	r7, sp, #0
    climb_control_task();
    2b88:	f009 f836 	bl	bbf8 <climb_control_task>
}
    2b8c:	bd80      	pop	{r7, pc}
    2b8e:	bf00      	nop

00002b90 <vTask_12>:

void vTask_12()
{
    2b90:	b580      	push	{r7, lr}
    2b92:	af00      	add	r7, sp, #0
    reporting_task();
    2b94:	f007 fdba 	bl	a70c <reporting_task>
}
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	bf00      	nop

00002b9c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b084      	sub	sp, #16
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    2ba4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2ba6:	2301      	movs	r3, #1
    2ba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2baa:	683b      	ldr	r3, [r7, #0]
    2bac:	2b01      	cmp	r3, #1
    2bae:	d00b      	beq.n	2bc8 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d001      	beq.n	2bbc <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2bb8:	2300      	movs	r3, #0
    2bba:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	691b      	ldr	r3, [r3, #16]
    2bc0:	2b00      	cmp	r3, #0
    2bc2:	d001      	beq.n	2bc8 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2bc4:	2300      	movs	r3, #0
    2bc6:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	2b01      	cmp	r3, #1
    2bcc:	d12f      	bne.n	2c2e <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	681a      	ldr	r2, [r3, #0]
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bd6:	6879      	ldr	r1, [r7, #4]
    2bd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2bda:	fb01 f303 	mul.w	r3, r1, r3
    2bde:	441a      	add	r2, r3
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	2200      	movs	r2, #0
    2be8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	681a      	ldr	r2, [r3, #0]
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	681a      	ldr	r2, [r3, #0]
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2bfa:	3b01      	subs	r3, #1
    2bfc:	6879      	ldr	r1, [r7, #4]
    2bfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2c00:	fb01 f303 	mul.w	r3, r1, r3
    2c04:	441a      	add	r2, r3
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	f04f 32ff 	mov.w	r2, #4294967295
    2c10:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	f04f 32ff 	mov.w	r2, #4294967295
    2c18:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	3310      	adds	r3, #16
    2c1e:	4618      	mov	r0, r3
    2c20:	f7ff fe72 	bl	2908 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	3324      	adds	r3, #36	; 0x24
    2c28:	4618      	mov	r0, r3
    2c2a:	f7ff fe6d 	bl	2908 <vListInitialise>
	}

	return xReturn;
    2c2e:	68fb      	ldr	r3, [r7, #12]
}
    2c30:	4618      	mov	r0, r3
    2c32:	3710      	adds	r7, #16
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}

00002c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2c38:	b580      	push	{r7, lr}
    2c3a:	b088      	sub	sp, #32
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	60f8      	str	r0, [r7, #12]
    2c40:	60b9      	str	r1, [r7, #8]
    2c42:	4613      	mov	r3, r2
    2c44:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2c46:	2300      	movs	r3, #0
    2c48:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d026      	beq.n	2c9e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2c50:	204c      	movs	r0, #76	; 0x4c
    2c52:	f001 fdbb 	bl	47cc <pvPortMalloc>
    2c56:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2c58:	69bb      	ldr	r3, [r7, #24]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d01f      	beq.n	2c9e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	68ba      	ldr	r2, [r7, #8]
    2c62:	fb02 f303 	mul.w	r3, r2, r3
    2c66:	3301      	adds	r3, #1
    2c68:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c6a:	6978      	ldr	r0, [r7, #20]
    2c6c:	f001 fdae 	bl	47cc <pvPortMalloc>
    2c70:	4602      	mov	r2, r0
    2c72:	69bb      	ldr	r3, [r7, #24]
    2c74:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2c76:	69bb      	ldr	r3, [r7, #24]
    2c78:	681b      	ldr	r3, [r3, #0]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d00c      	beq.n	2c98 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2c7e:	69bb      	ldr	r3, [r7, #24]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2c84:	69bb      	ldr	r3, [r7, #24]
    2c86:	68ba      	ldr	r2, [r7, #8]
    2c88:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2c8a:	69b8      	ldr	r0, [r7, #24]
    2c8c:	2101      	movs	r1, #1
    2c8e:	f7ff ff85 	bl	2b9c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2c92:	69bb      	ldr	r3, [r7, #24]
    2c94:	61fb      	str	r3, [r7, #28]
    2c96:	e002      	b.n	2c9e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2c98:	69b8      	ldr	r0, [r7, #24]
    2c9a:	f001 fe5b 	bl	4954 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2c9e:	69fb      	ldr	r3, [r7, #28]
}
    2ca0:	4618      	mov	r0, r3
    2ca2:	3720      	adds	r7, #32
    2ca4:	46bd      	mov	sp, r7
    2ca6:	bd80      	pop	{r7, pc}

00002ca8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	4603      	mov	r3, r0
    2cb0:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2cb2:	204c      	movs	r0, #76	; 0x4c
    2cb4:	f001 fd8a 	bl	47cc <pvPortMalloc>
    2cb8:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2cba:	68fb      	ldr	r3, [r7, #12]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d02c      	beq.n	2d1a <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	2200      	movs	r2, #0
    2cc4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2cc6:	68fb      	ldr	r3, [r7, #12]
    2cc8:	2200      	movs	r2, #0
    2cca:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	2200      	movs	r2, #0
    2cd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2cd2:	68fb      	ldr	r3, [r7, #12]
    2cd4:	2200      	movs	r2, #0
    2cd6:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2cd8:	68fb      	ldr	r3, [r7, #12]
    2cda:	2200      	movs	r2, #0
    2cdc:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	2201      	movs	r2, #1
    2ce2:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	2200      	movs	r2, #0
    2ce8:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2cea:	68fb      	ldr	r3, [r7, #12]
    2cec:	f04f 32ff 	mov.w	r2, #4294967295
    2cf0:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2cf2:	68fb      	ldr	r3, [r7, #12]
    2cf4:	f04f 32ff 	mov.w	r2, #4294967295
    2cf8:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cfa:	68fb      	ldr	r3, [r7, #12]
    2cfc:	3310      	adds	r3, #16
    2cfe:	4618      	mov	r0, r3
    2d00:	f7ff fe02 	bl	2908 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2d04:	68fb      	ldr	r3, [r7, #12]
    2d06:	3324      	adds	r3, #36	; 0x24
    2d08:	4618      	mov	r0, r3
    2d0a:	f7ff fdfd 	bl	2908 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2d0e:	68f8      	ldr	r0, [r7, #12]
    2d10:	2100      	movs	r1, #0
    2d12:	2200      	movs	r2, #0
    2d14:	2300      	movs	r3, #0
    2d16:	f000 f81d 	bl	2d54 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2d1a:	68fb      	ldr	r3, [r7, #12]
	}
    2d1c:	4618      	mov	r0, r3
    2d1e:	3710      	adds	r7, #16
    2d20:	46bd      	mov	sp, r7
    2d22:	bd80      	pop	{r7, pc}

00002d24 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2d24:	b580      	push	{r7, lr}
    2d26:	b084      	sub	sp, #16
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2d2c:	f001 fcce 	bl	46cc <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	685b      	ldr	r3, [r3, #4]
    2d3c:	60fb      	str	r3, [r7, #12]
    2d3e:	e001      	b.n	2d44 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2d40:	2300      	movs	r3, #0
    2d42:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2d44:	f001 fcd8 	bl	46f8 <vPortExitCritical>
		
		return pxReturn;
    2d48:	68fb      	ldr	r3, [r7, #12]
	}
    2d4a:	4618      	mov	r0, r3
    2d4c:	3710      	adds	r7, #16
    2d4e:	46bd      	mov	sp, r7
    2d50:	bd80      	pop	{r7, pc}
    2d52:	bf00      	nop

00002d54 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b088      	sub	sp, #32
    2d58:	af00      	add	r7, sp, #0
    2d5a:	60f8      	str	r0, [r7, #12]
    2d5c:	60b9      	str	r1, [r7, #8]
    2d5e:	607a      	str	r2, [r7, #4]
    2d60:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d62:	2300      	movs	r3, #0
    2d64:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d66:	f001 fcb1 	bl	46cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d72:	429a      	cmp	r2, r3
    2d74:	d216      	bcs.n	2da4 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d76:	68f8      	ldr	r0, [r7, #12]
    2d78:	68b9      	ldr	r1, [r7, #8]
    2d7a:	683a      	ldr	r2, [r7, #0]
    2d7c:	f000 f9d6 	bl	312c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d80:	68fb      	ldr	r3, [r7, #12]
    2d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d84:	2b00      	cmp	r3, #0
    2d86:	d009      	beq.n	2d9c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	3324      	adds	r3, #36	; 0x24
    2d8c:	4618      	mov	r0, r3
    2d8e:	f001 f93f 	bl	4010 <xTaskRemoveFromEventList>
    2d92:	4603      	mov	r3, r0
    2d94:	2b01      	cmp	r3, #1
    2d96:	d101      	bne.n	2d9c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2d98:	f001 fc8a 	bl	46b0 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2d9c:	f001 fcac 	bl	46f8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2da0:	2301      	movs	r3, #1
    2da2:	e059      	b.n	2e58 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d103      	bne.n	2db2 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2daa:	f001 fca5 	bl	46f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2dae:	2300      	movs	r3, #0
    2db0:	e052      	b.n	2e58 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2db2:	69fb      	ldr	r3, [r7, #28]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d106      	bne.n	2dc6 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2db8:	f107 0314 	add.w	r3, r7, #20
    2dbc:	4618      	mov	r0, r3
    2dbe:	f001 f97f 	bl	40c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2dc2:	2301      	movs	r3, #1
    2dc4:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2dc6:	f001 fc97 	bl	46f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2dca:	f000 fe97 	bl	3afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2dce:	f001 fc7d 	bl	46cc <vPortEnterCritical>
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dda:	d102      	bne.n	2de2 <xQueueGenericSend+0x8e>
    2ddc:	68fb      	ldr	r3, [r7, #12]
    2dde:	2200      	movs	r2, #0
    2de0:	645a      	str	r2, [r3, #68]	; 0x44
    2de2:	68fb      	ldr	r3, [r7, #12]
    2de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2de6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dea:	d102      	bne.n	2df2 <xQueueGenericSend+0x9e>
    2dec:	68fb      	ldr	r3, [r7, #12]
    2dee:	2200      	movs	r2, #0
    2df0:	649a      	str	r2, [r3, #72]	; 0x48
    2df2:	f001 fc81 	bl	46f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2df6:	f107 0214 	add.w	r2, r7, #20
    2dfa:	1d3b      	adds	r3, r7, #4
    2dfc:	4610      	mov	r0, r2
    2dfe:	4619      	mov	r1, r3
    2e00:	f001 f976 	bl	40f0 <xTaskCheckForTimeOut>
    2e04:	4603      	mov	r3, r0
    2e06:	2b00      	cmp	r3, #0
    2e08:	d11e      	bne.n	2e48 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2e0a:	68f8      	ldr	r0, [r7, #12]
    2e0c:	f000 fa86 	bl	331c <prvIsQueueFull>
    2e10:	4603      	mov	r3, r0
    2e12:	2b00      	cmp	r3, #0
    2e14:	d012      	beq.n	2e3c <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2e16:	68fb      	ldr	r3, [r7, #12]
    2e18:	f103 0210 	add.w	r2, r3, #16
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	4610      	mov	r0, r2
    2e20:	4619      	mov	r1, r3
    2e22:	f001 f8bd 	bl	3fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2e26:	68f8      	ldr	r0, [r7, #12]
    2e28:	f000 fa02 	bl	3230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2e2c:	f000 fe78 	bl	3b20 <xTaskResumeAll>
    2e30:	4603      	mov	r3, r0
    2e32:	2b00      	cmp	r3, #0
    2e34:	d10f      	bne.n	2e56 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2e36:	f001 fc3b 	bl	46b0 <vPortYieldFromISR>
    2e3a:	e00c      	b.n	2e56 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e3c:	68f8      	ldr	r0, [r7, #12]
    2e3e:	f000 f9f7 	bl	3230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e42:	f000 fe6d 	bl	3b20 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2e46:	e78e      	b.n	2d66 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e48:	68f8      	ldr	r0, [r7, #12]
    2e4a:	f000 f9f1 	bl	3230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e4e:	f000 fe67 	bl	3b20 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2e52:	2300      	movs	r3, #0
    2e54:	e000      	b.n	2e58 <xQueueGenericSend+0x104>
		}
	}
    2e56:	e786      	b.n	2d66 <xQueueGenericSend+0x12>
}
    2e58:	4618      	mov	r0, r3
    2e5a:	3720      	adds	r7, #32
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}

00002e60 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b086      	sub	sp, #24
    2e64:	af00      	add	r7, sp, #0
    2e66:	60f8      	str	r0, [r7, #12]
    2e68:	60b9      	str	r1, [r7, #8]
    2e6a:	607a      	str	r2, [r7, #4]
    2e6c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e6e:	2300      	movs	r3, #0
    2e70:	613b      	str	r3, [r7, #16]
    2e72:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2e76:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2e7e:	68fb      	ldr	r3, [r7, #12]
    2e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e82:	429a      	cmp	r2, r3
    2e84:	d221      	bcs.n	2eca <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e86:	68f8      	ldr	r0, [r7, #12]
    2e88:	68b9      	ldr	r1, [r7, #8]
    2e8a:	683a      	ldr	r2, [r7, #0]
    2e8c:	f000 f94e 	bl	312c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2e90:	68fb      	ldr	r3, [r7, #12]
    2e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e94:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e98:	d10f      	bne.n	2eba <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e9a:	68fb      	ldr	r3, [r7, #12]
    2e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d010      	beq.n	2ec4 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ea2:	68fb      	ldr	r3, [r7, #12]
    2ea4:	3324      	adds	r3, #36	; 0x24
    2ea6:	4618      	mov	r0, r3
    2ea8:	f001 f8b2 	bl	4010 <xTaskRemoveFromEventList>
    2eac:	4603      	mov	r3, r0
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d008      	beq.n	2ec4 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	2201      	movs	r2, #1
    2eb6:	601a      	str	r2, [r3, #0]
    2eb8:	e004      	b.n	2ec4 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2eba:	68fb      	ldr	r3, [r7, #12]
    2ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2ebe:	1c5a      	adds	r2, r3, #1
    2ec0:	68fb      	ldr	r3, [r7, #12]
    2ec2:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2ec4:	2301      	movs	r3, #1
    2ec6:	617b      	str	r3, [r7, #20]
    2ec8:	e001      	b.n	2ece <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2eca:	2300      	movs	r3, #0
    2ecc:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2ece:	f04f 0000 	mov.w	r0, #0
    2ed2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2ed6:	697b      	ldr	r3, [r7, #20]
}
    2ed8:	4618      	mov	r0, r3
    2eda:	3718      	adds	r7, #24
    2edc:	46bd      	mov	sp, r7
    2ede:	bd80      	pop	{r7, pc}

00002ee0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b088      	sub	sp, #32
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	60f8      	str	r0, [r7, #12]
    2ee8:	60b9      	str	r1, [r7, #8]
    2eea:	607a      	str	r2, [r7, #4]
    2eec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2eee:	2300      	movs	r3, #0
    2ef0:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2ef2:	f001 fbeb 	bl	46cc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2ef6:	68fb      	ldr	r3, [r7, #12]
    2ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2efa:	2b00      	cmp	r3, #0
    2efc:	d03b      	beq.n	2f76 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2efe:	68fb      	ldr	r3, [r7, #12]
    2f00:	68db      	ldr	r3, [r3, #12]
    2f02:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2f04:	68f8      	ldr	r0, [r7, #12]
    2f06:	68b9      	ldr	r1, [r7, #8]
    2f08:	f000 f96c 	bl	31e4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2f0c:	683b      	ldr	r3, [r7, #0]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d11c      	bne.n	2f4c <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f16:	1e5a      	subs	r2, r3, #1
    2f18:	68fb      	ldr	r3, [r7, #12]
    2f1a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2f1c:	68fb      	ldr	r3, [r7, #12]
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d104      	bne.n	2f2e <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2f24:	f001 fa9e 	bl	4464 <xTaskGetCurrentTaskHandle>
    2f28:	4602      	mov	r2, r0
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f2e:	68fb      	ldr	r3, [r7, #12]
    2f30:	691b      	ldr	r3, [r3, #16]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d01b      	beq.n	2f6e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	3310      	adds	r3, #16
    2f3a:	4618      	mov	r0, r3
    2f3c:	f001 f868 	bl	4010 <xTaskRemoveFromEventList>
    2f40:	4603      	mov	r3, r0
    2f42:	2b01      	cmp	r3, #1
    2f44:	d113      	bne.n	2f6e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2f46:	f001 fbb3 	bl	46b0 <vPortYieldFromISR>
    2f4a:	e010      	b.n	2f6e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2f4c:	68fb      	ldr	r3, [r7, #12]
    2f4e:	69ba      	ldr	r2, [r7, #24]
    2f50:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f52:	68fb      	ldr	r3, [r7, #12]
    2f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f56:	2b00      	cmp	r3, #0
    2f58:	d009      	beq.n	2f6e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f5a:	68fb      	ldr	r3, [r7, #12]
    2f5c:	3324      	adds	r3, #36	; 0x24
    2f5e:	4618      	mov	r0, r3
    2f60:	f001 f856 	bl	4010 <xTaskRemoveFromEventList>
    2f64:	4603      	mov	r3, r0
    2f66:	2b00      	cmp	r3, #0
    2f68:	d001      	beq.n	2f6e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2f6a:	f001 fba1 	bl	46b0 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2f6e:	f001 fbc3 	bl	46f8 <vPortExitCritical>
				return pdPASS;
    2f72:	2301      	movs	r3, #1
    2f74:	e066      	b.n	3044 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d103      	bne.n	2f84 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2f7c:	f001 fbbc 	bl	46f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2f80:	2300      	movs	r3, #0
    2f82:	e05f      	b.n	3044 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2f84:	69fb      	ldr	r3, [r7, #28]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d106      	bne.n	2f98 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2f8a:	f107 0310 	add.w	r3, r7, #16
    2f8e:	4618      	mov	r0, r3
    2f90:	f001 f896 	bl	40c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2f94:	2301      	movs	r3, #1
    2f96:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2f98:	f001 fbae 	bl	46f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2f9c:	f000 fdae 	bl	3afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2fa0:	f001 fb94 	bl	46cc <vPortEnterCritical>
    2fa4:	68fb      	ldr	r3, [r7, #12]
    2fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2fac:	d102      	bne.n	2fb4 <xQueueGenericReceive+0xd4>
    2fae:	68fb      	ldr	r3, [r7, #12]
    2fb0:	2200      	movs	r2, #0
    2fb2:	645a      	str	r2, [r3, #68]	; 0x44
    2fb4:	68fb      	ldr	r3, [r7, #12]
    2fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2fbc:	d102      	bne.n	2fc4 <xQueueGenericReceive+0xe4>
    2fbe:	68fb      	ldr	r3, [r7, #12]
    2fc0:	2200      	movs	r2, #0
    2fc2:	649a      	str	r2, [r3, #72]	; 0x48
    2fc4:	f001 fb98 	bl	46f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2fc8:	f107 0210 	add.w	r2, r7, #16
    2fcc:	1d3b      	adds	r3, r7, #4
    2fce:	4610      	mov	r0, r2
    2fd0:	4619      	mov	r1, r3
    2fd2:	f001 f88d 	bl	40f0 <xTaskCheckForTimeOut>
    2fd6:	4603      	mov	r3, r0
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d12b      	bne.n	3034 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2fdc:	68f8      	ldr	r0, [r7, #12]
    2fde:	f000 f973 	bl	32c8 <prvIsQueueEmpty>
    2fe2:	4603      	mov	r3, r0
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d01f      	beq.n	3028 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fe8:	68fb      	ldr	r3, [r7, #12]
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d108      	bne.n	3002 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2ff0:	f001 fb6c 	bl	46cc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2ff4:	68fb      	ldr	r3, [r7, #12]
    2ff6:	685b      	ldr	r3, [r3, #4]
    2ff8:	4618      	mov	r0, r3
    2ffa:	f001 fa43 	bl	4484 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2ffe:	f001 fb7b 	bl	46f8 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3002:	68fb      	ldr	r3, [r7, #12]
    3004:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	4610      	mov	r0, r2
    300c:	4619      	mov	r1, r3
    300e:	f000 ffc7 	bl	3fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3012:	68f8      	ldr	r0, [r7, #12]
    3014:	f000 f90c 	bl	3230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3018:	f000 fd82 	bl	3b20 <xTaskResumeAll>
    301c:	4603      	mov	r3, r0
    301e:	2b00      	cmp	r3, #0
    3020:	d10f      	bne.n	3042 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    3022:	f001 fb45 	bl	46b0 <vPortYieldFromISR>
    3026:	e00c      	b.n	3042 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3028:	68f8      	ldr	r0, [r7, #12]
    302a:	f000 f901 	bl	3230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    302e:	f000 fd77 	bl	3b20 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3032:	e75e      	b.n	2ef2 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3034:	68f8      	ldr	r0, [r7, #12]
    3036:	f000 f8fb 	bl	3230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    303a:	f000 fd71 	bl	3b20 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    303e:	2300      	movs	r3, #0
    3040:	e000      	b.n	3044 <xQueueGenericReceive+0x164>
		}
	}
    3042:	e756      	b.n	2ef2 <xQueueGenericReceive+0x12>
}
    3044:	4618      	mov	r0, r3
    3046:	3720      	adds	r7, #32
    3048:	46bd      	mov	sp, r7
    304a:	bd80      	pop	{r7, pc}

0000304c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    304c:	b580      	push	{r7, lr}
    304e:	b086      	sub	sp, #24
    3050:	af00      	add	r7, sp, #0
    3052:	60f8      	str	r0, [r7, #12]
    3054:	60b9      	str	r1, [r7, #8]
    3056:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3058:	2300      	movs	r3, #0
    305a:	613b      	str	r3, [r7, #16]
    305c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3060:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3068:	2b00      	cmp	r3, #0
    306a:	d025      	beq.n	30b8 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    306c:	68f8      	ldr	r0, [r7, #12]
    306e:	68b9      	ldr	r1, [r7, #8]
    3070:	f000 f8b8 	bl	31e4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3074:	68fb      	ldr	r3, [r7, #12]
    3076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3078:	1e5a      	subs	r2, r3, #1
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    307e:	68fb      	ldr	r3, [r7, #12]
    3080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3082:	f1b3 3fff 	cmp.w	r3, #4294967295
    3086:	d10f      	bne.n	30a8 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	691b      	ldr	r3, [r3, #16]
    308c:	2b00      	cmp	r3, #0
    308e:	d010      	beq.n	30b2 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3090:	68fb      	ldr	r3, [r7, #12]
    3092:	3310      	adds	r3, #16
    3094:	4618      	mov	r0, r3
    3096:	f000 ffbb 	bl	4010 <xTaskRemoveFromEventList>
    309a:	4603      	mov	r3, r0
    309c:	2b00      	cmp	r3, #0
    309e:	d008      	beq.n	30b2 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	2201      	movs	r2, #1
    30a4:	601a      	str	r2, [r3, #0]
    30a6:	e004      	b.n	30b2 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    30ac:	1c5a      	adds	r2, r3, #1
    30ae:	68fb      	ldr	r3, [r7, #12]
    30b0:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    30b2:	2301      	movs	r3, #1
    30b4:	617b      	str	r3, [r7, #20]
    30b6:	e001      	b.n	30bc <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    30b8:	2300      	movs	r3, #0
    30ba:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    30bc:	f04f 0000 	mov.w	r0, #0
    30c0:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    30c4:	697b      	ldr	r3, [r7, #20]
}
    30c6:	4618      	mov	r0, r3
    30c8:	3718      	adds	r7, #24
    30ca:	46bd      	mov	sp, r7
    30cc:	bd80      	pop	{r7, pc}
    30ce:	bf00      	nop

000030d0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b084      	sub	sp, #16
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    30d8:	f001 faf8 	bl	46cc <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30e0:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    30e2:	f001 fb09 	bl	46f8 <vPortExitCritical>

	return uxReturn;
    30e6:	68fb      	ldr	r3, [r7, #12]
}
    30e8:	4618      	mov	r0, r3
    30ea:	3710      	adds	r7, #16
    30ec:	46bd      	mov	sp, r7
    30ee:	bd80      	pop	{r7, pc}

000030f0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    30f0:	b480      	push	{r7}
    30f2:	b085      	sub	sp, #20
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30fc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    30fe:	68fb      	ldr	r3, [r7, #12]
}
    3100:	4618      	mov	r0, r3
    3102:	3714      	adds	r7, #20
    3104:	46bd      	mov	sp, r7
    3106:	f85d 7b04 	ldr.w	r7, [sp], #4
    310a:	4770      	bx	lr

0000310c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    310c:	b580      	push	{r7, lr}
    310e:	b082      	sub	sp, #8
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	4618      	mov	r0, r3
    311a:	f001 fc1b 	bl	4954 <vPortFree>
	vPortFree( pxQueue );
    311e:	6878      	ldr	r0, [r7, #4]
    3120:	f001 fc18 	bl	4954 <vPortFree>
}
    3124:	3708      	adds	r7, #8
    3126:	46bd      	mov	sp, r7
    3128:	bd80      	pop	{r7, pc}
    312a:	bf00      	nop

0000312c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    312c:	b580      	push	{r7, lr}
    312e:	b084      	sub	sp, #16
    3130:	af00      	add	r7, sp, #0
    3132:	60f8      	str	r0, [r7, #12]
    3134:	60b9      	str	r1, [r7, #8]
    3136:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    313c:	2b00      	cmp	r3, #0
    313e:	d10c      	bne.n	315a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	681b      	ldr	r3, [r3, #0]
    3144:	2b00      	cmp	r3, #0
    3146:	d145      	bne.n	31d4 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	685b      	ldr	r3, [r3, #4]
    314c:	4618      	mov	r0, r3
    314e:	f001 f9fd 	bl	454c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	2200      	movs	r2, #0
    3156:	605a      	str	r2, [r3, #4]
    3158:	e03c      	b.n	31d4 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	2b00      	cmp	r3, #0
    315e:	d11a      	bne.n	3196 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	689a      	ldr	r2, [r3, #8]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3168:	4610      	mov	r0, r2
    316a:	68b9      	ldr	r1, [r7, #8]
    316c:	461a      	mov	r2, r3
    316e:	f010 fab5 	bl	136dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	689a      	ldr	r2, [r3, #8]
    3176:	68fb      	ldr	r3, [r7, #12]
    3178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    317a:	441a      	add	r2, r3
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	689a      	ldr	r2, [r3, #8]
    3184:	68fb      	ldr	r3, [r7, #12]
    3186:	685b      	ldr	r3, [r3, #4]
    3188:	429a      	cmp	r2, r3
    318a:	d323      	bcc.n	31d4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	681a      	ldr	r2, [r3, #0]
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	609a      	str	r2, [r3, #8]
    3194:	e01e      	b.n	31d4 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3196:	68fb      	ldr	r3, [r7, #12]
    3198:	68da      	ldr	r2, [r3, #12]
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    319e:	4610      	mov	r0, r2
    31a0:	68b9      	ldr	r1, [r7, #8]
    31a2:	461a      	mov	r2, r3
    31a4:	f010 fa9a 	bl	136dc <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    31a8:	68fb      	ldr	r3, [r7, #12]
    31aa:	68da      	ldr	r2, [r3, #12]
    31ac:	68fb      	ldr	r3, [r7, #12]
    31ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31b0:	425b      	negs	r3, r3
    31b2:	441a      	add	r2, r3
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	68da      	ldr	r2, [r3, #12]
    31bc:	68fb      	ldr	r3, [r7, #12]
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	429a      	cmp	r2, r3
    31c2:	d207      	bcs.n	31d4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	685a      	ldr	r2, [r3, #4]
    31c8:	68fb      	ldr	r3, [r7, #12]
    31ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31cc:	425b      	negs	r3, r3
    31ce:	441a      	add	r2, r3
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    31d4:	68fb      	ldr	r3, [r7, #12]
    31d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31d8:	1c5a      	adds	r2, r3, #1
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	639a      	str	r2, [r3, #56]	; 0x38
}
    31de:	3710      	adds	r7, #16
    31e0:	46bd      	mov	sp, r7
    31e2:	bd80      	pop	{r7, pc}

000031e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b082      	sub	sp, #8
    31e8:	af00      	add	r7, sp, #0
    31ea:	6078      	str	r0, [r7, #4]
    31ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d019      	beq.n	322a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	68da      	ldr	r2, [r3, #12]
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31fe:	441a      	add	r2, r3
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	68da      	ldr	r2, [r3, #12]
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	685b      	ldr	r3, [r3, #4]
    320c:	429a      	cmp	r2, r3
    320e:	d303      	bcc.n	3218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	681a      	ldr	r2, [r3, #0]
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	68da      	ldr	r2, [r3, #12]
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3220:	6838      	ldr	r0, [r7, #0]
    3222:	4611      	mov	r1, r2
    3224:	461a      	mov	r2, r3
    3226:	f010 fa59 	bl	136dc <memcpy>
	}
}
    322a:	3708      	adds	r7, #8
    322c:	46bd      	mov	sp, r7
    322e:	bd80      	pop	{r7, pc}

00003230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
    3236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3238:	f001 fa48 	bl	46cc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    323c:	e014      	b.n	3268 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3242:	2b00      	cmp	r3, #0
    3244:	d00f      	beq.n	3266 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	3324      	adds	r3, #36	; 0x24
    324a:	4618      	mov	r0, r3
    324c:	f000 fee0 	bl	4010 <xTaskRemoveFromEventList>
    3250:	4603      	mov	r3, r0
    3252:	2b00      	cmp	r3, #0
    3254:	d001      	beq.n	325a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3256:	f000 ff97 	bl	4188 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    325e:	1e5a      	subs	r2, r3, #1
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	649a      	str	r2, [r3, #72]	; 0x48
    3264:	e000      	b.n	3268 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    3266:	e003      	b.n	3270 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    326c:	2b00      	cmp	r3, #0
    326e:	dce6      	bgt.n	323e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	f04f 32ff 	mov.w	r2, #4294967295
    3276:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3278:	f001 fa3e 	bl	46f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    327c:	f001 fa26 	bl	46cc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3280:	e014      	b.n	32ac <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	691b      	ldr	r3, [r3, #16]
    3286:	2b00      	cmp	r3, #0
    3288:	d00f      	beq.n	32aa <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	3310      	adds	r3, #16
    328e:	4618      	mov	r0, r3
    3290:	f000 febe 	bl	4010 <xTaskRemoveFromEventList>
    3294:	4603      	mov	r3, r0
    3296:	2b00      	cmp	r3, #0
    3298:	d001      	beq.n	329e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    329a:	f000 ff75 	bl	4188 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    32a2:	1e5a      	subs	r2, r3, #1
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	645a      	str	r2, [r3, #68]	; 0x44
    32a8:	e000      	b.n	32ac <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    32aa:	e003      	b.n	32b4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    32b0:	2b00      	cmp	r3, #0
    32b2:	dce6      	bgt.n	3282 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	f04f 32ff 	mov.w	r2, #4294967295
    32ba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    32bc:	f001 fa1c 	bl	46f8 <vPortExitCritical>
}
    32c0:	3708      	adds	r7, #8
    32c2:	46bd      	mov	sp, r7
    32c4:	bd80      	pop	{r7, pc}
    32c6:	bf00      	nop

000032c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    32d0:	f001 f9fc 	bl	46cc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32d8:	2b00      	cmp	r3, #0
    32da:	bf14      	ite	ne
    32dc:	2300      	movne	r3, #0
    32de:	2301      	moveq	r3, #1
    32e0:	b2db      	uxtb	r3, r3
    32e2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    32e4:	f001 fa08 	bl	46f8 <vPortExitCritical>

	return xReturn;
    32e8:	68fb      	ldr	r3, [r7, #12]
}
    32ea:	4618      	mov	r0, r3
    32ec:	3710      	adds	r7, #16
    32ee:	46bd      	mov	sp, r7
    32f0:	bd80      	pop	{r7, pc}
    32f2:	bf00      	nop

000032f4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    32f4:	b480      	push	{r7}
    32f6:	b085      	sub	sp, #20
    32f8:	af00      	add	r7, sp, #0
    32fa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3300:	2b00      	cmp	r3, #0
    3302:	bf14      	ite	ne
    3304:	2300      	movne	r3, #0
    3306:	2301      	moveq	r3, #1
    3308:	b2db      	uxtb	r3, r3
    330a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    330c:	68fb      	ldr	r3, [r7, #12]
}
    330e:	4618      	mov	r0, r3
    3310:	3714      	adds	r7, #20
    3312:	46bd      	mov	sp, r7
    3314:	f85d 7b04 	ldr.w	r7, [sp], #4
    3318:	4770      	bx	lr
    331a:	bf00      	nop

0000331c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    331c:	b580      	push	{r7, lr}
    331e:	b084      	sub	sp, #16
    3320:	af00      	add	r7, sp, #0
    3322:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3324:	f001 f9d2 	bl	46cc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3330:	429a      	cmp	r2, r3
    3332:	bf14      	ite	ne
    3334:	2300      	movne	r3, #0
    3336:	2301      	moveq	r3, #1
    3338:	b2db      	uxtb	r3, r3
    333a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    333c:	f001 f9dc 	bl	46f8 <vPortExitCritical>

	return xReturn;
    3340:	68fb      	ldr	r3, [r7, #12]
}
    3342:	4618      	mov	r0, r3
    3344:	3710      	adds	r7, #16
    3346:	46bd      	mov	sp, r7
    3348:	bd80      	pop	{r7, pc}
    334a:	bf00      	nop

0000334c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    334c:	b480      	push	{r7}
    334e:	b085      	sub	sp, #20
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    335c:	429a      	cmp	r2, r3
    335e:	bf14      	ite	ne
    3360:	2300      	movne	r3, #0
    3362:	2301      	moveq	r3, #1
    3364:	b2db      	uxtb	r3, r3
    3366:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3368:	68fb      	ldr	r3, [r7, #12]
}
    336a:	4618      	mov	r0, r3
    336c:	3714      	adds	r7, #20
    336e:	46bd      	mov	sp, r7
    3370:	f85d 7b04 	ldr.w	r7, [sp], #4
    3374:	4770      	bx	lr
    3376:	bf00      	nop

00003378 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3378:	b580      	push	{r7, lr}
    337a:	b08a      	sub	sp, #40	; 0x28
    337c:	af02      	add	r7, sp, #8
    337e:	60f8      	str	r0, [r7, #12]
    3380:	60b9      	str	r1, [r7, #8]
    3382:	603b      	str	r3, [r7, #0]
    3384:	4613      	mov	r3, r2
    3386:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3388:	88fb      	ldrh	r3, [r7, #6]
    338a:	4618      	mov	r0, r3
    338c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    338e:	f001 f827 	bl	43e0 <prvAllocateTCBAndStack>
    3392:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    3394:	69bb      	ldr	r3, [r7, #24]
    3396:	2b00      	cmp	r3, #0
    3398:	f000 80a1 	beq.w	34de <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    339c:	69bb      	ldr	r3, [r7, #24]
    339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    33a0:	88fb      	ldrh	r3, [r7, #6]
    33a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    33a6:	3b01      	subs	r3, #1
    33a8:	009b      	lsls	r3, r3, #2
    33aa:	4413      	add	r3, r2
    33ac:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    33ae:	697b      	ldr	r3, [r7, #20]
    33b0:	f023 0307 	bic.w	r3, r3, #7
    33b4:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    33b6:	88fb      	ldrh	r3, [r7, #6]
    33b8:	9300      	str	r3, [sp, #0]
    33ba:	69b8      	ldr	r0, [r7, #24]
    33bc:	68b9      	ldr	r1, [r7, #8]
    33be:	6aba      	ldr	r2, [r7, #40]	; 0x28
    33c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33c2:	f000 feff 	bl	41c4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    33c6:	6978      	ldr	r0, [r7, #20]
    33c8:	68f9      	ldr	r1, [r7, #12]
    33ca:	683a      	ldr	r2, [r7, #0]
    33cc:	f001 f900 	bl	45d0 <pxPortInitialiseStack>
    33d0:	4602      	mov	r2, r0
    33d2:	69bb      	ldr	r3, [r7, #24]
    33d4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    33d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33d8:	2b00      	cmp	r3, #0
    33da:	d002      	beq.n	33e2 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    33dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33de:	69ba      	ldr	r2, [r7, #24]
    33e0:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    33e2:	f001 f973 	bl	46cc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    33e6:	f240 435c 	movw	r3, #1116	; 0x45c
    33ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	1c5a      	adds	r2, r3, #1
    33f2:	f240 435c 	movw	r3, #1116	; 0x45c
    33f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fa:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    33fc:	f240 2354 	movw	r3, #596	; 0x254
    3400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d10f      	bne.n	342a <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    340a:	f240 2354 	movw	r3, #596	; 0x254
    340e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3412:	69ba      	ldr	r2, [r7, #24]
    3414:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3416:	f240 435c 	movw	r3, #1116	; 0x45c
    341a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	2b01      	cmp	r3, #1
    3422:	d118      	bne.n	3456 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3424:	f000 ff04 	bl	4230 <prvInitialiseTaskLists>
    3428:	e015      	b.n	3456 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    342a:	f240 436c 	movw	r3, #1132	; 0x46c
    342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	2b00      	cmp	r3, #0
    3436:	d10e      	bne.n	3456 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3438:	f240 2354 	movw	r3, #596	; 0x254
    343c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3444:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3446:	429a      	cmp	r2, r3
    3448:	d805      	bhi.n	3456 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    344a:	f240 2354 	movw	r3, #596	; 0x254
    344e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3452:	69ba      	ldr	r2, [r7, #24]
    3454:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345a:	f240 4364 	movw	r3, #1124	; 0x464
    345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3462:	681b      	ldr	r3, [r3, #0]
    3464:	429a      	cmp	r2, r3
    3466:	d906      	bls.n	3476 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3468:	69bb      	ldr	r3, [r7, #24]
    346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    346c:	f240 4364 	movw	r3, #1124	; 0x464
    3470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3474:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3476:	f240 4380 	movw	r3, #1152	; 0x480
    347a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    347e:	681b      	ldr	r3, [r3, #0]
    3480:	1c5a      	adds	r2, r3, #1
    3482:	f240 4380 	movw	r3, #1152	; 0x480
    3486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    348c:	69bb      	ldr	r3, [r7, #24]
    348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3490:	f240 4368 	movw	r3, #1128	; 0x468
    3494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3498:	681b      	ldr	r3, [r3, #0]
    349a:	429a      	cmp	r2, r3
    349c:	d906      	bls.n	34ac <xTaskGenericCreate+0x134>
    349e:	69bb      	ldr	r3, [r7, #24]
    34a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34a2:	f240 4368 	movw	r3, #1128	; 0x468
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	601a      	str	r2, [r3, #0]
    34ac:	69bb      	ldr	r3, [r7, #24]
    34ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34b0:	4613      	mov	r3, r2
    34b2:	009b      	lsls	r3, r3, #2
    34b4:	4413      	add	r3, r2
    34b6:	009b      	lsls	r3, r3, #2
    34b8:	f240 2258 	movw	r2, #600	; 0x258
    34bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    34c0:	441a      	add	r2, r3
    34c2:	69bb      	ldr	r3, [r7, #24]
    34c4:	3304      	adds	r3, #4
    34c6:	4610      	mov	r0, r2
    34c8:	4619      	mov	r1, r3
    34ca:	f7ff fa49 	bl	2960 <vListInsertEnd>

			xReturn = pdPASS;
    34ce:	2301      	movs	r3, #1
    34d0:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    34d2:	69b8      	ldr	r0, [r7, #24]
    34d4:	f00f f906 	bl	126e4 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    34d8:	f001 f90e 	bl	46f8 <vPortExitCritical>
    34dc:	e002      	b.n	34e4 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    34de:	f04f 33ff 	mov.w	r3, #4294967295
    34e2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    34e4:	69fb      	ldr	r3, [r7, #28]
    34e6:	2b01      	cmp	r3, #1
    34e8:	d111      	bne.n	350e <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    34ea:	f240 436c 	movw	r3, #1132	; 0x46c
    34ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34f2:	681b      	ldr	r3, [r3, #0]
    34f4:	2b00      	cmp	r3, #0
    34f6:	d00a      	beq.n	350e <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34f8:	f240 2354 	movw	r3, #596	; 0x254
    34fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3504:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3506:	429a      	cmp	r2, r3
    3508:	d201      	bcs.n	350e <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    350a:	f001 f8d1 	bl	46b0 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    350e:	69fb      	ldr	r3, [r7, #28]
}
    3510:	4618      	mov	r0, r3
    3512:	3720      	adds	r7, #32
    3514:	46bd      	mov	sp, r7
    3516:	bd80      	pop	{r7, pc}

00003518 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3518:	b580      	push	{r7, lr}
    351a:	b084      	sub	sp, #16
    351c:	af00      	add	r7, sp, #0
    351e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3520:	f001 f8d4 	bl	46cc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3524:	f240 2354 	movw	r3, #596	; 0x254
    3528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	687a      	ldr	r2, [r7, #4]
    3530:	429a      	cmp	r2, r3
    3532:	d101      	bne.n	3538 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    3534:	2300      	movs	r3, #0
    3536:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	2b00      	cmp	r3, #0
    353c:	d105      	bne.n	354a <vTaskDelete+0x32>
    353e:	f240 2354 	movw	r3, #596	; 0x254
    3542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	e000      	b.n	354c <vTaskDelete+0x34>
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    354e:	68fb      	ldr	r3, [r7, #12]
    3550:	3304      	adds	r3, #4
    3552:	4618      	mov	r0, r3
    3554:	f7ff fa64 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3558:	68fb      	ldr	r3, [r7, #12]
    355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    355c:	2b00      	cmp	r3, #0
    355e:	d004      	beq.n	356a <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3560:	68fb      	ldr	r3, [r7, #12]
    3562:	3318      	adds	r3, #24
    3564:	4618      	mov	r0, r3
    3566:	f7ff fa5b 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	3304      	adds	r3, #4
    356e:	f240 402c 	movw	r0, #1068	; 0x42c
    3572:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3576:	4619      	mov	r1, r3
    3578:	f7ff f9f2 	bl	2960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    357c:	f240 4340 	movw	r3, #1088	; 0x440
    3580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	1c5a      	adds	r2, r3, #1
    3588:	f240 4340 	movw	r3, #1088	; 0x440
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3592:	f240 4380 	movw	r3, #1152	; 0x480
    3596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	1c5a      	adds	r2, r3, #1
    359e:	f240 4380 	movw	r3, #1152	; 0x480
    35a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a6:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    35a8:	f001 f8a6 	bl	46f8 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    35ac:	f240 436c 	movw	r3, #1132	; 0x46c
    35b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d004      	beq.n	35c4 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	2b00      	cmp	r3, #0
    35be:	d101      	bne.n	35c4 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    35c0:	f001 f876 	bl	46b0 <vPortYieldFromISR>
			}
		}
	}
    35c4:	3710      	adds	r7, #16
    35c6:	46bd      	mov	sp, r7
    35c8:	bd80      	pop	{r7, pc}
    35ca:	bf00      	nop

000035cc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    35cc:	b580      	push	{r7, lr}
    35ce:	b086      	sub	sp, #24
    35d0:	af00      	add	r7, sp, #0
    35d2:	6078      	str	r0, [r7, #4]
    35d4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    35d6:	2300      	movs	r3, #0
    35d8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    35da:	f000 fa8f 	bl	3afc <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    35de:	687b      	ldr	r3, [r7, #4]
    35e0:	681a      	ldr	r2, [r3, #0]
    35e2:	683b      	ldr	r3, [r7, #0]
    35e4:	4413      	add	r3, r2
    35e6:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	681a      	ldr	r2, [r3, #0]
    35ec:	f240 4360 	movw	r3, #1120	; 0x460
    35f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	429a      	cmp	r2, r3
    35f8:	d90f      	bls.n	361a <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	681a      	ldr	r2, [r3, #0]
    35fe:	693b      	ldr	r3, [r7, #16]
    3600:	429a      	cmp	r2, r3
    3602:	d919      	bls.n	3638 <vTaskDelayUntil+0x6c>
    3604:	f240 4360 	movw	r3, #1120	; 0x460
    3608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	693a      	ldr	r2, [r7, #16]
    3610:	429a      	cmp	r2, r3
    3612:	d911      	bls.n	3638 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3614:	2301      	movs	r3, #1
    3616:	617b      	str	r3, [r7, #20]
    3618:	e00e      	b.n	3638 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	681a      	ldr	r2, [r3, #0]
    361e:	693b      	ldr	r3, [r7, #16]
    3620:	429a      	cmp	r2, r3
    3622:	d807      	bhi.n	3634 <vTaskDelayUntil+0x68>
    3624:	f240 4360 	movw	r3, #1120	; 0x460
    3628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    362c:	681b      	ldr	r3, [r3, #0]
    362e:	693a      	ldr	r2, [r7, #16]
    3630:	429a      	cmp	r2, r3
    3632:	d901      	bls.n	3638 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3634:	2301      	movs	r3, #1
    3636:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	693a      	ldr	r2, [r7, #16]
    363c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    363e:	697b      	ldr	r3, [r7, #20]
    3640:	2b00      	cmp	r3, #0
    3642:	d00b      	beq.n	365c <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3644:	f240 2354 	movw	r3, #596	; 0x254
    3648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	3304      	adds	r3, #4
    3650:	4618      	mov	r0, r3
    3652:	f7ff f9e5 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3656:	6938      	ldr	r0, [r7, #16]
    3658:	f000 fe7e 	bl	4358 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    365c:	f000 fa60 	bl	3b20 <xTaskResumeAll>
    3660:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3662:	68fb      	ldr	r3, [r7, #12]
    3664:	2b00      	cmp	r3, #0
    3666:	d101      	bne.n	366c <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    3668:	f001 f822 	bl	46b0 <vPortYieldFromISR>
		}
	}
    366c:	3718      	adds	r7, #24
    366e:	46bd      	mov	sp, r7
    3670:	bd80      	pop	{r7, pc}
    3672:	bf00      	nop

00003674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3674:	b580      	push	{r7, lr}
    3676:	b084      	sub	sp, #16
    3678:	af00      	add	r7, sp, #0
    367a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    367c:	2300      	movs	r3, #0
    367e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d018      	beq.n	36b8 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    3686:	f000 fa39 	bl	3afc <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    368a:	f240 4360 	movw	r3, #1120	; 0x460
    368e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3692:	681a      	ldr	r2, [r3, #0]
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	4413      	add	r3, r2
    3698:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    369a:	f240 2354 	movw	r3, #596	; 0x254
    369e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a2:	681b      	ldr	r3, [r3, #0]
    36a4:	3304      	adds	r3, #4
    36a6:	4618      	mov	r0, r3
    36a8:	f7ff f9ba 	bl	2a20 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    36ac:	68b8      	ldr	r0, [r7, #8]
    36ae:	f000 fe53 	bl	4358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    36b2:	f000 fa35 	bl	3b20 <xTaskResumeAll>
    36b6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    36b8:	68fb      	ldr	r3, [r7, #12]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d101      	bne.n	36c2 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    36be:	f000 fff7 	bl	46b0 <vPortYieldFromISR>
		}
	}
    36c2:	3710      	adds	r7, #16
    36c4:	46bd      	mov	sp, r7
    36c6:	bd80      	pop	{r7, pc}

000036c8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    36c8:	b580      	push	{r7, lr}
    36ca:	b084      	sub	sp, #16
    36cc:	af00      	add	r7, sp, #0
    36ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    36d0:	f000 fffc 	bl	46cc <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d105      	bne.n	36e6 <uxTaskPriorityGet+0x1e>
    36da:	f240 2354 	movw	r3, #596	; 0x254
    36de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36e2:	681b      	ldr	r3, [r3, #0]
    36e4:	e000      	b.n	36e8 <uxTaskPriorityGet+0x20>
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    36ea:	68fb      	ldr	r3, [r7, #12]
    36ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36ee:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    36f0:	f001 f802 	bl	46f8 <vPortExitCritical>

		return uxReturn;
    36f4:	68bb      	ldr	r3, [r7, #8]
	}
    36f6:	4618      	mov	r0, r3
    36f8:	3710      	adds	r7, #16
    36fa:	46bd      	mov	sp, r7
    36fc:	bd80      	pop	{r7, pc}
    36fe:	bf00      	nop

00003700 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3700:	b580      	push	{r7, lr}
    3702:	b086      	sub	sp, #24
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
    3708:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    370a:	2300      	movs	r3, #0
    370c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    370e:	683b      	ldr	r3, [r7, #0]
    3710:	2b13      	cmp	r3, #19
    3712:	d901      	bls.n	3718 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3714:	2313      	movs	r3, #19
    3716:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    3718:	f000 ffd8 	bl	46cc <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    371c:	f240 2354 	movw	r3, #596	; 0x254
    3720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3724:	681b      	ldr	r3, [r3, #0]
    3726:	687a      	ldr	r2, [r7, #4]
    3728:	429a      	cmp	r2, r3
    372a:	d101      	bne.n	3730 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    372c:	2300      	movs	r3, #0
    372e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	2b00      	cmp	r3, #0
    3734:	d105      	bne.n	3742 <vTaskPrioritySet+0x42>
    3736:	f240 2354 	movw	r3, #596	; 0x254
    373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	e000      	b.n	3744 <vTaskPrioritySet+0x44>
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3746:	693b      	ldr	r3, [r7, #16]
    3748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    374a:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    374c:	68fa      	ldr	r2, [r7, #12]
    374e:	683b      	ldr	r3, [r7, #0]
    3750:	429a      	cmp	r2, r3
    3752:	d058      	beq.n	3806 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3754:	683a      	ldr	r2, [r7, #0]
    3756:	68fb      	ldr	r3, [r7, #12]
    3758:	429a      	cmp	r2, r3
    375a:	d905      	bls.n	3768 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	2b00      	cmp	r3, #0
    3760:	d007      	beq.n	3772 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3762:	2301      	movs	r3, #1
    3764:	617b      	str	r3, [r7, #20]
    3766:	e004      	b.n	3772 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	2b00      	cmp	r3, #0
    376c:	d101      	bne.n	3772 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    376e:	2301      	movs	r3, #1
    3770:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3772:	693b      	ldr	r3, [r7, #16]
    3774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3776:	693b      	ldr	r3, [r7, #16]
    3778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    377a:	429a      	cmp	r2, r3
    377c:	d102      	bne.n	3784 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    377e:	693b      	ldr	r3, [r7, #16]
    3780:	683a      	ldr	r2, [r7, #0]
    3782:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3784:	693b      	ldr	r3, [r7, #16]
    3786:	683a      	ldr	r2, [r7, #0]
    3788:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    378a:	683b      	ldr	r3, [r7, #0]
    378c:	f1c3 0214 	rsb	r2, r3, #20
    3790:	693b      	ldr	r3, [r7, #16]
    3792:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3794:	693b      	ldr	r3, [r7, #16]
    3796:	6959      	ldr	r1, [r3, #20]
    3798:	68fa      	ldr	r2, [r7, #12]
    379a:	4613      	mov	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	4413      	add	r3, r2
    37a0:	009b      	lsls	r3, r3, #2
    37a2:	f240 2258 	movw	r2, #600	; 0x258
    37a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37aa:	4413      	add	r3, r2
    37ac:	4299      	cmp	r1, r3
    37ae:	d125      	bne.n	37fc <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    37b0:	693b      	ldr	r3, [r7, #16]
    37b2:	3304      	adds	r3, #4
    37b4:	4618      	mov	r0, r3
    37b6:	f7ff f933 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    37ba:	693b      	ldr	r3, [r7, #16]
    37bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37be:	f240 4368 	movw	r3, #1128	; 0x468
    37c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	429a      	cmp	r2, r3
    37ca:	d906      	bls.n	37da <vTaskPrioritySet+0xda>
    37cc:	693b      	ldr	r3, [r7, #16]
    37ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37d0:	f240 4368 	movw	r3, #1128	; 0x468
    37d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d8:	601a      	str	r2, [r3, #0]
    37da:	693b      	ldr	r3, [r7, #16]
    37dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37de:	4613      	mov	r3, r2
    37e0:	009b      	lsls	r3, r3, #2
    37e2:	4413      	add	r3, r2
    37e4:	009b      	lsls	r3, r3, #2
    37e6:	f240 2258 	movw	r2, #600	; 0x258
    37ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ee:	441a      	add	r2, r3
    37f0:	693b      	ldr	r3, [r7, #16]
    37f2:	3304      	adds	r3, #4
    37f4:	4610      	mov	r0, r2
    37f6:	4619      	mov	r1, r3
    37f8:	f7ff f8b2 	bl	2960 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    37fc:	697b      	ldr	r3, [r7, #20]
    37fe:	2b01      	cmp	r3, #1
    3800:	d101      	bne.n	3806 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    3802:	f000 ff55 	bl	46b0 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    3806:	f000 ff77 	bl	46f8 <vPortExitCritical>
	}
    380a:	3718      	adds	r7, #24
    380c:	46bd      	mov	sp, r7
    380e:	bd80      	pop	{r7, pc}

00003810 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3810:	b580      	push	{r7, lr}
    3812:	b084      	sub	sp, #16
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3818:	f000 ff58 	bl	46cc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    381c:	f240 2354 	movw	r3, #596	; 0x254
    3820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3824:	681b      	ldr	r3, [r3, #0]
    3826:	687a      	ldr	r2, [r7, #4]
    3828:	429a      	cmp	r2, r3
    382a:	d101      	bne.n	3830 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    382c:	2300      	movs	r3, #0
    382e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d105      	bne.n	3842 <vTaskSuspend+0x32>
    3836:	f240 2354 	movw	r3, #596	; 0x254
    383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	e000      	b.n	3844 <vTaskSuspend+0x34>
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	3304      	adds	r3, #4
    384a:	4618      	mov	r0, r3
    384c:	f7ff f8e8 	bl	2a20 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3854:	2b00      	cmp	r3, #0
    3856:	d004      	beq.n	3862 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3858:	68fb      	ldr	r3, [r7, #12]
    385a:	3318      	adds	r3, #24
    385c:	4618      	mov	r0, r3
    385e:	f7ff f8df 	bl	2a20 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3862:	68fb      	ldr	r3, [r7, #12]
    3864:	3304      	adds	r3, #4
    3866:	f240 4044 	movw	r0, #1092	; 0x444
    386a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    386e:	4619      	mov	r1, r3
    3870:	f7ff f876 	bl	2960 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3874:	f000 ff40 	bl	46f8 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	2b00      	cmp	r3, #0
    387c:	d11e      	bne.n	38bc <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    387e:	f240 436c 	movw	r3, #1132	; 0x46c
    3882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	2b00      	cmp	r3, #0
    388a:	d002      	beq.n	3892 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    388c:	f000 ff10 	bl	46b0 <vPortYieldFromISR>
    3890:	e014      	b.n	38bc <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3892:	f240 4344 	movw	r3, #1092	; 0x444
    3896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    389a:	681a      	ldr	r2, [r3, #0]
    389c:	f240 435c 	movw	r3, #1116	; 0x45c
    38a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a4:	681b      	ldr	r3, [r3, #0]
    38a6:	429a      	cmp	r2, r3
    38a8:	d106      	bne.n	38b8 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    38aa:	f240 2354 	movw	r3, #596	; 0x254
    38ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b2:	2200      	movs	r2, #0
    38b4:	601a      	str	r2, [r3, #0]
    38b6:	e001      	b.n	38bc <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    38b8:	f000 fb16 	bl	3ee8 <vTaskSwitchContext>
				}
			}
		}
	}
    38bc:	3710      	adds	r7, #16
    38be:	46bd      	mov	sp, r7
    38c0:	bd80      	pop	{r7, pc}
    38c2:	bf00      	nop

000038c4 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    38c4:	b480      	push	{r7}
    38c6:	b085      	sub	sp, #20
    38c8:	af00      	add	r7, sp, #0
    38ca:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    38cc:	2300      	movs	r3, #0
    38ce:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    38d4:	68bb      	ldr	r3, [r7, #8]
    38d6:	695a      	ldr	r2, [r3, #20]
    38d8:	f240 4344 	movw	r3, #1092	; 0x444
    38dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e0:	429a      	cmp	r2, r3
    38e2:	d10d      	bne.n	3900 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    38e4:	68bb      	ldr	r3, [r7, #8]
    38e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38e8:	f240 4318 	movw	r3, #1048	; 0x418
    38ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38f0:	429a      	cmp	r2, r3
    38f2:	d005      	beq.n	3900 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    38f4:	68bb      	ldr	r3, [r7, #8]
    38f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38f8:	2b00      	cmp	r3, #0
    38fa:	d101      	bne.n	3900 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    38fc:	2301      	movs	r3, #1
    38fe:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3900:	68fb      	ldr	r3, [r7, #12]
	}
    3902:	4618      	mov	r0, r3
    3904:	3714      	adds	r7, #20
    3906:	46bd      	mov	sp, r7
    3908:	f85d 7b04 	ldr.w	r7, [sp], #4
    390c:	4770      	bx	lr
    390e:	bf00      	nop

00003910 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3910:	b580      	push	{r7, lr}
    3912:	b084      	sub	sp, #16
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    391c:	68fb      	ldr	r3, [r7, #12]
    391e:	2b00      	cmp	r3, #0
    3920:	d043      	beq.n	39aa <vTaskResume+0x9a>
    3922:	f240 2354 	movw	r3, #596	; 0x254
    3926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	68fa      	ldr	r2, [r7, #12]
    392e:	429a      	cmp	r2, r3
    3930:	d03b      	beq.n	39aa <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    3932:	f000 fecb 	bl	46cc <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3936:	68f8      	ldr	r0, [r7, #12]
    3938:	f7ff ffc4 	bl	38c4 <xTaskIsTaskSuspended>
    393c:	4603      	mov	r3, r0
    393e:	2b01      	cmp	r3, #1
    3940:	d131      	bne.n	39a6 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	3304      	adds	r3, #4
    3946:	4618      	mov	r0, r3
    3948:	f7ff f86a 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3950:	f240 4368 	movw	r3, #1128	; 0x468
    3954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	429a      	cmp	r2, r3
    395c:	d906      	bls.n	396c <vTaskResume+0x5c>
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3962:	f240 4368 	movw	r3, #1128	; 0x468
    3966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    396a:	601a      	str	r2, [r3, #0]
    396c:	68fb      	ldr	r3, [r7, #12]
    396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3970:	4613      	mov	r3, r2
    3972:	009b      	lsls	r3, r3, #2
    3974:	4413      	add	r3, r2
    3976:	009b      	lsls	r3, r3, #2
    3978:	f240 2258 	movw	r2, #600	; 0x258
    397c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3980:	441a      	add	r2, r3
    3982:	68fb      	ldr	r3, [r7, #12]
    3984:	3304      	adds	r3, #4
    3986:	4610      	mov	r0, r2
    3988:	4619      	mov	r1, r3
    398a:	f7fe ffe9 	bl	2960 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3992:	f240 2354 	movw	r3, #596	; 0x254
    3996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    399a:	681b      	ldr	r3, [r3, #0]
    399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    399e:	429a      	cmp	r2, r3
    39a0:	d301      	bcc.n	39a6 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    39a2:	f000 fe85 	bl	46b0 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    39a6:	f000 fea7 	bl	46f8 <vPortExitCritical>
		}
	}
    39aa:	3710      	adds	r7, #16
    39ac:	46bd      	mov	sp, r7
    39ae:	bd80      	pop	{r7, pc}

000039b0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    39b0:	b580      	push	{r7, lr}
    39b2:	b086      	sub	sp, #24
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    39b8:	2300      	movs	r3, #0
    39ba:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39c0:	2300      	movs	r3, #0
    39c2:	60fb      	str	r3, [r7, #12]
    39c4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    39c8:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    39cc:	6938      	ldr	r0, [r7, #16]
    39ce:	f7ff ff79 	bl	38c4 <xTaskIsTaskSuspended>
    39d2:	4603      	mov	r3, r0
    39d4:	2b01      	cmp	r3, #1
    39d6:	d144      	bne.n	3a62 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    39d8:	f240 4370 	movw	r3, #1136	; 0x470
    39dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d134      	bne.n	3a50 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    39e6:	693b      	ldr	r3, [r7, #16]
    39e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39ea:	f240 2354 	movw	r3, #596	; 0x254
    39ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39f6:	429a      	cmp	r2, r3
    39f8:	bf34      	ite	cc
    39fa:	2300      	movcc	r3, #0
    39fc:	2301      	movcs	r3, #1
    39fe:	b2db      	uxtb	r3, r3
    3a00:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3a02:	693b      	ldr	r3, [r7, #16]
    3a04:	3304      	adds	r3, #4
    3a06:	4618      	mov	r0, r3
    3a08:	f7ff f80a 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3a0c:	693b      	ldr	r3, [r7, #16]
    3a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a10:	f240 4368 	movw	r3, #1128	; 0x468
    3a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	429a      	cmp	r2, r3
    3a1c:	d906      	bls.n	3a2c <xTaskResumeFromISR+0x7c>
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a22:	f240 4368 	movw	r3, #1128	; 0x468
    3a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a2a:	601a      	str	r2, [r3, #0]
    3a2c:	693b      	ldr	r3, [r7, #16]
    3a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a30:	4613      	mov	r3, r2
    3a32:	009b      	lsls	r3, r3, #2
    3a34:	4413      	add	r3, r2
    3a36:	009b      	lsls	r3, r3, #2
    3a38:	f240 2258 	movw	r2, #600	; 0x258
    3a3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a40:	441a      	add	r2, r3
    3a42:	693b      	ldr	r3, [r7, #16]
    3a44:	3304      	adds	r3, #4
    3a46:	4610      	mov	r0, r2
    3a48:	4619      	mov	r1, r3
    3a4a:	f7fe ff89 	bl	2960 <vListInsertEnd>
    3a4e:	e008      	b.n	3a62 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3a50:	693b      	ldr	r3, [r7, #16]
    3a52:	3318      	adds	r3, #24
    3a54:	f240 4018 	movw	r0, #1048	; 0x418
    3a58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3a5c:	4619      	mov	r1, r3
    3a5e:	f7fe ff7f 	bl	2960 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a62:	f04f 0000 	mov.w	r0, #0
    3a66:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3a6a:	697b      	ldr	r3, [r7, #20]
	}
    3a6c:	4618      	mov	r0, r3
    3a6e:	3718      	adds	r7, #24
    3a70:	46bd      	mov	sp, r7
    3a72:	bd80      	pop	{r7, pc}

00003a74 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b086      	sub	sp, #24
    3a78:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
    3a7a:	2300      	movs	r3, #0
    3a7c:	9300      	str	r3, [sp, #0]
    3a7e:	f240 4358 	movw	r3, #1112	; 0x458
    3a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a86:	9301      	str	r3, [sp, #4]
    3a88:	2300      	movs	r3, #0
    3a8a:	9302      	str	r3, [sp, #8]
    3a8c:	2300      	movs	r3, #0
    3a8e:	9303      	str	r3, [sp, #12]
    3a90:	f244 10a1 	movw	r0, #16801	; 0x41a1
    3a94:	f2c0 0000 	movt	r0, #0
    3a98:	f643 1108 	movw	r1, #14600	; 0x3908
    3a9c:	f2c0 0101 	movt	r1, #1
    3aa0:	2280      	movs	r2, #128	; 0x80
    3aa2:	2300      	movs	r3, #0
    3aa4:	f7ff fc68 	bl	3378 <xTaskGenericCreate>
    3aa8:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	2b01      	cmp	r3, #1
    3aae:	d111      	bne.n	3ad4 <vTaskStartScheduler+0x60>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3ab0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3ab4:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3ab8:	f240 436c 	movw	r3, #1132	; 0x46c
    3abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac0:	2201      	movs	r2, #1
    3ac2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3ac4:	f240 4360 	movw	r3, #1120	; 0x460
    3ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3acc:	2200      	movs	r2, #0
    3ace:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3ad0:	f000 fdc0 	bl	4654 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3ad4:	3708      	adds	r7, #8
    3ad6:	46bd      	mov	sp, r7
    3ad8:	bd80      	pop	{r7, pc}
    3ada:	bf00      	nop

00003adc <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3adc:	b580      	push	{r7, lr}
    3ade:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3ae0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3ae4:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3ae8:	f240 436c 	movw	r3, #1132	; 0x46c
    3aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af0:	2200      	movs	r2, #0
    3af2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3af4:	f000 fdd6 	bl	46a4 <vPortEndScheduler>
}
    3af8:	bd80      	pop	{r7, pc}
    3afa:	bf00      	nop

00003afc <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3afc:	b480      	push	{r7}
    3afe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3b00:	f240 4370 	movw	r3, #1136	; 0x470
    3b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	1c5a      	adds	r2, r3, #1
    3b0c:	f240 4370 	movw	r3, #1136	; 0x470
    3b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b14:	601a      	str	r2, [r3, #0]
}
    3b16:	46bd      	mov	sp, r7
    3b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b1c:	4770      	bx	lr
    3b1e:	bf00      	nop

00003b20 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3b20:	b590      	push	{r4, r7, lr}
    3b22:	b083      	sub	sp, #12
    3b24:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3b26:	2300      	movs	r3, #0
    3b28:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3b2a:	f000 fdcf 	bl	46cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3b2e:	f240 4370 	movw	r3, #1136	; 0x470
    3b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	1e5a      	subs	r2, r3, #1
    3b3a:	f240 4370 	movw	r3, #1136	; 0x470
    3b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b42:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3b44:	f240 4370 	movw	r3, #1136	; 0x470
    3b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b4c:	681b      	ldr	r3, [r3, #0]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	f040 8089 	bne.w	3c66 <xTaskResumeAll+0x146>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3b54:	f240 435c 	movw	r3, #1116	; 0x45c
    3b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b5c:	681b      	ldr	r3, [r3, #0]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	f000 8081 	beq.w	3c66 <xTaskResumeAll+0x146>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3b64:	2300      	movs	r3, #0
    3b66:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3b68:	e036      	b.n	3bd8 <xTaskResumeAll+0xb8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3b6a:	f240 4318 	movw	r3, #1048	; 0x418
    3b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b72:	68db      	ldr	r3, [r3, #12]
    3b74:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3b76:	f104 0318 	add.w	r3, r4, #24
    3b7a:	4618      	mov	r0, r3
    3b7c:	f7fe ff50 	bl	2a20 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b80:	1d23      	adds	r3, r4, #4
    3b82:	4618      	mov	r0, r3
    3b84:	f7fe ff4c 	bl	2a20 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b8a:	f240 4368 	movw	r3, #1128	; 0x468
    3b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b92:	681b      	ldr	r3, [r3, #0]
    3b94:	429a      	cmp	r2, r3
    3b96:	d905      	bls.n	3ba4 <xTaskResumeAll+0x84>
    3b98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b9a:	f240 4368 	movw	r3, #1128	; 0x468
    3b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ba2:	601a      	str	r2, [r3, #0]
    3ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ba6:	4613      	mov	r3, r2
    3ba8:	009b      	lsls	r3, r3, #2
    3baa:	4413      	add	r3, r2
    3bac:	009b      	lsls	r3, r3, #2
    3bae:	f240 2258 	movw	r2, #600	; 0x258
    3bb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bb6:	441a      	add	r2, r3
    3bb8:	1d23      	adds	r3, r4, #4
    3bba:	4610      	mov	r0, r2
    3bbc:	4619      	mov	r1, r3
    3bbe:	f7fe fecf 	bl	2960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3bc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3bc4:	f240 2354 	movw	r3, #596	; 0x254
    3bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bcc:	681b      	ldr	r3, [r3, #0]
    3bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3bd0:	429a      	cmp	r2, r3
    3bd2:	d301      	bcc.n	3bd8 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    3bd4:	2301      	movs	r3, #1
    3bd6:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3bd8:	f240 4318 	movw	r3, #1048	; 0x418
    3bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d1c1      	bne.n	3b6a <xTaskResumeAll+0x4a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3be6:	f240 4374 	movw	r3, #1140	; 0x474
    3bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d024      	beq.n	3c3e <xTaskResumeAll+0x11e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3bf4:	e01a      	b.n	3c2c <xTaskResumeAll+0x10c>
					{
						vTaskIncrementTick();
    3bf6:	f000 f899 	bl	3d2c <vTaskIncrementTick>
						--uxMissedTicks;
    3bfa:	f240 4374 	movw	r3, #1140	; 0x474
    3bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	1e5a      	subs	r2, r3, #1
    3c06:	f240 4374 	movw	r3, #1140	; 0x474
    3c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c0e:	601a      	str	r2, [r3, #0]
                        // added by wanbo
                        if (uxMissedTicks > (unsigned portBASE_TYPE) 1<<31)
    3c10:	f240 4374 	movw	r3, #1140	; 0x474
    3c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3c1e:	d905      	bls.n	3c2c <xTaskResumeAll+0x10c>
                        {
                            uxMissedTicks = 0;
    3c20:	f240 4374 	movw	r3, #1140	; 0x474
    3c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c28:	2200      	movs	r2, #0
    3c2a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3c2c:	f240 4374 	movw	r3, #1140	; 0x474
    3c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c34:	681b      	ldr	r3, [r3, #0]
    3c36:	2b00      	cmp	r3, #0
    3c38:	d1dd      	bne.n	3bf6 <xTaskResumeAll+0xd6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3c3a:	2301      	movs	r3, #1
    3c3c:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3c3e:	683b      	ldr	r3, [r7, #0]
    3c40:	2b01      	cmp	r3, #1
    3c42:	d006      	beq.n	3c52 <xTaskResumeAll+0x132>
    3c44:	f240 4378 	movw	r3, #1144	; 0x478
    3c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	2b01      	cmp	r3, #1
    3c50:	d109      	bne.n	3c66 <xTaskResumeAll+0x146>
				{
					xAlreadyYielded = pdTRUE;
    3c52:	2301      	movs	r3, #1
    3c54:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3c56:	f240 4378 	movw	r3, #1144	; 0x478
    3c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5e:	2200      	movs	r2, #0
    3c60:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3c62:	f000 fd25 	bl	46b0 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3c66:	f000 fd47 	bl	46f8 <vPortExitCritical>

	return xAlreadyYielded;
    3c6a:	687b      	ldr	r3, [r7, #4]
}
    3c6c:	4618      	mov	r0, r3
    3c6e:	370c      	adds	r7, #12
    3c70:	46bd      	mov	sp, r7
    3c72:	bd90      	pop	{r4, r7, pc}

00003c74 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b082      	sub	sp, #8
    3c78:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c7a:	f000 fd27 	bl	46cc <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3c7e:	f240 4360 	movw	r3, #1120	; 0x460
    3c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3c8a:	f000 fd35 	bl	46f8 <vPortExitCritical>

	return xTicks;
    3c8e:	687b      	ldr	r3, [r7, #4]
}
    3c90:	4618      	mov	r0, r3
    3c92:	3708      	adds	r7, #8
    3c94:	46bd      	mov	sp, r7
    3c96:	bd80      	pop	{r7, pc}

00003c98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3c98:	b480      	push	{r7}
    3c9a:	b083      	sub	sp, #12
    3c9c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c9e:	2300      	movs	r3, #0
    3ca0:	607b      	str	r3, [r7, #4]
    3ca2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3ca6:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3caa:	f240 4360 	movw	r3, #1120	; 0x460
    3cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3cb6:	f04f 0000 	mov.w	r0, #0
    3cba:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3cbe:	683b      	ldr	r3, [r7, #0]
}
    3cc0:	4618      	mov	r0, r3
    3cc2:	370c      	adds	r7, #12
    3cc4:	46bd      	mov	sp, r7
    3cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cca:	4770      	bx	lr

00003ccc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3ccc:	b480      	push	{r7}
    3cce:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3cd0:	f240 435c 	movw	r3, #1116	; 0x45c
    3cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd8:	681b      	ldr	r3, [r3, #0]
}
    3cda:	4618      	mov	r0, r3
    3cdc:	46bd      	mov	sp, r7
    3cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce2:	4770      	bx	lr

00003ce4 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
    3ce4:	b480      	push	{r7}
    3ce6:	b085      	sub	sp, #20
    3ce8:	af00      	add	r7, sp, #0
    3cea:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d105      	bne.n	3cfe <pcTaskGetTaskName+0x1a>
    3cf2:	f240 2354 	movw	r3, #596	; 0x254
    3cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cfa:	681b      	ldr	r3, [r3, #0]
    3cfc:	e000      	b.n	3d00 <pcTaskGetTaskName+0x1c>
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	60fb      	str	r3, [r7, #12]
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	3334      	adds	r3, #52	; 0x34
	}
    3d06:	4618      	mov	r0, r3
    3d08:	3714      	adds	r7, #20
    3d0a:	46bd      	mov	sp, r7
    3d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d10:	4770      	bx	lr
    3d12:	bf00      	nop

00003d14 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	xTaskHandle xTaskGetIdleTaskHandle( void )
	{
    3d14:	b480      	push	{r7}
    3d16:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
    3d18:	f240 4358 	movw	r3, #1112	; 0x458
    3d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d20:	681b      	ldr	r3, [r3, #0]
	}
    3d22:	4618      	mov	r0, r3
    3d24:	46bd      	mov	sp, r7
    3d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2a:	4770      	bx	lr

00003d2c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b084      	sub	sp, #16
    3d30:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3d32:	f240 4370 	movw	r3, #1136	; 0x470
    3d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3a:	681b      	ldr	r3, [r3, #0]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	f040 80b9 	bne.w	3eb4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3d42:	f240 4360 	movw	r3, #1120	; 0x460
    3d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	1c5a      	adds	r2, r3, #1
    3d4e:	f240 4360 	movw	r3, #1120	; 0x460
    3d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d56:	601a      	str	r2, [r3, #0]
        //vPrintNumber(xTickCount);
		if( xTickCount == ( portTickType ) 0U )
    3d58:	f240 4360 	movw	r3, #1120	; 0x460
    3d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d13f      	bne.n	3de6 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3d66:	f240 4310 	movw	r3, #1040	; 0x410
    3d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3d72:	f240 4314 	movw	r3, #1044	; 0x414
    3d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d7a:	681a      	ldr	r2, [r3, #0]
    3d7c:	f240 4310 	movw	r3, #1040	; 0x410
    3d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d84:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3d86:	f240 4314 	movw	r3, #1044	; 0x414
    3d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d8e:	68fa      	ldr	r2, [r7, #12]
    3d90:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3d92:	f240 437c 	movw	r3, #1148	; 0x47c
    3d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d9a:	681b      	ldr	r3, [r3, #0]
    3d9c:	1c5a      	adds	r2, r3, #1
    3d9e:	f240 437c 	movw	r3, #1148	; 0x47c
    3da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3da8:	f240 4310 	movw	r3, #1040	; 0x410
    3dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	2b00      	cmp	r3, #0
    3db6:	d107      	bne.n	3dc8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3db8:	f240 03f8 	movw	r3, #248	; 0xf8
    3dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc0:	f04f 32ff 	mov.w	r2, #4294967295
    3dc4:	601a      	str	r2, [r3, #0]
    3dc6:	e00e      	b.n	3de6 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3dc8:	f240 4310 	movw	r3, #1040	; 0x410
    3dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd0:	681b      	ldr	r3, [r3, #0]
    3dd2:	68db      	ldr	r3, [r3, #12]
    3dd4:	68db      	ldr	r3, [r3, #12]
    3dd6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3dd8:	68bb      	ldr	r3, [r7, #8]
    3dda:	685a      	ldr	r2, [r3, #4]
    3ddc:	f240 03f8 	movw	r3, #248	; 0xf8
    3de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3de4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3de6:	f240 4360 	movw	r3, #1120	; 0x460
    3dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dee:	681a      	ldr	r2, [r3, #0]
    3df0:	f240 03f8 	movw	r3, #248	; 0xf8
    3df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df8:	681b      	ldr	r3, [r3, #0]
    3dfa:	429a      	cmp	r2, r3
    3dfc:	d359      	bcc.n	3eb2 <vTaskIncrementTick+0x186>
    3dfe:	f240 4310 	movw	r3, #1040	; 0x410
    3e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e06:	681b      	ldr	r3, [r3, #0]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d107      	bne.n	3e1e <vTaskIncrementTick+0xf2>
    3e0e:	f240 03f8 	movw	r3, #248	; 0xf8
    3e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e16:	f04f 32ff 	mov.w	r2, #4294967295
    3e1a:	601a      	str	r2, [r3, #0]
    3e1c:	e049      	b.n	3eb2 <vTaskIncrementTick+0x186>
    3e1e:	f240 4310 	movw	r3, #1040	; 0x410
    3e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e26:	681b      	ldr	r3, [r3, #0]
    3e28:	68db      	ldr	r3, [r3, #12]
    3e2a:	68db      	ldr	r3, [r3, #12]
    3e2c:	60bb      	str	r3, [r7, #8]
    3e2e:	68bb      	ldr	r3, [r7, #8]
    3e30:	685b      	ldr	r3, [r3, #4]
    3e32:	607b      	str	r3, [r7, #4]
    3e34:	f240 4360 	movw	r3, #1120	; 0x460
    3e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e3c:	681a      	ldr	r2, [r3, #0]
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	429a      	cmp	r2, r3
    3e42:	d206      	bcs.n	3e52 <vTaskIncrementTick+0x126>
    3e44:	f240 03f8 	movw	r3, #248	; 0xf8
    3e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e4c:	687a      	ldr	r2, [r7, #4]
    3e4e:	601a      	str	r2, [r3, #0]
    3e50:	e02f      	b.n	3eb2 <vTaskIncrementTick+0x186>
    3e52:	68bb      	ldr	r3, [r7, #8]
    3e54:	3304      	adds	r3, #4
    3e56:	4618      	mov	r0, r3
    3e58:	f7fe fde2 	bl	2a20 <vListRemove>
    3e5c:	68bb      	ldr	r3, [r7, #8]
    3e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e60:	2b00      	cmp	r3, #0
    3e62:	d004      	beq.n	3e6e <vTaskIncrementTick+0x142>
    3e64:	68bb      	ldr	r3, [r7, #8]
    3e66:	3318      	adds	r3, #24
    3e68:	4618      	mov	r0, r3
    3e6a:	f7fe fdd9 	bl	2a20 <vListRemove>
    3e6e:	68bb      	ldr	r3, [r7, #8]
    3e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e72:	f240 4368 	movw	r3, #1128	; 0x468
    3e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	429a      	cmp	r2, r3
    3e7e:	d906      	bls.n	3e8e <vTaskIncrementTick+0x162>
    3e80:	68bb      	ldr	r3, [r7, #8]
    3e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e84:	f240 4368 	movw	r3, #1128	; 0x468
    3e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e8c:	601a      	str	r2, [r3, #0]
    3e8e:	68bb      	ldr	r3, [r7, #8]
    3e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e92:	4613      	mov	r3, r2
    3e94:	009b      	lsls	r3, r3, #2
    3e96:	4413      	add	r3, r2
    3e98:	009b      	lsls	r3, r3, #2
    3e9a:	f240 2258 	movw	r2, #600	; 0x258
    3e9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ea2:	441a      	add	r2, r3
    3ea4:	68bb      	ldr	r3, [r7, #8]
    3ea6:	3304      	adds	r3, #4
    3ea8:	4610      	mov	r0, r2
    3eaa:	4619      	mov	r1, r3
    3eac:	f7fe fd58 	bl	2960 <vListInsertEnd>
    3eb0:	e7a5      	b.n	3dfe <vTaskIncrementTick+0xd2>
    3eb2:	e00c      	b.n	3ece <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3eb4:	f240 4374 	movw	r3, #1140	; 0x474
    3eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	1c5a      	adds	r2, r3, #1
    3ec0:	f240 4374 	movw	r3, #1140	; 0x474
    3ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ec8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3eca:	f00e fc1d 	bl	12708 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3ece:	f240 4374 	movw	r3, #1140	; 0x474
    3ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ed6:	681b      	ldr	r3, [r3, #0]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d101      	bne.n	3ee0 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3edc:	f00e fc14 	bl	12708 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3ee0:	3710      	adds	r7, #16
    3ee2:	46bd      	mov	sp, r7
    3ee4:	bd80      	pop	{r7, pc}
    3ee6:	bf00      	nop

00003ee8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b082      	sub	sp, #8
    3eec:	af00      	add	r7, sp, #0
    #if defined configUSE_EDF_SCHEDULING || defined configUSE_LSF_SCHEDULING
    portBASE_TYPE xLen, i;
    tskTCB * pxNextTask;
    #endif

	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3eee:	f240 4370 	movw	r3, #1136	; 0x470
    3ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d006      	beq.n	3f0a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3efc:	f240 4378 	movw	r3, #1144	; 0x478
    3f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f04:	2201      	movs	r2, #1
    3f06:	601a      	str	r2, [r3, #0]
    3f08:	e047      	b.n	3f9a <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3f0a:	f00e fbf7 	bl	126fc <myTraceSwitchedOut>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[0] ) );
        }
        #else
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3f0e:	e00a      	b.n	3f26 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3f10:	f240 4368 	movw	r3, #1128	; 0x468
    3f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	1e5a      	subs	r2, r3, #1
    3f1c:	f240 4368 	movw	r3, #1128	; 0x468
    3f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f24:	601a      	str	r2, [r3, #0]
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[0] ) );
        }
        #else
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3f26:	f240 4368 	movw	r3, #1128	; 0x468
    3f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f2e:	6819      	ldr	r1, [r3, #0]
    3f30:	f240 2258 	movw	r2, #600	; 0x258
    3f34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f38:	460b      	mov	r3, r1
    3f3a:	009b      	lsls	r3, r3, #2
    3f3c:	440b      	add	r3, r1
    3f3e:	009b      	lsls	r3, r3, #2
    3f40:	4413      	add	r3, r2
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d0e3      	beq.n	3f10 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3f48:	f240 4368 	movw	r3, #1128	; 0x468
    3f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f50:	681a      	ldr	r2, [r3, #0]
    3f52:	4613      	mov	r3, r2
    3f54:	009b      	lsls	r3, r3, #2
    3f56:	4413      	add	r3, r2
    3f58:	009b      	lsls	r3, r3, #2
    3f5a:	f240 2258 	movw	r2, #600	; 0x258
    3f5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f62:	4413      	add	r3, r2
    3f64:	607b      	str	r3, [r7, #4]
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	685b      	ldr	r3, [r3, #4]
    3f6a:	685a      	ldr	r2, [r3, #4]
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	605a      	str	r2, [r3, #4]
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	685a      	ldr	r2, [r3, #4]
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	3308      	adds	r3, #8
    3f78:	429a      	cmp	r2, r3
    3f7a:	d104      	bne.n	3f86 <vTaskSwitchContext+0x9e>
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	685b      	ldr	r3, [r3, #4]
    3f80:	685a      	ldr	r2, [r3, #4]
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	605a      	str	r2, [r3, #4]
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	685b      	ldr	r3, [r3, #4]
    3f8a:	68da      	ldr	r2, [r3, #12]
    3f8c:	f240 2354 	movw	r3, #596	; 0x254
    3f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f94:	601a      	str	r2, [r3, #0]

        #endif
	
		traceTASK_SWITCHED_IN();
    3f96:	f00e fbab 	bl	126f0 <myTraceSwitchedIn>
	}
}
    3f9a:	3708      	adds	r7, #8
    3f9c:	46bd      	mov	sp, r7
    3f9e:	bd80      	pop	{r7, pc}

00003fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b084      	sub	sp, #16
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    3fa8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3faa:	f240 2354 	movw	r3, #596	; 0x254
    3fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	3318      	adds	r3, #24
    3fb6:	6878      	ldr	r0, [r7, #4]
    3fb8:	4619      	mov	r1, r3
    3fba:	f7fe fcf9 	bl	29b0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3fbe:	f240 2354 	movw	r3, #596	; 0x254
    3fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc6:	681b      	ldr	r3, [r3, #0]
    3fc8:	3304      	adds	r3, #4
    3fca:	4618      	mov	r0, r3
    3fcc:	f7fe fd28 	bl	2a20 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3fd0:	683b      	ldr	r3, [r7, #0]
    3fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fd6:	d10d      	bne.n	3ff4 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3fd8:	f240 2354 	movw	r3, #596	; 0x254
    3fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	3304      	adds	r3, #4
    3fe4:	f240 4044 	movw	r0, #1092	; 0x444
    3fe8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3fec:	4619      	mov	r1, r3
    3fee:	f7fe fcb7 	bl	2960 <vListInsertEnd>
    3ff2:	e00a      	b.n	400a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3ff4:	f240 4360 	movw	r3, #1120	; 0x460
    3ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ffc:	681a      	ldr	r2, [r3, #0]
    3ffe:	683b      	ldr	r3, [r7, #0]
    4000:	4413      	add	r3, r2
    4002:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4004:	68f8      	ldr	r0, [r7, #12]
    4006:	f000 f9a7 	bl	4358 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    400a:	3710      	adds	r7, #16
    400c:	46bd      	mov	sp, r7
    400e:	bd80      	pop	{r7, pc}

00004010 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4010:	b580      	push	{r7, lr}
    4012:	b084      	sub	sp, #16
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	68db      	ldr	r3, [r3, #12]
    401c:	68db      	ldr	r3, [r3, #12]
    401e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4020:	68bb      	ldr	r3, [r7, #8]
    4022:	3318      	adds	r3, #24
    4024:	4618      	mov	r0, r3
    4026:	f7fe fcfb 	bl	2a20 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    402a:	f240 4370 	movw	r3, #1136	; 0x470
    402e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4032:	681b      	ldr	r3, [r3, #0]
    4034:	2b00      	cmp	r3, #0
    4036:	d126      	bne.n	4086 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4038:	68bb      	ldr	r3, [r7, #8]
    403a:	3304      	adds	r3, #4
    403c:	4618      	mov	r0, r3
    403e:	f7fe fcef 	bl	2a20 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4042:	68bb      	ldr	r3, [r7, #8]
    4044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4046:	f240 4368 	movw	r3, #1128	; 0x468
    404a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	429a      	cmp	r2, r3
    4052:	d906      	bls.n	4062 <xTaskRemoveFromEventList+0x52>
    4054:	68bb      	ldr	r3, [r7, #8]
    4056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4058:	f240 4368 	movw	r3, #1128	; 0x468
    405c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4060:	601a      	str	r2, [r3, #0]
    4062:	68bb      	ldr	r3, [r7, #8]
    4064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4066:	4613      	mov	r3, r2
    4068:	009b      	lsls	r3, r3, #2
    406a:	4413      	add	r3, r2
    406c:	009b      	lsls	r3, r3, #2
    406e:	f240 2258 	movw	r2, #600	; 0x258
    4072:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4076:	441a      	add	r2, r3
    4078:	68bb      	ldr	r3, [r7, #8]
    407a:	3304      	adds	r3, #4
    407c:	4610      	mov	r0, r2
    407e:	4619      	mov	r1, r3
    4080:	f7fe fc6e 	bl	2960 <vListInsertEnd>
    4084:	e008      	b.n	4098 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4086:	68bb      	ldr	r3, [r7, #8]
    4088:	3318      	adds	r3, #24
    408a:	f240 4018 	movw	r0, #1048	; 0x418
    408e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4092:	4619      	mov	r1, r3
    4094:	f7fe fc64 	bl	2960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4098:	68bb      	ldr	r3, [r7, #8]
    409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    409c:	f240 2354 	movw	r3, #596	; 0x254
    40a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40a8:	429a      	cmp	r2, r3
    40aa:	d302      	bcc.n	40b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    40ac:	2301      	movs	r3, #1
    40ae:	60fb      	str	r3, [r7, #12]
    40b0:	e001      	b.n	40b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    40b2:	2300      	movs	r3, #0
    40b4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    40b6:	68fb      	ldr	r3, [r7, #12]
}
    40b8:	4618      	mov	r0, r3
    40ba:	3710      	adds	r7, #16
    40bc:	46bd      	mov	sp, r7
    40be:	bd80      	pop	{r7, pc}

000040c0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    40c0:	b480      	push	{r7}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    40c8:	f240 437c 	movw	r3, #1148	; 0x47c
    40cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d0:	681a      	ldr	r2, [r3, #0]
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    40d6:	f240 4360 	movw	r3, #1120	; 0x460
    40da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40de:	681a      	ldr	r2, [r3, #0]
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	605a      	str	r2, [r3, #4]
}
    40e4:	370c      	adds	r7, #12
    40e6:	46bd      	mov	sp, r7
    40e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ec:	4770      	bx	lr
    40ee:	bf00      	nop

000040f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    40f0:	b580      	push	{r7, lr}
    40f2:	b084      	sub	sp, #16
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
    40f8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    40fa:	f000 fae7 	bl	46cc <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    40fe:	683b      	ldr	r3, [r7, #0]
    4100:	681b      	ldr	r3, [r3, #0]
    4102:	f1b3 3fff 	cmp.w	r3, #4294967295
    4106:	d102      	bne.n	410e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    4108:	2300      	movs	r3, #0
    410a:	60fb      	str	r3, [r7, #12]
    410c:	e035      	b.n	417a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	681a      	ldr	r2, [r3, #0]
    4112:	f240 437c 	movw	r3, #1148	; 0x47c
    4116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    411a:	681b      	ldr	r3, [r3, #0]
    411c:	429a      	cmp	r2, r3
    411e:	d00b      	beq.n	4138 <xTaskCheckForTimeOut+0x48>
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	685a      	ldr	r2, [r3, #4]
    4124:	f240 4360 	movw	r3, #1120	; 0x460
    4128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	429a      	cmp	r2, r3
    4130:	d802      	bhi.n	4138 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4132:	2301      	movs	r3, #1
    4134:	60fb      	str	r3, [r7, #12]
    4136:	e020      	b.n	417a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4138:	f240 4360 	movw	r3, #1120	; 0x460
    413c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4140:	681a      	ldr	r2, [r3, #0]
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	685b      	ldr	r3, [r3, #4]
    4146:	1ad2      	subs	r2, r2, r3
    4148:	683b      	ldr	r3, [r7, #0]
    414a:	681b      	ldr	r3, [r3, #0]
    414c:	429a      	cmp	r2, r3
    414e:	d212      	bcs.n	4176 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4150:	683b      	ldr	r3, [r7, #0]
    4152:	681a      	ldr	r2, [r3, #0]
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	6859      	ldr	r1, [r3, #4]
    4158:	f240 4360 	movw	r3, #1120	; 0x460
    415c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4160:	681b      	ldr	r3, [r3, #0]
    4162:	1acb      	subs	r3, r1, r3
    4164:	441a      	add	r2, r3
    4166:	683b      	ldr	r3, [r7, #0]
    4168:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    416a:	6878      	ldr	r0, [r7, #4]
    416c:	f7ff ffa8 	bl	40c0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4170:	2300      	movs	r3, #0
    4172:	60fb      	str	r3, [r7, #12]
    4174:	e001      	b.n	417a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    4176:	2301      	movs	r3, #1
    4178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    417a:	f000 fabd 	bl	46f8 <vPortExitCritical>

	return xReturn;
    417e:	68fb      	ldr	r3, [r7, #12]
}
    4180:	4618      	mov	r0, r3
    4182:	3710      	adds	r7, #16
    4184:	46bd      	mov	sp, r7
    4186:	bd80      	pop	{r7, pc}

00004188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4188:	b480      	push	{r7}
    418a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    418c:	f240 4378 	movw	r3, #1144	; 0x478
    4190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4194:	2201      	movs	r2, #1
    4196:	601a      	str	r2, [r3, #0]
}
    4198:	46bd      	mov	sp, r7
    419a:	f85d 7b04 	ldr.w	r7, [sp], #4
    419e:	4770      	bx	lr

000041a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    41a0:	b580      	push	{r7, lr}
    41a2:	b082      	sub	sp, #8
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    41a8:	f000 f88e 	bl	42c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    41ac:	f240 2358 	movw	r3, #600	; 0x258
    41b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	2b01      	cmp	r3, #1
    41b8:	d902      	bls.n	41c0 <prvIdleTask+0x20>
			{
				taskYIELD();
    41ba:	f000 fa79 	bl	46b0 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    41be:	e7f3      	b.n	41a8 <prvIdleTask+0x8>
    41c0:	e7f2      	b.n	41a8 <prvIdleTask+0x8>
    41c2:	bf00      	nop

000041c4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b084      	sub	sp, #16
    41c8:	af00      	add	r7, sp, #0
    41ca:	60f8      	str	r0, [r7, #12]
    41cc:	60b9      	str	r1, [r7, #8]
    41ce:	607a      	str	r2, [r7, #4]
    41d0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    41d2:	68fb      	ldr	r3, [r7, #12]
    41d4:	3334      	adds	r3, #52	; 0x34
    41d6:	4618      	mov	r0, r3
    41d8:	68b9      	ldr	r1, [r7, #8]
    41da:	2210      	movs	r2, #16
    41dc:	f00f fb22 	bl	13824 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	2200      	movs	r2, #0
    41e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	2b13      	cmp	r3, #19
    41ec:	d901      	bls.n	41f2 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    41ee:	2313      	movs	r3, #19
    41f0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    41f2:	68fb      	ldr	r3, [r7, #12]
    41f4:	687a      	ldr	r2, [r7, #4]
    41f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    41f8:	68fb      	ldr	r3, [r7, #12]
    41fa:	687a      	ldr	r2, [r7, #4]
    41fc:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    41fe:	68fb      	ldr	r3, [r7, #12]
    4200:	3304      	adds	r3, #4
    4202:	4618      	mov	r0, r3
    4204:	f7fe fba0 	bl	2948 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	3318      	adds	r3, #24
    420c:	4618      	mov	r0, r3
    420e:	f7fe fb9b 	bl	2948 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4212:	68fb      	ldr	r3, [r7, #12]
    4214:	68fa      	ldr	r2, [r7, #12]
    4216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	f1c3 0214 	rsb	r2, r3, #20
    421e:	68fb      	ldr	r3, [r7, #12]
    4220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4222:	68fb      	ldr	r3, [r7, #12]
    4224:	68fa      	ldr	r2, [r7, #12]
    4226:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4228:	3710      	adds	r7, #16
    422a:	46bd      	mov	sp, r7
    422c:	bd80      	pop	{r7, pc}
    422e:	bf00      	nop

00004230 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4230:	b580      	push	{r7, lr}
    4232:	b082      	sub	sp, #8
    4234:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4236:	2300      	movs	r3, #0
    4238:	607b      	str	r3, [r7, #4]
    423a:	e00f      	b.n	425c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    423c:	687a      	ldr	r2, [r7, #4]
    423e:	4613      	mov	r3, r2
    4240:	009b      	lsls	r3, r3, #2
    4242:	4413      	add	r3, r2
    4244:	009b      	lsls	r3, r3, #2
    4246:	f240 2258 	movw	r2, #600	; 0x258
    424a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    424e:	4413      	add	r3, r2
    4250:	4618      	mov	r0, r3
    4252:	f7fe fb59 	bl	2908 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	3301      	adds	r3, #1
    425a:	607b      	str	r3, [r7, #4]
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	2b13      	cmp	r3, #19
    4260:	d9ec      	bls.n	423c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4262:	f240 30e8 	movw	r0, #1000	; 0x3e8
    4266:	f2c2 0000 	movt	r0, #8192	; 0x2000
    426a:	f7fe fb4d 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    426e:	f240 30fc 	movw	r0, #1020	; 0x3fc
    4272:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4276:	f7fe fb47 	bl	2908 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    427a:	f240 4018 	movw	r0, #1048	; 0x418
    427e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4282:	f7fe fb41 	bl	2908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4286:	f240 402c 	movw	r0, #1068	; 0x42c
    428a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    428e:	f7fe fb3b 	bl	2908 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    4292:	f240 4044 	movw	r0, #1092	; 0x444
    4296:	f2c2 0000 	movt	r0, #8192	; 0x2000
    429a:	f7fe fb35 	bl	2908 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    429e:	f240 4310 	movw	r3, #1040	; 0x410
    42a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a6:	f240 32e8 	movw	r2, #1000	; 0x3e8
    42aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    42ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    42b0:	f240 4314 	movw	r3, #1044	; 0x414
    42b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b8:	f240 32fc 	movw	r2, #1020	; 0x3fc
    42bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    42c0:	601a      	str	r2, [r3, #0]
}
    42c2:	3708      	adds	r7, #8
    42c4:	46bd      	mov	sp, r7
    42c6:	bd80      	pop	{r7, pc}

000042c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b082      	sub	sp, #8
    42cc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    42ce:	f240 4340 	movw	r3, #1088	; 0x440
    42d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d6:	681b      	ldr	r3, [r3, #0]
    42d8:	2b00      	cmp	r3, #0
    42da:	d03a      	beq.n	4352 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    42dc:	f7ff fc0e 	bl	3afc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    42e0:	f240 432c 	movw	r3, #1068	; 0x42c
    42e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	2b00      	cmp	r3, #0
    42ec:	bf14      	ite	ne
    42ee:	2300      	movne	r3, #0
    42f0:	2301      	moveq	r3, #1
    42f2:	b2db      	uxtb	r3, r3
    42f4:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    42f6:	f7ff fc13 	bl	3b20 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d128      	bne.n	4352 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4300:	f000 f9e4 	bl	46cc <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4304:	f240 432c 	movw	r3, #1068	; 0x42c
    4308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    430c:	68db      	ldr	r3, [r3, #12]
    430e:	68db      	ldr	r3, [r3, #12]
    4310:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    4312:	683b      	ldr	r3, [r7, #0]
    4314:	3304      	adds	r3, #4
    4316:	4618      	mov	r0, r3
    4318:	f7fe fb82 	bl	2a20 <vListRemove>
					--uxCurrentNumberOfTasks;
    431c:	f240 435c 	movw	r3, #1116	; 0x45c
    4320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4324:	681b      	ldr	r3, [r3, #0]
    4326:	1e5a      	subs	r2, r3, #1
    4328:	f240 435c 	movw	r3, #1116	; 0x45c
    432c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4330:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    4332:	f240 4340 	movw	r3, #1088	; 0x440
    4336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	1e5a      	subs	r2, r3, #1
    433e:	f240 4340 	movw	r3, #1088	; 0x440
    4342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4346:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    4348:	f000 f9d6 	bl	46f8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    434c:	6838      	ldr	r0, [r7, #0]
    434e:	f000 f879 	bl	4444 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    4352:	3708      	adds	r7, #8
    4354:	46bd      	mov	sp, r7
    4356:	bd80      	pop	{r7, pc}

00004358 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4358:	b580      	push	{r7, lr}
    435a:	b082      	sub	sp, #8
    435c:	af00      	add	r7, sp, #0
    435e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4360:	f240 2354 	movw	r3, #596	; 0x254
    4364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4368:	681b      	ldr	r3, [r3, #0]
    436a:	687a      	ldr	r2, [r7, #4]
    436c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    436e:	f240 4360 	movw	r3, #1120	; 0x460
    4372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	687a      	ldr	r2, [r7, #4]
    437a:	429a      	cmp	r2, r3
    437c:	d20f      	bcs.n	439e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    437e:	f240 4314 	movw	r3, #1044	; 0x414
    4382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4386:	681a      	ldr	r2, [r3, #0]
    4388:	f240 2354 	movw	r3, #596	; 0x254
    438c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4390:	681b      	ldr	r3, [r3, #0]
    4392:	3304      	adds	r3, #4
    4394:	4610      	mov	r0, r2
    4396:	4619      	mov	r1, r3
    4398:	f7fe fb0a 	bl	29b0 <vListInsert>
    439c:	e01c      	b.n	43d8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    439e:	f240 4310 	movw	r3, #1040	; 0x410
    43a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a6:	681a      	ldr	r2, [r3, #0]
    43a8:	f240 2354 	movw	r3, #596	; 0x254
    43ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	3304      	adds	r3, #4
    43b4:	4610      	mov	r0, r2
    43b6:	4619      	mov	r1, r3
    43b8:	f7fe fafa 	bl	29b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    43bc:	f240 03f8 	movw	r3, #248	; 0xf8
    43c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43c4:	681b      	ldr	r3, [r3, #0]
    43c6:	687a      	ldr	r2, [r7, #4]
    43c8:	429a      	cmp	r2, r3
    43ca:	d205      	bcs.n	43d8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    43cc:	f240 03f8 	movw	r3, #248	; 0xf8
    43d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43d4:	687a      	ldr	r2, [r7, #4]
    43d6:	601a      	str	r2, [r3, #0]
		}
	}
}
    43d8:	3708      	adds	r7, #8
    43da:	46bd      	mov	sp, r7
    43dc:	bd80      	pop	{r7, pc}
    43de:	bf00      	nop

000043e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b084      	sub	sp, #16
    43e4:	af00      	add	r7, sp, #0
    43e6:	4603      	mov	r3, r0
    43e8:	6039      	str	r1, [r7, #0]
    43ea:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    43ec:	2048      	movs	r0, #72	; 0x48
    43ee:	f000 f9ed 	bl	47cc <pvPortMalloc>
    43f2:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	2b00      	cmp	r3, #0
    43f8:	d01f      	beq.n	443a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    43fa:	683b      	ldr	r3, [r7, #0]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d106      	bne.n	440e <prvAllocateTCBAndStack+0x2e>
    4400:	88fb      	ldrh	r3, [r7, #6]
    4402:	009b      	lsls	r3, r3, #2
    4404:	4618      	mov	r0, r3
    4406:	f000 f9e1 	bl	47cc <pvPortMalloc>
    440a:	4603      	mov	r3, r0
    440c:	e000      	b.n	4410 <prvAllocateTCBAndStack+0x30>
    440e:	683b      	ldr	r3, [r7, #0]
    4410:	68fa      	ldr	r2, [r7, #12]
    4412:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4418:	2b00      	cmp	r3, #0
    441a:	d105      	bne.n	4428 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    441c:	68f8      	ldr	r0, [r7, #12]
    441e:	f000 fa99 	bl	4954 <vPortFree>
			pxNewTCB = NULL;
    4422:	2300      	movs	r3, #0
    4424:	60fb      	str	r3, [r7, #12]
    4426:	e008      	b.n	443a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4428:	68fb      	ldr	r3, [r7, #12]
    442a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    442c:	88fb      	ldrh	r3, [r7, #6]
    442e:	009b      	lsls	r3, r3, #2
    4430:	4610      	mov	r0, r2
    4432:	21a5      	movs	r1, #165	; 0xa5
    4434:	461a      	mov	r2, r3
    4436:	f00f f9a5 	bl	13784 <memset>
		}
	}

	return pxNewTCB;
    443a:	68fb      	ldr	r3, [r7, #12]
}
    443c:	4618      	mov	r0, r3
    443e:	3710      	adds	r7, #16
    4440:	46bd      	mov	sp, r7
    4442:	bd80      	pop	{r7, pc}

00004444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4444:	b580      	push	{r7, lr}
    4446:	b082      	sub	sp, #8
    4448:	af00      	add	r7, sp, #0
    444a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    444c:	687b      	ldr	r3, [r7, #4]
    444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4450:	4618      	mov	r0, r3
    4452:	f000 fa7f 	bl	4954 <vPortFree>
		vPortFree( pxTCB );
    4456:	6878      	ldr	r0, [r7, #4]
    4458:	f000 fa7c 	bl	4954 <vPortFree>
	}
    445c:	3708      	adds	r7, #8
    445e:	46bd      	mov	sp, r7
    4460:	bd80      	pop	{r7, pc}
    4462:	bf00      	nop

00004464 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    4464:	b480      	push	{r7}
    4466:	b083      	sub	sp, #12
    4468:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    446a:	f240 2354 	movw	r3, #596	; 0x254
    446e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	607b      	str	r3, [r7, #4]

		return xReturn;
    4476:	687b      	ldr	r3, [r7, #4]
	}
    4478:	4618      	mov	r0, r3
    447a:	370c      	adds	r7, #12
    447c:	46bd      	mov	sp, r7
    447e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4482:	4770      	bx	lr

00004484 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4484:	b580      	push	{r7, lr}
    4486:	b084      	sub	sp, #16
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4494:	f240 2354 	movw	r3, #596	; 0x254
    4498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44a0:	429a      	cmp	r2, r3
    44a2:	d24f      	bcs.n	4544 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    44a4:	f240 2354 	movw	r3, #596	; 0x254
    44a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44b0:	f1c3 0214 	rsb	r2, r3, #20
    44b4:	68fb      	ldr	r3, [r7, #12]
    44b6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    44b8:	68fb      	ldr	r3, [r7, #12]
    44ba:	6959      	ldr	r1, [r3, #20]
    44bc:	68fb      	ldr	r3, [r7, #12]
    44be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44c0:	4613      	mov	r3, r2
    44c2:	009b      	lsls	r3, r3, #2
    44c4:	4413      	add	r3, r2
    44c6:	009b      	lsls	r3, r3, #2
    44c8:	f240 2258 	movw	r2, #600	; 0x258
    44cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    44d0:	4413      	add	r3, r2
    44d2:	4299      	cmp	r1, r3
    44d4:	d12e      	bne.n	4534 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	3304      	adds	r3, #4
    44da:	4618      	mov	r0, r3
    44dc:	f7fe faa0 	bl	2a20 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    44e0:	f240 2354 	movw	r3, #596	; 0x254
    44e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44ec:	68fb      	ldr	r3, [r7, #12]
    44ee:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44f4:	f240 4368 	movw	r3, #1128	; 0x468
    44f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44fc:	681b      	ldr	r3, [r3, #0]
    44fe:	429a      	cmp	r2, r3
    4500:	d906      	bls.n	4510 <vTaskPriorityInherit+0x8c>
    4502:	68fb      	ldr	r3, [r7, #12]
    4504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4506:	f240 4368 	movw	r3, #1128	; 0x468
    450a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    450e:	601a      	str	r2, [r3, #0]
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4514:	4613      	mov	r3, r2
    4516:	009b      	lsls	r3, r3, #2
    4518:	4413      	add	r3, r2
    451a:	009b      	lsls	r3, r3, #2
    451c:	f240 2258 	movw	r2, #600	; 0x258
    4520:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4524:	441a      	add	r2, r3
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	3304      	adds	r3, #4
    452a:	4610      	mov	r0, r2
    452c:	4619      	mov	r1, r3
    452e:	f7fe fa17 	bl	2960 <vListInsertEnd>
    4532:	e007      	b.n	4544 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4534:	f240 2354 	movw	r3, #596	; 0x254
    4538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    4544:	3710      	adds	r7, #16
    4546:	46bd      	mov	sp, r7
    4548:	bd80      	pop	{r7, pc}
    454a:	bf00      	nop

0000454c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    454c:	b580      	push	{r7, lr}
    454e:	b084      	sub	sp, #16
    4550:	af00      	add	r7, sp, #0
    4552:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	2b00      	cmp	r3, #0
    455c:	d035      	beq.n	45ca <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    455e:	68fb      	ldr	r3, [r7, #12]
    4560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4562:	68fb      	ldr	r3, [r7, #12]
    4564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4566:	429a      	cmp	r2, r3
    4568:	d02f      	beq.n	45ca <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	3304      	adds	r3, #4
    456e:	4618      	mov	r0, r3
    4570:	f7fe fa56 	bl	2a20 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4580:	f1c3 0214 	rsb	r2, r3, #20
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4588:	68fb      	ldr	r3, [r7, #12]
    458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    458c:	f240 4368 	movw	r3, #1128	; 0x468
    4590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	429a      	cmp	r2, r3
    4598:	d906      	bls.n	45a8 <vTaskPriorityDisinherit+0x5c>
    459a:	68fb      	ldr	r3, [r7, #12]
    459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    459e:	f240 4368 	movw	r3, #1128	; 0x468
    45a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45a6:	601a      	str	r2, [r3, #0]
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45ac:	4613      	mov	r3, r2
    45ae:	009b      	lsls	r3, r3, #2
    45b0:	4413      	add	r3, r2
    45b2:	009b      	lsls	r3, r3, #2
    45b4:	f240 2258 	movw	r2, #600	; 0x258
    45b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    45bc:	441a      	add	r2, r3
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	3304      	adds	r3, #4
    45c2:	4610      	mov	r0, r2
    45c4:	4619      	mov	r1, r3
    45c6:	f7fe f9cb 	bl	2960 <vListInsertEnd>
			}
		}
	}
    45ca:	3710      	adds	r7, #16
    45cc:	46bd      	mov	sp, r7
    45ce:	bd80      	pop	{r7, pc}

000045d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    45d0:	b480      	push	{r7}
    45d2:	b085      	sub	sp, #20
    45d4:	af00      	add	r7, sp, #0
    45d6:	60f8      	str	r0, [r7, #12]
    45d8:	60b9      	str	r1, [r7, #8]
    45da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    45dc:	68fb      	ldr	r3, [r7, #12]
    45de:	3b04      	subs	r3, #4
    45e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    45e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	3b04      	subs	r3, #4
    45ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    45f0:	68ba      	ldr	r2, [r7, #8]
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    45f6:	68fb      	ldr	r3, [r7, #12]
    45f8:	3b04      	subs	r3, #4
    45fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    45fc:	68fb      	ldr	r3, [r7, #12]
    45fe:	2200      	movs	r2, #0
    4600:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	3b14      	subs	r3, #20
    4606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4608:	687a      	ldr	r2, [r7, #4]
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    460e:	68fb      	ldr	r3, [r7, #12]
    4610:	3b20      	subs	r3, #32
    4612:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4614:	68fb      	ldr	r3, [r7, #12]
}
    4616:	4618      	mov	r0, r3
    4618:	3714      	adds	r7, #20
    461a:	46bd      	mov	sp, r7
    461c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4620:	4770      	bx	lr
    4622:	bf00      	nop

00004624 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4624:	4b06      	ldr	r3, [pc, #24]	; (4640 <pxCurrentTCBConst2>)
    4626:	6819      	ldr	r1, [r3, #0]
    4628:	6808      	ldr	r0, [r1, #0]
    462a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    462e:	f380 8809 	msr	PSP, r0
    4632:	f04f 0000 	mov.w	r0, #0
    4636:	f380 8811 	msr	BASEPRI, r0
    463a:	f04e 0e0d 	orr.w	lr, lr, #13
    463e:	4770      	bx	lr

00004640 <pxCurrentTCBConst2>:
    4640:	20000254 	.word	0x20000254

00004644 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    4644:	4860      	ldr	r0, [pc, #384]	; (47c8 <prvSetupTimerInterrupt+0x28>)
    4646:	6800      	ldr	r0, [r0, #0]
    4648:	6800      	ldr	r0, [r0, #0]
    464a:	f380 8808 	msr	MSP, r0
    464e:	b662      	cpsie	i
    4650:	df00      	svc	0
    4652:	bf00      	nop

00004654 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    4654:	b580      	push	{r7, lr}
    4656:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    4658:	f64e 5320 	movw	r3, #60704	; 0xed20
    465c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4660:	f64e 5220 	movw	r2, #60704	; 0xed20
    4664:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4668:	6812      	ldr	r2, [r2, #0]
    466a:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    466e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4670:	f64e 5320 	movw	r3, #60704	; 0xed20
    4674:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4678:	f64e 5220 	movw	r2, #60704	; 0xed20
    467c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4680:	6812      	ldr	r2, [r2, #0]
    4682:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4686:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4688:	f000 f88a 	bl	47a0 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    468c:	f240 03fc 	movw	r3, #252	; 0xfc
    4690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4694:	2200      	movs	r2, #0
    4696:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4698:	f7ff ffd4 	bl	4644 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    469c:	2300      	movs	r3, #0
}
    469e:	4618      	mov	r0, r3
    46a0:	bd80      	pop	{r7, pc}
    46a2:	bf00      	nop

000046a4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    46a4:	b480      	push	{r7}
    46a6:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    46a8:	46bd      	mov	sp, r7
    46aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ae:	4770      	bx	lr

000046b0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    46b0:	b480      	push	{r7}
    46b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    46b4:	f64e 5304 	movw	r3, #60676	; 0xed04
    46b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46c0:	601a      	str	r2, [r3, #0]
}
    46c2:	46bd      	mov	sp, r7
    46c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c8:	4770      	bx	lr
    46ca:	bf00      	nop

000046cc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    46cc:	b480      	push	{r7}
    46ce:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    46d0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46d4:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    46d8:	f240 03fc 	movw	r3, #252	; 0xfc
    46dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	1c5a      	adds	r2, r3, #1
    46e4:	f240 03fc 	movw	r3, #252	; 0xfc
    46e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46ec:	601a      	str	r2, [r3, #0]
}
    46ee:	46bd      	mov	sp, r7
    46f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f4:	4770      	bx	lr
    46f6:	bf00      	nop

000046f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    46f8:	b480      	push	{r7}
    46fa:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    46fc:	f240 03fc 	movw	r3, #252	; 0xfc
    4700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	1e5a      	subs	r2, r3, #1
    4708:	f240 03fc 	movw	r3, #252	; 0xfc
    470c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4710:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4712:	f240 03fc 	movw	r3, #252	; 0xfc
    4716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	2b00      	cmp	r3, #0
    471e:	d103      	bne.n	4728 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    4720:	f04f 0000 	mov.w	r0, #0
    4724:	f380 8811 	msr	BASEPRI, r0
	}
}
    4728:	46bd      	mov	sp, r7
    472a:	f85d 7b04 	ldr.w	r7, [sp], #4
    472e:	4770      	bx	lr

00004730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4730:	f3ef 8009 	mrs	r0, PSP
    4734:	4b0c      	ldr	r3, [pc, #48]	; (4768 <pxCurrentTCBConst>)
    4736:	681a      	ldr	r2, [r3, #0]
    4738:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    473c:	6010      	str	r0, [r2, #0]
    473e:	e92d 4008 	stmdb	sp!, {r3, lr}
    4742:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4746:	f380 8811 	msr	BASEPRI, r0
    474a:	f7ff fbcd 	bl	3ee8 <vTaskSwitchContext>
    474e:	f04f 0000 	mov.w	r0, #0
    4752:	f380 8811 	msr	BASEPRI, r0
    4756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    475a:	6819      	ldr	r1, [r3, #0]
    475c:	6808      	ldr	r0, [r1, #0]
    475e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4762:	f380 8809 	msr	PSP, r0
    4766:	4770      	bx	lr

00004768 <pxCurrentTCBConst>:
    4768:	20000254 	.word	0x20000254

0000476c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    476c:	b580      	push	{r7, lr}
    476e:	b082      	sub	sp, #8
    4770:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4772:	f64e 5304 	movw	r3, #60676	; 0xed04
    4776:	f2ce 0300 	movt	r3, #57344	; 0xe000
    477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    477e:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4780:	2300      	movs	r3, #0
    4782:	607b      	str	r3, [r7, #4]
    4784:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4788:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    478c:	f7ff face 	bl	3d2c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4790:	f04f 0000 	mov.w	r0, #0
    4794:	f380 8811 	msr	BASEPRI, r0
}
    4798:	3708      	adds	r7, #8
    479a:	46bd      	mov	sp, r7
    479c:	bd80      	pop	{r7, pc}
    479e:	bf00      	nop

000047a0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    47a0:	b480      	push	{r7}
    47a2:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    47a4:	f24e 0314 	movw	r3, #57364	; 0xe014
    47a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    47ac:	f641 421f 	movw	r2, #7199	; 0x1c1f
    47b0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    47b2:	f24e 0310 	movw	r3, #57360	; 0xe010
    47b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    47ba:	2207      	movs	r2, #7
    47bc:	601a      	str	r2, [r3, #0]
}
    47be:	46bd      	mov	sp, r7
    47c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c4:	4770      	bx	lr
    47c6:	0000      	.short	0x0000
    47c8:	e000ed08 	.word	0xe000ed08

000047cc <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b08a      	sub	sp, #40	; 0x28
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    47d4:	2300      	movs	r3, #0
    47d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    47d8:	f7ff f990 	bl	3afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    47dc:	f24b 4398 	movw	r3, #46232	; 0xb498
    47e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47e4:	681b      	ldr	r3, [r3, #0]
    47e6:	2b00      	cmp	r3, #0
    47e8:	d130      	bne.n	484c <pvPortMalloc+0x80>
		{
			prvHeapInit();
    47ea:	f24b 4388 	movw	r3, #46216	; 0xb488
    47ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    47f2:	f240 4288 	movw	r2, #1160	; 0x488
    47f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47fa:	601a      	str	r2, [r3, #0]
    47fc:	f24b 4388 	movw	r3, #46216	; 0xb488
    4800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4804:	2200      	movs	r2, #0
    4806:	605a      	str	r2, [r3, #4]
    4808:	f24b 4390 	movw	r3, #46224	; 0xb490
    480c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4810:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    4814:	605a      	str	r2, [r3, #4]
    4816:	f24b 4390 	movw	r3, #46224	; 0xb490
    481a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    481e:	2200      	movs	r2, #0
    4820:	601a      	str	r2, [r3, #0]
    4822:	f240 4388 	movw	r3, #1160	; 0x488
    4826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    482a:	617b      	str	r3, [r7, #20]
    482c:	697b      	ldr	r3, [r7, #20]
    482e:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    4832:	605a      	str	r2, [r3, #4]
    4834:	697a      	ldr	r2, [r7, #20]
    4836:	f24b 4390 	movw	r3, #46224	; 0xb490
    483a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    483e:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    4840:	f24b 4398 	movw	r3, #46232	; 0xb498
    4844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4848:	2201      	movs	r2, #1
    484a:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    484c:	687b      	ldr	r3, [r7, #4]
    484e:	2b00      	cmp	r3, #0
    4850:	d00d      	beq.n	486e <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    4852:	2310      	movs	r3, #16
    4854:	687a      	ldr	r2, [r7, #4]
    4856:	4413      	add	r3, r2
    4858:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	f003 0307 	and.w	r3, r3, #7
    4860:	2b00      	cmp	r3, #0
    4862:	d004      	beq.n	486e <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	f023 0307 	bic.w	r3, r3, #7
    486a:	3308      	adds	r3, #8
    486c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    486e:	687b      	ldr	r3, [r7, #4]
    4870:	2b00      	cmp	r3, #0
    4872:	d068      	beq.n	4946 <pvPortMalloc+0x17a>
    4874:	687b      	ldr	r3, [r7, #4]
    4876:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    487a:	d264      	bcs.n	4946 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    487c:	f24b 4388 	movw	r3, #46216	; 0xb488
    4880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4884:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    4886:	f24b 4388 	movw	r3, #46216	; 0xb488
    488a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    488e:	681b      	ldr	r3, [r3, #0]
    4890:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4892:	e004      	b.n	489e <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    4894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4896:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    4898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    489a:	681b      	ldr	r3, [r3, #0]
    489c:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48a0:	685a      	ldr	r2, [r3, #4]
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	429a      	cmp	r2, r3
    48a6:	d203      	bcs.n	48b0 <pvPortMalloc+0xe4>
    48a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48aa:	681b      	ldr	r3, [r3, #0]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d1f1      	bne.n	4894 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    48b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    48b2:	f24b 4390 	movw	r3, #46224	; 0xb490
    48b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    48ba:	429a      	cmp	r2, r3
    48bc:	d043      	beq.n	4946 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    48be:	6a3b      	ldr	r3, [r7, #32]
    48c0:	681a      	ldr	r2, [r3, #0]
    48c2:	2310      	movs	r3, #16
    48c4:	4413      	add	r3, r2
    48c6:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    48c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48ca:	681a      	ldr	r2, [r3, #0]
    48cc:	6a3b      	ldr	r3, [r7, #32]
    48ce:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    48d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48d2:	685a      	ldr	r2, [r3, #4]
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	1ad2      	subs	r2, r2, r3
    48d8:	2310      	movs	r3, #16
    48da:	005b      	lsls	r3, r3, #1
    48dc:	429a      	cmp	r2, r3
    48de:	d925      	bls.n	492c <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    48e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	4413      	add	r3, r2
    48e6:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    48e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48ea:	685a      	ldr	r2, [r3, #4]
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	1ad2      	subs	r2, r2, r3
    48f0:	693b      	ldr	r3, [r7, #16]
    48f2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    48f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48f6:	687a      	ldr	r2, [r7, #4]
    48f8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    48fa:	693b      	ldr	r3, [r7, #16]
    48fc:	685b      	ldr	r3, [r3, #4]
    48fe:	60fb      	str	r3, [r7, #12]
    4900:	f24b 4388 	movw	r3, #46216	; 0xb488
    4904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4908:	61bb      	str	r3, [r7, #24]
    490a:	e002      	b.n	4912 <pvPortMalloc+0x146>
    490c:	69bb      	ldr	r3, [r7, #24]
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	61bb      	str	r3, [r7, #24]
    4912:	69bb      	ldr	r3, [r7, #24]
    4914:	681b      	ldr	r3, [r3, #0]
    4916:	685a      	ldr	r2, [r3, #4]
    4918:	68fb      	ldr	r3, [r7, #12]
    491a:	429a      	cmp	r2, r3
    491c:	d3f6      	bcc.n	490c <pvPortMalloc+0x140>
    491e:	69bb      	ldr	r3, [r7, #24]
    4920:	681a      	ldr	r2, [r3, #0]
    4922:	693b      	ldr	r3, [r7, #16]
    4924:	601a      	str	r2, [r3, #0]
    4926:	69bb      	ldr	r3, [r7, #24]
    4928:	693a      	ldr	r2, [r7, #16]
    492a:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    492c:	f240 1300 	movw	r3, #256	; 0x100
    4930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4934:	681a      	ldr	r2, [r3, #0]
    4936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4938:	685b      	ldr	r3, [r3, #4]
    493a:	1ad2      	subs	r2, r2, r3
    493c:	f240 1300 	movw	r3, #256	; 0x100
    4940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4944:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    4946:	f7ff f8eb 	bl	3b20 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    494a:	69fb      	ldr	r3, [r7, #28]
}
    494c:	4618      	mov	r0, r3
    494e:	3728      	adds	r7, #40	; 0x28
    4950:	46bd      	mov	sp, r7
    4952:	bd80      	pop	{r7, pc}

00004954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4954:	b580      	push	{r7, lr}
    4956:	b086      	sub	sp, #24
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	2b00      	cmp	r3, #0
    4964:	d030      	beq.n	49c8 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    4966:	2310      	movs	r3, #16
    4968:	425b      	negs	r3, r3
    496a:	693a      	ldr	r2, [r7, #16]
    496c:	4413      	add	r3, r2
    496e:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    4970:	693b      	ldr	r3, [r7, #16]
    4972:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    4974:	f7ff f8c2 	bl	3afc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    4978:	68fb      	ldr	r3, [r7, #12]
    497a:	685b      	ldr	r3, [r3, #4]
    497c:	60bb      	str	r3, [r7, #8]
    497e:	f24b 4388 	movw	r3, #46216	; 0xb488
    4982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4986:	617b      	str	r3, [r7, #20]
    4988:	e002      	b.n	4990 <vPortFree+0x3c>
    498a:	697b      	ldr	r3, [r7, #20]
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	617b      	str	r3, [r7, #20]
    4990:	697b      	ldr	r3, [r7, #20]
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	685a      	ldr	r2, [r3, #4]
    4996:	68bb      	ldr	r3, [r7, #8]
    4998:	429a      	cmp	r2, r3
    499a:	d3f6      	bcc.n	498a <vPortFree+0x36>
    499c:	697b      	ldr	r3, [r7, #20]
    499e:	681a      	ldr	r2, [r3, #0]
    49a0:	68fb      	ldr	r3, [r7, #12]
    49a2:	601a      	str	r2, [r3, #0]
    49a4:	697b      	ldr	r3, [r7, #20]
    49a6:	68fa      	ldr	r2, [r7, #12]
    49a8:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    49aa:	68fb      	ldr	r3, [r7, #12]
    49ac:	685a      	ldr	r2, [r3, #4]
    49ae:	f240 1300 	movw	r3, #256	; 0x100
    49b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	441a      	add	r2, r3
    49ba:	f240 1300 	movw	r3, #256	; 0x100
    49be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c2:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    49c4:	f7ff f8ac 	bl	3b20 <xTaskResumeAll>
	}
}
    49c8:	3718      	adds	r7, #24
    49ca:	46bd      	mov	sp, r7
    49cc:	bd80      	pop	{r7, pc}
    49ce:	bf00      	nop

000049d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    49d0:	b480      	push	{r7}
    49d2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    49d4:	f240 1300 	movw	r3, #256	; 0x100
    49d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49dc:	681b      	ldr	r3, [r3, #0]
}
    49de:	4618      	mov	r0, r3
    49e0:	46bd      	mov	sp, r7
    49e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e6:	4770      	bx	lr

000049e8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    49e8:	b480      	push	{r7}
    49ea:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    49ec:	46bd      	mov	sp, r7
    49ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    49f2:	4770      	bx	lr
    49f4:	0000      	movs	r0, r0
	...

000049f8 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    49f8:	b580      	push	{r7, lr}
    49fa:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    49fc:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d114      	bne.n	4a34 <ground_calibrate+0x3c>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    4a0a:	f24b 43a2 	movw	r3, #46242	; 0xb4a2
    4a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a12:	881b      	ldrh	r3, [r3, #0]
    4a14:	2b09      	cmp	r3, #9
    4a16:	d838      	bhi.n	4a8a <ground_calibrate+0x92>
    4a18:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    4a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a20:	781b      	ldrb	r3, [r3, #0]
    4a22:	2b01      	cmp	r3, #1
    4a24:	d131      	bne.n	4a8a <ground_calibrate+0x92>
      calib_status = WAITING_CALIB_CONTRAST;
    4a26:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a2e:	2201      	movs	r2, #1
    4a30:	701a      	strb	r2, [r3, #0]
    4a32:	e02a      	b.n	4a8a <ground_calibrate+0x92>
      //DOWNLINK_SEND_CALIB_START();
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    4a34:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a3c:	781b      	ldrb	r3, [r3, #0]
    4a3e:	2b01      	cmp	r3, #1
    4a40:	d123      	bne.n	4a8a <ground_calibrate+0x92>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    4a42:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a4a:	885b      	ldrh	r3, [r3, #2]
    4a4c:	b21b      	sxth	r3, r3
    4a4e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    4a52:	db08      	blt.n	4a66 <ground_calibrate+0x6e>
    4a54:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a5c:	885b      	ldrh	r3, [r3, #2]
    4a5e:	b21b      	sxth	r3, r3
    4a60:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a64:	dd11      	ble.n	4a8a <ground_calibrate+0x92>
      ir_gain_calib();
    4a66:	f008 f913 	bl	cc90 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    4a6a:	f240 1310 	movw	r3, #272	; 0x110
    4a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a72:	681a      	ldr	r2, [r3, #0]
    4a74:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    4a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a7c:	601a      	str	r2, [r3, #0]
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
      calib_status = CALIB_DONE;
    4a7e:	f24b 43ba 	movw	r3, #46266	; 0xb4ba
    4a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a86:	2202      	movs	r2, #2
    4a88:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    4a8a:	bd80      	pop	{r7, pc}

00004a8c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    4a8c:	b480      	push	{r7}
    4a8e:	b083      	sub	sp, #12
    4a90:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    4a92:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    4a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4a9a:	781b      	ldrb	r3, [r3, #0]
    4a9c:	2b03      	cmp	r3, #3
    4a9e:	d10c      	bne.n	4aba <pprz_mode_update+0x2e>
    4aa0:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    4aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4aa8:	781b      	ldrb	r3, [r3, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d032      	beq.n	4b14 <pprz_mode_update+0x88>
    4aae:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    4ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ab6:	2200      	movs	r2, #0
    4ab8:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    4aba:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ac2:	891b      	ldrh	r3, [r3, #8]
    4ac4:	b21b      	sxth	r3, r3
    4ac6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4aca:	dc0f      	bgt.n	4aec <pprz_mode_update+0x60>
    4acc:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ad4:	891b      	ldrh	r3, [r3, #8]
    4ad6:	b21a      	sxth	r2, r3
    4ad8:	f64e 5341 	movw	r3, #60737	; 0xed41
    4adc:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4ae0:	429a      	cmp	r2, r3
    4ae2:	bfb4      	ite	lt
    4ae4:	2300      	movlt	r3, #0
    4ae6:	2301      	movge	r3, #1
    4ae8:	b2db      	uxtb	r3, r3
    4aea:	e000      	b.n	4aee <pprz_mode_update+0x62>
    4aec:	2302      	movs	r3, #2
    4aee:	71fb      	strb	r3, [r7, #7]
    4af0:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    4af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4af8:	781b      	ldrb	r3, [r3, #0]
    4afa:	79fa      	ldrb	r2, [r7, #7]
    4afc:	429a      	cmp	r2, r3
    4afe:	d007      	beq.n	4b10 <pprz_mode_update+0x84>
    4b00:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    4b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b08:	79fa      	ldrb	r2, [r7, #7]
    4b0a:	701a      	strb	r2, [r3, #0]
    4b0c:	2301      	movs	r3, #1
    4b0e:	e002      	b.n	4b16 <pprz_mode_update+0x8a>
    4b10:	2300      	movs	r3, #0
    4b12:	e000      	b.n	4b16 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    4b14:	2300      	movs	r3, #0
}
    4b16:	4618      	mov	r0, r3
    4b18:	370c      	adds	r7, #12
    4b1a:	46bd      	mov	sp, r7
    4b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b20:	4770      	bx	lr
    4b22:	bf00      	nop

00004b24 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    4b24:	b480      	push	{r7}
    4b26:	b083      	sub	sp, #12
    4b28:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    4b2a:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b32:	89db      	ldrh	r3, [r3, #14]
    4b34:	b21a      	sxth	r2, r3
    4b36:	f640 437f 	movw	r3, #3199	; 0xc7f
    4b3a:	429a      	cmp	r2, r3
    4b3c:	bfd4      	ite	le
    4b3e:	2300      	movle	r3, #0
    4b40:	2301      	movgt	r3, #1
    4b42:	b2db      	uxtb	r3, r3
    4b44:	71fb      	strb	r3, [r7, #7]
    4b46:	f240 1304 	movw	r3, #260	; 0x104
    4b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4e:	781b      	ldrb	r3, [r3, #0]
    4b50:	79fa      	ldrb	r2, [r7, #7]
    4b52:	429a      	cmp	r2, r3
    4b54:	d007      	beq.n	4b66 <ir_estim_mode_update+0x42>
    4b56:	f240 1304 	movw	r3, #260	; 0x104
    4b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5e:	79fa      	ldrb	r2, [r7, #7]
    4b60:	701a      	strb	r2, [r3, #0]
    4b62:	2301      	movs	r3, #1
    4b64:	e000      	b.n	4b68 <ir_estim_mode_update+0x44>
    4b66:	2300      	movs	r3, #0
}
    4b68:	4618      	mov	r0, r3
    4b6a:	370c      	adds	r7, #12
    4b6c:	46bd      	mov	sp, r7
    4b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b72:	4770      	bx	lr

00004b74 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    4b74:	b480      	push	{r7}
    4b76:	b083      	sub	sp, #12
    4b78:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    4b7a:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b82:	7cdb      	ldrb	r3, [r3, #19]
    4b84:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    4b86:	f24b 43ab 	movw	r3, #46251	; 0xb4ab
    4b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b8e:	781b      	ldrb	r3, [r3, #0]
    4b90:	79fa      	ldrb	r2, [r7, #7]
    4b92:	429a      	cmp	r2, r3
    4b94:	d017      	beq.n	4bc6 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    4b96:	f24b 43ab 	movw	r3, #46251	; 0xb4ab
    4b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4b9e:	781b      	ldrb	r3, [r3, #0]
    4ba0:	461a      	mov	r2, r3
    4ba2:	79fb      	ldrb	r3, [r7, #7]
    4ba4:	4053      	eors	r3, r2
    4ba6:	f003 0303 	and.w	r3, r3, #3
    4baa:	2b00      	cmp	r3, #0
    4bac:	bf0c      	ite	eq
    4bae:	2300      	moveq	r3, #0
    4bb0:	2301      	movne	r3, #1
    4bb2:	b2db      	uxtb	r3, r3
    4bb4:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    4bb6:	f24b 43ab 	movw	r3, #46251	; 0xb4ab
    4bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bbe:	79fa      	ldrb	r2, [r7, #7]
    4bc0:	701a      	strb	r2, [r3, #0]
    return changed;
    4bc2:	79bb      	ldrb	r3, [r7, #6]
    4bc4:	e000      	b.n	4bc8 <mcu1_status_update+0x54>
  }
  return FALSE;
    4bc6:	2300      	movs	r3, #0
}
    4bc8:	4618      	mov	r0, r3
    4bca:	370c      	adds	r7, #12
    4bcc:	46bd      	mov	sp, r7
    4bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bd2:	4770      	bx	lr

00004bd4 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    4bd4:	b480      	push	{r7}
    4bd6:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    4bd8:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    4bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4be0:	781b      	ldrb	r3, [r3, #0]
    4be2:	2b00      	cmp	r3, #0
    4be4:	d12a      	bne.n	4c3c <events_update+0x68>
    4be6:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4bee:	895b      	ldrh	r3, [r3, #10]
    4bf0:	b21b      	sxth	r3, r3
    4bf2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    4bf6:	dd21      	ble.n	4c3c <events_update+0x68>
    4bf8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c00:	881b      	ldrh	r3, [r3, #0]
    4c02:	2b13      	cmp	r3, #19
    4c04:	d819      	bhi.n	4c3a <events_update+0x66>
    4c06:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c0e:	881b      	ldrh	r3, [r3, #0]
    4c10:	3301      	adds	r3, #1
    4c12:	b29a      	uxth	r2, r3
    4c14:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c1c:	801a      	strh	r2, [r3, #0]
    4c1e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c26:	881b      	ldrh	r3, [r3, #0]
    4c28:	2b14      	cmp	r3, #20
    4c2a:	d106      	bne.n	4c3a <events_update+0x66>
    4c2c:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    4c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c34:	2201      	movs	r2, #1
    4c36:	701a      	strb	r2, [r3, #0]
    4c38:	e00c      	b.n	4c54 <events_update+0x80>
    4c3a:	e00b      	b.n	4c54 <events_update+0x80>
    4c3c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
    4c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c44:	2200      	movs	r2, #0
    4c46:	801a      	strh	r2, [r3, #0]
    4c48:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    4c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c50:	2200      	movs	r2, #0
    4c52:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    4c54:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    4c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c5c:	781b      	ldrb	r3, [r3, #0]
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d12a      	bne.n	4cb8 <events_update+0xe4>
    4c62:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c6a:	895b      	ldrh	r3, [r3, #10]
    4c6c:	b21b      	sxth	r3, r3
    4c6e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    4c72:	da21      	bge.n	4cb8 <events_update+0xe4>
    4c74:	f24b 43be 	movw	r3, #46270	; 0xb4be
    4c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c7c:	881b      	ldrh	r3, [r3, #0]
    4c7e:	2b13      	cmp	r3, #19
    4c80:	d819      	bhi.n	4cb6 <events_update+0xe2>
    4c82:	f24b 43be 	movw	r3, #46270	; 0xb4be
    4c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c8a:	881b      	ldrh	r3, [r3, #0]
    4c8c:	3301      	adds	r3, #1
    4c8e:	b29a      	uxth	r2, r3
    4c90:	f24b 43be 	movw	r3, #46270	; 0xb4be
    4c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4c98:	801a      	strh	r2, [r3, #0]
    4c9a:	f24b 43be 	movw	r3, #46270	; 0xb4be
    4c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ca2:	881b      	ldrh	r3, [r3, #0]
    4ca4:	2b14      	cmp	r3, #20
    4ca6:	d106      	bne.n	4cb6 <events_update+0xe2>
    4ca8:	f24b 43a9 	movw	r3, #46249	; 0xb4a9
    4cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cb0:	2201      	movs	r2, #1
    4cb2:	701a      	strb	r2, [r3, #0]
    4cb4:	e00c      	b.n	4cd0 <events_update+0xfc>
    4cb6:	e00b      	b.n	4cd0 <events_update+0xfc>
    4cb8:	f24b 43be 	movw	r3, #46270	; 0xb4be
    4cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cc0:	2200      	movs	r2, #0
    4cc2:	801a      	strh	r2, [r3, #0]
    4cc4:	f24b 43a9 	movw	r3, #46249	; 0xb4a9
    4cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ccc:	2200      	movs	r2, #0
    4cce:	701a      	strb	r2, [r3, #0]
}  
    4cd0:	46bd      	mov	sp, r7
    4cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cd6:	4770      	bx	lr

00004cd8 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    4cd8:	b480      	push	{r7}
    4cda:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    4cdc:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    4ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ce4:	88da      	ldrh	r2, [r3, #6]
    4ce6:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    4cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cee:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    4cf0:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    4cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4cf8:	2200      	movs	r2, #0
    4cfa:	74da      	strb	r2, [r3, #19]
}
    4cfc:	46bd      	mov	sp, r7
    4cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d02:	4770      	bx	lr

00004d04 <send_boot>:
 * Called at 20Hz.
 */



void send_boot(void){
    4d04:	b480      	push	{r7}
    4d06:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    4d08:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d10:	781a      	ldrb	r2, [r3, #0]
    4d12:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    4d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	b2db      	uxtb	r3, r3
    4d1e:	429a      	cmp	r2, r3
    4d20:	d313      	bcc.n	4d4a <send_boot+0x46>
    4d22:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    4d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d2a:	781b      	ldrb	r3, [r3, #0]
    4d2c:	b2db      	uxtb	r3, r3
    4d2e:	461a      	mov	r2, r3
    4d30:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d38:	781b      	ldrb	r3, [r3, #0]
    4d3a:	1ad3      	subs	r3, r2, r3
    4d3c:	33ff      	adds	r3, #255	; 0xff
    4d3e:	2b06      	cmp	r3, #6
    4d40:	bfd4      	ite	le
    4d42:	2300      	movle	r3, #0
    4d44:	2301      	movgt	r3, #1
    4d46:	b2db      	uxtb	r3, r3
    4d48:	e011      	b.n	4d6e <send_boot+0x6a>
    4d4a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    4d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d52:	781b      	ldrb	r3, [r3, #0]
    4d54:	b2db      	uxtb	r3, r3
    4d56:	461a      	mov	r2, r3
    4d58:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d60:	781b      	ldrb	r3, [r3, #0]
    4d62:	1ad3      	subs	r3, r2, r3
    4d64:	2b06      	cmp	r3, #6
    4d66:	bfd4      	ite	le
    4d68:	2300      	movle	r3, #0
    4d6a:	2301      	movgt	r3, #1
    4d6c:	b2db      	uxtb	r3, r3
    4d6e:	2b00      	cmp	r3, #0
    4d70:	f000 8194 	beq.w	509c <send_boot+0x398>
    4d74:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d7c:	781b      	ldrb	r3, [r3, #0]
    4d7e:	461a      	mov	r2, r3
    4d80:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    4d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d88:	2105      	movs	r1, #5
    4d8a:	5499      	strb	r1, [r3, r2]
    4d8c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4d94:	781b      	ldrb	r3, [r3, #0]
    4d96:	3301      	adds	r3, #1
    4d98:	b2da      	uxtb	r2, r3
    4d9a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4da2:	701a      	strb	r2, [r3, #0]
    4da4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dac:	781b      	ldrb	r3, [r3, #0]
    4dae:	2bff      	cmp	r3, #255	; 0xff
    4db0:	d105      	bne.n	4dbe <send_boot+0xba>
    4db2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dba:	2200      	movs	r2, #0
    4dbc:	701a      	strb	r2, [r3, #0]
    4dbe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dc6:	781b      	ldrb	r3, [r3, #0]
    4dc8:	461a      	mov	r2, r3
    4dca:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    4dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dd2:	2101      	movs	r1, #1
    4dd4:	5499      	strb	r1, [r3, r2]
    4dd6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dde:	781b      	ldrb	r3, [r3, #0]
    4de0:	3301      	adds	r3, #1
    4de2:	b2da      	uxtb	r2, r3
    4de4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4dec:	701a      	strb	r2, [r3, #0]
    4dee:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4df6:	781b      	ldrb	r3, [r3, #0]
    4df8:	2bff      	cmp	r3, #255	; 0xff
    4dfa:	d105      	bne.n	4e08 <send_boot+0x104>
    4dfc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e04:	2200      	movs	r2, #0
    4e06:	701a      	strb	r2, [r3, #0]
    4e08:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e10:	2201      	movs	r2, #1
    4e12:	701a      	strb	r2, [r3, #0]
    4e14:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    4e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e1c:	2201      	movs	r2, #1
    4e1e:	701a      	strb	r2, [r3, #0]
    4e20:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	461a      	mov	r2, r3
    4e2c:	f643 1316 	movw	r3, #14614	; 0x3916
    4e30:	f2c0 0301 	movt	r3, #1
    4e34:	7819      	ldrb	r1, [r3, #0]
    4e36:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    4e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e3e:	5499      	strb	r1, [r3, r2]
    4e40:	f643 1316 	movw	r3, #14614	; 0x3916
    4e44:	f2c0 0301 	movt	r3, #1
    4e48:	781a      	ldrb	r2, [r3, #0]
    4e4a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	4413      	add	r3, r2
    4e56:	b2da      	uxtb	r2, r3
    4e58:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e60:	701a      	strb	r2, [r3, #0]
    4e62:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    4e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e6a:	781a      	ldrb	r2, [r3, #0]
    4e6c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	4413      	add	r3, r2
    4e78:	b2da      	uxtb	r2, r3
    4e7a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    4e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e82:	701a      	strb	r2, [r3, #0]
    4e84:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e8c:	781b      	ldrb	r3, [r3, #0]
    4e8e:	3301      	adds	r3, #1
    4e90:	b2da      	uxtb	r2, r3
    4e92:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4e9a:	701a      	strb	r2, [r3, #0]
    4e9c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ea4:	781b      	ldrb	r3, [r3, #0]
    4ea6:	2bff      	cmp	r3, #255	; 0xff
    4ea8:	d105      	bne.n	4eb6 <send_boot+0x1b2>
    4eaa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4eb2:	2200      	movs	r2, #0
    4eb4:	701a      	strb	r2, [r3, #0]
    4eb6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ebe:	781b      	ldrb	r3, [r3, #0]
    4ec0:	461a      	mov	r2, r3
    4ec2:	f643 1316 	movw	r3, #14614	; 0x3916
    4ec6:	f2c0 0301 	movt	r3, #1
    4eca:	7859      	ldrb	r1, [r3, #1]
    4ecc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    4ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ed4:	5499      	strb	r1, [r3, r2]
    4ed6:	4b88      	ldr	r3, [pc, #544]	; (50f8 <send_boot+0x3f4>)
    4ed8:	781a      	ldrb	r2, [r3, #0]
    4eda:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ee2:	781b      	ldrb	r3, [r3, #0]
    4ee4:	4413      	add	r3, r2
    4ee6:	b2da      	uxtb	r2, r3
    4ee8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4ef0:	701a      	strb	r2, [r3, #0]
    4ef2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    4ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4efa:	781a      	ldrb	r2, [r3, #0]
    4efc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f04:	781b      	ldrb	r3, [r3, #0]
    4f06:	4413      	add	r3, r2
    4f08:	b2da      	uxtb	r2, r3
    4f0a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    4f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f12:	701a      	strb	r2, [r3, #0]
    4f14:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	3301      	adds	r3, #1
    4f20:	b2da      	uxtb	r2, r3
    4f22:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f2a:	701a      	strb	r2, [r3, #0]
    4f2c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	2bff      	cmp	r3, #255	; 0xff
    4f38:	d105      	bne.n	4f46 <send_boot+0x242>
    4f3a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f42:	2200      	movs	r2, #0
    4f44:	701a      	strb	r2, [r3, #0]
    4f46:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	461a      	mov	r2, r3
    4f52:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    4f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f5a:	7819      	ldrb	r1, [r3, #0]
    4f5c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    4f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f64:	5499      	strb	r1, [r3, r2]
    4f66:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	3301      	adds	r3, #1
    4f72:	b2da      	uxtb	r2, r3
    4f74:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f7c:	701a      	strb	r2, [r3, #0]
    4f7e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f86:	781b      	ldrb	r3, [r3, #0]
    4f88:	2bff      	cmp	r3, #255	; 0xff
    4f8a:	d105      	bne.n	4f98 <send_boot+0x294>
    4f8c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4f94:	2200      	movs	r2, #0
    4f96:	701a      	strb	r2, [r3, #0]
    4f98:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	461a      	mov	r2, r3
    4fa4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    4fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fac:	7819      	ldrb	r1, [r3, #0]
    4fae:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    4fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fb6:	5499      	strb	r1, [r3, r2]
    4fb8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fc0:	781b      	ldrb	r3, [r3, #0]
    4fc2:	3301      	adds	r3, #1
    4fc4:	b2da      	uxtb	r2, r3
    4fc6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fce:	701a      	strb	r2, [r3, #0]
    4fd0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fd8:	781b      	ldrb	r3, [r3, #0]
    4fda:	2bff      	cmp	r3, #255	; 0xff
    4fdc:	d105      	bne.n	4fea <send_boot+0x2e6>
    4fde:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    4fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    4fe6:	2200      	movs	r2, #0
    4fe8:	701a      	strb	r2, [r3, #0]
    4fea:	f248 0339 	movw	r3, #32825	; 0x8039
    4fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff2:	781b      	ldrb	r3, [r3, #0]
    4ff4:	b2db      	uxtb	r3, r3
    4ff6:	f003 0310 	and.w	r3, r3, #16
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d15a      	bne.n	50b4 <send_boot+0x3b0>
    4ffe:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	b2db      	uxtb	r3, r3
    500a:	461a      	mov	r2, r3
    500c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5014:	5c9a      	ldrb	r2, [r3, r2]
    5016:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    501a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    501e:	701a      	strb	r2, [r3, #0]
    5020:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    5024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5028:	2200      	movs	r2, #0
    502a:	701a      	strb	r2, [r3, #0]
    502c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5034:	781b      	ldrb	r3, [r3, #0]
    5036:	b2db      	uxtb	r3, r3
    5038:	3301      	adds	r3, #1
    503a:	b2da      	uxtb	r2, r3
    503c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5044:	701a      	strb	r2, [r3, #0]
    5046:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    504a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    504e:	781b      	ldrb	r3, [r3, #0]
    5050:	b2db      	uxtb	r3, r3
    5052:	2bff      	cmp	r3, #255	; 0xff
    5054:	d105      	bne.n	5062 <send_boot+0x35e>
    5056:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    505a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    505e:	2200      	movs	r2, #0
    5060:	701a      	strb	r2, [r3, #0]
    5062:	f248 0338 	movw	r3, #32824	; 0x8038
    5066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506a:	f248 0238 	movw	r2, #32824	; 0x8038
    506e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5072:	7812      	ldrb	r2, [r2, #0]
    5074:	b2d2      	uxtb	r2, r2
    5076:	f042 0201 	orr.w	r2, r2, #1
    507a:	b2d2      	uxtb	r2, r2
    507c:	701a      	strb	r2, [r3, #0]
    507e:	f248 0339 	movw	r3, #32825	; 0x8039
    5082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5086:	f248 0239 	movw	r2, #32825	; 0x8039
    508a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    508e:	7812      	ldrb	r2, [r2, #0]
    5090:	b2d2      	uxtb	r2, r2
    5092:	f042 0210 	orr.w	r2, r2, #16
    5096:	b2d2      	uxtb	r2, r2
    5098:	701a      	strb	r2, [r3, #0]
    509a:	e00b      	b.n	50b4 <send_boot+0x3b0>
    509c:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    50a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	3301      	adds	r3, #1
    50a8:	b2da      	uxtb	r2, r3
    50aa:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    50ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50b2:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    50b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    50b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50bc:	781a      	ldrb	r2, [r3, #0]
    50be:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    50c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	b2db      	uxtb	r3, r3
    50ca:	429a      	cmp	r2, r3
    50cc:	d316      	bcc.n	50fc <send_boot+0x3f8>
    50ce:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    50d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50d6:	781b      	ldrb	r3, [r3, #0]
    50d8:	b2db      	uxtb	r3, r3
    50da:	461a      	mov	r2, r3
    50dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    50e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    50e4:	781b      	ldrb	r3, [r3, #0]
    50e6:	1ad3      	subs	r3, r2, r3
    50e8:	33ff      	adds	r3, #255	; 0xff
    50ea:	2b14      	cmp	r3, #20
    50ec:	bfd4      	ite	le
    50ee:	2300      	movle	r3, #0
    50f0:	2301      	movgt	r3, #1
    50f2:	b2db      	uxtb	r3, r3
    50f4:	e014      	b.n	5120 <send_boot+0x41c>
    50f6:	bf00      	nop
    50f8:	00013917 	.word	0x00013917
    50fc:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5104:	781b      	ldrb	r3, [r3, #0]
    5106:	b2db      	uxtb	r3, r3
    5108:	461a      	mov	r2, r3
    510a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    510e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5112:	781b      	ldrb	r3, [r3, #0]
    5114:	1ad3      	subs	r3, r2, r3
    5116:	2b14      	cmp	r3, #20
    5118:	bfd4      	ite	le
    511a:	2300      	movle	r3, #0
    511c:	2301      	movgt	r3, #1
    511e:	b2db      	uxtb	r3, r3
    5120:	2b00      	cmp	r3, #0
    5122:	f000 85a5 	beq.w	5c70 <send_boot+0xf6c>
    5126:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    512a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    512e:	781b      	ldrb	r3, [r3, #0]
    5130:	461a      	mov	r2, r3
    5132:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    513a:	2105      	movs	r1, #5
    513c:	5499      	strb	r1, [r3, r2]
    513e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5146:	781b      	ldrb	r3, [r3, #0]
    5148:	3301      	adds	r3, #1
    514a:	b2da      	uxtb	r2, r3
    514c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5154:	701a      	strb	r2, [r3, #0]
    5156:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    515a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	2bff      	cmp	r3, #255	; 0xff
    5162:	d105      	bne.n	5170 <send_boot+0x46c>
    5164:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    516c:	2200      	movs	r2, #0
    516e:	701a      	strb	r2, [r3, #0]
    5170:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5178:	781b      	ldrb	r3, [r3, #0]
    517a:	461a      	mov	r2, r3
    517c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5184:	2105      	movs	r1, #5
    5186:	5499      	strb	r1, [r3, r2]
    5188:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    518c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	3301      	adds	r3, #1
    5194:	b2da      	uxtb	r2, r3
    5196:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    519a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    519e:	701a      	strb	r2, [r3, #0]
    51a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    51a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51a8:	781b      	ldrb	r3, [r3, #0]
    51aa:	2bff      	cmp	r3, #255	; 0xff
    51ac:	d105      	bne.n	51ba <send_boot+0x4b6>
    51ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    51b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51b6:	2200      	movs	r2, #0
    51b8:	701a      	strb	r2, [r3, #0]
    51ba:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    51be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51c2:	2205      	movs	r2, #5
    51c4:	701a      	strb	r2, [r3, #0]
    51c6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    51ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51ce:	2205      	movs	r2, #5
    51d0:	701a      	strb	r2, [r3, #0]
    51d2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    51d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51da:	781b      	ldrb	r3, [r3, #0]
    51dc:	461a      	mov	r2, r3
    51de:	f64b 23b8 	movw	r3, #47800	; 0xbab8
    51e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51e6:	7819      	ldrb	r1, [r3, #0]
    51e8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    51ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51f0:	5499      	strb	r1, [r3, r2]
    51f2:	f64b 23b8 	movw	r3, #47800	; 0xbab8
    51f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    51fa:	781a      	ldrb	r2, [r3, #0]
    51fc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	4413      	add	r3, r2
    5208:	b2da      	uxtb	r2, r3
    520a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    520e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5212:	701a      	strb	r2, [r3, #0]
    5214:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    521c:	781a      	ldrb	r2, [r3, #0]
    521e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5226:	781b      	ldrb	r3, [r3, #0]
    5228:	4413      	add	r3, r2
    522a:	b2da      	uxtb	r2, r3
    522c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5234:	701a      	strb	r2, [r3, #0]
    5236:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    523a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    523e:	781b      	ldrb	r3, [r3, #0]
    5240:	3301      	adds	r3, #1
    5242:	b2da      	uxtb	r2, r3
    5244:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    524c:	701a      	strb	r2, [r3, #0]
    524e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	2bff      	cmp	r3, #255	; 0xff
    525a:	d105      	bne.n	5268 <send_boot+0x564>
    525c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5264:	2200      	movs	r2, #0
    5266:	701a      	strb	r2, [r3, #0]
    5268:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    526c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5270:	781b      	ldrb	r3, [r3, #0]
    5272:	461a      	mov	r2, r3
    5274:	f64b 23b8 	movw	r3, #47800	; 0xbab8
    5278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    527c:	7859      	ldrb	r1, [r3, #1]
    527e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5286:	5499      	strb	r1, [r3, r2]
    5288:	4bd1      	ldr	r3, [pc, #836]	; (55d0 <send_boot+0x8cc>)
    528a:	781a      	ldrb	r2, [r3, #0]
    528c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5294:	781b      	ldrb	r3, [r3, #0]
    5296:	4413      	add	r3, r2
    5298:	b2da      	uxtb	r2, r3
    529a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    529e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52a2:	701a      	strb	r2, [r3, #0]
    52a4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    52a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52ac:	781a      	ldrb	r2, [r3, #0]
    52ae:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    52b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	4413      	add	r3, r2
    52ba:	b2da      	uxtb	r2, r3
    52bc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    52c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52c4:	701a      	strb	r2, [r3, #0]
    52c6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    52ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52ce:	781b      	ldrb	r3, [r3, #0]
    52d0:	3301      	adds	r3, #1
    52d2:	b2da      	uxtb	r2, r3
    52d4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    52d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52dc:	701a      	strb	r2, [r3, #0]
    52de:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    52e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	2bff      	cmp	r3, #255	; 0xff
    52ea:	d105      	bne.n	52f8 <send_boot+0x5f4>
    52ec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    52f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    52f4:	2200      	movs	r2, #0
    52f6:	701a      	strb	r2, [r3, #0]
    52f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    52fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	461a      	mov	r2, r3
    5304:	f64b 23b8 	movw	r3, #47800	; 0xbab8
    5308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    530c:	7899      	ldrb	r1, [r3, #2]
    530e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5316:	5499      	strb	r1, [r3, r2]
    5318:	4bae      	ldr	r3, [pc, #696]	; (55d4 <send_boot+0x8d0>)
    531a:	781a      	ldrb	r2, [r3, #0]
    531c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5324:	781b      	ldrb	r3, [r3, #0]
    5326:	4413      	add	r3, r2
    5328:	b2da      	uxtb	r2, r3
    532a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    532e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5332:	701a      	strb	r2, [r3, #0]
    5334:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    533c:	781a      	ldrb	r2, [r3, #0]
    533e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	4413      	add	r3, r2
    534a:	b2da      	uxtb	r2, r3
    534c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5354:	701a      	strb	r2, [r3, #0]
    5356:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    535a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	3301      	adds	r3, #1
    5362:	b2da      	uxtb	r2, r3
    5364:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    536c:	701a      	strb	r2, [r3, #0]
    536e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	2bff      	cmp	r3, #255	; 0xff
    537a:	d105      	bne.n	5388 <send_boot+0x684>
    537c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5384:	2200      	movs	r2, #0
    5386:	701a      	strb	r2, [r3, #0]
    5388:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    538c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5390:	781b      	ldrb	r3, [r3, #0]
    5392:	461a      	mov	r2, r3
    5394:	f64b 23b8 	movw	r3, #47800	; 0xbab8
    5398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    539c:	78d9      	ldrb	r1, [r3, #3]
    539e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    53a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53a6:	5499      	strb	r1, [r3, r2]
    53a8:	4b8b      	ldr	r3, [pc, #556]	; (55d8 <send_boot+0x8d4>)
    53aa:	781a      	ldrb	r2, [r3, #0]
    53ac:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    53b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53b4:	781b      	ldrb	r3, [r3, #0]
    53b6:	4413      	add	r3, r2
    53b8:	b2da      	uxtb	r2, r3
    53ba:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    53be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53c2:	701a      	strb	r2, [r3, #0]
    53c4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    53c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53cc:	781a      	ldrb	r2, [r3, #0]
    53ce:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    53d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53d6:	781b      	ldrb	r3, [r3, #0]
    53d8:	4413      	add	r3, r2
    53da:	b2da      	uxtb	r2, r3
    53dc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    53e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53e4:	701a      	strb	r2, [r3, #0]
    53e6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    53ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53ee:	781b      	ldrb	r3, [r3, #0]
    53f0:	3301      	adds	r3, #1
    53f2:	b2da      	uxtb	r2, r3
    53f4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    53f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    53fc:	701a      	strb	r2, [r3, #0]
    53fe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5406:	781b      	ldrb	r3, [r3, #0]
    5408:	2bff      	cmp	r3, #255	; 0xff
    540a:	d105      	bne.n	5418 <send_boot+0x714>
    540c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5414:	2200      	movs	r2, #0
    5416:	701a      	strb	r2, [r3, #0]
    5418:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    541c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5420:	781b      	ldrb	r3, [r3, #0]
    5422:	461a      	mov	r2, r3
    5424:	f64b 23bc 	movw	r3, #47804	; 0xbabc
    5428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    542c:	7819      	ldrb	r1, [r3, #0]
    542e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5436:	5499      	strb	r1, [r3, r2]
    5438:	f64b 23bc 	movw	r3, #47804	; 0xbabc
    543c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5440:	781a      	ldrb	r2, [r3, #0]
    5442:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	4413      	add	r3, r2
    544e:	b2da      	uxtb	r2, r3
    5450:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5458:	701a      	strb	r2, [r3, #0]
    545a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    545e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5462:	781a      	ldrb	r2, [r3, #0]
    5464:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    546c:	781b      	ldrb	r3, [r3, #0]
    546e:	4413      	add	r3, r2
    5470:	b2da      	uxtb	r2, r3
    5472:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    547a:	701a      	strb	r2, [r3, #0]
    547c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	3301      	adds	r3, #1
    5488:	b2da      	uxtb	r2, r3
    548a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    548e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5492:	701a      	strb	r2, [r3, #0]
    5494:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    549c:	781b      	ldrb	r3, [r3, #0]
    549e:	2bff      	cmp	r3, #255	; 0xff
    54a0:	d105      	bne.n	54ae <send_boot+0x7aa>
    54a2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    54a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54aa:	2200      	movs	r2, #0
    54ac:	701a      	strb	r2, [r3, #0]
    54ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    54b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	461a      	mov	r2, r3
    54ba:	f64b 23bc 	movw	r3, #47804	; 0xbabc
    54be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54c2:	7859      	ldrb	r1, [r3, #1]
    54c4:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    54c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54cc:	5499      	strb	r1, [r3, r2]
    54ce:	4b43      	ldr	r3, [pc, #268]	; (55dc <send_boot+0x8d8>)
    54d0:	781a      	ldrb	r2, [r3, #0]
    54d2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    54d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54da:	781b      	ldrb	r3, [r3, #0]
    54dc:	4413      	add	r3, r2
    54de:	b2da      	uxtb	r2, r3
    54e0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    54e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54e8:	701a      	strb	r2, [r3, #0]
    54ea:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    54ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54f2:	781a      	ldrb	r2, [r3, #0]
    54f4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    54f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	4413      	add	r3, r2
    5500:	b2da      	uxtb	r2, r3
    5502:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    550a:	701a      	strb	r2, [r3, #0]
    550c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5514:	781b      	ldrb	r3, [r3, #0]
    5516:	3301      	adds	r3, #1
    5518:	b2da      	uxtb	r2, r3
    551a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    551e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5522:	701a      	strb	r2, [r3, #0]
    5524:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2bff      	cmp	r3, #255	; 0xff
    5530:	d105      	bne.n	553e <send_boot+0x83a>
    5532:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    553a:	2200      	movs	r2, #0
    553c:	701a      	strb	r2, [r3, #0]
    553e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5546:	781b      	ldrb	r3, [r3, #0]
    5548:	461a      	mov	r2, r3
    554a:	f64b 23bc 	movw	r3, #47804	; 0xbabc
    554e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5552:	7899      	ldrb	r1, [r3, #2]
    5554:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    555c:	5499      	strb	r1, [r3, r2]
    555e:	4b20      	ldr	r3, [pc, #128]	; (55e0 <send_boot+0x8dc>)
    5560:	781a      	ldrb	r2, [r3, #0]
    5562:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    556a:	781b      	ldrb	r3, [r3, #0]
    556c:	4413      	add	r3, r2
    556e:	b2da      	uxtb	r2, r3
    5570:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5578:	701a      	strb	r2, [r3, #0]
    557a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    557e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5582:	781a      	ldrb	r2, [r3, #0]
    5584:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    558c:	781b      	ldrb	r3, [r3, #0]
    558e:	4413      	add	r3, r2
    5590:	b2da      	uxtb	r2, r3
    5592:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    559a:	701a      	strb	r2, [r3, #0]
    559c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    55a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55a4:	781b      	ldrb	r3, [r3, #0]
    55a6:	3301      	adds	r3, #1
    55a8:	b2da      	uxtb	r2, r3
    55aa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    55ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55b2:	701a      	strb	r2, [r3, #0]
    55b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    55b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	2bff      	cmp	r3, #255	; 0xff
    55c0:	d110      	bne.n	55e4 <send_boot+0x8e0>
    55c2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    55c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ca:	2200      	movs	r2, #0
    55cc:	701a      	strb	r2, [r3, #0]
    55ce:	e009      	b.n	55e4 <send_boot+0x8e0>
    55d0:	2004bab9 	.word	0x2004bab9
    55d4:	2004baba 	.word	0x2004baba
    55d8:	2004babb 	.word	0x2004babb
    55dc:	2004babd 	.word	0x2004babd
    55e0:	2004babe 	.word	0x2004babe
    55e4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    55e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	461a      	mov	r2, r3
    55f0:	f64b 23bc 	movw	r3, #47804	; 0xbabc
    55f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    55f8:	78d9      	ldrb	r1, [r3, #3]
    55fa:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    55fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5602:	5499      	strb	r1, [r3, r2]
    5604:	4bd3      	ldr	r3, [pc, #844]	; (5954 <send_boot+0xc50>)
    5606:	781a      	ldrb	r2, [r3, #0]
    5608:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    560c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5610:	781b      	ldrb	r3, [r3, #0]
    5612:	4413      	add	r3, r2
    5614:	b2da      	uxtb	r2, r3
    5616:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    561a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    561e:	701a      	strb	r2, [r3, #0]
    5620:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5628:	781a      	ldrb	r2, [r3, #0]
    562a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    562e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5632:	781b      	ldrb	r3, [r3, #0]
    5634:	4413      	add	r3, r2
    5636:	b2da      	uxtb	r2, r3
    5638:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    563c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5640:	701a      	strb	r2, [r3, #0]
    5642:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	3301      	adds	r3, #1
    564e:	b2da      	uxtb	r2, r3
    5650:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5658:	701a      	strb	r2, [r3, #0]
    565a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    565e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5662:	781b      	ldrb	r3, [r3, #0]
    5664:	2bff      	cmp	r3, #255	; 0xff
    5666:	d105      	bne.n	5674 <send_boot+0x970>
    5668:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    566c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5670:	2200      	movs	r2, #0
    5672:	701a      	strb	r2, [r3, #0]
    5674:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	461a      	mov	r2, r3
    5680:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    5684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5688:	7819      	ldrb	r1, [r3, #0]
    568a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    568e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5692:	5499      	strb	r1, [r3, r2]
    5694:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    5698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    569c:	781a      	ldrb	r2, [r3, #0]
    569e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    56a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56a6:	781b      	ldrb	r3, [r3, #0]
    56a8:	4413      	add	r3, r2
    56aa:	b2da      	uxtb	r2, r3
    56ac:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    56b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56b4:	701a      	strb	r2, [r3, #0]
    56b6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    56ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56be:	781a      	ldrb	r2, [r3, #0]
    56c0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    56c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	4413      	add	r3, r2
    56cc:	b2da      	uxtb	r2, r3
    56ce:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    56d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56d6:	701a      	strb	r2, [r3, #0]
    56d8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    56dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	3301      	adds	r3, #1
    56e4:	b2da      	uxtb	r2, r3
    56e6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    56ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56ee:	701a      	strb	r2, [r3, #0]
    56f0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    56f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	2bff      	cmp	r3, #255	; 0xff
    56fc:	d105      	bne.n	570a <send_boot+0xa06>
    56fe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5706:	2200      	movs	r2, #0
    5708:	701a      	strb	r2, [r3, #0]
    570a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    570e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	461a      	mov	r2, r3
    5716:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    571a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    571e:	7859      	ldrb	r1, [r3, #1]
    5720:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5728:	5499      	strb	r1, [r3, r2]
    572a:	4b8b      	ldr	r3, [pc, #556]	; (5958 <send_boot+0xc54>)
    572c:	781a      	ldrb	r2, [r3, #0]
    572e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5736:	781b      	ldrb	r3, [r3, #0]
    5738:	4413      	add	r3, r2
    573a:	b2da      	uxtb	r2, r3
    573c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5744:	701a      	strb	r2, [r3, #0]
    5746:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    574a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    574e:	781a      	ldrb	r2, [r3, #0]
    5750:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5758:	781b      	ldrb	r3, [r3, #0]
    575a:	4413      	add	r3, r2
    575c:	b2da      	uxtb	r2, r3
    575e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5766:	701a      	strb	r2, [r3, #0]
    5768:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    576c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5770:	781b      	ldrb	r3, [r3, #0]
    5772:	3301      	adds	r3, #1
    5774:	b2da      	uxtb	r2, r3
    5776:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    577a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    577e:	701a      	strb	r2, [r3, #0]
    5780:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5788:	781b      	ldrb	r3, [r3, #0]
    578a:	2bff      	cmp	r3, #255	; 0xff
    578c:	d105      	bne.n	579a <send_boot+0xa96>
    578e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5796:	2200      	movs	r2, #0
    5798:	701a      	strb	r2, [r3, #0]
    579a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    579e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57a2:	781b      	ldrb	r3, [r3, #0]
    57a4:	461a      	mov	r2, r3
    57a6:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    57aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57ae:	7899      	ldrb	r1, [r3, #2]
    57b0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    57b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57b8:	5499      	strb	r1, [r3, r2]
    57ba:	4b68      	ldr	r3, [pc, #416]	; (595c <send_boot+0xc58>)
    57bc:	781a      	ldrb	r2, [r3, #0]
    57be:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    57c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57c6:	781b      	ldrb	r3, [r3, #0]
    57c8:	4413      	add	r3, r2
    57ca:	b2da      	uxtb	r2, r3
    57cc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    57d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57d4:	701a      	strb	r2, [r3, #0]
    57d6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    57da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57de:	781a      	ldrb	r2, [r3, #0]
    57e0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    57e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57e8:	781b      	ldrb	r3, [r3, #0]
    57ea:	4413      	add	r3, r2
    57ec:	b2da      	uxtb	r2, r3
    57ee:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    57f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    57f6:	701a      	strb	r2, [r3, #0]
    57f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    57fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5800:	781b      	ldrb	r3, [r3, #0]
    5802:	3301      	adds	r3, #1
    5804:	b2da      	uxtb	r2, r3
    5806:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    580a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    580e:	701a      	strb	r2, [r3, #0]
    5810:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5818:	781b      	ldrb	r3, [r3, #0]
    581a:	2bff      	cmp	r3, #255	; 0xff
    581c:	d105      	bne.n	582a <send_boot+0xb26>
    581e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5826:	2200      	movs	r2, #0
    5828:	701a      	strb	r2, [r3, #0]
    582a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    582e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5832:	781b      	ldrb	r3, [r3, #0]
    5834:	461a      	mov	r2, r3
    5836:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    583a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    583e:	78d9      	ldrb	r1, [r3, #3]
    5840:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5848:	5499      	strb	r1, [r3, r2]
    584a:	4b45      	ldr	r3, [pc, #276]	; (5960 <send_boot+0xc5c>)
    584c:	781a      	ldrb	r2, [r3, #0]
    584e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5856:	781b      	ldrb	r3, [r3, #0]
    5858:	4413      	add	r3, r2
    585a:	b2da      	uxtb	r2, r3
    585c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5864:	701a      	strb	r2, [r3, #0]
    5866:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    586a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    586e:	781a      	ldrb	r2, [r3, #0]
    5870:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	4413      	add	r3, r2
    587c:	b2da      	uxtb	r2, r3
    587e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5886:	701a      	strb	r2, [r3, #0]
    5888:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    588c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	3301      	adds	r3, #1
    5894:	b2da      	uxtb	r2, r3
    5896:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    589a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    589e:	701a      	strb	r2, [r3, #0]
    58a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    58a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58a8:	781b      	ldrb	r3, [r3, #0]
    58aa:	2bff      	cmp	r3, #255	; 0xff
    58ac:	d105      	bne.n	58ba <send_boot+0xbb6>
    58ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    58b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58b6:	2200      	movs	r2, #0
    58b8:	701a      	strb	r2, [r3, #0]
    58ba:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    58be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58c2:	781b      	ldrb	r3, [r3, #0]
    58c4:	461a      	mov	r2, r3
    58c6:	f240 130a 	movw	r3, #266	; 0x10a
    58ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ce:	7819      	ldrb	r1, [r3, #0]
    58d0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    58d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58d8:	5499      	strb	r1, [r3, r2]
    58da:	f240 130a 	movw	r3, #266	; 0x10a
    58de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e2:	781a      	ldrb	r2, [r3, #0]
    58e4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    58e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	4413      	add	r3, r2
    58f0:	b2da      	uxtb	r2, r3
    58f2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    58f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    58fa:	701a      	strb	r2, [r3, #0]
    58fc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5904:	781a      	ldrb	r2, [r3, #0]
    5906:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    590a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    590e:	781b      	ldrb	r3, [r3, #0]
    5910:	4413      	add	r3, r2
    5912:	b2da      	uxtb	r2, r3
    5914:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    591c:	701a      	strb	r2, [r3, #0]
    591e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	3301      	adds	r3, #1
    592a:	b2da      	uxtb	r2, r3
    592c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5934:	701a      	strb	r2, [r3, #0]
    5936:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    593a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    593e:	781b      	ldrb	r3, [r3, #0]
    5940:	2bff      	cmp	r3, #255	; 0xff
    5942:	d10f      	bne.n	5964 <send_boot+0xc60>
    5944:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    594c:	2200      	movs	r2, #0
    594e:	701a      	strb	r2, [r3, #0]
    5950:	e008      	b.n	5964 <send_boot+0xc60>
    5952:	bf00      	nop
    5954:	2004babf 	.word	0x2004babf
    5958:	2004bab5 	.word	0x2004bab5
    595c:	2004bab6 	.word	0x2004bab6
    5960:	2004bab7 	.word	0x2004bab7
    5964:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	461a      	mov	r2, r3
    5970:	f240 130a 	movw	r3, #266	; 0x10a
    5974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5978:	7859      	ldrb	r1, [r3, #1]
    597a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    597e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5982:	5499      	strb	r1, [r3, r2]
    5984:	4bc5      	ldr	r3, [pc, #788]	; (5c9c <send_boot+0xf98>)
    5986:	781a      	ldrb	r2, [r3, #0]
    5988:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    598c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5990:	781b      	ldrb	r3, [r3, #0]
    5992:	4413      	add	r3, r2
    5994:	b2da      	uxtb	r2, r3
    5996:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    599a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    599e:	701a      	strb	r2, [r3, #0]
    59a0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    59a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59a8:	781a      	ldrb	r2, [r3, #0]
    59aa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    59ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59b2:	781b      	ldrb	r3, [r3, #0]
    59b4:	4413      	add	r3, r2
    59b6:	b2da      	uxtb	r2, r3
    59b8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    59bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59c0:	701a      	strb	r2, [r3, #0]
    59c2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    59c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59ca:	781b      	ldrb	r3, [r3, #0]
    59cc:	3301      	adds	r3, #1
    59ce:	b2da      	uxtb	r2, r3
    59d0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    59d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59d8:	701a      	strb	r2, [r3, #0]
    59da:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    59de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59e2:	781b      	ldrb	r3, [r3, #0]
    59e4:	2bff      	cmp	r3, #255	; 0xff
    59e6:	d105      	bne.n	59f4 <send_boot+0xcf0>
    59e8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    59ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59f0:	2200      	movs	r2, #0
    59f2:	701a      	strb	r2, [r3, #0]
    59f4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    59f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	461a      	mov	r2, r3
    5a00:	f240 130c 	movw	r3, #268	; 0x10c
    5a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a08:	7819      	ldrb	r1, [r3, #0]
    5a0a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a12:	5499      	strb	r1, [r3, r2]
    5a14:	f240 130c 	movw	r3, #268	; 0x10c
    5a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	4413      	add	r3, r2
    5a2a:	b2da      	uxtb	r2, r3
    5a2c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a34:	701a      	strb	r2, [r3, #0]
    5a36:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a3e:	781a      	ldrb	r2, [r3, #0]
    5a40:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a48:	781b      	ldrb	r3, [r3, #0]
    5a4a:	4413      	add	r3, r2
    5a4c:	b2da      	uxtb	r2, r3
    5a4e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a56:	701a      	strb	r2, [r3, #0]
    5a58:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	3301      	adds	r3, #1
    5a64:	b2da      	uxtb	r2, r3
    5a66:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a6e:	701a      	strb	r2, [r3, #0]
    5a70:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a78:	781b      	ldrb	r3, [r3, #0]
    5a7a:	2bff      	cmp	r3, #255	; 0xff
    5a7c:	d105      	bne.n	5a8a <send_boot+0xd86>
    5a7e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a86:	2200      	movs	r2, #0
    5a88:	701a      	strb	r2, [r3, #0]
    5a8a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	461a      	mov	r2, r3
    5a96:	f240 130c 	movw	r3, #268	; 0x10c
    5a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a9e:	7859      	ldrb	r1, [r3, #1]
    5aa0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5aa8:	5499      	strb	r1, [r3, r2]
    5aaa:	4b7d      	ldr	r3, [pc, #500]	; (5ca0 <send_boot+0xf9c>)
    5aac:	781a      	ldrb	r2, [r3, #0]
    5aae:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	4413      	add	r3, r2
    5aba:	b2da      	uxtb	r2, r3
    5abc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ac4:	701a      	strb	r2, [r3, #0]
    5ac6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ace:	781a      	ldrb	r2, [r3, #0]
    5ad0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ad8:	781b      	ldrb	r3, [r3, #0]
    5ada:	4413      	add	r3, r2
    5adc:	b2da      	uxtb	r2, r3
    5ade:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ae6:	701a      	strb	r2, [r3, #0]
    5ae8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5af0:	781b      	ldrb	r3, [r3, #0]
    5af2:	3301      	adds	r3, #1
    5af4:	b2da      	uxtb	r2, r3
    5af6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5afe:	701a      	strb	r2, [r3, #0]
    5b00:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	2bff      	cmp	r3, #255	; 0xff
    5b0c:	d105      	bne.n	5b1a <send_boot+0xe16>
    5b0e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b16:	2200      	movs	r2, #0
    5b18:	701a      	strb	r2, [r3, #0]
    5b1a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b22:	781b      	ldrb	r3, [r3, #0]
    5b24:	461a      	mov	r2, r3
    5b26:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b2e:	7819      	ldrb	r1, [r3, #0]
    5b30:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b38:	5499      	strb	r1, [r3, r2]
    5b3a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b42:	781b      	ldrb	r3, [r3, #0]
    5b44:	3301      	adds	r3, #1
    5b46:	b2da      	uxtb	r2, r3
    5b48:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b50:	701a      	strb	r2, [r3, #0]
    5b52:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b5a:	781b      	ldrb	r3, [r3, #0]
    5b5c:	2bff      	cmp	r3, #255	; 0xff
    5b5e:	d105      	bne.n	5b6c <send_boot+0xe68>
    5b60:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b68:	2200      	movs	r2, #0
    5b6a:	701a      	strb	r2, [r3, #0]
    5b6c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b74:	781b      	ldrb	r3, [r3, #0]
    5b76:	461a      	mov	r2, r3
    5b78:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b80:	7819      	ldrb	r1, [r3, #0]
    5b82:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b8a:	5499      	strb	r1, [r3, r2]
    5b8c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b94:	781b      	ldrb	r3, [r3, #0]
    5b96:	3301      	adds	r3, #1
    5b98:	b2da      	uxtb	r2, r3
    5b9a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ba2:	701a      	strb	r2, [r3, #0]
    5ba4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bac:	781b      	ldrb	r3, [r3, #0]
    5bae:	2bff      	cmp	r3, #255	; 0xff
    5bb0:	d105      	bne.n	5bbe <send_boot+0xeba>
    5bb2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bba:	2200      	movs	r2, #0
    5bbc:	701a      	strb	r2, [r3, #0]
    5bbe:	f248 0339 	movw	r3, #32825	; 0x8039
    5bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc6:	781b      	ldrb	r3, [r3, #0]
    5bc8:	b2db      	uxtb	r3, r3
    5bca:	f003 0310 	and.w	r3, r3, #16
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d15a      	bne.n	5c88 <send_boot+0xf84>
    5bd2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bda:	781b      	ldrb	r3, [r3, #0]
    5bdc:	b2db      	uxtb	r3, r3
    5bde:	461a      	mov	r2, r3
    5be0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5be8:	5c9a      	ldrb	r2, [r3, r2]
    5bea:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    5bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bf2:	701a      	strb	r2, [r3, #0]
    5bf4:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    5bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bfc:	2200      	movs	r2, #0
    5bfe:	701a      	strb	r2, [r3, #0]
    5c00:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c08:	781b      	ldrb	r3, [r3, #0]
    5c0a:	b2db      	uxtb	r3, r3
    5c0c:	3301      	adds	r3, #1
    5c0e:	b2da      	uxtb	r2, r3
    5c10:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c18:	701a      	strb	r2, [r3, #0]
    5c1a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c22:	781b      	ldrb	r3, [r3, #0]
    5c24:	b2db      	uxtb	r3, r3
    5c26:	2bff      	cmp	r3, #255	; 0xff
    5c28:	d105      	bne.n	5c36 <send_boot+0xf32>
    5c2a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c32:	2200      	movs	r2, #0
    5c34:	701a      	strb	r2, [r3, #0]
    5c36:	f248 0338 	movw	r3, #32824	; 0x8038
    5c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c3e:	f248 0238 	movw	r2, #32824	; 0x8038
    5c42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c46:	7812      	ldrb	r2, [r2, #0]
    5c48:	b2d2      	uxtb	r2, r2
    5c4a:	f042 0201 	orr.w	r2, r2, #1
    5c4e:	b2d2      	uxtb	r2, r2
    5c50:	701a      	strb	r2, [r3, #0]
    5c52:	f248 0339 	movw	r3, #32825	; 0x8039
    5c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5a:	f248 0239 	movw	r2, #32825	; 0x8039
    5c5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c62:	7812      	ldrb	r2, [r2, #0]
    5c64:	b2d2      	uxtb	r2, r2
    5c66:	f042 0210 	orr.w	r2, r2, #16
    5c6a:	b2d2      	uxtb	r2, r2
    5c6c:	701a      	strb	r2, [r3, #0]
    5c6e:	e00b      	b.n	5c88 <send_boot+0xf84>
    5c70:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    5c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c78:	781b      	ldrb	r3, [r3, #0]
    5c7a:	3301      	adds	r3, #1
    5c7c:	b2da      	uxtb	r2, r3
    5c7e:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    5c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c86:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    5c88:	f240 1305 	movw	r3, #261	; 0x105
    5c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c90:	2200      	movs	r2, #0
    5c92:	701a      	strb	r2, [r3, #0]
  }
}
    5c94:	46bd      	mov	sp, r7
    5c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9a:	4770      	bx	lr
    5c9c:	2000010b 	.word	0x2000010b
    5ca0:	2000010d 	.word	0x2000010d

00005ca4 <send_attitude>:
void send_attitude(void){ //499ms
    5ca4:	b480      	push	{r7}
    5ca6:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    5ca8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cb0:	781b      	ldrb	r3, [r3, #0]
    5cb2:	3301      	adds	r3, #1
    5cb4:	b2da      	uxtb	r2, r3
    5cb6:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cbe:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    5cc0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cc8:	781b      	ldrb	r3, [r3, #0]
    5cca:	2bfa      	cmp	r3, #250	; 0xfa
    5ccc:	d105      	bne.n	5cda <send_attitude+0x36>
    5cce:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cd6:	2200      	movs	r2, #0
    5cd8:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    5cda:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    5cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ce2:	781a      	ldrb	r2, [r3, #0]
    5ce4:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5ce8:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5cec:	fba3 1302 	umull	r1, r3, r3, r2
    5cf0:	0899      	lsrs	r1, r3, #2
    5cf2:	460b      	mov	r3, r1
    5cf4:	009b      	lsls	r3, r3, #2
    5cf6:	440b      	add	r3, r1
    5cf8:	1ad3      	subs	r3, r2, r3
    5cfa:	b2db      	uxtb	r3, r3
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	f040 84c1 	bne.w	6684 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    5d02:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d0a:	781a      	ldrb	r2, [r3, #0]
    5d0c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d14:	781b      	ldrb	r3, [r3, #0]
    5d16:	b2db      	uxtb	r3, r3
    5d18:	429a      	cmp	r2, r3
    5d1a:	d313      	bcc.n	5d44 <send_attitude+0xa0>
    5d1c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	b2db      	uxtb	r3, r3
    5d28:	461a      	mov	r2, r3
    5d2a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	1ad3      	subs	r3, r2, r3
    5d36:	33ff      	adds	r3, #255	; 0xff
    5d38:	2b10      	cmp	r3, #16
    5d3a:	bfd4      	ite	le
    5d3c:	2300      	movle	r3, #0
    5d3e:	2301      	movgt	r3, #1
    5d40:	b2db      	uxtb	r3, r3
    5d42:	e011      	b.n	5d68 <send_attitude+0xc4>
    5d44:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    5d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d4c:	781b      	ldrb	r3, [r3, #0]
    5d4e:	b2db      	uxtb	r3, r3
    5d50:	461a      	mov	r2, r3
    5d52:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d5a:	781b      	ldrb	r3, [r3, #0]
    5d5c:	1ad3      	subs	r3, r2, r3
    5d5e:	2b10      	cmp	r3, #16
    5d60:	bfd4      	ite	le
    5d62:	2300      	movle	r3, #0
    5d64:	2301      	movgt	r3, #1
    5d66:	b2db      	uxtb	r3, r3
    5d68:	2b00      	cmp	r3, #0
    5d6a:	f000 847f 	beq.w	666c <send_attitude+0x9c8>
    5d6e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d76:	781b      	ldrb	r3, [r3, #0]
    5d78:	461a      	mov	r2, r3
    5d7a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d82:	2105      	movs	r1, #5
    5d84:	5499      	strb	r1, [r3, r2]
    5d86:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d8e:	781b      	ldrb	r3, [r3, #0]
    5d90:	3301      	adds	r3, #1
    5d92:	b2da      	uxtb	r2, r3
    5d94:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d9c:	701a      	strb	r2, [r3, #0]
    5d9e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5da6:	781b      	ldrb	r3, [r3, #0]
    5da8:	2bff      	cmp	r3, #255	; 0xff
    5daa:	d105      	bne.n	5db8 <send_attitude+0x114>
    5dac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5db4:	2200      	movs	r2, #0
    5db6:	701a      	strb	r2, [r3, #0]
    5db8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dc0:	781b      	ldrb	r3, [r3, #0]
    5dc2:	461a      	mov	r2, r3
    5dc4:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dcc:	2106      	movs	r1, #6
    5dce:	5499      	strb	r1, [r3, r2]
    5dd0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd8:	781b      	ldrb	r3, [r3, #0]
    5dda:	3301      	adds	r3, #1
    5ddc:	b2da      	uxtb	r2, r3
    5dde:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5de6:	701a      	strb	r2, [r3, #0]
    5de8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	2bff      	cmp	r3, #255	; 0xff
    5df4:	d105      	bne.n	5e02 <send_attitude+0x15e>
    5df6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dfe:	2200      	movs	r2, #0
    5e00:	701a      	strb	r2, [r3, #0]
    5e02:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e0a:	2206      	movs	r2, #6
    5e0c:	701a      	strb	r2, [r3, #0]
    5e0e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e16:	2206      	movs	r2, #6
    5e18:	701a      	strb	r2, [r3, #0]
    5e1a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e22:	781b      	ldrb	r3, [r3, #0]
    5e24:	461a      	mov	r2, r3
    5e26:	f64b 2380 	movw	r3, #47744	; 0xba80
    5e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e2e:	7819      	ldrb	r1, [r3, #0]
    5e30:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e38:	5499      	strb	r1, [r3, r2]
    5e3a:	f64b 2380 	movw	r3, #47744	; 0xba80
    5e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e42:	781a      	ldrb	r2, [r3, #0]
    5e44:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e4c:	781b      	ldrb	r3, [r3, #0]
    5e4e:	4413      	add	r3, r2
    5e50:	b2da      	uxtb	r2, r3
    5e52:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e5a:	701a      	strb	r2, [r3, #0]
    5e5c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e64:	781a      	ldrb	r2, [r3, #0]
    5e66:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	4413      	add	r3, r2
    5e72:	b2da      	uxtb	r2, r3
    5e74:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e7c:	701a      	strb	r2, [r3, #0]
    5e7e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	3301      	adds	r3, #1
    5e8a:	b2da      	uxtb	r2, r3
    5e8c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e94:	701a      	strb	r2, [r3, #0]
    5e96:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	2bff      	cmp	r3, #255	; 0xff
    5ea2:	d105      	bne.n	5eb0 <send_attitude+0x20c>
    5ea4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eac:	2200      	movs	r2, #0
    5eae:	701a      	strb	r2, [r3, #0]
    5eb0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb8:	781b      	ldrb	r3, [r3, #0]
    5eba:	461a      	mov	r2, r3
    5ebc:	f64b 2380 	movw	r3, #47744	; 0xba80
    5ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ec4:	7859      	ldrb	r1, [r3, #1]
    5ec6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ece:	5499      	strb	r1, [r3, r2]
    5ed0:	4bd1      	ldr	r3, [pc, #836]	; (6218 <send_attitude+0x574>)
    5ed2:	781a      	ldrb	r2, [r3, #0]
    5ed4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5edc:	781b      	ldrb	r3, [r3, #0]
    5ede:	4413      	add	r3, r2
    5ee0:	b2da      	uxtb	r2, r3
    5ee2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eea:	701a      	strb	r2, [r3, #0]
    5eec:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef4:	781a      	ldrb	r2, [r3, #0]
    5ef6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5efe:	781b      	ldrb	r3, [r3, #0]
    5f00:	4413      	add	r3, r2
    5f02:	b2da      	uxtb	r2, r3
    5f04:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f0c:	701a      	strb	r2, [r3, #0]
    5f0e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f16:	781b      	ldrb	r3, [r3, #0]
    5f18:	3301      	adds	r3, #1
    5f1a:	b2da      	uxtb	r2, r3
    5f1c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f24:	701a      	strb	r2, [r3, #0]
    5f26:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	2bff      	cmp	r3, #255	; 0xff
    5f32:	d105      	bne.n	5f40 <send_attitude+0x29c>
    5f34:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f3c:	2200      	movs	r2, #0
    5f3e:	701a      	strb	r2, [r3, #0]
    5f40:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f48:	781b      	ldrb	r3, [r3, #0]
    5f4a:	461a      	mov	r2, r3
    5f4c:	f64b 2380 	movw	r3, #47744	; 0xba80
    5f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f54:	7899      	ldrb	r1, [r3, #2]
    5f56:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5e:	5499      	strb	r1, [r3, r2]
    5f60:	4bae      	ldr	r3, [pc, #696]	; (621c <send_attitude+0x578>)
    5f62:	781a      	ldrb	r2, [r3, #0]
    5f64:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6c:	781b      	ldrb	r3, [r3, #0]
    5f6e:	4413      	add	r3, r2
    5f70:	b2da      	uxtb	r2, r3
    5f72:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f7a:	701a      	strb	r2, [r3, #0]
    5f7c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f84:	781a      	ldrb	r2, [r3, #0]
    5f86:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	4413      	add	r3, r2
    5f92:	b2da      	uxtb	r2, r3
    5f94:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    5f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f9c:	701a      	strb	r2, [r3, #0]
    5f9e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	3301      	adds	r3, #1
    5faa:	b2da      	uxtb	r2, r3
    5fac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fb4:	701a      	strb	r2, [r3, #0]
    5fb6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbe:	781b      	ldrb	r3, [r3, #0]
    5fc0:	2bff      	cmp	r3, #255	; 0xff
    5fc2:	d105      	bne.n	5fd0 <send_attitude+0x32c>
    5fc4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fcc:	2200      	movs	r2, #0
    5fce:	701a      	strb	r2, [r3, #0]
    5fd0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    5fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	461a      	mov	r2, r3
    5fdc:	f64b 2380 	movw	r3, #47744	; 0xba80
    5fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe4:	78d9      	ldrb	r1, [r3, #3]
    5fe6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    5fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fee:	5499      	strb	r1, [r3, r2]
    5ff0:	4b8b      	ldr	r3, [pc, #556]	; (6220 <send_attitude+0x57c>)
    5ff2:	781a      	ldrb	r2, [r3, #0]
    5ff4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    5ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	4413      	add	r3, r2
    6000:	b2da      	uxtb	r2, r3
    6002:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    600a:	701a      	strb	r2, [r3, #0]
    600c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6014:	781a      	ldrb	r2, [r3, #0]
    6016:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    601a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601e:	781b      	ldrb	r3, [r3, #0]
    6020:	4413      	add	r3, r2
    6022:	b2da      	uxtb	r2, r3
    6024:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    602c:	701a      	strb	r2, [r3, #0]
    602e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6036:	781b      	ldrb	r3, [r3, #0]
    6038:	3301      	adds	r3, #1
    603a:	b2da      	uxtb	r2, r3
    603c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6044:	701a      	strb	r2, [r3, #0]
    6046:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    604a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	2bff      	cmp	r3, #255	; 0xff
    6052:	d105      	bne.n	6060 <send_attitude+0x3bc>
    6054:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605c:	2200      	movs	r2, #0
    605e:	701a      	strb	r2, [r3, #0]
    6060:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	461a      	mov	r2, r3
    606c:	f64b 2384 	movw	r3, #47748	; 0xba84
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	7819      	ldrb	r1, [r3, #0]
    6076:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    607a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    607e:	5499      	strb	r1, [r3, r2]
    6080:	f64b 2384 	movw	r3, #47748	; 0xba84
    6084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6088:	781a      	ldrb	r2, [r3, #0]
    608a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    608e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6092:	781b      	ldrb	r3, [r3, #0]
    6094:	4413      	add	r3, r2
    6096:	b2da      	uxtb	r2, r3
    6098:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a0:	701a      	strb	r2, [r3, #0]
    60a2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    60a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60aa:	781a      	ldrb	r2, [r3, #0]
    60ac:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    60b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	4413      	add	r3, r2
    60b8:	b2da      	uxtb	r2, r3
    60ba:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    60be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c2:	701a      	strb	r2, [r3, #0]
    60c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    60c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	3301      	adds	r3, #1
    60d0:	b2da      	uxtb	r2, r3
    60d2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    60d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60da:	701a      	strb	r2, [r3, #0]
    60dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    60e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e4:	781b      	ldrb	r3, [r3, #0]
    60e6:	2bff      	cmp	r3, #255	; 0xff
    60e8:	d105      	bne.n	60f6 <send_attitude+0x452>
    60ea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    60ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f2:	2200      	movs	r2, #0
    60f4:	701a      	strb	r2, [r3, #0]
    60f6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    60fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fe:	781b      	ldrb	r3, [r3, #0]
    6100:	461a      	mov	r2, r3
    6102:	f64b 2384 	movw	r3, #47748	; 0xba84
    6106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610a:	7859      	ldrb	r1, [r3, #1]
    610c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6114:	5499      	strb	r1, [r3, r2]
    6116:	4b43      	ldr	r3, [pc, #268]	; (6224 <send_attitude+0x580>)
    6118:	781a      	ldrb	r2, [r3, #0]
    611a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	4413      	add	r3, r2
    6126:	b2da      	uxtb	r2, r3
    6128:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	701a      	strb	r2, [r3, #0]
    6132:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613a:	781a      	ldrb	r2, [r3, #0]
    613c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	4413      	add	r3, r2
    6148:	b2da      	uxtb	r2, r3
    614a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    614e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6152:	701a      	strb	r2, [r3, #0]
    6154:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615c:	781b      	ldrb	r3, [r3, #0]
    615e:	3301      	adds	r3, #1
    6160:	b2da      	uxtb	r2, r3
    6162:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616a:	701a      	strb	r2, [r3, #0]
    616c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6174:	781b      	ldrb	r3, [r3, #0]
    6176:	2bff      	cmp	r3, #255	; 0xff
    6178:	d105      	bne.n	6186 <send_attitude+0x4e2>
    617a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	2200      	movs	r2, #0
    6184:	701a      	strb	r2, [r3, #0]
    6186:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	461a      	mov	r2, r3
    6192:	f64b 2384 	movw	r3, #47748	; 0xba84
    6196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619a:	7899      	ldrb	r1, [r3, #2]
    619c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    61a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a4:	5499      	strb	r1, [r3, r2]
    61a6:	4b20      	ldr	r3, [pc, #128]	; (6228 <send_attitude+0x584>)
    61a8:	781a      	ldrb	r2, [r3, #0]
    61aa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    61ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b2:	781b      	ldrb	r3, [r3, #0]
    61b4:	4413      	add	r3, r2
    61b6:	b2da      	uxtb	r2, r3
    61b8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    61bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c0:	701a      	strb	r2, [r3, #0]
    61c2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    61c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ca:	781a      	ldrb	r2, [r3, #0]
    61cc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    61d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d4:	781b      	ldrb	r3, [r3, #0]
    61d6:	4413      	add	r3, r2
    61d8:	b2da      	uxtb	r2, r3
    61da:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    61de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e2:	701a      	strb	r2, [r3, #0]
    61e4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    61e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ec:	781b      	ldrb	r3, [r3, #0]
    61ee:	3301      	adds	r3, #1
    61f0:	b2da      	uxtb	r2, r3
    61f2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    61f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fa:	701a      	strb	r2, [r3, #0]
    61fc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6204:	781b      	ldrb	r3, [r3, #0]
    6206:	2bff      	cmp	r3, #255	; 0xff
    6208:	d110      	bne.n	622c <send_attitude+0x588>
    620a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    620e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6212:	2200      	movs	r2, #0
    6214:	701a      	strb	r2, [r3, #0]
    6216:	e009      	b.n	622c <send_attitude+0x588>
    6218:	2004ba81 	.word	0x2004ba81
    621c:	2004ba82 	.word	0x2004ba82
    6220:	2004ba83 	.word	0x2004ba83
    6224:	2004ba85 	.word	0x2004ba85
    6228:	2004ba86 	.word	0x2004ba86
    622c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6234:	781b      	ldrb	r3, [r3, #0]
    6236:	461a      	mov	r2, r3
    6238:	f64b 2384 	movw	r3, #47748	; 0xba84
    623c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6240:	78d9      	ldrb	r1, [r3, #3]
    6242:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624a:	5499      	strb	r1, [r3, r2]
    624c:	4bc2      	ldr	r3, [pc, #776]	; (6558 <send_attitude+0x8b4>)
    624e:	781a      	ldrb	r2, [r3, #0]
    6250:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6258:	781b      	ldrb	r3, [r3, #0]
    625a:	4413      	add	r3, r2
    625c:	b2da      	uxtb	r2, r3
    625e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6266:	701a      	strb	r2, [r3, #0]
    6268:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    626c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6270:	781a      	ldrb	r2, [r3, #0]
    6272:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	4413      	add	r3, r2
    627e:	b2da      	uxtb	r2, r3
    6280:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6288:	701a      	strb	r2, [r3, #0]
    628a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    628e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6292:	781b      	ldrb	r3, [r3, #0]
    6294:	3301      	adds	r3, #1
    6296:	b2da      	uxtb	r2, r3
    6298:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a0:	701a      	strb	r2, [r3, #0]
    62a2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    62a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	2bff      	cmp	r3, #255	; 0xff
    62ae:	d105      	bne.n	62bc <send_attitude+0x618>
    62b0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    62b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b8:	2200      	movs	r2, #0
    62ba:	701a      	strb	r2, [r3, #0]
    62bc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    62c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c4:	781b      	ldrb	r3, [r3, #0]
    62c6:	461a      	mov	r2, r3
    62c8:	f64b 2388 	movw	r3, #47752	; 0xba88
    62cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d0:	7819      	ldrb	r1, [r3, #0]
    62d2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    62d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62da:	5499      	strb	r1, [r3, r2]
    62dc:	f64b 2388 	movw	r3, #47752	; 0xba88
    62e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e4:	781a      	ldrb	r2, [r3, #0]
    62e6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	4413      	add	r3, r2
    62f2:	b2da      	uxtb	r2, r3
    62f4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    62f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fc:	701a      	strb	r2, [r3, #0]
    62fe:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6306:	781a      	ldrb	r2, [r3, #0]
    6308:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	4413      	add	r3, r2
    6314:	b2da      	uxtb	r2, r3
    6316:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    631a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631e:	701a      	strb	r2, [r3, #0]
    6320:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	3301      	adds	r3, #1
    632c:	b2da      	uxtb	r2, r3
    632e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	701a      	strb	r2, [r3, #0]
    6338:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    633c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6340:	781b      	ldrb	r3, [r3, #0]
    6342:	2bff      	cmp	r3, #255	; 0xff
    6344:	d105      	bne.n	6352 <send_attitude+0x6ae>
    6346:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    634a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634e:	2200      	movs	r2, #0
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	461a      	mov	r2, r3
    635e:	f64b 2388 	movw	r3, #47752	; 0xba88
    6362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6366:	7859      	ldrb	r1, [r3, #1]
    6368:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    636c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6370:	5499      	strb	r1, [r3, r2]
    6372:	4b7a      	ldr	r3, [pc, #488]	; (655c <send_attitude+0x8b8>)
    6374:	781a      	ldrb	r2, [r3, #0]
    6376:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    637a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    637e:	781b      	ldrb	r3, [r3, #0]
    6380:	4413      	add	r3, r2
    6382:	b2da      	uxtb	r2, r3
    6384:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638c:	701a      	strb	r2, [r3, #0]
    638e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6396:	781a      	ldrb	r2, [r3, #0]
    6398:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	4413      	add	r3, r2
    63a4:	b2da      	uxtb	r2, r3
    63a6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    63aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ae:	701a      	strb	r2, [r3, #0]
    63b0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    63b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	3301      	adds	r3, #1
    63bc:	b2da      	uxtb	r2, r3
    63be:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    63c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c6:	701a      	strb	r2, [r3, #0]
    63c8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    63cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	2bff      	cmp	r3, #255	; 0xff
    63d4:	d105      	bne.n	63e2 <send_attitude+0x73e>
    63d6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    63da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63de:	2200      	movs	r2, #0
    63e0:	701a      	strb	r2, [r3, #0]
    63e2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	461a      	mov	r2, r3
    63ee:	f64b 2388 	movw	r3, #47752	; 0xba88
    63f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f6:	7899      	ldrb	r1, [r3, #2]
    63f8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    63fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6400:	5499      	strb	r1, [r3, r2]
    6402:	4b57      	ldr	r3, [pc, #348]	; (6560 <send_attitude+0x8bc>)
    6404:	781a      	ldrb	r2, [r3, #0]
    6406:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640e:	781b      	ldrb	r3, [r3, #0]
    6410:	4413      	add	r3, r2
    6412:	b2da      	uxtb	r2, r3
    6414:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	701a      	strb	r2, [r3, #0]
    641e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6426:	781a      	ldrb	r2, [r3, #0]
    6428:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    642c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6430:	781b      	ldrb	r3, [r3, #0]
    6432:	4413      	add	r3, r2
    6434:	b2da      	uxtb	r2, r3
    6436:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643e:	701a      	strb	r2, [r3, #0]
    6440:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6448:	781b      	ldrb	r3, [r3, #0]
    644a:	3301      	adds	r3, #1
    644c:	b2da      	uxtb	r2, r3
    644e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6456:	701a      	strb	r2, [r3, #0]
    6458:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	2bff      	cmp	r3, #255	; 0xff
    6464:	d105      	bne.n	6472 <send_attitude+0x7ce>
    6466:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646e:	2200      	movs	r2, #0
    6470:	701a      	strb	r2, [r3, #0]
    6472:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647a:	781b      	ldrb	r3, [r3, #0]
    647c:	461a      	mov	r2, r3
    647e:	f64b 2388 	movw	r3, #47752	; 0xba88
    6482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6486:	78d9      	ldrb	r1, [r3, #3]
    6488:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    648c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6490:	5499      	strb	r1, [r3, r2]
    6492:	4b34      	ldr	r3, [pc, #208]	; (6564 <send_attitude+0x8c0>)
    6494:	781a      	ldrb	r2, [r3, #0]
    6496:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649e:	781b      	ldrb	r3, [r3, #0]
    64a0:	4413      	add	r3, r2
    64a2:	b2da      	uxtb	r2, r3
    64a4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    64a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ac:	701a      	strb	r2, [r3, #0]
    64ae:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    64b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b6:	781a      	ldrb	r2, [r3, #0]
    64b8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    64bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c0:	781b      	ldrb	r3, [r3, #0]
    64c2:	4413      	add	r3, r2
    64c4:	b2da      	uxtb	r2, r3
    64c6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    64ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ce:	701a      	strb	r2, [r3, #0]
    64d0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    64d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d8:	781b      	ldrb	r3, [r3, #0]
    64da:	3301      	adds	r3, #1
    64dc:	b2da      	uxtb	r2, r3
    64de:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	701a      	strb	r2, [r3, #0]
    64e8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    64ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f0:	781b      	ldrb	r3, [r3, #0]
    64f2:	2bff      	cmp	r3, #255	; 0xff
    64f4:	d105      	bne.n	6502 <send_attitude+0x85e>
    64f6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	2200      	movs	r2, #0
    6500:	701a      	strb	r2, [r3, #0]
    6502:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	461a      	mov	r2, r3
    650e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	7819      	ldrb	r1, [r3, #0]
    6518:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6520:	5499      	strb	r1, [r3, r2]
    6522:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652a:	781b      	ldrb	r3, [r3, #0]
    652c:	3301      	adds	r3, #1
    652e:	b2da      	uxtb	r2, r3
    6530:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6538:	701a      	strb	r2, [r3, #0]
    653a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    653e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6542:	781b      	ldrb	r3, [r3, #0]
    6544:	2bff      	cmp	r3, #255	; 0xff
    6546:	d10f      	bne.n	6568 <send_attitude+0x8c4>
    6548:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    654c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6550:	2200      	movs	r2, #0
    6552:	701a      	strb	r2, [r3, #0]
    6554:	e008      	b.n	6568 <send_attitude+0x8c4>
    6556:	bf00      	nop
    6558:	2004ba87 	.word	0x2004ba87
    655c:	2004ba89 	.word	0x2004ba89
    6560:	2004ba8a 	.word	0x2004ba8a
    6564:	2004ba8b 	.word	0x2004ba8b
    6568:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	461a      	mov	r2, r3
    6574:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657c:	7819      	ldrb	r1, [r3, #0]
    657e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6586:	5499      	strb	r1, [r3, r2]
    6588:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    658c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6590:	781b      	ldrb	r3, [r3, #0]
    6592:	3301      	adds	r3, #1
    6594:	b2da      	uxtb	r2, r3
    6596:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    659a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    659e:	701a      	strb	r2, [r3, #0]
    65a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    65a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a8:	781b      	ldrb	r3, [r3, #0]
    65aa:	2bff      	cmp	r3, #255	; 0xff
    65ac:	d105      	bne.n	65ba <send_attitude+0x916>
    65ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    65b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b6:	2200      	movs	r2, #0
    65b8:	701a      	strb	r2, [r3, #0]
    65ba:	f248 0339 	movw	r3, #32825	; 0x8039
    65be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	b2db      	uxtb	r3, r3
    65c6:	f003 0310 	and.w	r3, r3, #16
    65ca:	2b00      	cmp	r3, #0
    65cc:	d15a      	bne.n	6684 <send_attitude+0x9e0>
    65ce:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    65d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d6:	781b      	ldrb	r3, [r3, #0]
    65d8:	b2db      	uxtb	r3, r3
    65da:	461a      	mov	r2, r3
    65dc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    65e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e4:	5c9a      	ldrb	r2, [r3, r2]
    65e6:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	701a      	strb	r2, [r3, #0]
    65f0:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    65f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f8:	2200      	movs	r2, #0
    65fa:	701a      	strb	r2, [r3, #0]
    65fc:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6604:	781b      	ldrb	r3, [r3, #0]
    6606:	b2db      	uxtb	r3, r3
    6608:	3301      	adds	r3, #1
    660a:	b2da      	uxtb	r2, r3
    660c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6614:	701a      	strb	r2, [r3, #0]
    6616:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	781b      	ldrb	r3, [r3, #0]
    6620:	b2db      	uxtb	r3, r3
    6622:	2bff      	cmp	r3, #255	; 0xff
    6624:	d105      	bne.n	6632 <send_attitude+0x98e>
    6626:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    662a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662e:	2200      	movs	r2, #0
    6630:	701a      	strb	r2, [r3, #0]
    6632:	f248 0338 	movw	r3, #32824	; 0x8038
    6636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663a:	f248 0238 	movw	r2, #32824	; 0x8038
    663e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6642:	7812      	ldrb	r2, [r2, #0]
    6644:	b2d2      	uxtb	r2, r2
    6646:	f042 0201 	orr.w	r2, r2, #1
    664a:	b2d2      	uxtb	r2, r2
    664c:	701a      	strb	r2, [r3, #0]
    664e:	f248 0339 	movw	r3, #32825	; 0x8039
    6652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6656:	f248 0239 	movw	r2, #32825	; 0x8039
    665a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    665e:	7812      	ldrb	r2, [r2, #0]
    6660:	b2d2      	uxtb	r2, r2
    6662:	f042 0210 	orr.w	r2, r2, #16
    6666:	b2d2      	uxtb	r2, r2
    6668:	701a      	strb	r2, [r3, #0]
    666a:	e00b      	b.n	6684 <send_attitude+0x9e0>
    666c:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    6670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6674:	781b      	ldrb	r3, [r3, #0]
    6676:	3301      	adds	r3, #1
    6678:	b2da      	uxtb	r2, r3
    667a:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    667e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6682:	701a      	strb	r2, [r3, #0]
  }
}
    6684:	46bd      	mov	sp, r7
    6686:	f85d 7b04 	ldr.w	r7, [sp], #4
    668a:	4770      	bx	lr

0000668c <send_adc>:
  
void send_adc(void){  //500ms
    668c:	b480      	push	{r7}
    668e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    6690:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6698:	781a      	ldrb	r2, [r3, #0]
    669a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    669e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    66a2:	fba3 1302 	umull	r1, r3, r3, r2
    66a6:	0899      	lsrs	r1, r3, #2
    66a8:	460b      	mov	r3, r1
    66aa:	009b      	lsls	r3, r3, #2
    66ac:	440b      	add	r3, r1
    66ae:	1ad3      	subs	r3, r2, r3
    66b0:	b2db      	uxtb	r3, r3
    66b2:	2b01      	cmp	r3, #1
    66b4:	f040 8269 	bne.w	6b8a <send_adc+0x4fe>
    66b8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    66bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c0:	781a      	ldrb	r2, [r3, #0]
    66c2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    66c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ca:	781b      	ldrb	r3, [r3, #0]
    66cc:	b2db      	uxtb	r3, r3
    66ce:	429a      	cmp	r2, r3
    66d0:	d313      	bcc.n	66fa <send_adc+0x6e>
    66d2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    66d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	b2db      	uxtb	r3, r3
    66de:	461a      	mov	r2, r3
    66e0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    66e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	1ad3      	subs	r3, r2, r3
    66ec:	33ff      	adds	r3, #255	; 0xff
    66ee:	2b08      	cmp	r3, #8
    66f0:	bfd4      	ite	le
    66f2:	2300      	movle	r3, #0
    66f4:	2301      	movgt	r3, #1
    66f6:	b2db      	uxtb	r3, r3
    66f8:	e011      	b.n	671e <send_adc+0x92>
    66fa:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    66fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	b2db      	uxtb	r3, r3
    6706:	461a      	mov	r2, r3
    6708:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    670c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	1ad3      	subs	r3, r2, r3
    6714:	2b08      	cmp	r3, #8
    6716:	bfd4      	ite	le
    6718:	2300      	movle	r3, #0
    671a:	2301      	movgt	r3, #1
    671c:	b2db      	uxtb	r3, r3
    671e:	2b00      	cmp	r3, #0
    6720:	f000 8227 	beq.w	6b72 <send_adc+0x4e6>
    6724:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	461a      	mov	r2, r3
    6730:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6738:	2105      	movs	r1, #5
    673a:	5499      	strb	r1, [r3, r2]
    673c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	3301      	adds	r3, #1
    6748:	b2da      	uxtb	r2, r3
    674a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    674e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6752:	701a      	strb	r2, [r3, #0]
    6754:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	781b      	ldrb	r3, [r3, #0]
    675e:	2bff      	cmp	r3, #255	; 0xff
    6760:	d105      	bne.n	676e <send_adc+0xe2>
    6762:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676a:	2200      	movs	r2, #0
    676c:	701a      	strb	r2, [r3, #0]
    676e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6776:	781b      	ldrb	r3, [r3, #0]
    6778:	461a      	mov	r2, r3
    677a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    677e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6782:	2107      	movs	r1, #7
    6784:	5499      	strb	r1, [r3, r2]
    6786:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    678a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	3301      	adds	r3, #1
    6792:	b2da      	uxtb	r2, r3
    6794:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679c:	701a      	strb	r2, [r3, #0]
    679e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    67a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a6:	781b      	ldrb	r3, [r3, #0]
    67a8:	2bff      	cmp	r3, #255	; 0xff
    67aa:	d105      	bne.n	67b8 <send_adc+0x12c>
    67ac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    67b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b4:	2200      	movs	r2, #0
    67b6:	701a      	strb	r2, [r3, #0]
    67b8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    67bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c0:	2207      	movs	r2, #7
    67c2:	701a      	strb	r2, [r3, #0]
    67c4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    67c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67cc:	2207      	movs	r2, #7
    67ce:	701a      	strb	r2, [r3, #0]
    67d0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    67d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d8:	781b      	ldrb	r3, [r3, #0]
    67da:	461a      	mov	r2, r3
    67dc:	f24b 7360 	movw	r3, #46944	; 0xb760
    67e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e4:	7819      	ldrb	r1, [r3, #0]
    67e6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    67ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ee:	5499      	strb	r1, [r3, r2]
    67f0:	f24b 7360 	movw	r3, #46944	; 0xb760
    67f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f8:	781a      	ldrb	r2, [r3, #0]
    67fa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    67fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	4413      	add	r3, r2
    6806:	b2da      	uxtb	r2, r3
    6808:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6810:	701a      	strb	r2, [r3, #0]
    6812:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681a:	781a      	ldrb	r2, [r3, #0]
    681c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	4413      	add	r3, r2
    6828:	b2da      	uxtb	r2, r3
    682a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    682e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	3301      	adds	r3, #1
    6840:	b2da      	uxtb	r2, r3
    6842:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684a:	701a      	strb	r2, [r3, #0]
    684c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	781b      	ldrb	r3, [r3, #0]
    6856:	2bff      	cmp	r3, #255	; 0xff
    6858:	d105      	bne.n	6866 <send_adc+0x1da>
    685a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    685e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6862:	2200      	movs	r2, #0
    6864:	701a      	strb	r2, [r3, #0]
    6866:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	461a      	mov	r2, r3
    6872:	f24b 7360 	movw	r3, #46944	; 0xb760
    6876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687a:	7859      	ldrb	r1, [r3, #1]
    687c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	5499      	strb	r1, [r3, r2]
    6886:	4bc3      	ldr	r3, [pc, #780]	; (6b94 <send_adc+0x508>)
    6888:	781a      	ldrb	r2, [r3, #0]
    688a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    688e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	4413      	add	r3, r2
    6896:	b2da      	uxtb	r2, r3
    6898:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    689c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a0:	701a      	strb	r2, [r3, #0]
    68a2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    68a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68aa:	781a      	ldrb	r2, [r3, #0]
    68ac:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	781b      	ldrb	r3, [r3, #0]
    68b6:	4413      	add	r3, r2
    68b8:	b2da      	uxtb	r2, r3
    68ba:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    68be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c2:	701a      	strb	r2, [r3, #0]
    68c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	3301      	adds	r3, #1
    68d0:	b2da      	uxtb	r2, r3
    68d2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    68d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68da:	701a      	strb	r2, [r3, #0]
    68dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	781b      	ldrb	r3, [r3, #0]
    68e6:	2bff      	cmp	r3, #255	; 0xff
    68e8:	d105      	bne.n	68f6 <send_adc+0x26a>
    68ea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    68ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f2:	2200      	movs	r2, #0
    68f4:	701a      	strb	r2, [r3, #0]
    68f6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    68fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	461a      	mov	r2, r3
    6902:	f24b 7362 	movw	r3, #46946	; 0xb762
    6906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690a:	7819      	ldrb	r1, [r3, #0]
    690c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6914:	5499      	strb	r1, [r3, r2]
    6916:	f24b 7362 	movw	r3, #46946	; 0xb762
    691a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691e:	781a      	ldrb	r2, [r3, #0]
    6920:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6928:	781b      	ldrb	r3, [r3, #0]
    692a:	4413      	add	r3, r2
    692c:	b2da      	uxtb	r2, r3
    692e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6936:	701a      	strb	r2, [r3, #0]
    6938:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    693c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6940:	781a      	ldrb	r2, [r3, #0]
    6942:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	4413      	add	r3, r2
    694e:	b2da      	uxtb	r2, r3
    6950:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6958:	701a      	strb	r2, [r3, #0]
    695a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	3301      	adds	r3, #1
    6966:	b2da      	uxtb	r2, r3
    6968:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    696c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6970:	701a      	strb	r2, [r3, #0]
    6972:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	781b      	ldrb	r3, [r3, #0]
    697c:	2bff      	cmp	r3, #255	; 0xff
    697e:	d105      	bne.n	698c <send_adc+0x300>
    6980:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6988:	2200      	movs	r2, #0
    698a:	701a      	strb	r2, [r3, #0]
    698c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	461a      	mov	r2, r3
    6998:	f24b 7362 	movw	r3, #46946	; 0xb762
    699c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a0:	7859      	ldrb	r1, [r3, #1]
    69a2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	5499      	strb	r1, [r3, r2]
    69ac:	4b7a      	ldr	r3, [pc, #488]	; (6b98 <send_adc+0x50c>)
    69ae:	781a      	ldrb	r2, [r3, #0]
    69b0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    69b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	4413      	add	r3, r2
    69bc:	b2da      	uxtb	r2, r3
    69be:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	701a      	strb	r2, [r3, #0]
    69c8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    69cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d0:	781a      	ldrb	r2, [r3, #0]
    69d2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	4413      	add	r3, r2
    69de:	b2da      	uxtb	r2, r3
    69e0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    69e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e8:	701a      	strb	r2, [r3, #0]
    69ea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	3301      	adds	r3, #1
    69f6:	b2da      	uxtb	r2, r3
    69f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    69fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	2bff      	cmp	r3, #255	; 0xff
    6a0e:	d105      	bne.n	6a1c <send_adc+0x390>
    6a10:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a18:	2200      	movs	r2, #0
    6a1a:	701a      	strb	r2, [r3, #0]
    6a1c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	461a      	mov	r2, r3
    6a28:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a30:	7819      	ldrb	r1, [r3, #0]
    6a32:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	5499      	strb	r1, [r3, r2]
    6a3c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	3301      	adds	r3, #1
    6a48:	b2da      	uxtb	r2, r3
    6a4a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	701a      	strb	r2, [r3, #0]
    6a54:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	2bff      	cmp	r3, #255	; 0xff
    6a60:	d105      	bne.n	6a6e <send_adc+0x3e2>
    6a62:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	2200      	movs	r2, #0
    6a6c:	701a      	strb	r2, [r3, #0]
    6a6e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	461a      	mov	r2, r3
    6a7a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	7819      	ldrb	r1, [r3, #0]
    6a84:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	5499      	strb	r1, [r3, r2]
    6a8e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	3301      	adds	r3, #1
    6a9a:	b2da      	uxtb	r2, r3
    6a9c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	701a      	strb	r2, [r3, #0]
    6aa6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aae:	781b      	ldrb	r3, [r3, #0]
    6ab0:	2bff      	cmp	r3, #255	; 0xff
    6ab2:	d105      	bne.n	6ac0 <send_adc+0x434>
    6ab4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	2200      	movs	r2, #0
    6abe:	701a      	strb	r2, [r3, #0]
    6ac0:	f248 0339 	movw	r3, #32825	; 0x8039
    6ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	b2db      	uxtb	r3, r3
    6acc:	f003 0310 	and.w	r3, r3, #16
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d15a      	bne.n	6b8a <send_adc+0x4fe>
    6ad4:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6adc:	781b      	ldrb	r3, [r3, #0]
    6ade:	b2db      	uxtb	r3, r3
    6ae0:	461a      	mov	r2, r3
    6ae2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aea:	5c9a      	ldrb	r2, [r3, r2]
    6aec:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    6af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af4:	701a      	strb	r2, [r3, #0]
    6af6:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    6afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afe:	2200      	movs	r2, #0
    6b00:	701a      	strb	r2, [r3, #0]
    6b02:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	b2db      	uxtb	r3, r3
    6b0e:	3301      	adds	r3, #1
    6b10:	b2da      	uxtb	r2, r3
    6b12:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	b2db      	uxtb	r3, r3
    6b28:	2bff      	cmp	r3, #255	; 0xff
    6b2a:	d105      	bne.n	6b38 <send_adc+0x4ac>
    6b2c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b34:	2200      	movs	r2, #0
    6b36:	701a      	strb	r2, [r3, #0]
    6b38:	f248 0338 	movw	r3, #32824	; 0x8038
    6b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b40:	f248 0238 	movw	r2, #32824	; 0x8038
    6b44:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b48:	7812      	ldrb	r2, [r2, #0]
    6b4a:	b2d2      	uxtb	r2, r2
    6b4c:	f042 0201 	orr.w	r2, r2, #1
    6b50:	b2d2      	uxtb	r2, r2
    6b52:	701a      	strb	r2, [r3, #0]
    6b54:	f248 0339 	movw	r3, #32825	; 0x8039
    6b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5c:	f248 0239 	movw	r2, #32825	; 0x8039
    6b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b64:	7812      	ldrb	r2, [r2, #0]
    6b66:	b2d2      	uxtb	r2, r2
    6b68:	f042 0210 	orr.w	r2, r2, #16
    6b6c:	b2d2      	uxtb	r2, r2
    6b6e:	701a      	strb	r2, [r3, #0]
    6b70:	e00b      	b.n	6b8a <send_adc+0x4fe>
    6b72:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    6b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7a:	781b      	ldrb	r3, [r3, #0]
    6b7c:	3301      	adds	r3, #1
    6b7e:	b2da      	uxtb	r2, r3
    6b80:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    6b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b88:	701a      	strb	r2, [r3, #0]
}
    6b8a:	46bd      	mov	sp, r7
    6b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b90:	4770      	bx	lr
    6b92:	bf00      	nop
    6b94:	2004b761 	.word	0x2004b761
    6b98:	2004b763 	.word	0x2004b763

00006b9c <send_settings>:
void send_settings(void){ //500ms
    6b9c:	b480      	push	{r7}
    6b9e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    6ba0:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    6ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba8:	781a      	ldrb	r2, [r3, #0]
    6baa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6bae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6bb2:	fba3 1302 	umull	r1, r3, r3, r2
    6bb6:	0899      	lsrs	r1, r3, #2
    6bb8:	460b      	mov	r3, r1
    6bba:	009b      	lsls	r3, r3, #2
    6bbc:	440b      	add	r3, r1
    6bbe:	1ad3      	subs	r3, r2, r3
    6bc0:	b2db      	uxtb	r3, r3
    6bc2:	2b02      	cmp	r3, #2
    6bc4:	f040 83e7 	bne.w	7396 <send_settings+0x7fa>
    6bc8:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    6bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd0:	781b      	ldrb	r3, [r3, #0]
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	f000 83df 	beq.w	7396 <send_settings+0x7fa>
    6bd8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be0:	781a      	ldrb	r2, [r3, #0]
    6be2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bea:	781b      	ldrb	r3, [r3, #0]
    6bec:	b2db      	uxtb	r3, r3
    6bee:	429a      	cmp	r2, r3
    6bf0:	d313      	bcc.n	6c1a <send_settings+0x7e>
    6bf2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	781b      	ldrb	r3, [r3, #0]
    6bfc:	b2db      	uxtb	r3, r3
    6bfe:	461a      	mov	r2, r3
    6c00:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c08:	781b      	ldrb	r3, [r3, #0]
    6c0a:	1ad3      	subs	r3, r2, r3
    6c0c:	33ff      	adds	r3, #255	; 0xff
    6c0e:	2b0d      	cmp	r3, #13
    6c10:	bfd4      	ite	le
    6c12:	2300      	movle	r3, #0
    6c14:	2301      	movgt	r3, #1
    6c16:	b2db      	uxtb	r3, r3
    6c18:	e011      	b.n	6c3e <send_settings+0xa2>
    6c1a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	b2db      	uxtb	r3, r3
    6c26:	461a      	mov	r2, r3
    6c28:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c30:	781b      	ldrb	r3, [r3, #0]
    6c32:	1ad3      	subs	r3, r2, r3
    6c34:	2b0d      	cmp	r3, #13
    6c36:	bfd4      	ite	le
    6c38:	2300      	movle	r3, #0
    6c3a:	2301      	movgt	r3, #1
    6c3c:	b2db      	uxtb	r3, r3
    6c3e:	2b00      	cmp	r3, #0
    6c40:	f000 839d 	beq.w	737e <send_settings+0x7e2>
    6c44:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	461a      	mov	r2, r3
    6c50:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c58:	2105      	movs	r1, #5
    6c5a:	5499      	strb	r1, [r3, r2]
    6c5c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c64:	781b      	ldrb	r3, [r3, #0]
    6c66:	3301      	adds	r3, #1
    6c68:	b2da      	uxtb	r2, r3
    6c6a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c72:	701a      	strb	r2, [r3, #0]
    6c74:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	2bff      	cmp	r3, #255	; 0xff
    6c80:	d105      	bne.n	6c8e <send_settings+0xf2>
    6c82:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8a:	2200      	movs	r2, #0
    6c8c:	701a      	strb	r2, [r3, #0]
    6c8e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c96:	781b      	ldrb	r3, [r3, #0]
    6c98:	461a      	mov	r2, r3
    6c9a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca2:	2111      	movs	r1, #17
    6ca4:	5499      	strb	r1, [r3, r2]
    6ca6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	3301      	adds	r3, #1
    6cb2:	b2da      	uxtb	r2, r3
    6cb4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	701a      	strb	r2, [r3, #0]
    6cbe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	2bff      	cmp	r3, #255	; 0xff
    6cca:	d105      	bne.n	6cd8 <send_settings+0x13c>
    6ccc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	2200      	movs	r2, #0
    6cd6:	701a      	strb	r2, [r3, #0]
    6cd8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce0:	2211      	movs	r2, #17
    6ce2:	701a      	strb	r2, [r3, #0]
    6ce4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cec:	2211      	movs	r2, #17
    6cee:	701a      	strb	r2, [r3, #0]
    6cf0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf8:	781b      	ldrb	r3, [r3, #0]
    6cfa:	461a      	mov	r2, r3
    6cfc:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	7819      	ldrb	r1, [r3, #0]
    6d06:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0e:	5499      	strb	r1, [r3, r2]
    6d10:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d18:	781a      	ldrb	r2, [r3, #0]
    6d1a:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    6d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d22:	781b      	ldrb	r3, [r3, #0]
    6d24:	4413      	add	r3, r2
    6d26:	b2da      	uxtb	r2, r3
    6d28:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d30:	701a      	strb	r2, [r3, #0]
    6d32:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3a:	781a      	ldrb	r2, [r3, #0]
    6d3c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	4413      	add	r3, r2
    6d48:	b2da      	uxtb	r2, r3
    6d4a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	701a      	strb	r2, [r3, #0]
    6d54:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	3301      	adds	r3, #1
    6d60:	b2da      	uxtb	r2, r3
    6d62:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6a:	701a      	strb	r2, [r3, #0]
    6d6c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d74:	781b      	ldrb	r3, [r3, #0]
    6d76:	2bff      	cmp	r3, #255	; 0xff
    6d78:	d105      	bne.n	6d86 <send_settings+0x1ea>
    6d7a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d82:	2200      	movs	r2, #0
    6d84:	701a      	strb	r2, [r3, #0]
    6d86:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8e:	781b      	ldrb	r3, [r3, #0]
    6d90:	461a      	mov	r2, r3
    6d92:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9a:	7819      	ldrb	r1, [r3, #0]
    6d9c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da4:	5499      	strb	r1, [r3, r2]
    6da6:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dae:	781a      	ldrb	r2, [r3, #0]
    6db0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	4413      	add	r3, r2
    6dbc:	b2da      	uxtb	r2, r3
    6dbe:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd0:	781a      	ldrb	r2, [r3, #0]
    6dd2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	4413      	add	r3, r2
    6dde:	b2da      	uxtb	r2, r3
    6de0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de8:	701a      	strb	r2, [r3, #0]
    6dea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	3301      	adds	r3, #1
    6df6:	b2da      	uxtb	r2, r3
    6df8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e00:	701a      	strb	r2, [r3, #0]
    6e02:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	2bff      	cmp	r3, #255	; 0xff
    6e0e:	d105      	bne.n	6e1c <send_settings+0x280>
    6e10:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e18:	2200      	movs	r2, #0
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e24:	781b      	ldrb	r3, [r3, #0]
    6e26:	461a      	mov	r2, r3
    6e28:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e30:	7859      	ldrb	r1, [r3, #1]
    6e32:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3a:	5499      	strb	r1, [r3, r2]
    6e3c:	4bd1      	ldr	r3, [pc, #836]	; (7184 <send_settings+0x5e8>)
    6e3e:	781a      	ldrb	r2, [r3, #0]
    6e40:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	4413      	add	r3, r2
    6e4c:	b2da      	uxtb	r2, r3
    6e4e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e56:	701a      	strb	r2, [r3, #0]
    6e58:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e60:	781a      	ldrb	r2, [r3, #0]
    6e62:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6a:	781b      	ldrb	r3, [r3, #0]
    6e6c:	4413      	add	r3, r2
    6e6e:	b2da      	uxtb	r2, r3
    6e70:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e78:	701a      	strb	r2, [r3, #0]
    6e7a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	3301      	adds	r3, #1
    6e86:	b2da      	uxtb	r2, r3
    6e88:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e90:	701a      	strb	r2, [r3, #0]
    6e92:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9a:	781b      	ldrb	r3, [r3, #0]
    6e9c:	2bff      	cmp	r3, #255	; 0xff
    6e9e:	d105      	bne.n	6eac <send_settings+0x310>
    6ea0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea8:	2200      	movs	r2, #0
    6eaa:	701a      	strb	r2, [r3, #0]
    6eac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	461a      	mov	r2, r3
    6eb8:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec0:	7899      	ldrb	r1, [r3, #2]
    6ec2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eca:	5499      	strb	r1, [r3, r2]
    6ecc:	4bae      	ldr	r3, [pc, #696]	; (7188 <send_settings+0x5ec>)
    6ece:	781a      	ldrb	r2, [r3, #0]
    6ed0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed8:	781b      	ldrb	r3, [r3, #0]
    6eda:	4413      	add	r3, r2
    6edc:	b2da      	uxtb	r2, r3
    6ede:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee6:	701a      	strb	r2, [r3, #0]
    6ee8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef0:	781a      	ldrb	r2, [r3, #0]
    6ef2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	4413      	add	r3, r2
    6efe:	b2da      	uxtb	r2, r3
    6f00:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f08:	701a      	strb	r2, [r3, #0]
    6f0a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	3301      	adds	r3, #1
    6f16:	b2da      	uxtb	r2, r3
    6f18:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f20:	701a      	strb	r2, [r3, #0]
    6f22:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f2a:	781b      	ldrb	r3, [r3, #0]
    6f2c:	2bff      	cmp	r3, #255	; 0xff
    6f2e:	d105      	bne.n	6f3c <send_settings+0x3a0>
    6f30:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f38:	2200      	movs	r2, #0
    6f3a:	701a      	strb	r2, [r3, #0]
    6f3c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	461a      	mov	r2, r3
    6f48:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f50:	78d9      	ldrb	r1, [r3, #3]
    6f52:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5a:	5499      	strb	r1, [r3, r2]
    6f5c:	4b8b      	ldr	r3, [pc, #556]	; (718c <send_settings+0x5f0>)
    6f5e:	781a      	ldrb	r2, [r3, #0]
    6f60:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	4413      	add	r3, r2
    6f6c:	b2da      	uxtb	r2, r3
    6f6e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f76:	701a      	strb	r2, [r3, #0]
    6f78:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f80:	781a      	ldrb	r2, [r3, #0]
    6f82:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8a:	781b      	ldrb	r3, [r3, #0]
    6f8c:	4413      	add	r3, r2
    6f8e:	b2da      	uxtb	r2, r3
    6f90:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    6f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f98:	701a      	strb	r2, [r3, #0]
    6f9a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa2:	781b      	ldrb	r3, [r3, #0]
    6fa4:	3301      	adds	r3, #1
    6fa6:	b2da      	uxtb	r2, r3
    6fa8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb0:	701a      	strb	r2, [r3, #0]
    6fb2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	2bff      	cmp	r3, #255	; 0xff
    6fbe:	d105      	bne.n	6fcc <send_settings+0x430>
    6fc0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc8:	2200      	movs	r2, #0
    6fca:	701a      	strb	r2, [r3, #0]
    6fcc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    6fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd4:	781b      	ldrb	r3, [r3, #0]
    6fd6:	461a      	mov	r2, r3
    6fd8:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    6fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe0:	7819      	ldrb	r1, [r3, #0]
    6fe2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fea:	5499      	strb	r1, [r3, r2]
    6fec:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    6ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff4:	781a      	ldrb	r2, [r3, #0]
    6ff6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    6ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	4413      	add	r3, r2
    7002:	b2da      	uxtb	r2, r3
    7004:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	701a      	strb	r2, [r3, #0]
    700e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7016:	781a      	ldrb	r2, [r3, #0]
    7018:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    701c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7020:	781b      	ldrb	r3, [r3, #0]
    7022:	4413      	add	r3, r2
    7024:	b2da      	uxtb	r2, r3
    7026:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    702a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702e:	701a      	strb	r2, [r3, #0]
    7030:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	3301      	adds	r3, #1
    703c:	b2da      	uxtb	r2, r3
    703e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7046:	701a      	strb	r2, [r3, #0]
    7048:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    704c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	2bff      	cmp	r3, #255	; 0xff
    7054:	d105      	bne.n	7062 <send_settings+0x4c6>
    7056:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    705a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705e:	2200      	movs	r2, #0
    7060:	701a      	strb	r2, [r3, #0]
    7062:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	461a      	mov	r2, r3
    706e:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    7072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7076:	7859      	ldrb	r1, [r3, #1]
    7078:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7080:	5499      	strb	r1, [r3, r2]
    7082:	4b43      	ldr	r3, [pc, #268]	; (7190 <send_settings+0x5f4>)
    7084:	781a      	ldrb	r2, [r3, #0]
    7086:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    708a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	4413      	add	r3, r2
    7092:	b2da      	uxtb	r2, r3
    7094:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    709c:	701a      	strb	r2, [r3, #0]
    709e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    70ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	4413      	add	r3, r2
    70b4:	b2da      	uxtb	r2, r3
    70b6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    70ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70be:	701a      	strb	r2, [r3, #0]
    70c0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    70c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c8:	781b      	ldrb	r3, [r3, #0]
    70ca:	3301      	adds	r3, #1
    70cc:	b2da      	uxtb	r2, r3
    70ce:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	701a      	strb	r2, [r3, #0]
    70d8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    70dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	2bff      	cmp	r3, #255	; 0xff
    70e4:	d105      	bne.n	70f2 <send_settings+0x556>
    70e6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    70ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ee:	2200      	movs	r2, #0
    70f0:	701a      	strb	r2, [r3, #0]
    70f2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    70f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fa:	781b      	ldrb	r3, [r3, #0]
    70fc:	461a      	mov	r2, r3
    70fe:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    7102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7106:	7899      	ldrb	r1, [r3, #2]
    7108:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    710c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7110:	5499      	strb	r1, [r3, r2]
    7112:	4b20      	ldr	r3, [pc, #128]	; (7194 <send_settings+0x5f8>)
    7114:	781a      	ldrb	r2, [r3, #0]
    7116:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    711a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	4413      	add	r3, r2
    7122:	b2da      	uxtb	r2, r3
    7124:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712c:	701a      	strb	r2, [r3, #0]
    712e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7136:	781a      	ldrb	r2, [r3, #0]
    7138:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    713c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	4413      	add	r3, r2
    7144:	b2da      	uxtb	r2, r3
    7146:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    714a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714e:	701a      	strb	r2, [r3, #0]
    7150:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7158:	781b      	ldrb	r3, [r3, #0]
    715a:	3301      	adds	r3, #1
    715c:	b2da      	uxtb	r2, r3
    715e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7166:	701a      	strb	r2, [r3, #0]
    7168:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    716c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7170:	781b      	ldrb	r3, [r3, #0]
    7172:	2bff      	cmp	r3, #255	; 0xff
    7174:	d110      	bne.n	7198 <send_settings+0x5fc>
    7176:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    717a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717e:	2200      	movs	r2, #0
    7180:	701a      	strb	r2, [r3, #0]
    7182:	e009      	b.n	7198 <send_settings+0x5fc>
    7184:	2004b4b1 	.word	0x2004b4b1
    7188:	2004b4b2 	.word	0x2004b4b2
    718c:	2004b4b3 	.word	0x2004b4b3
    7190:	2004b4b5 	.word	0x2004b4b5
    7194:	2004b4b6 	.word	0x2004b4b6
    7198:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    719c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a0:	781b      	ldrb	r3, [r3, #0]
    71a2:	461a      	mov	r2, r3
    71a4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	78d9      	ldrb	r1, [r3, #3]
    71ae:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	5499      	strb	r1, [r3, r2]
    71b8:	4b79      	ldr	r3, [pc, #484]	; (73a0 <send_settings+0x804>)
    71ba:	781a      	ldrb	r2, [r3, #0]
    71bc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    71c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c4:	781b      	ldrb	r3, [r3, #0]
    71c6:	4413      	add	r3, r2
    71c8:	b2da      	uxtb	r2, r3
    71ca:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    71ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d2:	701a      	strb	r2, [r3, #0]
    71d4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    71d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71dc:	781a      	ldrb	r2, [r3, #0]
    71de:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    71e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	4413      	add	r3, r2
    71ea:	b2da      	uxtb	r2, r3
    71ec:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    71f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f4:	701a      	strb	r2, [r3, #0]
    71f6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	781b      	ldrb	r3, [r3, #0]
    7200:	3301      	adds	r3, #1
    7202:	b2da      	uxtb	r2, r3
    7204:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    720c:	701a      	strb	r2, [r3, #0]
    720e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	2bff      	cmp	r3, #255	; 0xff
    721a:	d105      	bne.n	7228 <send_settings+0x68c>
    721c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7224:	2200      	movs	r2, #0
    7226:	701a      	strb	r2, [r3, #0]
    7228:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    722c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7230:	781b      	ldrb	r3, [r3, #0]
    7232:	461a      	mov	r2, r3
    7234:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    723c:	7819      	ldrb	r1, [r3, #0]
    723e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	5499      	strb	r1, [r3, r2]
    7248:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    724c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7250:	781b      	ldrb	r3, [r3, #0]
    7252:	3301      	adds	r3, #1
    7254:	b2da      	uxtb	r2, r3
    7256:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	701a      	strb	r2, [r3, #0]
    7260:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7268:	781b      	ldrb	r3, [r3, #0]
    726a:	2bff      	cmp	r3, #255	; 0xff
    726c:	d105      	bne.n	727a <send_settings+0x6de>
    726e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7276:	2200      	movs	r2, #0
    7278:	701a      	strb	r2, [r3, #0]
    727a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    727e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7282:	781b      	ldrb	r3, [r3, #0]
    7284:	461a      	mov	r2, r3
    7286:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	7819      	ldrb	r1, [r3, #0]
    7290:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	5499      	strb	r1, [r3, r2]
    729a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    729e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a2:	781b      	ldrb	r3, [r3, #0]
    72a4:	3301      	adds	r3, #1
    72a6:	b2da      	uxtb	r2, r3
    72a8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	701a      	strb	r2, [r3, #0]
    72b2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    72b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	2bff      	cmp	r3, #255	; 0xff
    72be:	d105      	bne.n	72cc <send_settings+0x730>
    72c0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    72c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c8:	2200      	movs	r2, #0
    72ca:	701a      	strb	r2, [r3, #0]
    72cc:	f248 0339 	movw	r3, #32825	; 0x8039
    72d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	b2db      	uxtb	r3, r3
    72d8:	f003 0310 	and.w	r3, r3, #16
    72dc:	2b00      	cmp	r3, #0
    72de:	d15a      	bne.n	7396 <send_settings+0x7fa>
    72e0:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    72e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e8:	781b      	ldrb	r3, [r3, #0]
    72ea:	b2db      	uxtb	r3, r3
    72ec:	461a      	mov	r2, r3
    72ee:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    72f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f6:	5c9a      	ldrb	r2, [r3, r2]
    72f8:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    72fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7300:	701a      	strb	r2, [r3, #0]
    7302:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    7306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    730a:	2200      	movs	r2, #0
    730c:	701a      	strb	r2, [r3, #0]
    730e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    7312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	b2db      	uxtb	r3, r3
    731a:	3301      	adds	r3, #1
    731c:	b2da      	uxtb	r2, r3
    731e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    7322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7326:	701a      	strb	r2, [r3, #0]
    7328:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    732c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	b2db      	uxtb	r3, r3
    7334:	2bff      	cmp	r3, #255	; 0xff
    7336:	d105      	bne.n	7344 <send_settings+0x7a8>
    7338:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    733c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7340:	2200      	movs	r2, #0
    7342:	701a      	strb	r2, [r3, #0]
    7344:	f248 0338 	movw	r3, #32824	; 0x8038
    7348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    734c:	f248 0238 	movw	r2, #32824	; 0x8038
    7350:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7354:	7812      	ldrb	r2, [r2, #0]
    7356:	b2d2      	uxtb	r2, r2
    7358:	f042 0201 	orr.w	r2, r2, #1
    735c:	b2d2      	uxtb	r2, r2
    735e:	701a      	strb	r2, [r3, #0]
    7360:	f248 0339 	movw	r3, #32825	; 0x8039
    7364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7368:	f248 0239 	movw	r2, #32825	; 0x8039
    736c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7370:	7812      	ldrb	r2, [r2, #0]
    7372:	b2d2      	uxtb	r2, r2
    7374:	f042 0210 	orr.w	r2, r2, #16
    7378:	b2d2      	uxtb	r2, r2
    737a:	701a      	strb	r2, [r3, #0]
    737c:	e00b      	b.n	7396 <send_settings+0x7fa>
    737e:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    7382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	3301      	adds	r3, #1
    738a:	b2da      	uxtb	r2, r3
    738c:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    7390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7394:	701a      	strb	r2, [r3, #0]
}
    7396:	46bd      	mov	sp, r7
    7398:	f85d 7b04 	ldr.w	r7, [sp], #4
    739c:	4770      	bx	lr
    739e:	bf00      	nop
    73a0:	2004b4b7 	.word	0x2004b4b7

000073a4 <send_desired>:
void send_desired(void){  //1000ms
    73a4:	b480      	push	{r7}
    73a6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    73a8:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    73ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b0:	781a      	ldrb	r2, [r3, #0]
    73b2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    73b6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    73ba:	fba3 1302 	umull	r1, r3, r3, r2
    73be:	08d9      	lsrs	r1, r3, #3
    73c0:	460b      	mov	r3, r1
    73c2:	009b      	lsls	r3, r3, #2
    73c4:	440b      	add	r3, r1
    73c6:	005b      	lsls	r3, r3, #1
    73c8:	1ad3      	subs	r3, r2, r3
    73ca:	b2db      	uxtb	r3, r3
    73cc:	2b03      	cmp	r3, #3
    73ce:	f040 8712 	bne.w	81f6 <send_desired+0xe52>
    73d2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    73d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73da:	781a      	ldrb	r2, [r3, #0]
    73dc:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    73e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	b2db      	uxtb	r3, r3
    73e8:	429a      	cmp	r2, r3
    73ea:	d313      	bcc.n	7414 <send_desired+0x70>
    73ec:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    73f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f4:	781b      	ldrb	r3, [r3, #0]
    73f6:	b2db      	uxtb	r3, r3
    73f8:	461a      	mov	r2, r3
    73fa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    73fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7402:	781b      	ldrb	r3, [r3, #0]
    7404:	1ad3      	subs	r3, r2, r3
    7406:	33ff      	adds	r3, #255	; 0xff
    7408:	2b18      	cmp	r3, #24
    740a:	bfd4      	ite	le
    740c:	2300      	movle	r3, #0
    740e:	2301      	movgt	r3, #1
    7410:	b2db      	uxtb	r3, r3
    7412:	e011      	b.n	7438 <send_desired+0x94>
    7414:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    7418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741c:	781b      	ldrb	r3, [r3, #0]
    741e:	b2db      	uxtb	r3, r3
    7420:	461a      	mov	r2, r3
    7422:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742a:	781b      	ldrb	r3, [r3, #0]
    742c:	1ad3      	subs	r3, r2, r3
    742e:	2b18      	cmp	r3, #24
    7430:	bfd4      	ite	le
    7432:	2300      	movle	r3, #0
    7434:	2301      	movgt	r3, #1
    7436:	b2db      	uxtb	r3, r3
    7438:	2b00      	cmp	r3, #0
    743a:	f000 86d0 	beq.w	81de <send_desired+0xe3a>
    743e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	461a      	mov	r2, r3
    744a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    744e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7452:	2105      	movs	r1, #5
    7454:	5499      	strb	r1, [r3, r2]
    7456:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    745a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    745e:	781b      	ldrb	r3, [r3, #0]
    7460:	3301      	adds	r3, #1
    7462:	b2da      	uxtb	r2, r3
    7464:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746c:	701a      	strb	r2, [r3, #0]
    746e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	2bff      	cmp	r3, #255	; 0xff
    747a:	d105      	bne.n	7488 <send_desired+0xe4>
    747c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7484:	2200      	movs	r2, #0
    7486:	701a      	strb	r2, [r3, #0]
    7488:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    748c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7490:	781b      	ldrb	r3, [r3, #0]
    7492:	461a      	mov	r2, r3
    7494:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749c:	2112      	movs	r1, #18
    749e:	5499      	strb	r1, [r3, r2]
    74a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    74a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	3301      	adds	r3, #1
    74ac:	b2da      	uxtb	r2, r3
    74ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    74b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    74bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c0:	781b      	ldrb	r3, [r3, #0]
    74c2:	2bff      	cmp	r3, #255	; 0xff
    74c4:	d105      	bne.n	74d2 <send_desired+0x12e>
    74c6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    74ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ce:	2200      	movs	r2, #0
    74d0:	701a      	strb	r2, [r3, #0]
    74d2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    74d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74da:	2212      	movs	r2, #18
    74dc:	701a      	strb	r2, [r3, #0]
    74de:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    74e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e6:	2212      	movs	r2, #18
    74e8:	701a      	strb	r2, [r3, #0]
    74ea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    74ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	461a      	mov	r2, r3
    74f6:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    74fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74fe:	7819      	ldrb	r1, [r3, #0]
    7500:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7508:	5499      	strb	r1, [r3, r2]
    750a:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    750e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7512:	781a      	ldrb	r2, [r3, #0]
    7514:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	4413      	add	r3, r2
    7520:	b2da      	uxtb	r2, r3
    7522:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    752a:	701a      	strb	r2, [r3, #0]
    752c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7534:	781a      	ldrb	r2, [r3, #0]
    7536:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    753a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753e:	781b      	ldrb	r3, [r3, #0]
    7540:	4413      	add	r3, r2
    7542:	b2da      	uxtb	r2, r3
    7544:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	701a      	strb	r2, [r3, #0]
    754e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	3301      	adds	r3, #1
    755a:	b2da      	uxtb	r2, r3
    755c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	701a      	strb	r2, [r3, #0]
    7566:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    756a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2bff      	cmp	r3, #255	; 0xff
    7572:	d105      	bne.n	7580 <send_desired+0x1dc>
    7574:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757c:	2200      	movs	r2, #0
    757e:	701a      	strb	r2, [r3, #0]
    7580:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	461a      	mov	r2, r3
    758c:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    7590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7594:	7859      	ldrb	r1, [r3, #1]
    7596:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    759a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759e:	5499      	strb	r1, [r3, r2]
    75a0:	4bd1      	ldr	r3, [pc, #836]	; (78e8 <send_desired+0x544>)
    75a2:	781a      	ldrb	r2, [r3, #0]
    75a4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    75a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	4413      	add	r3, r2
    75b0:	b2da      	uxtb	r2, r3
    75b2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    75b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ba:	701a      	strb	r2, [r3, #0]
    75bc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	781a      	ldrb	r2, [r3, #0]
    75c6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    75ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	4413      	add	r3, r2
    75d2:	b2da      	uxtb	r2, r3
    75d4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    75d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75dc:	701a      	strb	r2, [r3, #0]
    75de:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    75e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e6:	781b      	ldrb	r3, [r3, #0]
    75e8:	3301      	adds	r3, #1
    75ea:	b2da      	uxtb	r2, r3
    75ec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    75f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f4:	701a      	strb	r2, [r3, #0]
    75f6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    75fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	2bff      	cmp	r3, #255	; 0xff
    7602:	d105      	bne.n	7610 <send_desired+0x26c>
    7604:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760c:	2200      	movs	r2, #0
    760e:	701a      	strb	r2, [r3, #0]
    7610:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	461a      	mov	r2, r3
    761c:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	7899      	ldrb	r1, [r3, #2]
    7626:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    762a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762e:	5499      	strb	r1, [r3, r2]
    7630:	4bae      	ldr	r3, [pc, #696]	; (78ec <send_desired+0x548>)
    7632:	781a      	ldrb	r2, [r3, #0]
    7634:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	4413      	add	r3, r2
    7640:	b2da      	uxtb	r2, r3
    7642:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	701a      	strb	r2, [r3, #0]
    764c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7654:	781a      	ldrb	r2, [r3, #0]
    7656:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    765a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	4413      	add	r3, r2
    7662:	b2da      	uxtb	r2, r3
    7664:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766c:	701a      	strb	r2, [r3, #0]
    766e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	3301      	adds	r3, #1
    767a:	b2da      	uxtb	r2, r3
    767c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7684:	701a      	strb	r2, [r3, #0]
    7686:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    768a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	2bff      	cmp	r3, #255	; 0xff
    7692:	d105      	bne.n	76a0 <send_desired+0x2fc>
    7694:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769c:	2200      	movs	r2, #0
    769e:	701a      	strb	r2, [r3, #0]
    76a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    76a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	461a      	mov	r2, r3
    76ac:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    76b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b4:	78d9      	ldrb	r1, [r3, #3]
    76b6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    76ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76be:	5499      	strb	r1, [r3, r2]
    76c0:	4b8b      	ldr	r3, [pc, #556]	; (78f0 <send_desired+0x54c>)
    76c2:	781a      	ldrb	r2, [r3, #0]
    76c4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    76c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	4413      	add	r3, r2
    76d0:	b2da      	uxtb	r2, r3
    76d2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    76d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76da:	701a      	strb	r2, [r3, #0]
    76dc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    76e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e4:	781a      	ldrb	r2, [r3, #0]
    76e6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    76ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	4413      	add	r3, r2
    76f2:	b2da      	uxtb	r2, r3
    76f4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    76f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	3301      	adds	r3, #1
    770a:	b2da      	uxtb	r2, r3
    770c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7714:	701a      	strb	r2, [r3, #0]
    7716:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    771a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	2bff      	cmp	r3, #255	; 0xff
    7722:	d105      	bne.n	7730 <send_desired+0x38c>
    7724:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772c:	2200      	movs	r2, #0
    772e:	701a      	strb	r2, [r3, #0]
    7730:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	461a      	mov	r2, r3
    773c:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    7740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7744:	7819      	ldrb	r1, [r3, #0]
    7746:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    774a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774e:	5499      	strb	r1, [r3, r2]
    7750:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    7754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7758:	781a      	ldrb	r2, [r3, #0]
    775a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    775e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7762:	781b      	ldrb	r3, [r3, #0]
    7764:	4413      	add	r3, r2
    7766:	b2da      	uxtb	r2, r3
    7768:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    776c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7770:	701a      	strb	r2, [r3, #0]
    7772:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777a:	781a      	ldrb	r2, [r3, #0]
    777c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	4413      	add	r3, r2
    7788:	b2da      	uxtb	r2, r3
    778a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    778e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	3301      	adds	r3, #1
    77a0:	b2da      	uxtb	r2, r3
    77a2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    77a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77aa:	701a      	strb	r2, [r3, #0]
    77ac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    77b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b4:	781b      	ldrb	r3, [r3, #0]
    77b6:	2bff      	cmp	r3, #255	; 0xff
    77b8:	d105      	bne.n	77c6 <send_desired+0x422>
    77ba:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    77be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c2:	2200      	movs	r2, #0
    77c4:	701a      	strb	r2, [r3, #0]
    77c6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    77ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	461a      	mov	r2, r3
    77d2:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    77d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77da:	7859      	ldrb	r1, [r3, #1]
    77dc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    77e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e4:	5499      	strb	r1, [r3, r2]
    77e6:	4b43      	ldr	r3, [pc, #268]	; (78f4 <send_desired+0x550>)
    77e8:	781a      	ldrb	r2, [r3, #0]
    77ea:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    77ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	4413      	add	r3, r2
    77f6:	b2da      	uxtb	r2, r3
    77f8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    77fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7800:	701a      	strb	r2, [r3, #0]
    7802:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780a:	781a      	ldrb	r2, [r3, #0]
    780c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	4413      	add	r3, r2
    7818:	b2da      	uxtb	r2, r3
    781a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    781e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	3301      	adds	r3, #1
    7830:	b2da      	uxtb	r2, r3
    7832:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783a:	701a      	strb	r2, [r3, #0]
    783c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2bff      	cmp	r3, #255	; 0xff
    7848:	d105      	bne.n	7856 <send_desired+0x4b2>
    784a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    784e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7852:	2200      	movs	r2, #0
    7854:	701a      	strb	r2, [r3, #0]
    7856:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    785a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785e:	781b      	ldrb	r3, [r3, #0]
    7860:	461a      	mov	r2, r3
    7862:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    7866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786a:	7899      	ldrb	r1, [r3, #2]
    786c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	5499      	strb	r1, [r3, r2]
    7876:	4b20      	ldr	r3, [pc, #128]	; (78f8 <send_desired+0x554>)
    7878:	781a      	ldrb	r2, [r3, #0]
    787a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    787e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	4413      	add	r3, r2
    7886:	b2da      	uxtb	r2, r3
    7888:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    788c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7890:	701a      	strb	r2, [r3, #0]
    7892:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789a:	781a      	ldrb	r2, [r3, #0]
    789c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    78a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	4413      	add	r3, r2
    78a8:	b2da      	uxtb	r2, r3
    78aa:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    78ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b2:	701a      	strb	r2, [r3, #0]
    78b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    78b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	3301      	adds	r3, #1
    78c0:	b2da      	uxtb	r2, r3
    78c2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    78c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ca:	701a      	strb	r2, [r3, #0]
    78cc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    78d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	2bff      	cmp	r3, #255	; 0xff
    78d8:	d110      	bne.n	78fc <send_desired+0x558>
    78da:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    78de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e2:	2200      	movs	r2, #0
    78e4:	701a      	strb	r2, [r3, #0]
    78e6:	e009      	b.n	78fc <send_desired+0x558>
    78e8:	2004b7ed 	.word	0x2004b7ed
    78ec:	2004b7ee 	.word	0x2004b7ee
    78f0:	2004b7ef 	.word	0x2004b7ef
    78f4:	2004b7f1 	.word	0x2004b7f1
    78f8:	2004b7f2 	.word	0x2004b7f2
    78fc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	461a      	mov	r2, r3
    7908:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    790c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7910:	78d9      	ldrb	r1, [r3, #3]
    7912:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    791a:	5499      	strb	r1, [r3, r2]
    791c:	4bd3      	ldr	r3, [pc, #844]	; (7c6c <send_desired+0x8c8>)
    791e:	781a      	ldrb	r2, [r3, #0]
    7920:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	4413      	add	r3, r2
    792c:	b2da      	uxtb	r2, r3
    792e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7936:	701a      	strb	r2, [r3, #0]
    7938:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    793c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7940:	781a      	ldrb	r2, [r3, #0]
    7942:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	4413      	add	r3, r2
    794e:	b2da      	uxtb	r2, r3
    7950:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7958:	701a      	strb	r2, [r3, #0]
    795a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    795e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7962:	781b      	ldrb	r3, [r3, #0]
    7964:	3301      	adds	r3, #1
    7966:	b2da      	uxtb	r2, r3
    7968:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    796c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7970:	701a      	strb	r2, [r3, #0]
    7972:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797a:	781b      	ldrb	r3, [r3, #0]
    797c:	2bff      	cmp	r3, #255	; 0xff
    797e:	d105      	bne.n	798c <send_desired+0x5e8>
    7980:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7988:	2200      	movs	r2, #0
    798a:	701a      	strb	r2, [r3, #0]
    798c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7994:	781b      	ldrb	r3, [r3, #0]
    7996:	461a      	mov	r2, r3
    7998:	f64b 0338 	movw	r3, #47160	; 0xb838
    799c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a0:	7819      	ldrb	r1, [r3, #0]
    79a2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    79a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79aa:	5499      	strb	r1, [r3, r2]
    79ac:	f64b 0338 	movw	r3, #47160	; 0xb838
    79b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    79ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	4413      	add	r3, r2
    79c2:	b2da      	uxtb	r2, r3
    79c4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    79c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79cc:	701a      	strb	r2, [r3, #0]
    79ce:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    79d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d6:	781a      	ldrb	r2, [r3, #0]
    79d8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    79dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e0:	781b      	ldrb	r3, [r3, #0]
    79e2:	4413      	add	r3, r2
    79e4:	b2da      	uxtb	r2, r3
    79e6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    79ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ee:	701a      	strb	r2, [r3, #0]
    79f0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    79f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f8:	781b      	ldrb	r3, [r3, #0]
    79fa:	3301      	adds	r3, #1
    79fc:	b2da      	uxtb	r2, r3
    79fe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a06:	701a      	strb	r2, [r3, #0]
    7a08:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	2bff      	cmp	r3, #255	; 0xff
    7a14:	d105      	bne.n	7a22 <send_desired+0x67e>
    7a16:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1e:	2200      	movs	r2, #0
    7a20:	701a      	strb	r2, [r3, #0]
    7a22:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	461a      	mov	r2, r3
    7a2e:	f64b 0338 	movw	r3, #47160	; 0xb838
    7a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a36:	7859      	ldrb	r1, [r3, #1]
    7a38:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a40:	5499      	strb	r1, [r3, r2]
    7a42:	4b8b      	ldr	r3, [pc, #556]	; (7c70 <send_desired+0x8cc>)
    7a44:	781a      	ldrb	r2, [r3, #0]
    7a46:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	4413      	add	r3, r2
    7a52:	b2da      	uxtb	r2, r3
    7a54:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	701a      	strb	r2, [r3, #0]
    7a5e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	781a      	ldrb	r2, [r3, #0]
    7a68:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	4413      	add	r3, r2
    7a74:	b2da      	uxtb	r2, r3
    7a76:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7e:	701a      	strb	r2, [r3, #0]
    7a80:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a88:	781b      	ldrb	r3, [r3, #0]
    7a8a:	3301      	adds	r3, #1
    7a8c:	b2da      	uxtb	r2, r3
    7a8e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a96:	701a      	strb	r2, [r3, #0]
    7a98:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	2bff      	cmp	r3, #255	; 0xff
    7aa4:	d105      	bne.n	7ab2 <send_desired+0x70e>
    7aa6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aae:	2200      	movs	r2, #0
    7ab0:	701a      	strb	r2, [r3, #0]
    7ab2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	461a      	mov	r2, r3
    7abe:	f64b 0338 	movw	r3, #47160	; 0xb838
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	7899      	ldrb	r1, [r3, #2]
    7ac8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad0:	5499      	strb	r1, [r3, r2]
    7ad2:	4b68      	ldr	r3, [pc, #416]	; (7c74 <send_desired+0x8d0>)
    7ad4:	781a      	ldrb	r2, [r3, #0]
    7ad6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ade:	781b      	ldrb	r3, [r3, #0]
    7ae0:	4413      	add	r3, r2
    7ae2:	b2da      	uxtb	r2, r3
    7ae4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	701a      	strb	r2, [r3, #0]
    7aee:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af6:	781a      	ldrb	r2, [r3, #0]
    7af8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	4413      	add	r3, r2
    7b04:	b2da      	uxtb	r2, r3
    7b06:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b18:	781b      	ldrb	r3, [r3, #0]
    7b1a:	3301      	adds	r3, #1
    7b1c:	b2da      	uxtb	r2, r3
    7b1e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b26:	701a      	strb	r2, [r3, #0]
    7b28:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b30:	781b      	ldrb	r3, [r3, #0]
    7b32:	2bff      	cmp	r3, #255	; 0xff
    7b34:	d105      	bne.n	7b42 <send_desired+0x79e>
    7b36:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3e:	2200      	movs	r2, #0
    7b40:	701a      	strb	r2, [r3, #0]
    7b42:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	461a      	mov	r2, r3
    7b4e:	f64b 0338 	movw	r3, #47160	; 0xb838
    7b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b56:	78d9      	ldrb	r1, [r3, #3]
    7b58:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b60:	5499      	strb	r1, [r3, r2]
    7b62:	4b45      	ldr	r3, [pc, #276]	; (7c78 <send_desired+0x8d4>)
    7b64:	781a      	ldrb	r2, [r3, #0]
    7b66:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6e:	781b      	ldrb	r3, [r3, #0]
    7b70:	4413      	add	r3, r2
    7b72:	b2da      	uxtb	r2, r3
    7b74:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7c:	701a      	strb	r2, [r3, #0]
    7b7e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b86:	781a      	ldrb	r2, [r3, #0]
    7b88:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	4413      	add	r3, r2
    7b94:	b2da      	uxtb	r2, r3
    7b96:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9e:	701a      	strb	r2, [r3, #0]
    7ba0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	3301      	adds	r3, #1
    7bac:	b2da      	uxtb	r2, r3
    7bae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb6:	701a      	strb	r2, [r3, #0]
    7bb8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc0:	781b      	ldrb	r3, [r3, #0]
    7bc2:	2bff      	cmp	r3, #255	; 0xff
    7bc4:	d105      	bne.n	7bd2 <send_desired+0x82e>
    7bc6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bce:	2200      	movs	r2, #0
    7bd0:	701a      	strb	r2, [r3, #0]
    7bd2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bda:	781b      	ldrb	r3, [r3, #0]
    7bdc:	461a      	mov	r2, r3
    7bde:	f64b 033c 	movw	r3, #47164	; 0xb83c
    7be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be6:	7819      	ldrb	r1, [r3, #0]
    7be8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf0:	5499      	strb	r1, [r3, r2]
    7bf2:	f64b 033c 	movw	r3, #47164	; 0xb83c
    7bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfa:	781a      	ldrb	r2, [r3, #0]
    7bfc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c04:	781b      	ldrb	r3, [r3, #0]
    7c06:	4413      	add	r3, r2
    7c08:	b2da      	uxtb	r2, r3
    7c0a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c12:	701a      	strb	r2, [r3, #0]
    7c14:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1c:	781a      	ldrb	r2, [r3, #0]
    7c1e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	4413      	add	r3, r2
    7c2a:	b2da      	uxtb	r2, r3
    7c2c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c34:	701a      	strb	r2, [r3, #0]
    7c36:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3e:	781b      	ldrb	r3, [r3, #0]
    7c40:	3301      	adds	r3, #1
    7c42:	b2da      	uxtb	r2, r3
    7c44:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4c:	701a      	strb	r2, [r3, #0]
    7c4e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	2bff      	cmp	r3, #255	; 0xff
    7c5a:	d10f      	bne.n	7c7c <send_desired+0x8d8>
    7c5c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c64:	2200      	movs	r2, #0
    7c66:	701a      	strb	r2, [r3, #0]
    7c68:	e008      	b.n	7c7c <send_desired+0x8d8>
    7c6a:	bf00      	nop
    7c6c:	2004b7f3 	.word	0x2004b7f3
    7c70:	2004b839 	.word	0x2004b839
    7c74:	2004b83a 	.word	0x2004b83a
    7c78:	2004b83b 	.word	0x2004b83b
    7c7c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	461a      	mov	r2, r3
    7c88:	f64b 033c 	movw	r3, #47164	; 0xb83c
    7c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c90:	7859      	ldrb	r1, [r3, #1]
    7c92:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9a:	5499      	strb	r1, [r3, r2]
    7c9c:	4bd1      	ldr	r3, [pc, #836]	; (7fe4 <send_desired+0xc40>)
    7c9e:	781a      	ldrb	r2, [r3, #0]
    7ca0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	4413      	add	r3, r2
    7cac:	b2da      	uxtb	r2, r3
    7cae:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb6:	701a      	strb	r2, [r3, #0]
    7cb8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc0:	781a      	ldrb	r2, [r3, #0]
    7cc2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	4413      	add	r3, r2
    7cce:	b2da      	uxtb	r2, r3
    7cd0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd8:	701a      	strb	r2, [r3, #0]
    7cda:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	3301      	adds	r3, #1
    7ce6:	b2da      	uxtb	r2, r3
    7ce8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf0:	701a      	strb	r2, [r3, #0]
    7cf2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	2bff      	cmp	r3, #255	; 0xff
    7cfe:	d105      	bne.n	7d0c <send_desired+0x968>
    7d00:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d08:	2200      	movs	r2, #0
    7d0a:	701a      	strb	r2, [r3, #0]
    7d0c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	461a      	mov	r2, r3
    7d18:	f64b 033c 	movw	r3, #47164	; 0xb83c
    7d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d20:	7899      	ldrb	r1, [r3, #2]
    7d22:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2a:	5499      	strb	r1, [r3, r2]
    7d2c:	4bae      	ldr	r3, [pc, #696]	; (7fe8 <send_desired+0xc44>)
    7d2e:	781a      	ldrb	r2, [r3, #0]
    7d30:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	4413      	add	r3, r2
    7d3c:	b2da      	uxtb	r2, r3
    7d3e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d46:	701a      	strb	r2, [r3, #0]
    7d48:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d50:	781a      	ldrb	r2, [r3, #0]
    7d52:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	4413      	add	r3, r2
    7d5e:	b2da      	uxtb	r2, r3
    7d60:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d68:	701a      	strb	r2, [r3, #0]
    7d6a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d72:	781b      	ldrb	r3, [r3, #0]
    7d74:	3301      	adds	r3, #1
    7d76:	b2da      	uxtb	r2, r3
    7d78:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d80:	701a      	strb	r2, [r3, #0]
    7d82:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	2bff      	cmp	r3, #255	; 0xff
    7d8e:	d105      	bne.n	7d9c <send_desired+0x9f8>
    7d90:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d98:	2200      	movs	r2, #0
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	461a      	mov	r2, r3
    7da8:	f64b 033c 	movw	r3, #47164	; 0xb83c
    7dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db0:	78d9      	ldrb	r1, [r3, #3]
    7db2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dba:	5499      	strb	r1, [r3, r2]
    7dbc:	4b8b      	ldr	r3, [pc, #556]	; (7fec <send_desired+0xc48>)
    7dbe:	781a      	ldrb	r2, [r3, #0]
    7dc0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc8:	781b      	ldrb	r3, [r3, #0]
    7dca:	4413      	add	r3, r2
    7dcc:	b2da      	uxtb	r2, r3
    7dce:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd6:	701a      	strb	r2, [r3, #0]
    7dd8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de0:	781a      	ldrb	r2, [r3, #0]
    7de2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	4413      	add	r3, r2
    7dee:	b2da      	uxtb	r2, r3
    7df0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df8:	701a      	strb	r2, [r3, #0]
    7dfa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e02:	781b      	ldrb	r3, [r3, #0]
    7e04:	3301      	adds	r3, #1
    7e06:	b2da      	uxtb	r2, r3
    7e08:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e10:	701a      	strb	r2, [r3, #0]
    7e12:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1a:	781b      	ldrb	r3, [r3, #0]
    7e1c:	2bff      	cmp	r3, #255	; 0xff
    7e1e:	d105      	bne.n	7e2c <send_desired+0xa88>
    7e20:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e28:	2200      	movs	r2, #0
    7e2a:	701a      	strb	r2, [r3, #0]
    7e2c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	461a      	mov	r2, r3
    7e38:	f240 133c 	movw	r3, #316	; 0x13c
    7e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e40:	7819      	ldrb	r1, [r3, #0]
    7e42:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4a:	5499      	strb	r1, [r3, r2]
    7e4c:	f240 133c 	movw	r3, #316	; 0x13c
    7e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e54:	781a      	ldrb	r2, [r3, #0]
    7e56:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	4413      	add	r3, r2
    7e62:	b2da      	uxtb	r2, r3
    7e64:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6c:	701a      	strb	r2, [r3, #0]
    7e6e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e76:	781a      	ldrb	r2, [r3, #0]
    7e78:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	781b      	ldrb	r3, [r3, #0]
    7e82:	4413      	add	r3, r2
    7e84:	b2da      	uxtb	r2, r3
    7e86:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8e:	701a      	strb	r2, [r3, #0]
    7e90:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	3301      	adds	r3, #1
    7e9c:	b2da      	uxtb	r2, r3
    7e9e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea6:	701a      	strb	r2, [r3, #0]
    7ea8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb0:	781b      	ldrb	r3, [r3, #0]
    7eb2:	2bff      	cmp	r3, #255	; 0xff
    7eb4:	d105      	bne.n	7ec2 <send_desired+0xb1e>
    7eb6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebe:	2200      	movs	r2, #0
    7ec0:	701a      	strb	r2, [r3, #0]
    7ec2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	461a      	mov	r2, r3
    7ece:	f240 133c 	movw	r3, #316	; 0x13c
    7ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed6:	7859      	ldrb	r1, [r3, #1]
    7ed8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee0:	5499      	strb	r1, [r3, r2]
    7ee2:	4b43      	ldr	r3, [pc, #268]	; (7ff0 <send_desired+0xc4c>)
    7ee4:	781a      	ldrb	r2, [r3, #0]
    7ee6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eee:	781b      	ldrb	r3, [r3, #0]
    7ef0:	4413      	add	r3, r2
    7ef2:	b2da      	uxtb	r2, r3
    7ef4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efc:	701a      	strb	r2, [r3, #0]
    7efe:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f06:	781a      	ldrb	r2, [r3, #0]
    7f08:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	4413      	add	r3, r2
    7f14:	b2da      	uxtb	r2, r3
    7f16:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1e:	701a      	strb	r2, [r3, #0]
    7f20:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	3301      	adds	r3, #1
    7f2c:	b2da      	uxtb	r2, r3
    7f2e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f36:	701a      	strb	r2, [r3, #0]
    7f38:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f40:	781b      	ldrb	r3, [r3, #0]
    7f42:	2bff      	cmp	r3, #255	; 0xff
    7f44:	d105      	bne.n	7f52 <send_desired+0xbae>
    7f46:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	2200      	movs	r2, #0
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	461a      	mov	r2, r3
    7f5e:	f240 133c 	movw	r3, #316	; 0x13c
    7f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f66:	7899      	ldrb	r1, [r3, #2]
    7f68:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f70:	5499      	strb	r1, [r3, r2]
    7f72:	4b20      	ldr	r3, [pc, #128]	; (7ff4 <send_desired+0xc50>)
    7f74:	781a      	ldrb	r2, [r3, #0]
    7f76:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	4413      	add	r3, r2
    7f82:	b2da      	uxtb	r2, r3
    7f84:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8c:	701a      	strb	r2, [r3, #0]
    7f8e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f96:	781a      	ldrb	r2, [r3, #0]
    7f98:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    7f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	4413      	add	r3, r2
    7fa4:	b2da      	uxtb	r2, r3
    7fa6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	701a      	strb	r2, [r3, #0]
    7fb0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb8:	781b      	ldrb	r3, [r3, #0]
    7fba:	3301      	adds	r3, #1
    7fbc:	b2da      	uxtb	r2, r3
    7fbe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	701a      	strb	r2, [r3, #0]
    7fc8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	2bff      	cmp	r3, #255	; 0xff
    7fd4:	d110      	bne.n	7ff8 <send_desired+0xc54>
    7fd6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	2200      	movs	r2, #0
    7fe0:	701a      	strb	r2, [r3, #0]
    7fe2:	e009      	b.n	7ff8 <send_desired+0xc54>
    7fe4:	2004b83d 	.word	0x2004b83d
    7fe8:	2004b83e 	.word	0x2004b83e
    7fec:	2004b83f 	.word	0x2004b83f
    7ff0:	2000013d 	.word	0x2000013d
    7ff4:	2000013e 	.word	0x2000013e
    7ff8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	461a      	mov	r2, r3
    8004:	f240 133c 	movw	r3, #316	; 0x13c
    8008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    800c:	78d9      	ldrb	r1, [r3, #3]
    800e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	5499      	strb	r1, [r3, r2]
    8018:	4b79      	ldr	r3, [pc, #484]	; (8200 <send_desired+0xe5c>)
    801a:	781a      	ldrb	r2, [r3, #0]
    801c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8024:	781b      	ldrb	r3, [r3, #0]
    8026:	4413      	add	r3, r2
    8028:	b2da      	uxtb	r2, r3
    802a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    802e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8032:	701a      	strb	r2, [r3, #0]
    8034:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803c:	781a      	ldrb	r2, [r3, #0]
    803e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	4413      	add	r3, r2
    804a:	b2da      	uxtb	r2, r3
    804c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8054:	701a      	strb	r2, [r3, #0]
    8056:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    805a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805e:	781b      	ldrb	r3, [r3, #0]
    8060:	3301      	adds	r3, #1
    8062:	b2da      	uxtb	r2, r3
    8064:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806c:	701a      	strb	r2, [r3, #0]
    806e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8076:	781b      	ldrb	r3, [r3, #0]
    8078:	2bff      	cmp	r3, #255	; 0xff
    807a:	d105      	bne.n	8088 <send_desired+0xce4>
    807c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8084:	2200      	movs	r2, #0
    8086:	701a      	strb	r2, [r3, #0]
    8088:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    808c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	461a      	mov	r2, r3
    8094:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809c:	7819      	ldrb	r1, [r3, #0]
    809e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    80a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a6:	5499      	strb	r1, [r3, r2]
    80a8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    80ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b0:	781b      	ldrb	r3, [r3, #0]
    80b2:	3301      	adds	r3, #1
    80b4:	b2da      	uxtb	r2, r3
    80b6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    80ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80be:	701a      	strb	r2, [r3, #0]
    80c0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    80c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c8:	781b      	ldrb	r3, [r3, #0]
    80ca:	2bff      	cmp	r3, #255	; 0xff
    80cc:	d105      	bne.n	80da <send_desired+0xd36>
    80ce:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    80d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d6:	2200      	movs	r2, #0
    80d8:	701a      	strb	r2, [r3, #0]
    80da:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    80de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e2:	781b      	ldrb	r3, [r3, #0]
    80e4:	461a      	mov	r2, r3
    80e6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    80ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ee:	7819      	ldrb	r1, [r3, #0]
    80f0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    80f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f8:	5499      	strb	r1, [r3, r2]
    80fa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    80fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8102:	781b      	ldrb	r3, [r3, #0]
    8104:	3301      	adds	r3, #1
    8106:	b2da      	uxtb	r2, r3
    8108:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    810c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8110:	701a      	strb	r2, [r3, #0]
    8112:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811a:	781b      	ldrb	r3, [r3, #0]
    811c:	2bff      	cmp	r3, #255	; 0xff
    811e:	d105      	bne.n	812c <send_desired+0xd88>
    8120:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8128:	2200      	movs	r2, #0
    812a:	701a      	strb	r2, [r3, #0]
    812c:	f248 0339 	movw	r3, #32825	; 0x8039
    8130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8134:	781b      	ldrb	r3, [r3, #0]
    8136:	b2db      	uxtb	r3, r3
    8138:	f003 0310 	and.w	r3, r3, #16
    813c:	2b00      	cmp	r3, #0
    813e:	d15a      	bne.n	81f6 <send_desired+0xe52>
    8140:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    8144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	b2db      	uxtb	r3, r3
    814c:	461a      	mov	r2, r3
    814e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8156:	5c9a      	ldrb	r2, [r3, r2]
    8158:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    815c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8160:	701a      	strb	r2, [r3, #0]
    8162:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    8166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816a:	2200      	movs	r2, #0
    816c:	701a      	strb	r2, [r3, #0]
    816e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    8172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8176:	781b      	ldrb	r3, [r3, #0]
    8178:	b2db      	uxtb	r3, r3
    817a:	3301      	adds	r3, #1
    817c:	b2da      	uxtb	r2, r3
    817e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    8182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8186:	701a      	strb	r2, [r3, #0]
    8188:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    818c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	b2db      	uxtb	r3, r3
    8194:	2bff      	cmp	r3, #255	; 0xff
    8196:	d105      	bne.n	81a4 <send_desired+0xe00>
    8198:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    819c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a0:	2200      	movs	r2, #0
    81a2:	701a      	strb	r2, [r3, #0]
    81a4:	f248 0338 	movw	r3, #32824	; 0x8038
    81a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ac:	f248 0238 	movw	r2, #32824	; 0x8038
    81b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    81b4:	7812      	ldrb	r2, [r2, #0]
    81b6:	b2d2      	uxtb	r2, r2
    81b8:	f042 0201 	orr.w	r2, r2, #1
    81bc:	b2d2      	uxtb	r2, r2
    81be:	701a      	strb	r2, [r3, #0]
    81c0:	f248 0339 	movw	r3, #32825	; 0x8039
    81c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c8:	f248 0239 	movw	r2, #32825	; 0x8039
    81cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    81d0:	7812      	ldrb	r2, [r2, #0]
    81d2:	b2d2      	uxtb	r2, r2
    81d4:	f042 0210 	orr.w	r2, r2, #16
    81d8:	b2d2      	uxtb	r2, r2
    81da:	701a      	strb	r2, [r3, #0]
    81dc:	e00b      	b.n	81f6 <send_desired+0xe52>
    81de:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    81e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e6:	781b      	ldrb	r3, [r3, #0]
    81e8:	3301      	adds	r3, #1
    81ea:	b2da      	uxtb	r2, r3
    81ec:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	701a      	strb	r2, [r3, #0]
}
    81f6:	46bd      	mov	sp, r7
    81f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81fc:	4770      	bx	lr
    81fe:	bf00      	nop
    8200:	2000013f 	.word	0x2000013f

00008204 <send_bat>:
void send_bat(void){  //2000ms
    8204:	b480      	push	{r7}
    8206:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    8208:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    820c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8210:	781a      	ldrb	r2, [r3, #0]
    8212:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8216:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    821a:	fba3 1302 	umull	r1, r3, r3, r2
    821e:	0919      	lsrs	r1, r3, #4
    8220:	460b      	mov	r3, r1
    8222:	009b      	lsls	r3, r3, #2
    8224:	440b      	add	r3, r1
    8226:	009b      	lsls	r3, r3, #2
    8228:	1ad3      	subs	r3, r2, r3
    822a:	b2db      	uxtb	r3, r3
    822c:	2b08      	cmp	r3, #8
    822e:	f040 839a 	bne.w	8966 <send_bat+0x762>
    8232:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823a:	781a      	ldrb	r2, [r3, #0]
    823c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    8240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8244:	781b      	ldrb	r3, [r3, #0]
    8246:	b2db      	uxtb	r3, r3
    8248:	429a      	cmp	r2, r3
    824a:	d313      	bcc.n	8274 <send_bat+0x70>
    824c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    8250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8254:	781b      	ldrb	r3, [r3, #0]
    8256:	b2db      	uxtb	r3, r3
    8258:	461a      	mov	r2, r3
    825a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    825e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	1ad3      	subs	r3, r2, r3
    8266:	33ff      	adds	r3, #255	; 0xff
    8268:	2b0c      	cmp	r3, #12
    826a:	bfd4      	ite	le
    826c:	2300      	movle	r3, #0
    826e:	2301      	movgt	r3, #1
    8270:	b2db      	uxtb	r3, r3
    8272:	e011      	b.n	8298 <send_bat+0x94>
    8274:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    8278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827c:	781b      	ldrb	r3, [r3, #0]
    827e:	b2db      	uxtb	r3, r3
    8280:	461a      	mov	r2, r3
    8282:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828a:	781b      	ldrb	r3, [r3, #0]
    828c:	1ad3      	subs	r3, r2, r3
    828e:	2b0c      	cmp	r3, #12
    8290:	bfd4      	ite	le
    8292:	2300      	movle	r3, #0
    8294:	2301      	movgt	r3, #1
    8296:	b2db      	uxtb	r3, r3
    8298:	2b00      	cmp	r3, #0
    829a:	f000 8358 	beq.w	894e <send_bat+0x74a>
    829e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    82a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	461a      	mov	r2, r3
    82aa:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    82ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b2:	2105      	movs	r1, #5
    82b4:	5499      	strb	r1, [r3, r2]
    82b6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    82ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82be:	781b      	ldrb	r3, [r3, #0]
    82c0:	3301      	adds	r3, #1
    82c2:	b2da      	uxtb	r2, r3
    82c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    82c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82cc:	701a      	strb	r2, [r3, #0]
    82ce:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    82d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	2bff      	cmp	r3, #255	; 0xff
    82da:	d105      	bne.n	82e8 <send_bat+0xe4>
    82dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    82e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e4:	2200      	movs	r2, #0
    82e6:	701a      	strb	r2, [r3, #0]
    82e8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    82ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	461a      	mov	r2, r3
    82f4:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    82f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fc:	210c      	movs	r1, #12
    82fe:	5499      	strb	r1, [r3, r2]
    8300:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	3301      	adds	r3, #1
    830c:	b2da      	uxtb	r2, r3
    830e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8316:	701a      	strb	r2, [r3, #0]
    8318:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    831c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	2bff      	cmp	r3, #255	; 0xff
    8324:	d105      	bne.n	8332 <send_bat+0x12e>
    8326:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    832a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832e:	2200      	movs	r2, #0
    8330:	701a      	strb	r2, [r3, #0]
    8332:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833a:	220c      	movs	r2, #12
    833c:	701a      	strb	r2, [r3, #0]
    833e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8346:	220c      	movs	r2, #12
    8348:	701a      	strb	r2, [r3, #0]
    834a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    834e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	461a      	mov	r2, r3
    8356:	f24b 43aa 	movw	r3, #46250	; 0xb4aa
    835a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835e:	7819      	ldrb	r1, [r3, #0]
    8360:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	5499      	strb	r1, [r3, r2]
    836a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    836e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8372:	781a      	ldrb	r2, [r3, #0]
    8374:	f24b 43aa 	movw	r3, #46250	; 0xb4aa
    8378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837c:	781b      	ldrb	r3, [r3, #0]
    837e:	4413      	add	r3, r2
    8380:	b2da      	uxtb	r2, r3
    8382:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838a:	701a      	strb	r2, [r3, #0]
    838c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8394:	781a      	ldrb	r2, [r3, #0]
    8396:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    839a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839e:	781b      	ldrb	r3, [r3, #0]
    83a0:	4413      	add	r3, r2
    83a2:	b2da      	uxtb	r2, r3
    83a4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    83a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ac:	701a      	strb	r2, [r3, #0]
    83ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    83b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b6:	781b      	ldrb	r3, [r3, #0]
    83b8:	3301      	adds	r3, #1
    83ba:	b2da      	uxtb	r2, r3
    83bc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    83c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c4:	701a      	strb	r2, [r3, #0]
    83c6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    83ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ce:	781b      	ldrb	r3, [r3, #0]
    83d0:	2bff      	cmp	r3, #255	; 0xff
    83d2:	d105      	bne.n	83e0 <send_bat+0x1dc>
    83d4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    83d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83dc:	2200      	movs	r2, #0
    83de:	701a      	strb	r2, [r3, #0]
    83e0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    83e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	461a      	mov	r2, r3
    83ec:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    83f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f4:	7819      	ldrb	r1, [r3, #0]
    83f6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    83fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fe:	5499      	strb	r1, [r3, r2]
    8400:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    8404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8408:	781a      	ldrb	r2, [r3, #0]
    840a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    840e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8412:	781b      	ldrb	r3, [r3, #0]
    8414:	4413      	add	r3, r2
    8416:	b2da      	uxtb	r2, r3
    8418:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    841c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8420:	701a      	strb	r2, [r3, #0]
    8422:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842a:	781a      	ldrb	r2, [r3, #0]
    842c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	4413      	add	r3, r2
    8438:	b2da      	uxtb	r2, r3
    843a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    843e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8442:	701a      	strb	r2, [r3, #0]
    8444:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844c:	781b      	ldrb	r3, [r3, #0]
    844e:	3301      	adds	r3, #1
    8450:	b2da      	uxtb	r2, r3
    8452:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845a:	701a      	strb	r2, [r3, #0]
    845c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	2bff      	cmp	r3, #255	; 0xff
    8468:	d105      	bne.n	8476 <send_bat+0x272>
    846a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    846e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8472:	2200      	movs	r2, #0
    8474:	701a      	strb	r2, [r3, #0]
    8476:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    847a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	461a      	mov	r2, r3
    8482:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    8486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848a:	7859      	ldrb	r1, [r3, #1]
    848c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8494:	5499      	strb	r1, [r3, r2]
    8496:	4bd5      	ldr	r3, [pc, #852]	; (87ec <send_bat+0x5e8>)
    8498:	781a      	ldrb	r2, [r3, #0]
    849a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    849e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a2:	781b      	ldrb	r3, [r3, #0]
    84a4:	4413      	add	r3, r2
    84a6:	b2da      	uxtb	r2, r3
    84a8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    84ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b0:	701a      	strb	r2, [r3, #0]
    84b2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    84b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ba:	781a      	ldrb	r2, [r3, #0]
    84bc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    84c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	4413      	add	r3, r2
    84c8:	b2da      	uxtb	r2, r3
    84ca:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	701a      	strb	r2, [r3, #0]
    84d4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    84d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84dc:	781b      	ldrb	r3, [r3, #0]
    84de:	3301      	adds	r3, #1
    84e0:	b2da      	uxtb	r2, r3
    84e2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	701a      	strb	r2, [r3, #0]
    84ec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    84f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f4:	781b      	ldrb	r3, [r3, #0]
    84f6:	2bff      	cmp	r3, #255	; 0xff
    84f8:	d105      	bne.n	8506 <send_bat+0x302>
    84fa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    84fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8502:	2200      	movs	r2, #0
    8504:	701a      	strb	r2, [r3, #0]
    8506:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    850a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	461a      	mov	r2, r3
    8512:	f24b 43ad 	movw	r3, #46253	; 0xb4ad
    8516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851a:	7819      	ldrb	r1, [r3, #0]
    851c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8524:	5499      	strb	r1, [r3, r2]
    8526:	f24b 43ad 	movw	r3, #46253	; 0xb4ad
    852a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852e:	781a      	ldrb	r2, [r3, #0]
    8530:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8538:	781b      	ldrb	r3, [r3, #0]
    853a:	4413      	add	r3, r2
    853c:	b2da      	uxtb	r2, r3
    853e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8546:	701a      	strb	r2, [r3, #0]
    8548:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    854c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8550:	781a      	ldrb	r2, [r3, #0]
    8552:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855a:	781b      	ldrb	r3, [r3, #0]
    855c:	4413      	add	r3, r2
    855e:	b2da      	uxtb	r2, r3
    8560:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8568:	701a      	strb	r2, [r3, #0]
    856a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    856e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8572:	781b      	ldrb	r3, [r3, #0]
    8574:	3301      	adds	r3, #1
    8576:	b2da      	uxtb	r2, r3
    8578:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    857c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8580:	701a      	strb	r2, [r3, #0]
    8582:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858a:	781b      	ldrb	r3, [r3, #0]
    858c:	2bff      	cmp	r3, #255	; 0xff
    858e:	d105      	bne.n	859c <send_bat+0x398>
    8590:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8598:	2200      	movs	r2, #0
    859a:	701a      	strb	r2, [r3, #0]
    859c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    85a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	461a      	mov	r2, r3
    85a8:	f64b 032e 	movw	r3, #47150	; 0xb82e
    85ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b0:	7819      	ldrb	r1, [r3, #0]
    85b2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    85b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ba:	5499      	strb	r1, [r3, r2]
    85bc:	f64b 032e 	movw	r3, #47150	; 0xb82e
    85c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c4:	781a      	ldrb	r2, [r3, #0]
    85c6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    85ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	4413      	add	r3, r2
    85d2:	b2da      	uxtb	r2, r3
    85d4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    85d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85dc:	701a      	strb	r2, [r3, #0]
    85de:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    85e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e6:	781a      	ldrb	r2, [r3, #0]
    85e8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    85ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	4413      	add	r3, r2
    85f4:	b2da      	uxtb	r2, r3
    85f6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    85fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fe:	701a      	strb	r2, [r3, #0]
    8600:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	3301      	adds	r3, #1
    860c:	b2da      	uxtb	r2, r3
    860e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8616:	701a      	strb	r2, [r3, #0]
    8618:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    861c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	2bff      	cmp	r3, #255	; 0xff
    8624:	d105      	bne.n	8632 <send_bat+0x42e>
    8626:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    862a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862e:	2200      	movs	r2, #0
    8630:	701a      	strb	r2, [r3, #0]
    8632:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863a:	781b      	ldrb	r3, [r3, #0]
    863c:	461a      	mov	r2, r3
    863e:	f64b 032e 	movw	r3, #47150	; 0xb82e
    8642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8646:	7859      	ldrb	r1, [r3, #1]
    8648:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    864c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8650:	5499      	strb	r1, [r3, r2]
    8652:	4b67      	ldr	r3, [pc, #412]	; (87f0 <send_bat+0x5ec>)
    8654:	781a      	ldrb	r2, [r3, #0]
    8656:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    865a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865e:	781b      	ldrb	r3, [r3, #0]
    8660:	4413      	add	r3, r2
    8662:	b2da      	uxtb	r2, r3
    8664:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	701a      	strb	r2, [r3, #0]
    866e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8676:	781a      	ldrb	r2, [r3, #0]
    8678:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    867c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8680:	781b      	ldrb	r3, [r3, #0]
    8682:	4413      	add	r3, r2
    8684:	b2da      	uxtb	r2, r3
    8686:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	701a      	strb	r2, [r3, #0]
    8690:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8698:	781b      	ldrb	r3, [r3, #0]
    869a:	3301      	adds	r3, #1
    869c:	b2da      	uxtb	r2, r3
    869e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    86a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a6:	701a      	strb	r2, [r3, #0]
    86a8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    86ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b0:	781b      	ldrb	r3, [r3, #0]
    86b2:	2bff      	cmp	r3, #255	; 0xff
    86b4:	d105      	bne.n	86c2 <send_bat+0x4be>
    86b6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    86ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86be:	2200      	movs	r2, #0
    86c0:	701a      	strb	r2, [r3, #0]
    86c2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    86c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	461a      	mov	r2, r3
    86ce:	f64b 032c 	movw	r3, #47148	; 0xb82c
    86d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d6:	7819      	ldrb	r1, [r3, #0]
    86d8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    86dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e0:	5499      	strb	r1, [r3, r2]
    86e2:	f64b 032c 	movw	r3, #47148	; 0xb82c
    86e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ea:	781a      	ldrb	r2, [r3, #0]
    86ec:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    86f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	4413      	add	r3, r2
    86f8:	b2da      	uxtb	r2, r3
    86fa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    86fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8702:	701a      	strb	r2, [r3, #0]
    8704:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870c:	781a      	ldrb	r2, [r3, #0]
    870e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	4413      	add	r3, r2
    871a:	b2da      	uxtb	r2, r3
    871c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8724:	701a      	strb	r2, [r3, #0]
    8726:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    872a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	3301      	adds	r3, #1
    8732:	b2da      	uxtb	r2, r3
    8734:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873c:	701a      	strb	r2, [r3, #0]
    873e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	2bff      	cmp	r3, #255	; 0xff
    874a:	d105      	bne.n	8758 <send_bat+0x554>
    874c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8754:	2200      	movs	r2, #0
    8756:	701a      	strb	r2, [r3, #0]
    8758:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    875c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8760:	781b      	ldrb	r3, [r3, #0]
    8762:	461a      	mov	r2, r3
    8764:	f64b 032c 	movw	r3, #47148	; 0xb82c
    8768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876c:	7859      	ldrb	r1, [r3, #1]
    876e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8776:	5499      	strb	r1, [r3, r2]
    8778:	4b1e      	ldr	r3, [pc, #120]	; (87f4 <send_bat+0x5f0>)
    877a:	781a      	ldrb	r2, [r3, #0]
    877c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	4413      	add	r3, r2
    8788:	b2da      	uxtb	r2, r3
    878a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    878e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8792:	701a      	strb	r2, [r3, #0]
    8794:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879c:	781a      	ldrb	r2, [r3, #0]
    879e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    87a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	4413      	add	r3, r2
    87aa:	b2da      	uxtb	r2, r3
    87ac:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    87b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b4:	701a      	strb	r2, [r3, #0]
    87b6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    87ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87be:	781b      	ldrb	r3, [r3, #0]
    87c0:	3301      	adds	r3, #1
    87c2:	b2da      	uxtb	r2, r3
    87c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    87c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87cc:	701a      	strb	r2, [r3, #0]
    87ce:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    87d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d6:	781b      	ldrb	r3, [r3, #0]
    87d8:	2bff      	cmp	r3, #255	; 0xff
    87da:	d10d      	bne.n	87f8 <send_bat+0x5f4>
    87dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    87e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e4:	2200      	movs	r2, #0
    87e6:	701a      	strb	r2, [r3, #0]
    87e8:	e006      	b.n	87f8 <send_bat+0x5f4>
    87ea:	bf00      	nop
    87ec:	2004baa5 	.word	0x2004baa5
    87f0:	2004b82f 	.word	0x2004b82f
    87f4:	2004b82d 	.word	0x2004b82d
    87f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    87fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8800:	781b      	ldrb	r3, [r3, #0]
    8802:	461a      	mov	r2, r3
    8804:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	7819      	ldrb	r1, [r3, #0]
    880e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8816:	5499      	strb	r1, [r3, r2]
    8818:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    881c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8820:	781b      	ldrb	r3, [r3, #0]
    8822:	3301      	adds	r3, #1
    8824:	b2da      	uxtb	r2, r3
    8826:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    882a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882e:	701a      	strb	r2, [r3, #0]
    8830:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8838:	781b      	ldrb	r3, [r3, #0]
    883a:	2bff      	cmp	r3, #255	; 0xff
    883c:	d105      	bne.n	884a <send_bat+0x646>
    883e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8846:	2200      	movs	r2, #0
    8848:	701a      	strb	r2, [r3, #0]
    884a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    884e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8852:	781b      	ldrb	r3, [r3, #0]
    8854:	461a      	mov	r2, r3
    8856:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    885a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885e:	7819      	ldrb	r1, [r3, #0]
    8860:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8868:	5499      	strb	r1, [r3, r2]
    886a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    886e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8872:	781b      	ldrb	r3, [r3, #0]
    8874:	3301      	adds	r3, #1
    8876:	b2da      	uxtb	r2, r3
    8878:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    887c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8880:	701a      	strb	r2, [r3, #0]
    8882:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888a:	781b      	ldrb	r3, [r3, #0]
    888c:	2bff      	cmp	r3, #255	; 0xff
    888e:	d105      	bne.n	889c <send_bat+0x698>
    8890:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8898:	2200      	movs	r2, #0
    889a:	701a      	strb	r2, [r3, #0]
    889c:	f248 0339 	movw	r3, #32825	; 0x8039
    88a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	b2db      	uxtb	r3, r3
    88a8:	f003 0310 	and.w	r3, r3, #16
    88ac:	2b00      	cmp	r3, #0
    88ae:	d15a      	bne.n	8966 <send_bat+0x762>
    88b0:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    88b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	b2db      	uxtb	r3, r3
    88bc:	461a      	mov	r2, r3
    88be:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    88c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c6:	5c9a      	ldrb	r2, [r3, r2]
    88c8:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    88cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d0:	701a      	strb	r2, [r3, #0]
    88d2:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    88d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88da:	2200      	movs	r2, #0
    88dc:	701a      	strb	r2, [r3, #0]
    88de:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    88e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e6:	781b      	ldrb	r3, [r3, #0]
    88e8:	b2db      	uxtb	r3, r3
    88ea:	3301      	adds	r3, #1
    88ec:	b2da      	uxtb	r2, r3
    88ee:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    88f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f6:	701a      	strb	r2, [r3, #0]
    88f8:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    88fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8900:	781b      	ldrb	r3, [r3, #0]
    8902:	b2db      	uxtb	r3, r3
    8904:	2bff      	cmp	r3, #255	; 0xff
    8906:	d105      	bne.n	8914 <send_bat+0x710>
    8908:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    890c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8910:	2200      	movs	r2, #0
    8912:	701a      	strb	r2, [r3, #0]
    8914:	f248 0338 	movw	r3, #32824	; 0x8038
    8918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891c:	f248 0238 	movw	r2, #32824	; 0x8038
    8920:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8924:	7812      	ldrb	r2, [r2, #0]
    8926:	b2d2      	uxtb	r2, r2
    8928:	f042 0201 	orr.w	r2, r2, #1
    892c:	b2d2      	uxtb	r2, r2
    892e:	701a      	strb	r2, [r3, #0]
    8930:	f248 0339 	movw	r3, #32825	; 0x8039
    8934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8938:	f248 0239 	movw	r2, #32825	; 0x8039
    893c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8940:	7812      	ldrb	r2, [r2, #0]
    8942:	b2d2      	uxtb	r2, r2
    8944:	f042 0210 	orr.w	r2, r2, #16
    8948:	b2d2      	uxtb	r2, r2
    894a:	701a      	strb	r2, [r3, #0]
    894c:	e00b      	b.n	8966 <send_bat+0x762>
    894e:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    8952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8956:	781b      	ldrb	r3, [r3, #0]
    8958:	3301      	adds	r3, #1
    895a:	b2da      	uxtb	r2, r3
    895c:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	701a      	strb	r2, [r3, #0]
}
    8966:	46bd      	mov	sp, r7
    8968:	f85d 7b04 	ldr.w	r7, [sp], #4
    896c:	4770      	bx	lr
    896e:	bf00      	nop

00008970 <send_climb>:
void send_climb(void){  //2000ms
    8970:	b480      	push	{r7}
    8972:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    8974:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    8978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897c:	781a      	ldrb	r2, [r3, #0]
    897e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8982:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8986:	fba3 1302 	umull	r1, r3, r3, r2
    898a:	0919      	lsrs	r1, r3, #4
    898c:	460b      	mov	r3, r1
    898e:	009b      	lsls	r3, r3, #2
    8990:	440b      	add	r3, r1
    8992:	009b      	lsls	r3, r3, #2
    8994:	1ad3      	subs	r3, r2, r3
    8996:	b2db      	uxtb	r3, r3
    8998:	2b12      	cmp	r3, #18
    899a:	f040 8554 	bne.w	9446 <send_climb+0xad6>
    899e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    89a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a6:	781a      	ldrb	r2, [r3, #0]
    89a8:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    89ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b0:	781b      	ldrb	r3, [r3, #0]
    89b2:	b2db      	uxtb	r3, r3
    89b4:	429a      	cmp	r2, r3
    89b6:	d313      	bcc.n	89e0 <send_climb+0x70>
    89b8:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    89bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	b2db      	uxtb	r3, r3
    89c4:	461a      	mov	r2, r3
    89c6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    89ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	1ad3      	subs	r3, r2, r3
    89d2:	33ff      	adds	r3, #255	; 0xff
    89d4:	2b12      	cmp	r3, #18
    89d6:	bfd4      	ite	le
    89d8:	2300      	movle	r3, #0
    89da:	2301      	movgt	r3, #1
    89dc:	b2db      	uxtb	r3, r3
    89de:	e011      	b.n	8a04 <send_climb+0x94>
    89e0:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    89e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e8:	781b      	ldrb	r3, [r3, #0]
    89ea:	b2db      	uxtb	r3, r3
    89ec:	461a      	mov	r2, r3
    89ee:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    89f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	1ad3      	subs	r3, r2, r3
    89fa:	2b12      	cmp	r3, #18
    89fc:	bfd4      	ite	le
    89fe:	2300      	movle	r3, #0
    8a00:	2301      	movgt	r3, #1
    8a02:	b2db      	uxtb	r3, r3
    8a04:	2b00      	cmp	r3, #0
    8a06:	f000 8512 	beq.w	942e <send_climb+0xabe>
    8a0a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a12:	781b      	ldrb	r3, [r3, #0]
    8a14:	461a      	mov	r2, r3
    8a16:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1e:	2105      	movs	r1, #5
    8a20:	5499      	strb	r1, [r3, r2]
    8a22:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	3301      	adds	r3, #1
    8a2e:	b2da      	uxtb	r2, r3
    8a30:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a38:	701a      	strb	r2, [r3, #0]
    8a3a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	2bff      	cmp	r3, #255	; 0xff
    8a46:	d105      	bne.n	8a54 <send_climb+0xe4>
    8a48:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a50:	2200      	movs	r2, #0
    8a52:	701a      	strb	r2, [r3, #0]
    8a54:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	461a      	mov	r2, r3
    8a60:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a68:	210e      	movs	r1, #14
    8a6a:	5499      	strb	r1, [r3, r2]
    8a6c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	3301      	adds	r3, #1
    8a78:	b2da      	uxtb	r2, r3
    8a7a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a82:	701a      	strb	r2, [r3, #0]
    8a84:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	2bff      	cmp	r3, #255	; 0xff
    8a90:	d105      	bne.n	8a9e <send_climb+0x12e>
    8a92:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	2200      	movs	r2, #0
    8a9c:	701a      	strb	r2, [r3, #0]
    8a9e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa6:	220e      	movs	r2, #14
    8aa8:	701a      	strb	r2, [r3, #0]
    8aaa:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab2:	220e      	movs	r2, #14
    8ab4:	701a      	strb	r2, [r3, #0]
    8ab6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8abe:	781b      	ldrb	r3, [r3, #0]
    8ac0:	461a      	mov	r2, r3
    8ac2:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    8ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aca:	7819      	ldrb	r1, [r3, #0]
    8acc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad4:	5499      	strb	r1, [r3, r2]
    8ad6:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    8ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ade:	781a      	ldrb	r2, [r3, #0]
    8ae0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae8:	781b      	ldrb	r3, [r3, #0]
    8aea:	4413      	add	r3, r2
    8aec:	b2da      	uxtb	r2, r3
    8aee:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af6:	701a      	strb	r2, [r3, #0]
    8af8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b00:	781a      	ldrb	r2, [r3, #0]
    8b02:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0a:	781b      	ldrb	r3, [r3, #0]
    8b0c:	4413      	add	r3, r2
    8b0e:	b2da      	uxtb	r2, r3
    8b10:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	701a      	strb	r2, [r3, #0]
    8b1a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b22:	781b      	ldrb	r3, [r3, #0]
    8b24:	3301      	adds	r3, #1
    8b26:	b2da      	uxtb	r2, r3
    8b28:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b30:	701a      	strb	r2, [r3, #0]
    8b32:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3a:	781b      	ldrb	r3, [r3, #0]
    8b3c:	2bff      	cmp	r3, #255	; 0xff
    8b3e:	d105      	bne.n	8b4c <send_climb+0x1dc>
    8b40:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b48:	2200      	movs	r2, #0
    8b4a:	701a      	strb	r2, [r3, #0]
    8b4c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b54:	781b      	ldrb	r3, [r3, #0]
    8b56:	461a      	mov	r2, r3
    8b58:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	7859      	ldrb	r1, [r3, #1]
    8b62:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6a:	5499      	strb	r1, [r3, r2]
    8b6c:	4bd3      	ldr	r3, [pc, #844]	; (8ebc <send_climb+0x54c>)
    8b6e:	781a      	ldrb	r2, [r3, #0]
    8b70:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	4413      	add	r3, r2
    8b7c:	b2da      	uxtb	r2, r3
    8b7e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	701a      	strb	r2, [r3, #0]
    8b88:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b90:	781a      	ldrb	r2, [r3, #0]
    8b92:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	4413      	add	r3, r2
    8b9e:	b2da      	uxtb	r2, r3
    8ba0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	701a      	strb	r2, [r3, #0]
    8baa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb2:	781b      	ldrb	r3, [r3, #0]
    8bb4:	3301      	adds	r3, #1
    8bb6:	b2da      	uxtb	r2, r3
    8bb8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	701a      	strb	r2, [r3, #0]
    8bc2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	2bff      	cmp	r3, #255	; 0xff
    8bce:	d105      	bne.n	8bdc <send_climb+0x26c>
    8bd0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd8:	2200      	movs	r2, #0
    8bda:	701a      	strb	r2, [r3, #0]
    8bdc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	461a      	mov	r2, r3
    8be8:	f64b 0308 	movw	r3, #47112	; 0xb808
    8bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf0:	7819      	ldrb	r1, [r3, #0]
    8bf2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfa:	5499      	strb	r1, [r3, r2]
    8bfc:	f64b 0308 	movw	r3, #47112	; 0xb808
    8c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c04:	781a      	ldrb	r2, [r3, #0]
    8c06:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	4413      	add	r3, r2
    8c12:	b2da      	uxtb	r2, r3
    8c14:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1c:	701a      	strb	r2, [r3, #0]
    8c1e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c26:	781a      	ldrb	r2, [r3, #0]
    8c28:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c30:	781b      	ldrb	r3, [r3, #0]
    8c32:	4413      	add	r3, r2
    8c34:	b2da      	uxtb	r2, r3
    8c36:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3e:	701a      	strb	r2, [r3, #0]
    8c40:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	3301      	adds	r3, #1
    8c4c:	b2da      	uxtb	r2, r3
    8c4e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c56:	701a      	strb	r2, [r3, #0]
    8c58:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c60:	781b      	ldrb	r3, [r3, #0]
    8c62:	2bff      	cmp	r3, #255	; 0xff
    8c64:	d105      	bne.n	8c72 <send_climb+0x302>
    8c66:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6e:	2200      	movs	r2, #0
    8c70:	701a      	strb	r2, [r3, #0]
    8c72:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7a:	781b      	ldrb	r3, [r3, #0]
    8c7c:	461a      	mov	r2, r3
    8c7e:	f64b 0308 	movw	r3, #47112	; 0xb808
    8c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c86:	7859      	ldrb	r1, [r3, #1]
    8c88:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c90:	5499      	strb	r1, [r3, r2]
    8c92:	4b8b      	ldr	r3, [pc, #556]	; (8ec0 <send_climb+0x550>)
    8c94:	781a      	ldrb	r2, [r3, #0]
    8c96:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c9e:	781b      	ldrb	r3, [r3, #0]
    8ca0:	4413      	add	r3, r2
    8ca2:	b2da      	uxtb	r2, r3
    8ca4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cac:	701a      	strb	r2, [r3, #0]
    8cae:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb6:	781a      	ldrb	r2, [r3, #0]
    8cb8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc0:	781b      	ldrb	r3, [r3, #0]
    8cc2:	4413      	add	r3, r2
    8cc4:	b2da      	uxtb	r2, r3
    8cc6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cce:	701a      	strb	r2, [r3, #0]
    8cd0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	3301      	adds	r3, #1
    8cdc:	b2da      	uxtb	r2, r3
    8cde:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce6:	701a      	strb	r2, [r3, #0]
    8ce8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf0:	781b      	ldrb	r3, [r3, #0]
    8cf2:	2bff      	cmp	r3, #255	; 0xff
    8cf4:	d105      	bne.n	8d02 <send_climb+0x392>
    8cf6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfe:	2200      	movs	r2, #0
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	461a      	mov	r2, r3
    8d0e:	f64b 0308 	movw	r3, #47112	; 0xb808
    8d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d16:	7899      	ldrb	r1, [r3, #2]
    8d18:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d20:	5499      	strb	r1, [r3, r2]
    8d22:	4b68      	ldr	r3, [pc, #416]	; (8ec4 <send_climb+0x554>)
    8d24:	781a      	ldrb	r2, [r3, #0]
    8d26:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	4413      	add	r3, r2
    8d32:	b2da      	uxtb	r2, r3
    8d34:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3c:	701a      	strb	r2, [r3, #0]
    8d3e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d46:	781a      	ldrb	r2, [r3, #0]
    8d48:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d50:	781b      	ldrb	r3, [r3, #0]
    8d52:	4413      	add	r3, r2
    8d54:	b2da      	uxtb	r2, r3
    8d56:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5e:	701a      	strb	r2, [r3, #0]
    8d60:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	3301      	adds	r3, #1
    8d6c:	b2da      	uxtb	r2, r3
    8d6e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d76:	701a      	strb	r2, [r3, #0]
    8d78:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d80:	781b      	ldrb	r3, [r3, #0]
    8d82:	2bff      	cmp	r3, #255	; 0xff
    8d84:	d105      	bne.n	8d92 <send_climb+0x422>
    8d86:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8e:	2200      	movs	r2, #0
    8d90:	701a      	strb	r2, [r3, #0]
    8d92:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9a:	781b      	ldrb	r3, [r3, #0]
    8d9c:	461a      	mov	r2, r3
    8d9e:	f64b 0308 	movw	r3, #47112	; 0xb808
    8da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da6:	78d9      	ldrb	r1, [r3, #3]
    8da8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db0:	5499      	strb	r1, [r3, r2]
    8db2:	4b45      	ldr	r3, [pc, #276]	; (8ec8 <send_climb+0x558>)
    8db4:	781a      	ldrb	r2, [r3, #0]
    8db6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbe:	781b      	ldrb	r3, [r3, #0]
    8dc0:	4413      	add	r3, r2
    8dc2:	b2da      	uxtb	r2, r3
    8dc4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dcc:	701a      	strb	r2, [r3, #0]
    8dce:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd6:	781a      	ldrb	r2, [r3, #0]
    8dd8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de0:	781b      	ldrb	r3, [r3, #0]
    8de2:	4413      	add	r3, r2
    8de4:	b2da      	uxtb	r2, r3
    8de6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dee:	701a      	strb	r2, [r3, #0]
    8df0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df8:	781b      	ldrb	r3, [r3, #0]
    8dfa:	3301      	adds	r3, #1
    8dfc:	b2da      	uxtb	r2, r3
    8dfe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e06:	701a      	strb	r2, [r3, #0]
    8e08:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	2bff      	cmp	r3, #255	; 0xff
    8e14:	d105      	bne.n	8e22 <send_climb+0x4b2>
    8e16:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1e:	2200      	movs	r2, #0
    8e20:	701a      	strb	r2, [r3, #0]
    8e22:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2a:	781b      	ldrb	r3, [r3, #0]
    8e2c:	461a      	mov	r2, r3
    8e2e:	f64b 0310 	movw	r3, #47120	; 0xb810
    8e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e36:	7819      	ldrb	r1, [r3, #0]
    8e38:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e40:	5499      	strb	r1, [r3, r2]
    8e42:	f64b 0310 	movw	r3, #47120	; 0xb810
    8e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4a:	781a      	ldrb	r2, [r3, #0]
    8e4c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e54:	781b      	ldrb	r3, [r3, #0]
    8e56:	4413      	add	r3, r2
    8e58:	b2da      	uxtb	r2, r3
    8e5a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e62:	701a      	strb	r2, [r3, #0]
    8e64:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6c:	781a      	ldrb	r2, [r3, #0]
    8e6e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	4413      	add	r3, r2
    8e7a:	b2da      	uxtb	r2, r3
    8e7c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e84:	701a      	strb	r2, [r3, #0]
    8e86:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8e:	781b      	ldrb	r3, [r3, #0]
    8e90:	3301      	adds	r3, #1
    8e92:	b2da      	uxtb	r2, r3
    8e94:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9c:	701a      	strb	r2, [r3, #0]
    8e9e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea6:	781b      	ldrb	r3, [r3, #0]
    8ea8:	2bff      	cmp	r3, #255	; 0xff
    8eaa:	d10f      	bne.n	8ecc <send_climb+0x55c>
    8eac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb4:	2200      	movs	r2, #0
    8eb6:	701a      	strb	r2, [r3, #0]
    8eb8:	e008      	b.n	8ecc <send_climb+0x55c>
    8eba:	bf00      	nop
    8ebc:	2004b7f5 	.word	0x2004b7f5
    8ec0:	2004b809 	.word	0x2004b809
    8ec4:	2004b80a 	.word	0x2004b80a
    8ec8:	2004b80b 	.word	0x2004b80b
    8ecc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	461a      	mov	r2, r3
    8ed8:	f64b 0310 	movw	r3, #47120	; 0xb810
    8edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee0:	7859      	ldrb	r1, [r3, #1]
    8ee2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eea:	5499      	strb	r1, [r3, r2]
    8eec:	4bd1      	ldr	r3, [pc, #836]	; (9234 <send_climb+0x8c4>)
    8eee:	781a      	ldrb	r2, [r3, #0]
    8ef0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef8:	781b      	ldrb	r3, [r3, #0]
    8efa:	4413      	add	r3, r2
    8efc:	b2da      	uxtb	r2, r3
    8efe:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f06:	701a      	strb	r2, [r3, #0]
    8f08:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f10:	781a      	ldrb	r2, [r3, #0]
    8f12:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	4413      	add	r3, r2
    8f1e:	b2da      	uxtb	r2, r3
    8f20:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f28:	701a      	strb	r2, [r3, #0]
    8f2a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f32:	781b      	ldrb	r3, [r3, #0]
    8f34:	3301      	adds	r3, #1
    8f36:	b2da      	uxtb	r2, r3
    8f38:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f40:	701a      	strb	r2, [r3, #0]
    8f42:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	2bff      	cmp	r3, #255	; 0xff
    8f4e:	d105      	bne.n	8f5c <send_climb+0x5ec>
    8f50:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f58:	2200      	movs	r2, #0
    8f5a:	701a      	strb	r2, [r3, #0]
    8f5c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	461a      	mov	r2, r3
    8f68:	f64b 0310 	movw	r3, #47120	; 0xb810
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	7899      	ldrb	r1, [r3, #2]
    8f72:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    8f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7a:	5499      	strb	r1, [r3, r2]
    8f7c:	4bae      	ldr	r3, [pc, #696]	; (9238 <send_climb+0x8c8>)
    8f7e:	781a      	ldrb	r2, [r3, #0]
    8f80:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f88:	781b      	ldrb	r3, [r3, #0]
    8f8a:	4413      	add	r3, r2
    8f8c:	b2da      	uxtb	r2, r3
    8f8e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f96:	701a      	strb	r2, [r3, #0]
    8f98:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa0:	781a      	ldrb	r2, [r3, #0]
    8fa2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    8fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	4413      	add	r3, r2
    8fae:	b2da      	uxtb	r2, r3
    8fb0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    8fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb8:	701a      	strb	r2, [r3, #0]
    8fba:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	3301      	adds	r3, #1
    8fc6:	b2da      	uxtb	r2, r3
    8fc8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd0:	701a      	strb	r2, [r3, #0]
    8fd2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	2bff      	cmp	r3, #255	; 0xff
    8fde:	d105      	bne.n	8fec <send_climb+0x67c>
    8fe0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	2200      	movs	r2, #0
    8fea:	701a      	strb	r2, [r3, #0]
    8fec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    8ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff4:	781b      	ldrb	r3, [r3, #0]
    8ff6:	461a      	mov	r2, r3
    8ff8:	f64b 0310 	movw	r3, #47120	; 0xb810
    8ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9000:	78d9      	ldrb	r1, [r3, #3]
    9002:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	5499      	strb	r1, [r3, r2]
    900c:	4b8b      	ldr	r3, [pc, #556]	; (923c <send_climb+0x8cc>)
    900e:	781a      	ldrb	r2, [r3, #0]
    9010:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9018:	781b      	ldrb	r3, [r3, #0]
    901a:	4413      	add	r3, r2
    901c:	b2da      	uxtb	r2, r3
    901e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9026:	701a      	strb	r2, [r3, #0]
    9028:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    902c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9030:	781a      	ldrb	r2, [r3, #0]
    9032:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903a:	781b      	ldrb	r3, [r3, #0]
    903c:	4413      	add	r3, r2
    903e:	b2da      	uxtb	r2, r3
    9040:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9048:	701a      	strb	r2, [r3, #0]
    904a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	3301      	adds	r3, #1
    9056:	b2da      	uxtb	r2, r3
    9058:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    905c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9060:	701a      	strb	r2, [r3, #0]
    9062:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	781b      	ldrb	r3, [r3, #0]
    906c:	2bff      	cmp	r3, #255	; 0xff
    906e:	d105      	bne.n	907c <send_climb+0x70c>
    9070:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9078:	2200      	movs	r2, #0
    907a:	701a      	strb	r2, [r3, #0]
    907c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	461a      	mov	r2, r3
    9088:	f643 1320 	movw	r3, #14624	; 0x3920
    908c:	f2c0 0301 	movt	r3, #1
    9090:	7819      	ldrb	r1, [r3, #0]
    9092:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	5499      	strb	r1, [r3, r2]
    909c:	f643 1320 	movw	r3, #14624	; 0x3920
    90a0:	f2c0 0301 	movt	r3, #1
    90a4:	781a      	ldrb	r2, [r3, #0]
    90a6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    90aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	4413      	add	r3, r2
    90b2:	b2da      	uxtb	r2, r3
    90b4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    90b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90bc:	701a      	strb	r2, [r3, #0]
    90be:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    90c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c6:	781a      	ldrb	r2, [r3, #0]
    90c8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    90cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d0:	781b      	ldrb	r3, [r3, #0]
    90d2:	4413      	add	r3, r2
    90d4:	b2da      	uxtb	r2, r3
    90d6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    90da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90de:	701a      	strb	r2, [r3, #0]
    90e0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	3301      	adds	r3, #1
    90ec:	b2da      	uxtb	r2, r3
    90ee:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    90f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f6:	701a      	strb	r2, [r3, #0]
    90f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	2bff      	cmp	r3, #255	; 0xff
    9104:	d105      	bne.n	9112 <send_climb+0x7a2>
    9106:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    910a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910e:	2200      	movs	r2, #0
    9110:	701a      	strb	r2, [r3, #0]
    9112:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	461a      	mov	r2, r3
    911e:	f643 1320 	movw	r3, #14624	; 0x3920
    9122:	f2c0 0301 	movt	r3, #1
    9126:	7859      	ldrb	r1, [r3, #1]
    9128:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	5499      	strb	r1, [r3, r2]
    9132:	4b43      	ldr	r3, [pc, #268]	; (9240 <send_climb+0x8d0>)
    9134:	781a      	ldrb	r2, [r3, #0]
    9136:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    913a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913e:	781b      	ldrb	r3, [r3, #0]
    9140:	4413      	add	r3, r2
    9142:	b2da      	uxtb	r2, r3
    9144:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	701a      	strb	r2, [r3, #0]
    914e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9156:	781a      	ldrb	r2, [r3, #0]
    9158:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	4413      	add	r3, r2
    9164:	b2da      	uxtb	r2, r3
    9166:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    916a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916e:	701a      	strb	r2, [r3, #0]
    9170:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	3301      	adds	r3, #1
    917c:	b2da      	uxtb	r2, r3
    917e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9186:	701a      	strb	r2, [r3, #0]
    9188:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	2bff      	cmp	r3, #255	; 0xff
    9194:	d105      	bne.n	91a2 <send_climb+0x832>
    9196:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    919a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919e:	2200      	movs	r2, #0
    91a0:	701a      	strb	r2, [r3, #0]
    91a2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    91a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	461a      	mov	r2, r3
    91ae:	f643 1320 	movw	r3, #14624	; 0x3920
    91b2:	f2c0 0301 	movt	r3, #1
    91b6:	7899      	ldrb	r1, [r3, #2]
    91b8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	5499      	strb	r1, [r3, r2]
    91c2:	4b20      	ldr	r3, [pc, #128]	; (9244 <send_climb+0x8d4>)
    91c4:	781a      	ldrb	r2, [r3, #0]
    91c6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    91ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ce:	781b      	ldrb	r3, [r3, #0]
    91d0:	4413      	add	r3, r2
    91d2:	b2da      	uxtb	r2, r3
    91d4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    91d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91dc:	701a      	strb	r2, [r3, #0]
    91de:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    91e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e6:	781a      	ldrb	r2, [r3, #0]
    91e8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    91ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	4413      	add	r3, r2
    91f4:	b2da      	uxtb	r2, r3
    91f6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    91fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	3301      	adds	r3, #1
    920c:	b2da      	uxtb	r2, r3
    920e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9216:	701a      	strb	r2, [r3, #0]
    9218:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    921c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9220:	781b      	ldrb	r3, [r3, #0]
    9222:	2bff      	cmp	r3, #255	; 0xff
    9224:	d110      	bne.n	9248 <send_climb+0x8d8>
    9226:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    922a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922e:	2200      	movs	r2, #0
    9230:	701a      	strb	r2, [r3, #0]
    9232:	e009      	b.n	9248 <send_climb+0x8d8>
    9234:	2004b811 	.word	0x2004b811
    9238:	2004b812 	.word	0x2004b812
    923c:	2004b813 	.word	0x2004b813
    9240:	00013921 	.word	0x00013921
    9244:	00013922 	.word	0x00013922
    9248:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	461a      	mov	r2, r3
    9254:	f643 1320 	movw	r3, #14624	; 0x3920
    9258:	f2c0 0301 	movt	r3, #1
    925c:	78d9      	ldrb	r1, [r3, #3]
    925e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9266:	5499      	strb	r1, [r3, r2]
    9268:	4b79      	ldr	r3, [pc, #484]	; (9450 <send_climb+0xae0>)
    926a:	781a      	ldrb	r2, [r3, #0]
    926c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9274:	781b      	ldrb	r3, [r3, #0]
    9276:	4413      	add	r3, r2
    9278:	b2da      	uxtb	r2, r3
    927a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    927e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9282:	701a      	strb	r2, [r3, #0]
    9284:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928c:	781a      	ldrb	r2, [r3, #0]
    928e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9296:	781b      	ldrb	r3, [r3, #0]
    9298:	4413      	add	r3, r2
    929a:	b2da      	uxtb	r2, r3
    929c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    92a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a4:	701a      	strb	r2, [r3, #0]
    92a6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    92aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	3301      	adds	r3, #1
    92b2:	b2da      	uxtb	r2, r3
    92b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    92b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92bc:	701a      	strb	r2, [r3, #0]
    92be:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    92c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c6:	781b      	ldrb	r3, [r3, #0]
    92c8:	2bff      	cmp	r3, #255	; 0xff
    92ca:	d105      	bne.n	92d8 <send_climb+0x968>
    92cc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    92d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d4:	2200      	movs	r2, #0
    92d6:	701a      	strb	r2, [r3, #0]
    92d8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    92dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	461a      	mov	r2, r3
    92e4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    92e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ec:	7819      	ldrb	r1, [r3, #0]
    92ee:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    92f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f6:	5499      	strb	r1, [r3, r2]
    92f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    92fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9300:	781b      	ldrb	r3, [r3, #0]
    9302:	3301      	adds	r3, #1
    9304:	b2da      	uxtb	r2, r3
    9306:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    930a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930e:	701a      	strb	r2, [r3, #0]
    9310:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9318:	781b      	ldrb	r3, [r3, #0]
    931a:	2bff      	cmp	r3, #255	; 0xff
    931c:	d105      	bne.n	932a <send_climb+0x9ba>
    931e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9326:	2200      	movs	r2, #0
    9328:	701a      	strb	r2, [r3, #0]
    932a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	781b      	ldrb	r3, [r3, #0]
    9334:	461a      	mov	r2, r3
    9336:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    933a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933e:	7819      	ldrb	r1, [r3, #0]
    9340:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9348:	5499      	strb	r1, [r3, r2]
    934a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    934e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	3301      	adds	r3, #1
    9356:	b2da      	uxtb	r2, r3
    9358:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    935c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9360:	701a      	strb	r2, [r3, #0]
    9362:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	2bff      	cmp	r3, #255	; 0xff
    936e:	d105      	bne.n	937c <send_climb+0xa0c>
    9370:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9378:	2200      	movs	r2, #0
    937a:	701a      	strb	r2, [r3, #0]
    937c:	f248 0339 	movw	r3, #32825	; 0x8039
    9380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	b2db      	uxtb	r3, r3
    9388:	f003 0310 	and.w	r3, r3, #16
    938c:	2b00      	cmp	r3, #0
    938e:	d15a      	bne.n	9446 <send_climb+0xad6>
    9390:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9398:	781b      	ldrb	r3, [r3, #0]
    939a:	b2db      	uxtb	r3, r3
    939c:	461a      	mov	r2, r3
    939e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    93a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a6:	5c9a      	ldrb	r2, [r3, r2]
    93a8:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    93ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b0:	701a      	strb	r2, [r3, #0]
    93b2:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    93b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ba:	2200      	movs	r2, #0
    93bc:	701a      	strb	r2, [r3, #0]
    93be:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    93c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c6:	781b      	ldrb	r3, [r3, #0]
    93c8:	b2db      	uxtb	r3, r3
    93ca:	3301      	adds	r3, #1
    93cc:	b2da      	uxtb	r2, r3
    93ce:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    93d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    93dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	b2db      	uxtb	r3, r3
    93e4:	2bff      	cmp	r3, #255	; 0xff
    93e6:	d105      	bne.n	93f4 <send_climb+0xa84>
    93e8:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    93ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f0:	2200      	movs	r2, #0
    93f2:	701a      	strb	r2, [r3, #0]
    93f4:	f248 0338 	movw	r3, #32824	; 0x8038
    93f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93fc:	f248 0238 	movw	r2, #32824	; 0x8038
    9400:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9404:	7812      	ldrb	r2, [r2, #0]
    9406:	b2d2      	uxtb	r2, r2
    9408:	f042 0201 	orr.w	r2, r2, #1
    940c:	b2d2      	uxtb	r2, r2
    940e:	701a      	strb	r2, [r3, #0]
    9410:	f248 0339 	movw	r3, #32825	; 0x8039
    9414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9418:	f248 0239 	movw	r2, #32825	; 0x8039
    941c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9420:	7812      	ldrb	r2, [r2, #0]
    9422:	b2d2      	uxtb	r2, r2
    9424:	f042 0210 	orr.w	r2, r2, #16
    9428:	b2d2      	uxtb	r2, r2
    942a:	701a      	strb	r2, [r3, #0]
    942c:	e00b      	b.n	9446 <send_climb+0xad6>
    942e:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    9432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9436:	781b      	ldrb	r3, [r3, #0]
    9438:	3301      	adds	r3, #1
    943a:	b2da      	uxtb	r2, r3
    943c:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    9440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9444:	701a      	strb	r2, [r3, #0]
}
    9446:	46bd      	mov	sp, r7
    9448:	f85d 7b04 	ldr.w	r7, [sp], #4
    944c:	4770      	bx	lr
    944e:	bf00      	nop
    9450:	00013923 	.word	0x00013923

00009454 <send_mode>:
void send_mode(void){  //5000ms
    9454:	b480      	push	{r7}
    9456:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    9458:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    945c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9460:	781a      	ldrb	r2, [r3, #0]
    9462:	f248 531f 	movw	r3, #34079	; 0x851f
    9466:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    946a:	fba3 1302 	umull	r1, r3, r3, r2
    946e:	091b      	lsrs	r3, r3, #4
    9470:	2132      	movs	r1, #50	; 0x32
    9472:	fb01 f303 	mul.w	r3, r1, r3
    9476:	1ad3      	subs	r3, r2, r3
    9478:	b2db      	uxtb	r3, r3
    947a:	2b09      	cmp	r3, #9
    947c:	f040 82ba 	bne.w	99f4 <send_mode+0x5a0>
    9480:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9488:	781a      	ldrb	r2, [r3, #0]
    948a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    948e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	b2db      	uxtb	r3, r3
    9496:	429a      	cmp	r2, r3
    9498:	d313      	bcc.n	94c2 <send_mode+0x6e>
    949a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    949e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	b2db      	uxtb	r3, r3
    94a6:	461a      	mov	r2, r3
    94a8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    94ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b0:	781b      	ldrb	r3, [r3, #0]
    94b2:	1ad3      	subs	r3, r2, r3
    94b4:	33ff      	adds	r3, #255	; 0xff
    94b6:	2b09      	cmp	r3, #9
    94b8:	bfd4      	ite	le
    94ba:	2300      	movle	r3, #0
    94bc:	2301      	movgt	r3, #1
    94be:	b2db      	uxtb	r3, r3
    94c0:	e011      	b.n	94e6 <send_mode+0x92>
    94c2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	781b      	ldrb	r3, [r3, #0]
    94cc:	b2db      	uxtb	r3, r3
    94ce:	461a      	mov	r2, r3
    94d0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    94d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d8:	781b      	ldrb	r3, [r3, #0]
    94da:	1ad3      	subs	r3, r2, r3
    94dc:	2b09      	cmp	r3, #9
    94de:	bfd4      	ite	le
    94e0:	2300      	movle	r3, #0
    94e2:	2301      	movgt	r3, #1
    94e4:	b2db      	uxtb	r3, r3
    94e6:	2b00      	cmp	r3, #0
    94e8:	f000 8278 	beq.w	99dc <send_mode+0x588>
    94ec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    94f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f4:	781b      	ldrb	r3, [r3, #0]
    94f6:	461a      	mov	r2, r3
    94f8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    94fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9500:	2105      	movs	r1, #5
    9502:	5499      	strb	r1, [r3, r2]
    9504:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950c:	781b      	ldrb	r3, [r3, #0]
    950e:	3301      	adds	r3, #1
    9510:	b2da      	uxtb	r2, r3
    9512:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951a:	701a      	strb	r2, [r3, #0]
    951c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	2bff      	cmp	r3, #255	; 0xff
    9528:	d105      	bne.n	9536 <send_mode+0xe2>
    952a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    952e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9532:	2200      	movs	r2, #0
    9534:	701a      	strb	r2, [r3, #0]
    9536:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    953a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953e:	781b      	ldrb	r3, [r3, #0]
    9540:	461a      	mov	r2, r3
    9542:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954a:	210b      	movs	r1, #11
    954c:	5499      	strb	r1, [r3, r2]
    954e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9556:	781b      	ldrb	r3, [r3, #0]
    9558:	3301      	adds	r3, #1
    955a:	b2da      	uxtb	r2, r3
    955c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9564:	701a      	strb	r2, [r3, #0]
    9566:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    956a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956e:	781b      	ldrb	r3, [r3, #0]
    9570:	2bff      	cmp	r3, #255	; 0xff
    9572:	d105      	bne.n	9580 <send_mode+0x12c>
    9574:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957c:	2200      	movs	r2, #0
    957e:	701a      	strb	r2, [r3, #0]
    9580:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9588:	220b      	movs	r2, #11
    958a:	701a      	strb	r2, [r3, #0]
    958c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9594:	220b      	movs	r2, #11
    9596:	701a      	strb	r2, [r3, #0]
    9598:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	461a      	mov	r2, r3
    95a4:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    95a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ac:	7819      	ldrb	r1, [r3, #0]
    95ae:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    95b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b6:	5499      	strb	r1, [r3, r2]
    95b8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    95bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c0:	781a      	ldrb	r2, [r3, #0]
    95c2:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    95c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ca:	781b      	ldrb	r3, [r3, #0]
    95cc:	4413      	add	r3, r2
    95ce:	b2da      	uxtb	r2, r3
    95d0:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    95d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d8:	701a      	strb	r2, [r3, #0]
    95da:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	781a      	ldrb	r2, [r3, #0]
    95e4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    95e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ec:	781b      	ldrb	r3, [r3, #0]
    95ee:	4413      	add	r3, r2
    95f0:	b2da      	uxtb	r2, r3
    95f2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	701a      	strb	r2, [r3, #0]
    95fc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9604:	781b      	ldrb	r3, [r3, #0]
    9606:	3301      	adds	r3, #1
    9608:	b2da      	uxtb	r2, r3
    960a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    960e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9612:	701a      	strb	r2, [r3, #0]
    9614:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961c:	781b      	ldrb	r3, [r3, #0]
    961e:	2bff      	cmp	r3, #255	; 0xff
    9620:	d105      	bne.n	962e <send_mode+0x1da>
    9622:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962a:	2200      	movs	r2, #0
    962c:	701a      	strb	r2, [r3, #0]
    962e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	461a      	mov	r2, r3
    963a:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    963e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9642:	7819      	ldrb	r1, [r3, #0]
    9644:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964c:	5499      	strb	r1, [r3, r2]
    964e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9656:	781a      	ldrb	r2, [r3, #0]
    9658:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    965c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9660:	781b      	ldrb	r3, [r3, #0]
    9662:	4413      	add	r3, r2
    9664:	b2da      	uxtb	r2, r3
    9666:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    966a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966e:	701a      	strb	r2, [r3, #0]
    9670:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	781a      	ldrb	r2, [r3, #0]
    967a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    967e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9682:	781b      	ldrb	r3, [r3, #0]
    9684:	4413      	add	r3, r2
    9686:	b2da      	uxtb	r2, r3
    9688:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	701a      	strb	r2, [r3, #0]
    9692:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	3301      	adds	r3, #1
    969e:	b2da      	uxtb	r2, r3
    96a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	701a      	strb	r2, [r3, #0]
    96aa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    96ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b2:	781b      	ldrb	r3, [r3, #0]
    96b4:	2bff      	cmp	r3, #255	; 0xff
    96b6:	d105      	bne.n	96c4 <send_mode+0x270>
    96b8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	2200      	movs	r2, #0
    96c2:	701a      	strb	r2, [r3, #0]
    96c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    96c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96cc:	781b      	ldrb	r3, [r3, #0]
    96ce:	461a      	mov	r2, r3
    96d0:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	7819      	ldrb	r1, [r3, #0]
    96da:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    96de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e2:	5499      	strb	r1, [r3, r2]
    96e4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    96e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ec:	781a      	ldrb	r2, [r3, #0]
    96ee:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    96f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f6:	781b      	ldrb	r3, [r3, #0]
    96f8:	4413      	add	r3, r2
    96fa:	b2da      	uxtb	r2, r3
    96fc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9704:	701a      	strb	r2, [r3, #0]
    9706:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    970a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970e:	781a      	ldrb	r2, [r3, #0]
    9710:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9718:	781b      	ldrb	r3, [r3, #0]
    971a:	4413      	add	r3, r2
    971c:	b2da      	uxtb	r2, r3
    971e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9726:	701a      	strb	r2, [r3, #0]
    9728:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    972c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9730:	781b      	ldrb	r3, [r3, #0]
    9732:	3301      	adds	r3, #1
    9734:	b2da      	uxtb	r2, r3
    9736:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    973a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973e:	701a      	strb	r2, [r3, #0]
    9740:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9748:	781b      	ldrb	r3, [r3, #0]
    974a:	2bff      	cmp	r3, #255	; 0xff
    974c:	d105      	bne.n	975a <send_mode+0x306>
    974e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9756:	2200      	movs	r2, #0
    9758:	701a      	strb	r2, [r3, #0]
    975a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    975e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9762:	781b      	ldrb	r3, [r3, #0]
    9764:	461a      	mov	r2, r3
    9766:	f24b 43ab 	movw	r3, #46251	; 0xb4ab
    976a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976e:	7819      	ldrb	r1, [r3, #0]
    9770:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9778:	5499      	strb	r1, [r3, r2]
    977a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    977e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9782:	781a      	ldrb	r2, [r3, #0]
    9784:	f24b 43ab 	movw	r3, #46251	; 0xb4ab
    9788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978c:	781b      	ldrb	r3, [r3, #0]
    978e:	4413      	add	r3, r2
    9790:	b2da      	uxtb	r2, r3
    9792:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979a:	701a      	strb	r2, [r3, #0]
    979c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    97a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a4:	781a      	ldrb	r2, [r3, #0]
    97a6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    97aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ae:	781b      	ldrb	r3, [r3, #0]
    97b0:	4413      	add	r3, r2
    97b2:	b2da      	uxtb	r2, r3
    97b4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    97b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97bc:	701a      	strb	r2, [r3, #0]
    97be:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    97c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c6:	781b      	ldrb	r3, [r3, #0]
    97c8:	3301      	adds	r3, #1
    97ca:	b2da      	uxtb	r2, r3
    97cc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    97d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d4:	701a      	strb	r2, [r3, #0]
    97d6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    97da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	2bff      	cmp	r3, #255	; 0xff
    97e2:	d105      	bne.n	97f0 <send_mode+0x39c>
    97e4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    97e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ec:	2200      	movs	r2, #0
    97ee:	701a      	strb	r2, [r3, #0]
    97f0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	781b      	ldrb	r3, [r3, #0]
    97fa:	461a      	mov	r2, r3
    97fc:	f240 1304 	movw	r3, #260	; 0x104
    9800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9804:	7819      	ldrb	r1, [r3, #0]
    9806:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    980a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980e:	5499      	strb	r1, [r3, r2]
    9810:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9818:	781a      	ldrb	r2, [r3, #0]
    981a:	f240 1304 	movw	r3, #260	; 0x104
    981e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9822:	781b      	ldrb	r3, [r3, #0]
    9824:	4413      	add	r3, r2
    9826:	b2da      	uxtb	r2, r3
    9828:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    982c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9830:	701a      	strb	r2, [r3, #0]
    9832:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983a:	781a      	ldrb	r2, [r3, #0]
    983c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9844:	781b      	ldrb	r3, [r3, #0]
    9846:	4413      	add	r3, r2
    9848:	b2da      	uxtb	r2, r3
    984a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    984e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9852:	701a      	strb	r2, [r3, #0]
    9854:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985c:	781b      	ldrb	r3, [r3, #0]
    985e:	3301      	adds	r3, #1
    9860:	b2da      	uxtb	r2, r3
    9862:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986a:	701a      	strb	r2, [r3, #0]
    986c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9874:	781b      	ldrb	r3, [r3, #0]
    9876:	2bff      	cmp	r3, #255	; 0xff
    9878:	d105      	bne.n	9886 <send_mode+0x432>
    987a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    987e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9882:	2200      	movs	r2, #0
    9884:	701a      	strb	r2, [r3, #0]
    9886:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    988a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988e:	781b      	ldrb	r3, [r3, #0]
    9890:	461a      	mov	r2, r3
    9892:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989a:	7819      	ldrb	r1, [r3, #0]
    989c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    98a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a4:	5499      	strb	r1, [r3, r2]
    98a6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    98aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	3301      	adds	r3, #1
    98b2:	b2da      	uxtb	r2, r3
    98b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    98b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98bc:	701a      	strb	r2, [r3, #0]
    98be:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    98c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c6:	781b      	ldrb	r3, [r3, #0]
    98c8:	2bff      	cmp	r3, #255	; 0xff
    98ca:	d105      	bne.n	98d8 <send_mode+0x484>
    98cc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    98d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d4:	2200      	movs	r2, #0
    98d6:	701a      	strb	r2, [r3, #0]
    98d8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	461a      	mov	r2, r3
    98e4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    98e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ec:	7819      	ldrb	r1, [r3, #0]
    98ee:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    98f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f6:	5499      	strb	r1, [r3, r2]
    98f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    98fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9900:	781b      	ldrb	r3, [r3, #0]
    9902:	3301      	adds	r3, #1
    9904:	b2da      	uxtb	r2, r3
    9906:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    990a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990e:	701a      	strb	r2, [r3, #0]
    9910:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9918:	781b      	ldrb	r3, [r3, #0]
    991a:	2bff      	cmp	r3, #255	; 0xff
    991c:	d105      	bne.n	992a <send_mode+0x4d6>
    991e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9926:	2200      	movs	r2, #0
    9928:	701a      	strb	r2, [r3, #0]
    992a:	f248 0339 	movw	r3, #32825	; 0x8039
    992e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9932:	781b      	ldrb	r3, [r3, #0]
    9934:	b2db      	uxtb	r3, r3
    9936:	f003 0310 	and.w	r3, r3, #16
    993a:	2b00      	cmp	r3, #0
    993c:	d15a      	bne.n	99f4 <send_mode+0x5a0>
    993e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9946:	781b      	ldrb	r3, [r3, #0]
    9948:	b2db      	uxtb	r3, r3
    994a:	461a      	mov	r2, r3
    994c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9954:	5c9a      	ldrb	r2, [r3, r2]
    9956:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	701a      	strb	r2, [r3, #0]
    9960:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    9964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9968:	2200      	movs	r2, #0
    996a:	701a      	strb	r2, [r3, #0]
    996c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9974:	781b      	ldrb	r3, [r3, #0]
    9976:	b2db      	uxtb	r3, r3
    9978:	3301      	adds	r3, #1
    997a:	b2da      	uxtb	r2, r3
    997c:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9984:	701a      	strb	r2, [r3, #0]
    9986:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    998a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998e:	781b      	ldrb	r3, [r3, #0]
    9990:	b2db      	uxtb	r3, r3
    9992:	2bff      	cmp	r3, #255	; 0xff
    9994:	d105      	bne.n	99a2 <send_mode+0x54e>
    9996:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    999a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999e:	2200      	movs	r2, #0
    99a0:	701a      	strb	r2, [r3, #0]
    99a2:	f248 0338 	movw	r3, #32824	; 0x8038
    99a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99aa:	f248 0238 	movw	r2, #32824	; 0x8038
    99ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    99b2:	7812      	ldrb	r2, [r2, #0]
    99b4:	b2d2      	uxtb	r2, r2
    99b6:	f042 0201 	orr.w	r2, r2, #1
    99ba:	b2d2      	uxtb	r2, r2
    99bc:	701a      	strb	r2, [r3, #0]
    99be:	f248 0339 	movw	r3, #32825	; 0x8039
    99c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c6:	f248 0239 	movw	r2, #32825	; 0x8039
    99ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    99ce:	7812      	ldrb	r2, [r2, #0]
    99d0:	b2d2      	uxtb	r2, r2
    99d2:	f042 0210 	orr.w	r2, r2, #16
    99d6:	b2d2      	uxtb	r2, r2
    99d8:	701a      	strb	r2, [r3, #0]
    99da:	e00b      	b.n	99f4 <send_mode+0x5a0>
    99dc:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    99e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e4:	781b      	ldrb	r3, [r3, #0]
    99e6:	3301      	adds	r3, #1
    99e8:	b2da      	uxtb	r2, r3
    99ea:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    99ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f2:	701a      	strb	r2, [r3, #0]
}
    99f4:	46bd      	mov	sp, r7
    99f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    99fa:	4770      	bx	lr

000099fc <send_debug>:
void send_debug(void){  //5000ms
    99fc:	b480      	push	{r7}
    99fe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    9a00:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a08:	781a      	ldrb	r2, [r3, #0]
    9a0a:	f248 531f 	movw	r3, #34079	; 0x851f
    9a0e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9a12:	fba3 1302 	umull	r1, r3, r3, r2
    9a16:	091b      	lsrs	r3, r3, #4
    9a18:	2132      	movs	r1, #50	; 0x32
    9a1a:	fb01 f303 	mul.w	r3, r1, r3
    9a1e:	1ad3      	subs	r3, r2, r3
    9a20:	b2db      	uxtb	r3, r3
    9a22:	2b1d      	cmp	r3, #29
    9a24:	f040 82bb 	bne.w	9f9e <send_debug+0x5a2>
    9a28:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a30:	781a      	ldrb	r2, [r3, #0]
    9a32:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3a:	781b      	ldrb	r3, [r3, #0]
    9a3c:	b2db      	uxtb	r3, r3
    9a3e:	429a      	cmp	r2, r3
    9a40:	d313      	bcc.n	9a6a <send_debug+0x6e>
    9a42:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4a:	781b      	ldrb	r3, [r3, #0]
    9a4c:	b2db      	uxtb	r3, r3
    9a4e:	461a      	mov	r2, r3
    9a50:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a58:	781b      	ldrb	r3, [r3, #0]
    9a5a:	1ad3      	subs	r3, r2, r3
    9a5c:	33ff      	adds	r3, #255	; 0xff
    9a5e:	2b09      	cmp	r3, #9
    9a60:	bfd4      	ite	le
    9a62:	2300      	movle	r3, #0
    9a64:	2301      	movgt	r3, #1
    9a66:	b2db      	uxtb	r3, r3
    9a68:	e011      	b.n	9a8e <send_debug+0x92>
    9a6a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a72:	781b      	ldrb	r3, [r3, #0]
    9a74:	b2db      	uxtb	r3, r3
    9a76:	461a      	mov	r2, r3
    9a78:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a80:	781b      	ldrb	r3, [r3, #0]
    9a82:	1ad3      	subs	r3, r2, r3
    9a84:	2b09      	cmp	r3, #9
    9a86:	bfd4      	ite	le
    9a88:	2300      	movle	r3, #0
    9a8a:	2301      	movgt	r3, #1
    9a8c:	b2db      	uxtb	r3, r3
    9a8e:	2b00      	cmp	r3, #0
    9a90:	f000 8279 	beq.w	9f86 <send_debug+0x58a>
    9a94:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9c:	781b      	ldrb	r3, [r3, #0]
    9a9e:	461a      	mov	r2, r3
    9aa0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa8:	2105      	movs	r1, #5
    9aaa:	5499      	strb	r1, [r3, r2]
    9aac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab4:	781b      	ldrb	r3, [r3, #0]
    9ab6:	3301      	adds	r3, #1
    9ab8:	b2da      	uxtb	r2, r3
    9aba:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac2:	701a      	strb	r2, [r3, #0]
    9ac4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	2bff      	cmp	r3, #255	; 0xff
    9ad0:	d105      	bne.n	9ade <send_debug+0xe2>
    9ad2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ada:	2200      	movs	r2, #0
    9adc:	701a      	strb	r2, [r3, #0]
    9ade:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	461a      	mov	r2, r3
    9aea:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af2:	210d      	movs	r1, #13
    9af4:	5499      	strb	r1, [r3, r2]
    9af6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	3301      	adds	r3, #1
    9b02:	b2da      	uxtb	r2, r3
    9b04:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0c:	701a      	strb	r2, [r3, #0]
    9b0e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b16:	781b      	ldrb	r3, [r3, #0]
    9b18:	2bff      	cmp	r3, #255	; 0xff
    9b1a:	d105      	bne.n	9b28 <send_debug+0x12c>
    9b1c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b24:	2200      	movs	r2, #0
    9b26:	701a      	strb	r2, [r3, #0]
    9b28:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b30:	220d      	movs	r2, #13
    9b32:	701a      	strb	r2, [r3, #0]
    9b34:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3c:	220d      	movs	r2, #13
    9b3e:	701a      	strb	r2, [r3, #0]
    9b40:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	461a      	mov	r2, r3
    9b4c:	f24b 53f7 	movw	r3, #46583	; 0xb5f7
    9b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	b2d9      	uxtb	r1, r3
    9b58:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b60:	5499      	strb	r1, [r3, r2]
    9b62:	f24b 53f7 	movw	r3, #46583	; 0xb5f7
    9b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6a:	781a      	ldrb	r2, [r3, #0]
    9b6c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b74:	781b      	ldrb	r3, [r3, #0]
    9b76:	4413      	add	r3, r2
    9b78:	b2da      	uxtb	r2, r3
    9b7a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b82:	701a      	strb	r2, [r3, #0]
    9b84:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b8c:	781a      	ldrb	r2, [r3, #0]
    9b8e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b96:	781b      	ldrb	r3, [r3, #0]
    9b98:	4413      	add	r3, r2
    9b9a:	b2da      	uxtb	r2, r3
    9b9c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba4:	701a      	strb	r2, [r3, #0]
    9ba6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	3301      	adds	r3, #1
    9bb2:	b2da      	uxtb	r2, r3
    9bb4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbc:	701a      	strb	r2, [r3, #0]
    9bbe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc6:	781b      	ldrb	r3, [r3, #0]
    9bc8:	2bff      	cmp	r3, #255	; 0xff
    9bca:	d105      	bne.n	9bd8 <send_debug+0x1dc>
    9bcc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd4:	2200      	movs	r2, #0
    9bd6:	701a      	strb	r2, [r3, #0]
    9bd8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be0:	781b      	ldrb	r3, [r3, #0]
    9be2:	461a      	mov	r2, r3
    9be4:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    9be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bec:	7819      	ldrb	r1, [r3, #0]
    9bee:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf6:	5499      	strb	r1, [r3, r2]
    9bf8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c00:	781a      	ldrb	r2, [r3, #0]
    9c02:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    9c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0a:	781b      	ldrb	r3, [r3, #0]
    9c0c:	4413      	add	r3, r2
    9c0e:	b2da      	uxtb	r2, r3
    9c10:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c18:	701a      	strb	r2, [r3, #0]
    9c1a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c22:	781a      	ldrb	r2, [r3, #0]
    9c24:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2c:	781b      	ldrb	r3, [r3, #0]
    9c2e:	4413      	add	r3, r2
    9c30:	b2da      	uxtb	r2, r3
    9c32:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3a:	701a      	strb	r2, [r3, #0]
    9c3c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c44:	781b      	ldrb	r3, [r3, #0]
    9c46:	3301      	adds	r3, #1
    9c48:	b2da      	uxtb	r2, r3
    9c4a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c52:	701a      	strb	r2, [r3, #0]
    9c54:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5c:	781b      	ldrb	r3, [r3, #0]
    9c5e:	2bff      	cmp	r3, #255	; 0xff
    9c60:	d105      	bne.n	9c6e <send_debug+0x272>
    9c62:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6a:	2200      	movs	r2, #0
    9c6c:	701a      	strb	r2, [r3, #0]
    9c6e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c76:	781b      	ldrb	r3, [r3, #0]
    9c78:	461a      	mov	r2, r3
    9c7a:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    9c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c82:	7819      	ldrb	r1, [r3, #0]
    9c84:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8c:	5499      	strb	r1, [r3, r2]
    9c8e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c96:	781a      	ldrb	r2, [r3, #0]
    9c98:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    9c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	4413      	add	r3, r2
    9ca4:	b2da      	uxtb	r2, r3
    9ca6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	701a      	strb	r2, [r3, #0]
    9cb0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb8:	781a      	ldrb	r2, [r3, #0]
    9cba:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc2:	781b      	ldrb	r3, [r3, #0]
    9cc4:	4413      	add	r3, r2
    9cc6:	b2da      	uxtb	r2, r3
    9cc8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd0:	701a      	strb	r2, [r3, #0]
    9cd2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	3301      	adds	r3, #1
    9cde:	b2da      	uxtb	r2, r3
    9ce0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce8:	701a      	strb	r2, [r3, #0]
    9cea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf2:	781b      	ldrb	r3, [r3, #0]
    9cf4:	2bff      	cmp	r3, #255	; 0xff
    9cf6:	d105      	bne.n	9d04 <send_debug+0x308>
    9cf8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d00:	2200      	movs	r2, #0
    9d02:	701a      	strb	r2, [r3, #0]
    9d04:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0c:	781b      	ldrb	r3, [r3, #0]
    9d0e:	461a      	mov	r2, r3
    9d10:	f24b 735f 	movw	r3, #46943	; 0xb75f
    9d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d18:	7819      	ldrb	r1, [r3, #0]
    9d1a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d22:	5499      	strb	r1, [r3, r2]
    9d24:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	781a      	ldrb	r2, [r3, #0]
    9d2e:	f24b 735f 	movw	r3, #46943	; 0xb75f
    9d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d36:	781b      	ldrb	r3, [r3, #0]
    9d38:	4413      	add	r3, r2
    9d3a:	b2da      	uxtb	r2, r3
    9d3c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	781a      	ldrb	r2, [r3, #0]
    9d50:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d58:	781b      	ldrb	r3, [r3, #0]
    9d5a:	4413      	add	r3, r2
    9d5c:	b2da      	uxtb	r2, r3
    9d5e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d66:	701a      	strb	r2, [r3, #0]
    9d68:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d70:	781b      	ldrb	r3, [r3, #0]
    9d72:	3301      	adds	r3, #1
    9d74:	b2da      	uxtb	r2, r3
    9d76:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	701a      	strb	r2, [r3, #0]
    9d80:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d88:	781b      	ldrb	r3, [r3, #0]
    9d8a:	2bff      	cmp	r3, #255	; 0xff
    9d8c:	d105      	bne.n	9d9a <send_debug+0x39e>
    9d8e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d96:	2200      	movs	r2, #0
    9d98:	701a      	strb	r2, [r3, #0]
    9d9a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da2:	781b      	ldrb	r3, [r3, #0]
    9da4:	461a      	mov	r2, r3
    9da6:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	7819      	ldrb	r1, [r3, #0]
    9db0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db8:	5499      	strb	r1, [r3, r2]
    9dba:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc2:	781a      	ldrb	r2, [r3, #0]
    9dc4:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	781b      	ldrb	r3, [r3, #0]
    9dce:	4413      	add	r3, r2
    9dd0:	b2da      	uxtb	r2, r3
    9dd2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dda:	701a      	strb	r2, [r3, #0]
    9ddc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	781a      	ldrb	r2, [r3, #0]
    9de6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	4413      	add	r3, r2
    9df2:	b2da      	uxtb	r2, r3
    9df4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfc:	701a      	strb	r2, [r3, #0]
    9dfe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	3301      	adds	r3, #1
    9e0a:	b2da      	uxtb	r2, r3
    9e0c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	701a      	strb	r2, [r3, #0]
    9e16:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	2bff      	cmp	r3, #255	; 0xff
    9e22:	d105      	bne.n	9e30 <send_debug+0x434>
    9e24:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	2200      	movs	r2, #0
    9e2e:	701a      	strb	r2, [r3, #0]
    9e30:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e38:	781b      	ldrb	r3, [r3, #0]
    9e3a:	461a      	mov	r2, r3
    9e3c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	7819      	ldrb	r1, [r3, #0]
    9e46:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4e:	5499      	strb	r1, [r3, r2]
    9e50:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	3301      	adds	r3, #1
    9e5c:	b2da      	uxtb	r2, r3
    9e5e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	701a      	strb	r2, [r3, #0]
    9e68:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e70:	781b      	ldrb	r3, [r3, #0]
    9e72:	2bff      	cmp	r3, #255	; 0xff
    9e74:	d105      	bne.n	9e82 <send_debug+0x486>
    9e76:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7e:	2200      	movs	r2, #0
    9e80:	701a      	strb	r2, [r3, #0]
    9e82:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	461a      	mov	r2, r3
    9e8e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    9e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e96:	7819      	ldrb	r1, [r3, #0]
    9e98:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea0:	5499      	strb	r1, [r3, r2]
    9ea2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eaa:	781b      	ldrb	r3, [r3, #0]
    9eac:	3301      	adds	r3, #1
    9eae:	b2da      	uxtb	r2, r3
    9eb0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb8:	701a      	strb	r2, [r3, #0]
    9eba:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec2:	781b      	ldrb	r3, [r3, #0]
    9ec4:	2bff      	cmp	r3, #255	; 0xff
    9ec6:	d105      	bne.n	9ed4 <send_debug+0x4d8>
    9ec8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed0:	2200      	movs	r2, #0
    9ed2:	701a      	strb	r2, [r3, #0]
    9ed4:	f248 0339 	movw	r3, #32825	; 0x8039
    9ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9edc:	781b      	ldrb	r3, [r3, #0]
    9ede:	b2db      	uxtb	r3, r3
    9ee0:	f003 0310 	and.w	r3, r3, #16
    9ee4:	2b00      	cmp	r3, #0
    9ee6:	d15a      	bne.n	9f9e <send_debug+0x5a2>
    9ee8:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	b2db      	uxtb	r3, r3
    9ef4:	461a      	mov	r2, r3
    9ef6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	5c9a      	ldrb	r2, [r3, r2]
    9f00:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    9f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f08:	701a      	strb	r2, [r3, #0]
    9f0a:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    9f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f12:	2200      	movs	r2, #0
    9f14:	701a      	strb	r2, [r3, #0]
    9f16:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	b2db      	uxtb	r3, r3
    9f22:	3301      	adds	r3, #1
    9f24:	b2da      	uxtb	r2, r3
    9f26:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2e:	701a      	strb	r2, [r3, #0]
    9f30:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f38:	781b      	ldrb	r3, [r3, #0]
    9f3a:	b2db      	uxtb	r3, r3
    9f3c:	2bff      	cmp	r3, #255	; 0xff
    9f3e:	d105      	bne.n	9f4c <send_debug+0x550>
    9f40:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f48:	2200      	movs	r2, #0
    9f4a:	701a      	strb	r2, [r3, #0]
    9f4c:	f248 0338 	movw	r3, #32824	; 0x8038
    9f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f54:	f248 0238 	movw	r2, #32824	; 0x8038
    9f58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9f5c:	7812      	ldrb	r2, [r2, #0]
    9f5e:	b2d2      	uxtb	r2, r2
    9f60:	f042 0201 	orr.w	r2, r2, #1
    9f64:	b2d2      	uxtb	r2, r2
    9f66:	701a      	strb	r2, [r3, #0]
    9f68:	f248 0339 	movw	r3, #32825	; 0x8039
    9f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f70:	f248 0239 	movw	r2, #32825	; 0x8039
    9f74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9f78:	7812      	ldrb	r2, [r2, #0]
    9f7a:	b2d2      	uxtb	r2, r2
    9f7c:	f042 0210 	orr.w	r2, r2, #16
    9f80:	b2d2      	uxtb	r2, r2
    9f82:	701a      	strb	r2, [r3, #0]
    9f84:	e00b      	b.n	9f9e <send_debug+0x5a2>
    9f86:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    9f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	3301      	adds	r3, #1
    9f92:	b2da      	uxtb	r2, r3
    9f94:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	701a      	strb	r2, [r3, #0]
}
    9f9e:	46bd      	mov	sp, r7
    9fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fa4:	4770      	bx	lr
    9fa6:	bf00      	nop

00009fa8 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    9fa8:	b480      	push	{r7}
    9faa:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    9fac:	f24b 43b9 	movw	r3, #46265	; 0xb4b9
    9fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb4:	781a      	ldrb	r2, [r3, #0]
    9fb6:	f248 531f 	movw	r3, #34079	; 0x851f
    9fba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    9fbe:	fba3 1302 	umull	r1, r3, r3, r2
    9fc2:	095b      	lsrs	r3, r3, #5
    9fc4:	2164      	movs	r1, #100	; 0x64
    9fc6:	fb01 f303 	mul.w	r3, r1, r3
    9fca:	1ad3      	subs	r3, r2, r3
    9fcc:	b2db      	uxtb	r3, r3
    9fce:	2b31      	cmp	r3, #49	; 0x31
    9fd0:	f040 8395 	bne.w	a6fe <send_nav_ref+0x756>
    9fd4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    9fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fdc:	781a      	ldrb	r2, [r3, #0]
    9fde:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe6:	781b      	ldrb	r3, [r3, #0]
    9fe8:	b2db      	uxtb	r3, r3
    9fea:	429a      	cmp	r2, r3
    9fec:	d313      	bcc.n	a016 <send_nav_ref+0x6e>
    9fee:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    9ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff6:	781b      	ldrb	r3, [r3, #0]
    9ff8:	b2db      	uxtb	r3, r3
    9ffa:	461a      	mov	r2, r3
    9ffc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a004:	781b      	ldrb	r3, [r3, #0]
    a006:	1ad3      	subs	r3, r2, r3
    a008:	33ff      	adds	r3, #255	; 0xff
    a00a:	2b0c      	cmp	r3, #12
    a00c:	bfd4      	ite	le
    a00e:	2300      	movle	r3, #0
    a010:	2301      	movgt	r3, #1
    a012:	b2db      	uxtb	r3, r3
    a014:	e011      	b.n	a03a <send_nav_ref+0x92>
    a016:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01e:	781b      	ldrb	r3, [r3, #0]
    a020:	b2db      	uxtb	r3, r3
    a022:	461a      	mov	r2, r3
    a024:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	1ad3      	subs	r3, r2, r3
    a030:	2b0c      	cmp	r3, #12
    a032:	bfd4      	ite	le
    a034:	2300      	movle	r3, #0
    a036:	2301      	movgt	r3, #1
    a038:	b2db      	uxtb	r3, r3
    a03a:	2b00      	cmp	r3, #0
    a03c:	f000 8353 	beq.w	a6e6 <send_nav_ref+0x73e>
    a040:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a048:	781b      	ldrb	r3, [r3, #0]
    a04a:	461a      	mov	r2, r3
    a04c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	2105      	movs	r1, #5
    a056:	5499      	strb	r1, [r3, r2]
    a058:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	3301      	adds	r3, #1
    a064:	b2da      	uxtb	r2, r3
    a066:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06e:	701a      	strb	r2, [r3, #0]
    a070:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a078:	781b      	ldrb	r3, [r3, #0]
    a07a:	2bff      	cmp	r3, #255	; 0xff
    a07c:	d105      	bne.n	a08a <send_nav_ref+0xe2>
    a07e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a086:	2200      	movs	r2, #0
    a088:	701a      	strb	r2, [r3, #0]
    a08a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a092:	781b      	ldrb	r3, [r3, #0]
    a094:	461a      	mov	r2, r3
    a096:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09e:	2109      	movs	r1, #9
    a0a0:	5499      	strb	r1, [r3, r2]
    a0a2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	781b      	ldrb	r3, [r3, #0]
    a0ac:	3301      	adds	r3, #1
    a0ae:	b2da      	uxtb	r2, r3
    a0b0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b8:	701a      	strb	r2, [r3, #0]
    a0ba:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	2bff      	cmp	r3, #255	; 0xff
    a0c6:	d105      	bne.n	a0d4 <send_nav_ref+0x12c>
    a0c8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d0:	2200      	movs	r2, #0
    a0d2:	701a      	strb	r2, [r3, #0]
    a0d4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0dc:	2209      	movs	r2, #9
    a0de:	701a      	strb	r2, [r3, #0]
    a0e0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e8:	2209      	movs	r2, #9
    a0ea:	701a      	strb	r2, [r3, #0]
    a0ec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	461a      	mov	r2, r3
    a0f8:	f643 1318 	movw	r3, #14616	; 0x3918
    a0fc:	f2c0 0301 	movt	r3, #1
    a100:	7819      	ldrb	r1, [r3, #0]
    a102:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10a:	5499      	strb	r1, [r3, r2]
    a10c:	f643 1318 	movw	r3, #14616	; 0x3918
    a110:	f2c0 0301 	movt	r3, #1
    a114:	781a      	ldrb	r2, [r3, #0]
    a116:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11e:	781b      	ldrb	r3, [r3, #0]
    a120:	4413      	add	r3, r2
    a122:	b2da      	uxtb	r2, r3
    a124:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	701a      	strb	r2, [r3, #0]
    a12e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a136:	781a      	ldrb	r2, [r3, #0]
    a138:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	4413      	add	r3, r2
    a144:	b2da      	uxtb	r2, r3
    a146:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14e:	701a      	strb	r2, [r3, #0]
    a150:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	3301      	adds	r3, #1
    a15c:	b2da      	uxtb	r2, r3
    a15e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a166:	701a      	strb	r2, [r3, #0]
    a168:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a170:	781b      	ldrb	r3, [r3, #0]
    a172:	2bff      	cmp	r3, #255	; 0xff
    a174:	d105      	bne.n	a182 <send_nav_ref+0x1da>
    a176:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17e:	2200      	movs	r2, #0
    a180:	701a      	strb	r2, [r3, #0]
    a182:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	781b      	ldrb	r3, [r3, #0]
    a18c:	461a      	mov	r2, r3
    a18e:	f643 1318 	movw	r3, #14616	; 0x3918
    a192:	f2c0 0301 	movt	r3, #1
    a196:	7859      	ldrb	r1, [r3, #1]
    a198:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a0:	5499      	strb	r1, [r3, r2]
    a1a2:	4bd2      	ldr	r3, [pc, #840]	; (a4ec <send_nav_ref+0x544>)
    a1a4:	781a      	ldrb	r2, [r3, #0]
    a1a6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ae:	781b      	ldrb	r3, [r3, #0]
    a1b0:	4413      	add	r3, r2
    a1b2:	b2da      	uxtb	r2, r3
    a1b4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1bc:	701a      	strb	r2, [r3, #0]
    a1be:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c6:	781a      	ldrb	r2, [r3, #0]
    a1c8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	4413      	add	r3, r2
    a1d4:	b2da      	uxtb	r2, r3
    a1d6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e8:	781b      	ldrb	r3, [r3, #0]
    a1ea:	3301      	adds	r3, #1
    a1ec:	b2da      	uxtb	r2, r3
    a1ee:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f6:	701a      	strb	r2, [r3, #0]
    a1f8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	2bff      	cmp	r3, #255	; 0xff
    a204:	d105      	bne.n	a212 <send_nav_ref+0x26a>
    a206:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20e:	2200      	movs	r2, #0
    a210:	701a      	strb	r2, [r3, #0]
    a212:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	781b      	ldrb	r3, [r3, #0]
    a21c:	461a      	mov	r2, r3
    a21e:	f643 1318 	movw	r3, #14616	; 0x3918
    a222:	f2c0 0301 	movt	r3, #1
    a226:	7899      	ldrb	r1, [r3, #2]
    a228:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a230:	5499      	strb	r1, [r3, r2]
    a232:	4baf      	ldr	r3, [pc, #700]	; (a4f0 <send_nav_ref+0x548>)
    a234:	781a      	ldrb	r2, [r3, #0]
    a236:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	4413      	add	r3, r2
    a242:	b2da      	uxtb	r2, r3
    a244:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	701a      	strb	r2, [r3, #0]
    a24e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	781a      	ldrb	r2, [r3, #0]
    a258:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	4413      	add	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	3301      	adds	r3, #1
    a27c:	b2da      	uxtb	r2, r3
    a27e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	701a      	strb	r2, [r3, #0]
    a288:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	2bff      	cmp	r3, #255	; 0xff
    a294:	d105      	bne.n	a2a2 <send_nav_ref+0x2fa>
    a296:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	2200      	movs	r2, #0
    a2a0:	701a      	strb	r2, [r3, #0]
    a2a2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	461a      	mov	r2, r3
    a2ae:	f643 1318 	movw	r3, #14616	; 0x3918
    a2b2:	f2c0 0301 	movt	r3, #1
    a2b6:	78d9      	ldrb	r1, [r3, #3]
    a2b8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	5499      	strb	r1, [r3, r2]
    a2c2:	4b8c      	ldr	r3, [pc, #560]	; (a4f4 <send_nav_ref+0x54c>)
    a2c4:	781a      	ldrb	r2, [r3, #0]
    a2c6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	4413      	add	r3, r2
    a2d2:	b2da      	uxtb	r2, r3
    a2d4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	701a      	strb	r2, [r3, #0]
    a2de:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	781a      	ldrb	r2, [r3, #0]
    a2e8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	4413      	add	r3, r2
    a2f4:	b2da      	uxtb	r2, r3
    a2f6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	3301      	adds	r3, #1
    a30c:	b2da      	uxtb	r2, r3
    a30e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	701a      	strb	r2, [r3, #0]
    a318:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	2bff      	cmp	r3, #255	; 0xff
    a324:	d105      	bne.n	a332 <send_nav_ref+0x38a>
    a326:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	2200      	movs	r2, #0
    a330:	701a      	strb	r2, [r3, #0]
    a332:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	461a      	mov	r2, r3
    a33e:	f643 131c 	movw	r3, #14620	; 0x391c
    a342:	f2c0 0301 	movt	r3, #1
    a346:	7819      	ldrb	r1, [r3, #0]
    a348:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	5499      	strb	r1, [r3, r2]
    a352:	f643 131c 	movw	r3, #14620	; 0x391c
    a356:	f2c0 0301 	movt	r3, #1
    a35a:	781a      	ldrb	r2, [r3, #0]
    a35c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	4413      	add	r3, r2
    a368:	b2da      	uxtb	r2, r3
    a36a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	701a      	strb	r2, [r3, #0]
    a374:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37c:	781a      	ldrb	r2, [r3, #0]
    a37e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	4413      	add	r3, r2
    a38a:	b2da      	uxtb	r2, r3
    a38c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a394:	701a      	strb	r2, [r3, #0]
    a396:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	3301      	adds	r3, #1
    a3a2:	b2da      	uxtb	r2, r3
    a3a4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ac:	701a      	strb	r2, [r3, #0]
    a3ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b6:	781b      	ldrb	r3, [r3, #0]
    a3b8:	2bff      	cmp	r3, #255	; 0xff
    a3ba:	d105      	bne.n	a3c8 <send_nav_ref+0x420>
    a3bc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c4:	2200      	movs	r2, #0
    a3c6:	701a      	strb	r2, [r3, #0]
    a3c8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	461a      	mov	r2, r3
    a3d4:	f643 131c 	movw	r3, #14620	; 0x391c
    a3d8:	f2c0 0301 	movt	r3, #1
    a3dc:	7859      	ldrb	r1, [r3, #1]
    a3de:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e6:	5499      	strb	r1, [r3, r2]
    a3e8:	4b43      	ldr	r3, [pc, #268]	; (a4f8 <send_nav_ref+0x550>)
    a3ea:	781a      	ldrb	r2, [r3, #0]
    a3ec:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f4:	781b      	ldrb	r3, [r3, #0]
    a3f6:	4413      	add	r3, r2
    a3f8:	b2da      	uxtb	r2, r3
    a3fa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a402:	701a      	strb	r2, [r3, #0]
    a404:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40c:	781a      	ldrb	r2, [r3, #0]
    a40e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a416:	781b      	ldrb	r3, [r3, #0]
    a418:	4413      	add	r3, r2
    a41a:	b2da      	uxtb	r2, r3
    a41c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a424:	701a      	strb	r2, [r3, #0]
    a426:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42e:	781b      	ldrb	r3, [r3, #0]
    a430:	3301      	adds	r3, #1
    a432:	b2da      	uxtb	r2, r3
    a434:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43c:	701a      	strb	r2, [r3, #0]
    a43e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	2bff      	cmp	r3, #255	; 0xff
    a44a:	d105      	bne.n	a458 <send_nav_ref+0x4b0>
    a44c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a454:	2200      	movs	r2, #0
    a456:	701a      	strb	r2, [r3, #0]
    a458:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	461a      	mov	r2, r3
    a464:	f643 131c 	movw	r3, #14620	; 0x391c
    a468:	f2c0 0301 	movt	r3, #1
    a46c:	7899      	ldrb	r1, [r3, #2]
    a46e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a476:	5499      	strb	r1, [r3, r2]
    a478:	4b20      	ldr	r3, [pc, #128]	; (a4fc <send_nav_ref+0x554>)
    a47a:	781a      	ldrb	r2, [r3, #0]
    a47c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	4413      	add	r3, r2
    a488:	b2da      	uxtb	r2, r3
    a48a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	701a      	strb	r2, [r3, #0]
    a494:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49c:	781a      	ldrb	r2, [r3, #0]
    a49e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a6:	781b      	ldrb	r3, [r3, #0]
    a4a8:	4413      	add	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	3301      	adds	r3, #1
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4cc:	701a      	strb	r2, [r3, #0]
    a4ce:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	2bff      	cmp	r3, #255	; 0xff
    a4da:	d111      	bne.n	a500 <send_nav_ref+0x558>
    a4dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e4:	2200      	movs	r2, #0
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	e00a      	b.n	a500 <send_nav_ref+0x558>
    a4ea:	bf00      	nop
    a4ec:	00013919 	.word	0x00013919
    a4f0:	0001391a 	.word	0x0001391a
    a4f4:	0001391b 	.word	0x0001391b
    a4f8:	0001391d 	.word	0x0001391d
    a4fc:	0001391e 	.word	0x0001391e
    a500:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a508:	781b      	ldrb	r3, [r3, #0]
    a50a:	461a      	mov	r2, r3
    a50c:	f643 131c 	movw	r3, #14620	; 0x391c
    a510:	f2c0 0301 	movt	r3, #1
    a514:	78d9      	ldrb	r1, [r3, #3]
    a516:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51e:	5499      	strb	r1, [r3, r2]
    a520:	4b79      	ldr	r3, [pc, #484]	; (a708 <send_nav_ref+0x760>)
    a522:	781a      	ldrb	r2, [r3, #0]
    a524:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a52c:	781b      	ldrb	r3, [r3, #0]
    a52e:	4413      	add	r3, r2
    a530:	b2da      	uxtb	r2, r3
    a532:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53a:	701a      	strb	r2, [r3, #0]
    a53c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a544:	781a      	ldrb	r2, [r3, #0]
    a546:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54e:	781b      	ldrb	r3, [r3, #0]
    a550:	4413      	add	r3, r2
    a552:	b2da      	uxtb	r2, r3
    a554:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55c:	701a      	strb	r2, [r3, #0]
    a55e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a566:	781b      	ldrb	r3, [r3, #0]
    a568:	3301      	adds	r3, #1
    a56a:	b2da      	uxtb	r2, r3
    a56c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a574:	701a      	strb	r2, [r3, #0]
    a576:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	2bff      	cmp	r3, #255	; 0xff
    a582:	d105      	bne.n	a590 <send_nav_ref+0x5e8>
    a584:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a58c:	2200      	movs	r2, #0
    a58e:	701a      	strb	r2, [r3, #0]
    a590:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a598:	781b      	ldrb	r3, [r3, #0]
    a59a:	461a      	mov	r2, r3
    a59c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    a5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a4:	7819      	ldrb	r1, [r3, #0]
    a5a6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ae:	5499      	strb	r1, [r3, r2]
    a5b0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	3301      	adds	r3, #1
    a5bc:	b2da      	uxtb	r2, r3
    a5be:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d0:	781b      	ldrb	r3, [r3, #0]
    a5d2:	2bff      	cmp	r3, #255	; 0xff
    a5d4:	d105      	bne.n	a5e2 <send_nav_ref+0x63a>
    a5d6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5de:	2200      	movs	r2, #0
    a5e0:	701a      	strb	r2, [r3, #0]
    a5e2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ea:	781b      	ldrb	r3, [r3, #0]
    a5ec:	461a      	mov	r2, r3
    a5ee:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    a5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f6:	7819      	ldrb	r1, [r3, #0]
    a5f8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	5499      	strb	r1, [r3, r2]
    a602:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	3301      	adds	r3, #1
    a60e:	b2da      	uxtb	r2, r3
    a610:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	701a      	strb	r2, [r3, #0]
    a61a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	2bff      	cmp	r3, #255	; 0xff
    a626:	d105      	bne.n	a634 <send_nav_ref+0x68c>
    a628:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	2200      	movs	r2, #0
    a632:	701a      	strb	r2, [r3, #0]
    a634:	f248 0339 	movw	r3, #32825	; 0x8039
    a638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a63c:	781b      	ldrb	r3, [r3, #0]
    a63e:	b2db      	uxtb	r3, r3
    a640:	f003 0310 	and.w	r3, r3, #16
    a644:	2b00      	cmp	r3, #0
    a646:	d15a      	bne.n	a6fe <send_nav_ref+0x756>
    a648:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a650:	781b      	ldrb	r3, [r3, #0]
    a652:	b2db      	uxtb	r3, r3
    a654:	461a      	mov	r2, r3
    a656:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    a65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65e:	5c9a      	ldrb	r2, [r3, r2]
    a660:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    a664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a668:	701a      	strb	r2, [r3, #0]
    a66a:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    a66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a672:	2200      	movs	r2, #0
    a674:	701a      	strb	r2, [r3, #0]
    a676:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a67e:	781b      	ldrb	r3, [r3, #0]
    a680:	b2db      	uxtb	r3, r3
    a682:	3301      	adds	r3, #1
    a684:	b2da      	uxtb	r2, r3
    a686:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a68e:	701a      	strb	r2, [r3, #0]
    a690:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	b2db      	uxtb	r3, r3
    a69c:	2bff      	cmp	r3, #255	; 0xff
    a69e:	d105      	bne.n	a6ac <send_nav_ref+0x704>
    a6a0:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	2200      	movs	r2, #0
    a6aa:	701a      	strb	r2, [r3, #0]
    a6ac:	f248 0338 	movw	r3, #32824	; 0x8038
    a6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b4:	f248 0238 	movw	r2, #32824	; 0x8038
    a6b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a6bc:	7812      	ldrb	r2, [r2, #0]
    a6be:	b2d2      	uxtb	r2, r2
    a6c0:	f042 0201 	orr.w	r2, r2, #1
    a6c4:	b2d2      	uxtb	r2, r2
    a6c6:	701a      	strb	r2, [r3, #0]
    a6c8:	f248 0339 	movw	r3, #32825	; 0x8039
    a6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d0:	f248 0239 	movw	r2, #32825	; 0x8039
    a6d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a6d8:	7812      	ldrb	r2, [r2, #0]
    a6da:	b2d2      	uxtb	r2, r2
    a6dc:	f042 0210 	orr.w	r2, r2, #16
    a6e0:	b2d2      	uxtb	r2, r2
    a6e2:	701a      	strb	r2, [r3, #0]
    a6e4:	e00b      	b.n	a6fe <send_nav_ref+0x756>
    a6e6:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    a6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	3301      	adds	r3, #1
    a6f2:	b2da      	uxtb	r2, r3
    a6f4:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    a6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fc:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    a6fe:	46bd      	mov	sp, r7
    a700:	f85d 7b04 	ldr.w	r7, [sp], #4
    a704:	4770      	bx	lr
    a706:	bf00      	nop
    a708:	0001391f 	.word	0x0001391f

0000a70c <reporting_task>:

void reporting_task()
{
    a70c:	b580      	push	{r7, lr}
    a70e:	af00      	add	r7, sp, #0
    send_boot();
    a710:	f7fa faf8 	bl	4d04 <send_boot>
    send_attitude();
    a714:	f7fb fac6 	bl	5ca4 <send_attitude>
    send_adc();
    a718:	f7fb ffb8 	bl	668c <send_adc>
    send_settings();
    a71c:	f7fc fa3e 	bl	6b9c <send_settings>
    send_desired();
    a720:	f7fc fe40 	bl	73a4 <send_desired>
    send_bat();
    a724:	f7fd fd6e 	bl	8204 <send_bat>
    send_climb();
    a728:	f7fe f922 	bl	8970 <send_climb>
    send_mode();
    a72c:	f7fe fe92 	bl	9454 <send_mode>
    send_debug();
    a730:	f7ff f964 	bl	99fc <send_debug>
    send_nav_ref();
    a734:	f7ff fc38 	bl	9fa8 <send_nav_ref>
}
    a738:	bd80      	pop	{r7, pc}
    a73a:	bf00      	nop

0000a73c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    a73c:	b480      	push	{r7}
    a73e:	b083      	sub	sp, #12
    a740:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    a742:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74a:	8a1b      	ldrh	r3, [r3, #16]
    a74c:	b21b      	sxth	r3, r3
    a74e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    a752:	db0d      	blt.n	a770 <inflight_calib_mode_update+0x34>
    a754:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a75c:	8a1b      	ldrh	r3, [r3, #16]
    a75e:	b21a      	sxth	r2, r3
    a760:	f640 437f 	movw	r3, #3199	; 0xc7f
    a764:	429a      	cmp	r2, r3
    a766:	bfd4      	ite	le
    a768:	2300      	movle	r3, #0
    a76a:	2301      	movgt	r3, #1
    a76c:	b2db      	uxtb	r3, r3
    a76e:	e000      	b.n	a772 <inflight_calib_mode_update+0x36>
    a770:	2302      	movs	r3, #2
    a772:	71fb      	strb	r3, [r7, #7]
    a774:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    a778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77c:	781b      	ldrb	r3, [r3, #0]
    a77e:	79fa      	ldrb	r2, [r7, #7]
    a780:	429a      	cmp	r2, r3
    a782:	d007      	beq.n	a794 <inflight_calib_mode_update+0x58>
    a784:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    a788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78c:	79fa      	ldrb	r2, [r7, #7]
    a78e:	701a      	strb	r2, [r3, #0]
    a790:	2301      	movs	r3, #1
    a792:	e000      	b.n	a796 <inflight_calib_mode_update+0x5a>
    a794:	2300      	movs	r3, #0
}
    a796:	4618      	mov	r0, r3
    a798:	370c      	adds	r7, #12
    a79a:	46bd      	mov	sp, r7
    a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7a0:	4770      	bx	lr
    a7a2:	bf00      	nop

0000a7a4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b082      	sub	sp, #8
    a7a8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    a7aa:	f24b 53f6 	movw	r3, #46582	; 0xb5f6
    a7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b2:	2201      	movs	r2, #1
    a7b4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    a7b6:	f24b 53f6 	movw	r3, #46582	; 0xb5f6
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	b2db      	uxtb	r3, r3
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	f000 80df 	beq.w	a986 <radio_control_task+0x1e2>
    uint8_t mode_changed = FALSE;
    a7c8:	2300      	movs	r3, #0
    a7ca:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    a7cc:	f7fa fa84 	bl	4cd8 <copy_from_to_fbw>
    //if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) 
    {
      pprz_mode = PPRZ_MODE_HOME;
    a7d0:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    a7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d8:	2203      	movs	r2, #3
    a7da:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    a7dc:	2301      	movs	r3, #1
    a7de:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    a7e0:	f7fa f954 	bl	4a8c <pprz_mode_update>
    a7e4:	4603      	mov	r3, r0
    a7e6:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    a7e8:	79fa      	ldrb	r2, [r7, #7]
    a7ea:	79bb      	ldrb	r3, [r7, #6]
    a7ec:	4313      	orrs	r3, r2
    a7ee:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    a7f0:	f7fa f998 	bl	4b24 <ir_estim_mode_update>
    a7f4:	4603      	mov	r3, r0
    a7f6:	461a      	mov	r2, r3
    a7f8:	79fb      	ldrb	r3, [r7, #7]
    a7fa:	4313      	orrs	r3, r2
    a7fc:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    a7fe:	f7ff ff9d 	bl	a73c <inflight_calib_mode_update>
    a802:	4603      	mov	r3, r0
    a804:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    a806:	797b      	ldrb	r3, [r7, #5]
    a808:	2b00      	cmp	r3, #0
    a80a:	d102      	bne.n	a812 <radio_control_task+0x6e>
    a80c:	79bb      	ldrb	r3, [r7, #6]
    a80e:	2b00      	cmp	r3, #0
    a810:	d001      	beq.n	a816 <radio_control_task+0x72>
    a812:	2301      	movs	r3, #1
    a814:	e000      	b.n	a818 <radio_control_task+0x74>
    a816:	2300      	movs	r3, #0
    a818:	b2db      	uxtb	r3, r3
    a81a:	4618      	mov	r0, r3
    a81c:	f005 ff80 	bl	10720 <inflight_calib>
      mode_changed |= calib_mode_changed;
    a820:	79fa      	ldrb	r2, [r7, #7]
    a822:	797b      	ldrb	r3, [r7, #5]
    a824:	4313      	orrs	r3, r2
    a826:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    a828:	f7fa f9a4 	bl	4b74 <mcu1_status_update>
    a82c:	4603      	mov	r3, r0
    a82e:	461a      	mov	r2, r3
    a830:	79fb      	ldrb	r3, [r7, #7]
    a832:	4313      	orrs	r3, r2
    a834:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    a836:	2301      	movs	r3, #1
    a838:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    a83a:	79fb      	ldrb	r3, [r7, #7]
    a83c:	2b00      	cmp	r3, #0
    a83e:	d06a      	beq.n	a916 <radio_control_task+0x172>
      //DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    a840:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a848:	885b      	ldrh	r3, [r3, #2]
    a84a:	b21b      	sxth	r3, r3
    a84c:	4618      	mov	r0, r3
    a84e:	f008 fd05 	bl	1325c <__aeabi_i2f>
    a852:	4603      	mov	r3, r0
    a854:	4618      	mov	r0, r3
    a856:	f04f 0100 	mov.w	r1, #0
    a85a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a85e:	f008 fe05 	bl	1346c <__aeabi_fdiv>
    a862:	4603      	mov	r3, r0
    a864:	4618      	mov	r0, r3
    a866:	f008 f8b9 	bl	129dc <__aeabi_f2d>
    a86a:	4602      	mov	r2, r0
    a86c:	460b      	mov	r3, r1
    a86e:	4610      	mov	r0, r2
    a870:	4619      	mov	r1, r3
    a872:	a347      	add	r3, pc, #284	; (adr r3, a990 <radio_control_task+0x1ec>)
    a874:	e9d3 2300 	ldrd	r2, r3, [r3]
    a878:	f008 f904 	bl	12a84 <__aeabi_dmul>
    a87c:	4602      	mov	r2, r0
    a87e:	460b      	mov	r3, r1
    a880:	4610      	mov	r0, r2
    a882:	4619      	mov	r1, r3
    a884:	f04f 0200 	mov.w	r2, #0
    a888:	f04f 0300 	mov.w	r3, #0
    a88c:	f007 ff48 	bl	12720 <__adddf3>
    a890:	4602      	mov	r2, r0
    a892:	460b      	mov	r3, r1
    a894:	4610      	mov	r0, r2
    a896:	4619      	mov	r1, r3
    a898:	f008 fbd6 	bl	13048 <__aeabi_d2f>
    a89c:	4602      	mov	r2, r0
    a89e:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    a8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a6:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    a8a8:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b0:	889b      	ldrh	r3, [r3, #4]
    a8b2:	b21b      	sxth	r3, r3
    a8b4:	4618      	mov	r0, r3
    a8b6:	f008 fcd1 	bl	1325c <__aeabi_i2f>
    a8ba:	4603      	mov	r3, r0
    a8bc:	4618      	mov	r0, r3
    a8be:	f04f 0100 	mov.w	r1, #0
    a8c2:	f2c4 6116 	movt	r1, #17942	; 0x4616
    a8c6:	f008 fdd1 	bl	1346c <__aeabi_fdiv>
    a8ca:	4603      	mov	r3, r0
    a8cc:	4618      	mov	r0, r3
    a8ce:	f008 f885 	bl	129dc <__aeabi_f2d>
    a8d2:	4602      	mov	r2, r0
    a8d4:	460b      	mov	r3, r1
    a8d6:	4610      	mov	r0, r2
    a8d8:	4619      	mov	r1, r3
    a8da:	f04f 0200 	mov.w	r2, #0
    a8de:	f04f 0300 	mov.w	r3, #0
    a8e2:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    a8e6:	f008 f8cd 	bl	12a84 <__aeabi_dmul>
    a8ea:	4602      	mov	r2, r0
    a8ec:	460b      	mov	r3, r1
    a8ee:	4610      	mov	r0, r2
    a8f0:	4619      	mov	r1, r3
    a8f2:	f04f 0200 	mov.w	r2, #0
    a8f6:	f04f 0300 	mov.w	r3, #0
    a8fa:	f007 ff11 	bl	12720 <__adddf3>
    a8fe:	4602      	mov	r2, r0
    a900:	460b      	mov	r3, r1
    a902:	4610      	mov	r0, r2
    a904:	4619      	mov	r1, r3
    a906:	f008 fb9f 	bl	13048 <__aeabi_d2f>
    a90a:	4602      	mov	r2, r0
    a90c:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    a910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a914:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    a916:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91e:	881a      	ldrh	r2, [r3, #0]
    a920:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    a924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a928:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    a92a:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a932:	7c9a      	ldrb	r2, [r3, #18]
    a934:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    a938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93c:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    a93e:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a946:	7d5a      	ldrb	r2, [r3, #21]
    a948:	f24b 43aa 	movw	r3, #46250	; 0xb4aa
    a94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a950:	701a      	strb	r2, [r3, #0]

    events_update();
    a952:	f7fa f93f 	bl	4bd4 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    a956:	f7fa f84f 	bl	49f8 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    a95a:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    a95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a962:	781b      	ldrb	r3, [r3, #0]
    a964:	2b02      	cmp	r3, #2
    a966:	d10e      	bne.n	a986 <radio_control_task+0x1e2>
    a968:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    a96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a970:	881b      	ldrh	r3, [r3, #0]
    a972:	b21b      	sxth	r3, r3
    a974:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    a978:	dd05      	ble.n	a986 <radio_control_task+0x1e2>
	launch = TRUE;
    a97a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    a97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a982:	2201      	movs	r2, #1
    a984:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    a986:	3708      	adds	r7, #8
    a988:	46bd      	mov	sp, r7
    a98a:	bd80      	pop	{r7, pc}
    a98c:	f3af 8000 	nop.w
    a990:	33333333 	.word	0x33333333
    a994:	bfe33333 	.word	0xbfe33333

0000a998 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    a998:	b580      	push	{r7, lr}
    a99a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    a99c:	f24b 43a6 	movw	r3, #46246	; 0xb4a6
    a9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a4:	2203      	movs	r2, #3
    a9a6:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    a9a8:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    a9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b0:	781b      	ldrb	r3, [r3, #0]
    a9b2:	2b03      	cmp	r3, #3
    a9b4:	d102      	bne.n	a9bc <navigation_update+0x24>
    nav_home();
    a9b6:	f005 f937 	bl	fc28 <nav_home>
    a9ba:	e001      	b.n	a9c0 <navigation_update+0x28>
  else
    nav_update();
    a9bc:	f005 f95a 	bl	fc74 <nav_update>
}
    a9c0:	bd80      	pop	{r7, pc}
    a9c2:	bf00      	nop

0000a9c4 <send_nav_values>:

void send_nav_values(void){
    a9c4:	b480      	push	{r7}
    a9c6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    a9c8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d0:	781a      	ldrb	r2, [r3, #0]
    a9d2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9da:	781b      	ldrb	r3, [r3, #0]
    a9dc:	b2db      	uxtb	r3, r3
    a9de:	429a      	cmp	r2, r3
    a9e0:	d313      	bcc.n	aa0a <send_nav_values+0x46>
    a9e2:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    a9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	b2db      	uxtb	r3, r3
    a9ee:	461a      	mov	r2, r3
    a9f0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    a9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f8:	781b      	ldrb	r3, [r3, #0]
    a9fa:	1ad3      	subs	r3, r2, r3
    a9fc:	33ff      	adds	r3, #255	; 0xff
    a9fe:	2b1e      	cmp	r3, #30
    aa00:	bfd4      	ite	le
    aa02:	2300      	movle	r3, #0
    aa04:	2301      	movgt	r3, #1
    aa06:	b2db      	uxtb	r3, r3
    aa08:	e011      	b.n	aa2e <send_nav_values+0x6a>
    aa0a:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    aa0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa12:	781b      	ldrb	r3, [r3, #0]
    aa14:	b2db      	uxtb	r3, r3
    aa16:	461a      	mov	r2, r3
    aa18:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa20:	781b      	ldrb	r3, [r3, #0]
    aa22:	1ad3      	subs	r3, r2, r3
    aa24:	2b1e      	cmp	r3, #30
    aa26:	bfd4      	ite	le
    aa28:	2300      	movle	r3, #0
    aa2a:	2301      	movgt	r3, #1
    aa2c:	b2db      	uxtb	r3, r3
    aa2e:	2b00      	cmp	r3, #0
    aa30:	f001 8094 	beq.w	bb5c <send_nav_values+0x1198>
    aa34:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3c:	781b      	ldrb	r3, [r3, #0]
    aa3e:	461a      	mov	r2, r3
    aa40:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    aa44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa48:	2105      	movs	r1, #5
    aa4a:	5499      	strb	r1, [r3, r2]
    aa4c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa54:	781b      	ldrb	r3, [r3, #0]
    aa56:	3301      	adds	r3, #1
    aa58:	b2da      	uxtb	r2, r3
    aa5a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa62:	701a      	strb	r2, [r3, #0]
    aa64:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6c:	781b      	ldrb	r3, [r3, #0]
    aa6e:	2bff      	cmp	r3, #255	; 0xff
    aa70:	d105      	bne.n	aa7e <send_nav_values+0xba>
    aa72:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa7a:	2200      	movs	r2, #0
    aa7c:	701a      	strb	r2, [r3, #0]
    aa7e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa86:	781b      	ldrb	r3, [r3, #0]
    aa88:	461a      	mov	r2, r3
    aa8a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    aa8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa92:	210a      	movs	r1, #10
    aa94:	5499      	strb	r1, [r3, r2]
    aa96:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9e:	781b      	ldrb	r3, [r3, #0]
    aaa0:	3301      	adds	r3, #1
    aaa2:	b2da      	uxtb	r2, r3
    aaa4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aaa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaac:	701a      	strb	r2, [r3, #0]
    aaae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab6:	781b      	ldrb	r3, [r3, #0]
    aab8:	2bff      	cmp	r3, #255	; 0xff
    aaba:	d105      	bne.n	aac8 <send_nav_values+0x104>
    aabc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac4:	2200      	movs	r2, #0
    aac6:	701a      	strb	r2, [r3, #0]
    aac8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    aacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad0:	220a      	movs	r2, #10
    aad2:	701a      	strb	r2, [r3, #0]
    aad4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    aad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aadc:	220a      	movs	r2, #10
    aade:	701a      	strb	r2, [r3, #0]
    aae0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae8:	781b      	ldrb	r3, [r3, #0]
    aaea:	461a      	mov	r2, r3
    aaec:	f64b 0319 	movw	r3, #47129	; 0xb819
    aaf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf4:	7819      	ldrb	r1, [r3, #0]
    aaf6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    aafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafe:	5499      	strb	r1, [r3, r2]
    ab00:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ab04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab08:	781a      	ldrb	r2, [r3, #0]
    ab0a:	f64b 0319 	movw	r3, #47129	; 0xb819
    ab0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab12:	781b      	ldrb	r3, [r3, #0]
    ab14:	4413      	add	r3, r2
    ab16:	b2da      	uxtb	r2, r3
    ab18:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ab1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab20:	701a      	strb	r2, [r3, #0]
    ab22:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ab26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2a:	781a      	ldrb	r2, [r3, #0]
    ab2c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ab30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab34:	781b      	ldrb	r3, [r3, #0]
    ab36:	4413      	add	r3, r2
    ab38:	b2da      	uxtb	r2, r3
    ab3a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	701a      	strb	r2, [r3, #0]
    ab44:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ab48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	3301      	adds	r3, #1
    ab50:	b2da      	uxtb	r2, r3
    ab52:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ab56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5a:	701a      	strb	r2, [r3, #0]
    ab5c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ab60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab64:	781b      	ldrb	r3, [r3, #0]
    ab66:	2bff      	cmp	r3, #255	; 0xff
    ab68:	d105      	bne.n	ab76 <send_nav_values+0x1b2>
    ab6a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ab6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab72:	2200      	movs	r2, #0
    ab74:	701a      	strb	r2, [r3, #0]
    ab76:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ab7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7e:	781b      	ldrb	r3, [r3, #0]
    ab80:	461a      	mov	r2, r3
    ab82:	f64b 0318 	movw	r3, #47128	; 0xb818
    ab86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8a:	7819      	ldrb	r1, [r3, #0]
    ab8c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    ab90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab94:	5499      	strb	r1, [r3, r2]
    ab96:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ab9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9e:	781a      	ldrb	r2, [r3, #0]
    aba0:	f64b 0318 	movw	r3, #47128	; 0xb818
    aba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	4413      	add	r3, r2
    abac:	b2da      	uxtb	r2, r3
    abae:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    abb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb6:	701a      	strb	r2, [r3, #0]
    abb8:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    abbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc0:	781a      	ldrb	r2, [r3, #0]
    abc2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    abc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abca:	781b      	ldrb	r3, [r3, #0]
    abcc:	4413      	add	r3, r2
    abce:	b2da      	uxtb	r2, r3
    abd0:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    abd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd8:	701a      	strb	r2, [r3, #0]
    abda:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    abde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe2:	781b      	ldrb	r3, [r3, #0]
    abe4:	3301      	adds	r3, #1
    abe6:	b2da      	uxtb	r2, r3
    abe8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    abec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf0:	701a      	strb	r2, [r3, #0]
    abf2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    abf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfa:	781b      	ldrb	r3, [r3, #0]
    abfc:	2bff      	cmp	r3, #255	; 0xff
    abfe:	d105      	bne.n	ac0c <send_nav_values+0x248>
    ac00:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ac04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac08:	2200      	movs	r2, #0
    ac0a:	701a      	strb	r2, [r3, #0]
    ac0c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ac10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac14:	781b      	ldrb	r3, [r3, #0]
    ac16:	461a      	mov	r2, r3
    ac18:	f64b 2374 	movw	r3, #47732	; 0xba74
    ac1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac20:	7819      	ldrb	r1, [r3, #0]
    ac22:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    ac26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2a:	5499      	strb	r1, [r3, r2]
    ac2c:	f64b 2374 	movw	r3, #47732	; 0xba74
    ac30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac34:	781a      	ldrb	r2, [r3, #0]
    ac36:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ac3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3e:	781b      	ldrb	r3, [r3, #0]
    ac40:	4413      	add	r3, r2
    ac42:	b2da      	uxtb	r2, r3
    ac44:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ac48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4c:	701a      	strb	r2, [r3, #0]
    ac4e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ac52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac56:	781a      	ldrb	r2, [r3, #0]
    ac58:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ac5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	4413      	add	r3, r2
    ac64:	b2da      	uxtb	r2, r3
    ac66:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ac6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6e:	701a      	strb	r2, [r3, #0]
    ac70:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ac74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	3301      	adds	r3, #1
    ac7c:	b2da      	uxtb	r2, r3
    ac7e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	701a      	strb	r2, [r3, #0]
    ac88:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ac8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	2bff      	cmp	r3, #255	; 0xff
    ac94:	d105      	bne.n	aca2 <send_nav_values+0x2de>
    ac96:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ac9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9e:	2200      	movs	r2, #0
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	461a      	mov	r2, r3
    acae:	f64b 2374 	movw	r3, #47732	; 0xba74
    acb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb6:	7859      	ldrb	r1, [r3, #1]
    acb8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    acbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc0:	5499      	strb	r1, [r3, r2]
    acc2:	4bd2      	ldr	r3, [pc, #840]	; (b00c <send_nav_values+0x648>)
    acc4:	781a      	ldrb	r2, [r3, #0]
    acc6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    acca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acce:	781b      	ldrb	r3, [r3, #0]
    acd0:	4413      	add	r3, r2
    acd2:	b2da      	uxtb	r2, r3
    acd4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	701a      	strb	r2, [r3, #0]
    acde:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ace2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace6:	781a      	ldrb	r2, [r3, #0]
    ace8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    acec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf0:	781b      	ldrb	r3, [r3, #0]
    acf2:	4413      	add	r3, r2
    acf4:	b2da      	uxtb	r2, r3
    acf6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	701a      	strb	r2, [r3, #0]
    ad00:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ad04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad08:	781b      	ldrb	r3, [r3, #0]
    ad0a:	3301      	adds	r3, #1
    ad0c:	b2da      	uxtb	r2, r3
    ad0e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ad12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad16:	701a      	strb	r2, [r3, #0]
    ad18:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ad1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad20:	781b      	ldrb	r3, [r3, #0]
    ad22:	2bff      	cmp	r3, #255	; 0xff
    ad24:	d105      	bne.n	ad32 <send_nav_values+0x36e>
    ad26:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ad2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2e:	2200      	movs	r2, #0
    ad30:	701a      	strb	r2, [r3, #0]
    ad32:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ad36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3a:	781b      	ldrb	r3, [r3, #0]
    ad3c:	461a      	mov	r2, r3
    ad3e:	f64b 2374 	movw	r3, #47732	; 0xba74
    ad42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad46:	7899      	ldrb	r1, [r3, #2]
    ad48:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    ad4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad50:	5499      	strb	r1, [r3, r2]
    ad52:	4baf      	ldr	r3, [pc, #700]	; (b010 <send_nav_values+0x64c>)
    ad54:	781a      	ldrb	r2, [r3, #0]
    ad56:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ad5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5e:	781b      	ldrb	r3, [r3, #0]
    ad60:	4413      	add	r3, r2
    ad62:	b2da      	uxtb	r2, r3
    ad64:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	701a      	strb	r2, [r3, #0]
    ad6e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ad72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad76:	781a      	ldrb	r2, [r3, #0]
    ad78:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ad7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	4413      	add	r3, r2
    ad84:	b2da      	uxtb	r2, r3
    ad86:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	701a      	strb	r2, [r3, #0]
    ad90:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ad94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	3301      	adds	r3, #1
    ad9c:	b2da      	uxtb	r2, r3
    ad9e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ada2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada6:	701a      	strb	r2, [r3, #0]
    ada8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    adac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb0:	781b      	ldrb	r3, [r3, #0]
    adb2:	2bff      	cmp	r3, #255	; 0xff
    adb4:	d105      	bne.n	adc2 <send_nav_values+0x3fe>
    adb6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	2200      	movs	r2, #0
    adc0:	701a      	strb	r2, [r3, #0]
    adc2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    adc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	461a      	mov	r2, r3
    adce:	f64b 2374 	movw	r3, #47732	; 0xba74
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	78d9      	ldrb	r1, [r3, #3]
    add8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	5499      	strb	r1, [r3, r2]
    ade2:	4b8c      	ldr	r3, [pc, #560]	; (b014 <send_nav_values+0x650>)
    ade4:	781a      	ldrb	r2, [r3, #0]
    ade6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	781b      	ldrb	r3, [r3, #0]
    adf0:	4413      	add	r3, r2
    adf2:	b2da      	uxtb	r2, r3
    adf4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    adf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfc:	701a      	strb	r2, [r3, #0]
    adfe:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	781a      	ldrb	r2, [r3, #0]
    ae08:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	4413      	add	r3, r2
    ae14:	b2da      	uxtb	r2, r3
    ae16:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ae1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1e:	701a      	strb	r2, [r3, #0]
    ae20:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ae24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae28:	781b      	ldrb	r3, [r3, #0]
    ae2a:	3301      	adds	r3, #1
    ae2c:	b2da      	uxtb	r2, r3
    ae2e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	701a      	strb	r2, [r3, #0]
    ae38:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ae3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae40:	781b      	ldrb	r3, [r3, #0]
    ae42:	2bff      	cmp	r3, #255	; 0xff
    ae44:	d105      	bne.n	ae52 <send_nav_values+0x48e>
    ae46:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	2200      	movs	r2, #0
    ae50:	701a      	strb	r2, [r3, #0]
    ae52:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ae56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	461a      	mov	r2, r3
    ae5e:	f64b 2378 	movw	r3, #47736	; 0xba78
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	7819      	ldrb	r1, [r3, #0]
    ae68:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    ae6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae70:	5499      	strb	r1, [r3, r2]
    ae72:	f64b 2378 	movw	r3, #47736	; 0xba78
    ae76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7a:	781a      	ldrb	r2, [r3, #0]
    ae7c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ae80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae84:	781b      	ldrb	r3, [r3, #0]
    ae86:	4413      	add	r3, r2
    ae88:	b2da      	uxtb	r2, r3
    ae8a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ae8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae92:	701a      	strb	r2, [r3, #0]
    ae94:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ae98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9c:	781a      	ldrb	r2, [r3, #0]
    ae9e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	4413      	add	r3, r2
    aeaa:	b2da      	uxtb	r2, r3
    aeac:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    aeb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb4:	701a      	strb	r2, [r3, #0]
    aeb6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	781b      	ldrb	r3, [r3, #0]
    aec0:	3301      	adds	r3, #1
    aec2:	b2da      	uxtb	r2, r3
    aec4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aecc:	701a      	strb	r2, [r3, #0]
    aece:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	2bff      	cmp	r3, #255	; 0xff
    aeda:	d105      	bne.n	aee8 <send_nav_values+0x524>
    aedc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee4:	2200      	movs	r2, #0
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	461a      	mov	r2, r3
    aef4:	f64b 2378 	movw	r3, #47736	; 0xba78
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	7859      	ldrb	r1, [r3, #1]
    aefe:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	5499      	strb	r1, [r3, r2]
    af08:	4b43      	ldr	r3, [pc, #268]	; (b018 <send_nav_values+0x654>)
    af0a:	781a      	ldrb	r2, [r3, #0]
    af0c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	781b      	ldrb	r3, [r3, #0]
    af16:	4413      	add	r3, r2
    af18:	b2da      	uxtb	r2, r3
    af1a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    af1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af22:	701a      	strb	r2, [r3, #0]
    af24:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    af28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2c:	781a      	ldrb	r2, [r3, #0]
    af2e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	4413      	add	r3, r2
    af3a:	b2da      	uxtb	r2, r3
    af3c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    af40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af44:	701a      	strb	r2, [r3, #0]
    af46:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	3301      	adds	r3, #1
    af52:	b2da      	uxtb	r2, r3
    af54:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    af58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5c:	701a      	strb	r2, [r3, #0]
    af5e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    af62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af66:	781b      	ldrb	r3, [r3, #0]
    af68:	2bff      	cmp	r3, #255	; 0xff
    af6a:	d105      	bne.n	af78 <send_nav_values+0x5b4>
    af6c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	2200      	movs	r2, #0
    af76:	701a      	strb	r2, [r3, #0]
    af78:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    af7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af80:	781b      	ldrb	r3, [r3, #0]
    af82:	461a      	mov	r2, r3
    af84:	f64b 2378 	movw	r3, #47736	; 0xba78
    af88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8c:	7899      	ldrb	r1, [r3, #2]
    af8e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    af92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af96:	5499      	strb	r1, [r3, r2]
    af98:	4b20      	ldr	r3, [pc, #128]	; (b01c <send_nav_values+0x658>)
    af9a:	781a      	ldrb	r2, [r3, #0]
    af9c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	781b      	ldrb	r3, [r3, #0]
    afa6:	4413      	add	r3, r2
    afa8:	b2da      	uxtb	r2, r3
    afaa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    afae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb2:	701a      	strb	r2, [r3, #0]
    afb4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	781a      	ldrb	r2, [r3, #0]
    afbe:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	4413      	add	r3, r2
    afca:	b2da      	uxtb	r2, r3
    afcc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	701a      	strb	r2, [r3, #0]
    afd6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    afda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	3301      	adds	r3, #1
    afe2:	b2da      	uxtb	r2, r3
    afe4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    afe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afec:	701a      	strb	r2, [r3, #0]
    afee:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    aff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff6:	781b      	ldrb	r3, [r3, #0]
    aff8:	2bff      	cmp	r3, #255	; 0xff
    affa:	d111      	bne.n	b020 <send_nav_values+0x65c>
    affc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b004:	2200      	movs	r2, #0
    b006:	701a      	strb	r2, [r3, #0]
    b008:	e00a      	b.n	b020 <send_nav_values+0x65c>
    b00a:	bf00      	nop
    b00c:	2004ba75 	.word	0x2004ba75
    b010:	2004ba76 	.word	0x2004ba76
    b014:	2004ba77 	.word	0x2004ba77
    b018:	2004ba79 	.word	0x2004ba79
    b01c:	2004ba7a 	.word	0x2004ba7a
    b020:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	461a      	mov	r2, r3
    b02c:	f64b 2378 	movw	r3, #47736	; 0xba78
    b030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b034:	78d9      	ldrb	r1, [r3, #3]
    b036:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03e:	5499      	strb	r1, [r3, r2]
    b040:	4bd3      	ldr	r3, [pc, #844]	; (b390 <send_nav_values+0x9cc>)
    b042:	781a      	ldrb	r2, [r3, #0]
    b044:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	4413      	add	r3, r2
    b050:	b2da      	uxtb	r2, r3
    b052:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05a:	701a      	strb	r2, [r3, #0]
    b05c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	781a      	ldrb	r2, [r3, #0]
    b066:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06e:	781b      	ldrb	r3, [r3, #0]
    b070:	4413      	add	r3, r2
    b072:	b2da      	uxtb	r2, r3
    b074:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07c:	701a      	strb	r2, [r3, #0]
    b07e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	3301      	adds	r3, #1
    b08a:	b2da      	uxtb	r2, r3
    b08c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b094:	701a      	strb	r2, [r3, #0]
    b096:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09e:	781b      	ldrb	r3, [r3, #0]
    b0a0:	2bff      	cmp	r3, #255	; 0xff
    b0a2:	d105      	bne.n	b0b0 <send_nav_values+0x6ec>
    b0a4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ac:	2200      	movs	r2, #0
    b0ae:	701a      	strb	r2, [r3, #0]
    b0b0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	461a      	mov	r2, r3
    b0bc:	f64b 0304 	movw	r3, #47108	; 0xb804
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	7819      	ldrb	r1, [r3, #0]
    b0c6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ce:	5499      	strb	r1, [r3, r2]
    b0d0:	f64b 0304 	movw	r3, #47108	; 0xb804
    b0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d8:	781a      	ldrb	r2, [r3, #0]
    b0da:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e2:	781b      	ldrb	r3, [r3, #0]
    b0e4:	4413      	add	r3, r2
    b0e6:	b2da      	uxtb	r2, r3
    b0e8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f0:	701a      	strb	r2, [r3, #0]
    b0f2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fa:	781a      	ldrb	r2, [r3, #0]
    b0fc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b104:	781b      	ldrb	r3, [r3, #0]
    b106:	4413      	add	r3, r2
    b108:	b2da      	uxtb	r2, r3
    b10a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b112:	701a      	strb	r2, [r3, #0]
    b114:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	3301      	adds	r3, #1
    b120:	b2da      	uxtb	r2, r3
    b122:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12a:	701a      	strb	r2, [r3, #0]
    b12c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b134:	781b      	ldrb	r3, [r3, #0]
    b136:	2bff      	cmp	r3, #255	; 0xff
    b138:	d105      	bne.n	b146 <send_nav_values+0x782>
    b13a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b142:	2200      	movs	r2, #0
    b144:	701a      	strb	r2, [r3, #0]
    b146:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14e:	781b      	ldrb	r3, [r3, #0]
    b150:	461a      	mov	r2, r3
    b152:	f64b 0304 	movw	r3, #47108	; 0xb804
    b156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15a:	7859      	ldrb	r1, [r3, #1]
    b15c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b164:	5499      	strb	r1, [r3, r2]
    b166:	4b8b      	ldr	r3, [pc, #556]	; (b394 <send_nav_values+0x9d0>)
    b168:	781a      	ldrb	r2, [r3, #0]
    b16a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	4413      	add	r3, r2
    b176:	b2da      	uxtb	r2, r3
    b178:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b180:	701a      	strb	r2, [r3, #0]
    b182:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18a:	781a      	ldrb	r2, [r3, #0]
    b18c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b194:	781b      	ldrb	r3, [r3, #0]
    b196:	4413      	add	r3, r2
    b198:	b2da      	uxtb	r2, r3
    b19a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a2:	701a      	strb	r2, [r3, #0]
    b1a4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ac:	781b      	ldrb	r3, [r3, #0]
    b1ae:	3301      	adds	r3, #1
    b1b0:	b2da      	uxtb	r2, r3
    b1b2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ba:	701a      	strb	r2, [r3, #0]
    b1bc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c4:	781b      	ldrb	r3, [r3, #0]
    b1c6:	2bff      	cmp	r3, #255	; 0xff
    b1c8:	d105      	bne.n	b1d6 <send_nav_values+0x812>
    b1ca:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d2:	2200      	movs	r2, #0
    b1d4:	701a      	strb	r2, [r3, #0]
    b1d6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	461a      	mov	r2, r3
    b1e2:	f64b 0304 	movw	r3, #47108	; 0xb804
    b1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ea:	7899      	ldrb	r1, [r3, #2]
    b1ec:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f4:	5499      	strb	r1, [r3, r2]
    b1f6:	4b68      	ldr	r3, [pc, #416]	; (b398 <send_nav_values+0x9d4>)
    b1f8:	781a      	ldrb	r2, [r3, #0]
    b1fa:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b202:	781b      	ldrb	r3, [r3, #0]
    b204:	4413      	add	r3, r2
    b206:	b2da      	uxtb	r2, r3
    b208:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b210:	701a      	strb	r2, [r3, #0]
    b212:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21a:	781a      	ldrb	r2, [r3, #0]
    b21c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b224:	781b      	ldrb	r3, [r3, #0]
    b226:	4413      	add	r3, r2
    b228:	b2da      	uxtb	r2, r3
    b22a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b232:	701a      	strb	r2, [r3, #0]
    b234:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23c:	781b      	ldrb	r3, [r3, #0]
    b23e:	3301      	adds	r3, #1
    b240:	b2da      	uxtb	r2, r3
    b242:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24a:	701a      	strb	r2, [r3, #0]
    b24c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b254:	781b      	ldrb	r3, [r3, #0]
    b256:	2bff      	cmp	r3, #255	; 0xff
    b258:	d105      	bne.n	b266 <send_nav_values+0x8a2>
    b25a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b262:	2200      	movs	r2, #0
    b264:	701a      	strb	r2, [r3, #0]
    b266:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26e:	781b      	ldrb	r3, [r3, #0]
    b270:	461a      	mov	r2, r3
    b272:	f64b 0304 	movw	r3, #47108	; 0xb804
    b276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b27a:	78d9      	ldrb	r1, [r3, #3]
    b27c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b284:	5499      	strb	r1, [r3, r2]
    b286:	4b45      	ldr	r3, [pc, #276]	; (b39c <send_nav_values+0x9d8>)
    b288:	781a      	ldrb	r2, [r3, #0]
    b28a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b292:	781b      	ldrb	r3, [r3, #0]
    b294:	4413      	add	r3, r2
    b296:	b2da      	uxtb	r2, r3
    b298:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a0:	701a      	strb	r2, [r3, #0]
    b2a2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2aa:	781a      	ldrb	r2, [r3, #0]
    b2ac:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	4413      	add	r3, r2
    b2b8:	b2da      	uxtb	r2, r3
    b2ba:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c2:	701a      	strb	r2, [r3, #0]
    b2c4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2cc:	781b      	ldrb	r3, [r3, #0]
    b2ce:	3301      	adds	r3, #1
    b2d0:	b2da      	uxtb	r2, r3
    b2d2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2da:	701a      	strb	r2, [r3, #0]
    b2dc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e4:	781b      	ldrb	r3, [r3, #0]
    b2e6:	2bff      	cmp	r3, #255	; 0xff
    b2e8:	d105      	bne.n	b2f6 <send_nav_values+0x932>
    b2ea:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f2:	2200      	movs	r2, #0
    b2f4:	701a      	strb	r2, [r3, #0]
    b2f6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fe:	781b      	ldrb	r3, [r3, #0]
    b300:	461a      	mov	r2, r3
    b302:	f64b 034c 	movw	r3, #47180	; 0xb84c
    b306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30a:	7819      	ldrb	r1, [r3, #0]
    b30c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b314:	5499      	strb	r1, [r3, r2]
    b316:	f64b 034c 	movw	r3, #47180	; 0xb84c
    b31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31e:	781a      	ldrb	r2, [r3, #0]
    b320:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b328:	781b      	ldrb	r3, [r3, #0]
    b32a:	4413      	add	r3, r2
    b32c:	b2da      	uxtb	r2, r3
    b32e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	701a      	strb	r2, [r3, #0]
    b338:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b340:	781a      	ldrb	r2, [r3, #0]
    b342:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34a:	781b      	ldrb	r3, [r3, #0]
    b34c:	4413      	add	r3, r2
    b34e:	b2da      	uxtb	r2, r3
    b350:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b358:	701a      	strb	r2, [r3, #0]
    b35a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b362:	781b      	ldrb	r3, [r3, #0]
    b364:	3301      	adds	r3, #1
    b366:	b2da      	uxtb	r2, r3
    b368:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b370:	701a      	strb	r2, [r3, #0]
    b372:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	2bff      	cmp	r3, #255	; 0xff
    b37e:	d10f      	bne.n	b3a0 <send_nav_values+0x9dc>
    b380:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b388:	2200      	movs	r2, #0
    b38a:	701a      	strb	r2, [r3, #0]
    b38c:	e008      	b.n	b3a0 <send_nav_values+0x9dc>
    b38e:	bf00      	nop
    b390:	2004ba7b 	.word	0x2004ba7b
    b394:	2004b805 	.word	0x2004b805
    b398:	2004b806 	.word	0x2004b806
    b39c:	2004b807 	.word	0x2004b807
    b3a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	461a      	mov	r2, r3
    b3ac:	f64b 034c 	movw	r3, #47180	; 0xb84c
    b3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b4:	7859      	ldrb	r1, [r3, #1]
    b3b6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3be:	5499      	strb	r1, [r3, r2]
    b3c0:	4bd1      	ldr	r3, [pc, #836]	; (b708 <send_nav_values+0xd44>)
    b3c2:	781a      	ldrb	r2, [r3, #0]
    b3c4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	4413      	add	r3, r2
    b3d0:	b2da      	uxtb	r2, r3
    b3d2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e4:	781a      	ldrb	r2, [r3, #0]
    b3e6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ee:	781b      	ldrb	r3, [r3, #0]
    b3f0:	4413      	add	r3, r2
    b3f2:	b2da      	uxtb	r2, r3
    b3f4:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fc:	701a      	strb	r2, [r3, #0]
    b3fe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b406:	781b      	ldrb	r3, [r3, #0]
    b408:	3301      	adds	r3, #1
    b40a:	b2da      	uxtb	r2, r3
    b40c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b414:	701a      	strb	r2, [r3, #0]
    b416:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41e:	781b      	ldrb	r3, [r3, #0]
    b420:	2bff      	cmp	r3, #255	; 0xff
    b422:	d105      	bne.n	b430 <send_nav_values+0xa6c>
    b424:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42c:	2200      	movs	r2, #0
    b42e:	701a      	strb	r2, [r3, #0]
    b430:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	781b      	ldrb	r3, [r3, #0]
    b43a:	461a      	mov	r2, r3
    b43c:	f64b 034c 	movw	r3, #47180	; 0xb84c
    b440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b444:	7899      	ldrb	r1, [r3, #2]
    b446:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44e:	5499      	strb	r1, [r3, r2]
    b450:	4bae      	ldr	r3, [pc, #696]	; (b70c <send_nav_values+0xd48>)
    b452:	781a      	ldrb	r2, [r3, #0]
    b454:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45c:	781b      	ldrb	r3, [r3, #0]
    b45e:	4413      	add	r3, r2
    b460:	b2da      	uxtb	r2, r3
    b462:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46a:	701a      	strb	r2, [r3, #0]
    b46c:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b474:	781a      	ldrb	r2, [r3, #0]
    b476:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47e:	781b      	ldrb	r3, [r3, #0]
    b480:	4413      	add	r3, r2
    b482:	b2da      	uxtb	r2, r3
    b484:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48c:	701a      	strb	r2, [r3, #0]
    b48e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b496:	781b      	ldrb	r3, [r3, #0]
    b498:	3301      	adds	r3, #1
    b49a:	b2da      	uxtb	r2, r3
    b49c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a4:	701a      	strb	r2, [r3, #0]
    b4a6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ae:	781b      	ldrb	r3, [r3, #0]
    b4b0:	2bff      	cmp	r3, #255	; 0xff
    b4b2:	d105      	bne.n	b4c0 <send_nav_values+0xafc>
    b4b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4bc:	2200      	movs	r2, #0
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	461a      	mov	r2, r3
    b4cc:	f64b 034c 	movw	r3, #47180	; 0xb84c
    b4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d4:	78d9      	ldrb	r1, [r3, #3]
    b4d6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4de:	5499      	strb	r1, [r3, r2]
    b4e0:	4b8b      	ldr	r3, [pc, #556]	; (b710 <send_nav_values+0xd4c>)
    b4e2:	781a      	ldrb	r2, [r3, #0]
    b4e4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ec:	781b      	ldrb	r3, [r3, #0]
    b4ee:	4413      	add	r3, r2
    b4f0:	b2da      	uxtb	r2, r3
    b4f2:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fa:	701a      	strb	r2, [r3, #0]
    b4fc:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b504:	781a      	ldrb	r2, [r3, #0]
    b506:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50e:	781b      	ldrb	r3, [r3, #0]
    b510:	4413      	add	r3, r2
    b512:	b2da      	uxtb	r2, r3
    b514:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51c:	701a      	strb	r2, [r3, #0]
    b51e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b526:	781b      	ldrb	r3, [r3, #0]
    b528:	3301      	adds	r3, #1
    b52a:	b2da      	uxtb	r2, r3
    b52c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b534:	701a      	strb	r2, [r3, #0]
    b536:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53e:	781b      	ldrb	r3, [r3, #0]
    b540:	2bff      	cmp	r3, #255	; 0xff
    b542:	d105      	bne.n	b550 <send_nav_values+0xb8c>
    b544:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54c:	2200      	movs	r2, #0
    b54e:	701a      	strb	r2, [r3, #0]
    b550:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b558:	781b      	ldrb	r3, [r3, #0]
    b55a:	461a      	mov	r2, r3
    b55c:	f240 1320 	movw	r3, #288	; 0x120
    b560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b564:	7819      	ldrb	r1, [r3, #0]
    b566:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56e:	5499      	strb	r1, [r3, r2]
    b570:	f240 1320 	movw	r3, #288	; 0x120
    b574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b578:	781a      	ldrb	r2, [r3, #0]
    b57a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b582:	781b      	ldrb	r3, [r3, #0]
    b584:	4413      	add	r3, r2
    b586:	b2da      	uxtb	r2, r3
    b588:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b590:	701a      	strb	r2, [r3, #0]
    b592:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59a:	781a      	ldrb	r2, [r3, #0]
    b59c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a4:	781b      	ldrb	r3, [r3, #0]
    b5a6:	4413      	add	r3, r2
    b5a8:	b2da      	uxtb	r2, r3
    b5aa:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b2:	701a      	strb	r2, [r3, #0]
    b5b4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	3301      	adds	r3, #1
    b5c0:	b2da      	uxtb	r2, r3
    b5c2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ca:	701a      	strb	r2, [r3, #0]
    b5cc:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d4:	781b      	ldrb	r3, [r3, #0]
    b5d6:	2bff      	cmp	r3, #255	; 0xff
    b5d8:	d105      	bne.n	b5e6 <send_nav_values+0xc22>
    b5da:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e2:	2200      	movs	r2, #0
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	461a      	mov	r2, r3
    b5f2:	f240 1320 	movw	r3, #288	; 0x120
    b5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5fa:	7859      	ldrb	r1, [r3, #1]
    b5fc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b604:	5499      	strb	r1, [r3, r2]
    b606:	4b43      	ldr	r3, [pc, #268]	; (b714 <send_nav_values+0xd50>)
    b608:	781a      	ldrb	r2, [r3, #0]
    b60a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b612:	781b      	ldrb	r3, [r3, #0]
    b614:	4413      	add	r3, r2
    b616:	b2da      	uxtb	r2, r3
    b618:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b620:	701a      	strb	r2, [r3, #0]
    b622:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62a:	781a      	ldrb	r2, [r3, #0]
    b62c:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b634:	781b      	ldrb	r3, [r3, #0]
    b636:	4413      	add	r3, r2
    b638:	b2da      	uxtb	r2, r3
    b63a:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b642:	701a      	strb	r2, [r3, #0]
    b644:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64c:	781b      	ldrb	r3, [r3, #0]
    b64e:	3301      	adds	r3, #1
    b650:	b2da      	uxtb	r2, r3
    b652:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65a:	701a      	strb	r2, [r3, #0]
    b65c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b664:	781b      	ldrb	r3, [r3, #0]
    b666:	2bff      	cmp	r3, #255	; 0xff
    b668:	d105      	bne.n	b676 <send_nav_values+0xcb2>
    b66a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b672:	2200      	movs	r2, #0
    b674:	701a      	strb	r2, [r3, #0]
    b676:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	781b      	ldrb	r3, [r3, #0]
    b680:	461a      	mov	r2, r3
    b682:	f240 1320 	movw	r3, #288	; 0x120
    b686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b68a:	7899      	ldrb	r1, [r3, #2]
    b68c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b694:	5499      	strb	r1, [r3, r2]
    b696:	4b20      	ldr	r3, [pc, #128]	; (b718 <send_nav_values+0xd54>)
    b698:	781a      	ldrb	r2, [r3, #0]
    b69a:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a2:	781b      	ldrb	r3, [r3, #0]
    b6a4:	4413      	add	r3, r2
    b6a6:	b2da      	uxtb	r2, r3
    b6a8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b0:	701a      	strb	r2, [r3, #0]
    b6b2:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ba:	781a      	ldrb	r2, [r3, #0]
    b6bc:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c4:	781b      	ldrb	r3, [r3, #0]
    b6c6:	4413      	add	r3, r2
    b6c8:	b2da      	uxtb	r2, r3
    b6ca:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d2:	701a      	strb	r2, [r3, #0]
    b6d4:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6dc:	781b      	ldrb	r3, [r3, #0]
    b6de:	3301      	adds	r3, #1
    b6e0:	b2da      	uxtb	r2, r3
    b6e2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ea:	701a      	strb	r2, [r3, #0]
    b6ec:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f4:	781b      	ldrb	r3, [r3, #0]
    b6f6:	2bff      	cmp	r3, #255	; 0xff
    b6f8:	d110      	bne.n	b71c <send_nav_values+0xd58>
    b6fa:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b702:	2200      	movs	r2, #0
    b704:	701a      	strb	r2, [r3, #0]
    b706:	e009      	b.n	b71c <send_nav_values+0xd58>
    b708:	2004b84d 	.word	0x2004b84d
    b70c:	2004b84e 	.word	0x2004b84e
    b710:	2004b84f 	.word	0x2004b84f
    b714:	20000121 	.word	0x20000121
    b718:	20000122 	.word	0x20000122
    b71c:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b724:	781b      	ldrb	r3, [r3, #0]
    b726:	461a      	mov	r2, r3
    b728:	f240 1320 	movw	r3, #288	; 0x120
    b72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b730:	78d9      	ldrb	r1, [r3, #3]
    b732:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73a:	5499      	strb	r1, [r3, r2]
    b73c:	4bc2      	ldr	r3, [pc, #776]	; (ba48 <send_nav_values+0x1084>)
    b73e:	781a      	ldrb	r2, [r3, #0]
    b740:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	4413      	add	r3, r2
    b74c:	b2da      	uxtb	r2, r3
    b74e:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b756:	701a      	strb	r2, [r3, #0]
    b758:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	781a      	ldrb	r2, [r3, #0]
    b762:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76a:	781b      	ldrb	r3, [r3, #0]
    b76c:	4413      	add	r3, r2
    b76e:	b2da      	uxtb	r2, r3
    b770:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	701a      	strb	r2, [r3, #0]
    b77a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b782:	781b      	ldrb	r3, [r3, #0]
    b784:	3301      	adds	r3, #1
    b786:	b2da      	uxtb	r2, r3
    b788:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b790:	701a      	strb	r2, [r3, #0]
    b792:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79a:	781b      	ldrb	r3, [r3, #0]
    b79c:	2bff      	cmp	r3, #255	; 0xff
    b79e:	d105      	bne.n	b7ac <send_nav_values+0xde8>
    b7a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	2200      	movs	r2, #0
    b7aa:	701a      	strb	r2, [r3, #0]
    b7ac:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b4:	781b      	ldrb	r3, [r3, #0]
    b7b6:	461a      	mov	r2, r3
    b7b8:	f64b 0350 	movw	r3, #47184	; 0xb850
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	7819      	ldrb	r1, [r3, #0]
    b7c2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ca:	5499      	strb	r1, [r3, r2]
    b7cc:	f64b 0350 	movw	r3, #47184	; 0xb850
    b7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d4:	781a      	ldrb	r2, [r3, #0]
    b7d6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	4413      	add	r3, r2
    b7e2:	b2da      	uxtb	r2, r3
    b7e4:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ec:	701a      	strb	r2, [r3, #0]
    b7ee:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f6:	781a      	ldrb	r2, [r3, #0]
    b7f8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	4413      	add	r3, r2
    b804:	b2da      	uxtb	r2, r3
    b806:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80e:	701a      	strb	r2, [r3, #0]
    b810:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	3301      	adds	r3, #1
    b81c:	b2da      	uxtb	r2, r3
    b81e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	701a      	strb	r2, [r3, #0]
    b828:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	2bff      	cmp	r3, #255	; 0xff
    b834:	d105      	bne.n	b842 <send_nav_values+0xe7e>
    b836:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	2200      	movs	r2, #0
    b840:	701a      	strb	r2, [r3, #0]
    b842:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	461a      	mov	r2, r3
    b84e:	f64b 0350 	movw	r3, #47184	; 0xb850
    b852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b856:	7859      	ldrb	r1, [r3, #1]
    b858:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	5499      	strb	r1, [r3, r2]
    b862:	4b7a      	ldr	r3, [pc, #488]	; (ba4c <send_nav_values+0x1088>)
    b864:	781a      	ldrb	r2, [r3, #0]
    b866:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	4413      	add	r3, r2
    b872:	b2da      	uxtb	r2, r3
    b874:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87c:	701a      	strb	r2, [r3, #0]
    b87e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b886:	781a      	ldrb	r2, [r3, #0]
    b888:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	781b      	ldrb	r3, [r3, #0]
    b892:	4413      	add	r3, r2
    b894:	b2da      	uxtb	r2, r3
    b896:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89e:	701a      	strb	r2, [r3, #0]
    b8a0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	3301      	adds	r3, #1
    b8ac:	b2da      	uxtb	r2, r3
    b8ae:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b6:	701a      	strb	r2, [r3, #0]
    b8b8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	2bff      	cmp	r3, #255	; 0xff
    b8c4:	d105      	bne.n	b8d2 <send_nav_values+0xf0e>
    b8c6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ce:	2200      	movs	r2, #0
    b8d0:	701a      	strb	r2, [r3, #0]
    b8d2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	461a      	mov	r2, r3
    b8de:	f64b 0350 	movw	r3, #47184	; 0xb850
    b8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e6:	7899      	ldrb	r1, [r3, #2]
    b8e8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	5499      	strb	r1, [r3, r2]
    b8f2:	4b57      	ldr	r3, [pc, #348]	; (ba50 <send_nav_values+0x108c>)
    b8f4:	781a      	ldrb	r2, [r3, #0]
    b8f6:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fe:	781b      	ldrb	r3, [r3, #0]
    b900:	4413      	add	r3, r2
    b902:	b2da      	uxtb	r2, r3
    b904:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90c:	701a      	strb	r2, [r3, #0]
    b90e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b916:	781a      	ldrb	r2, [r3, #0]
    b918:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	781b      	ldrb	r3, [r3, #0]
    b922:	4413      	add	r3, r2
    b924:	b2da      	uxtb	r2, r3
    b926:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92e:	701a      	strb	r2, [r3, #0]
    b930:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b938:	781b      	ldrb	r3, [r3, #0]
    b93a:	3301      	adds	r3, #1
    b93c:	b2da      	uxtb	r2, r3
    b93e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b946:	701a      	strb	r2, [r3, #0]
    b948:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	2bff      	cmp	r3, #255	; 0xff
    b954:	d105      	bne.n	b962 <send_nav_values+0xf9e>
    b956:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95e:	2200      	movs	r2, #0
    b960:	701a      	strb	r2, [r3, #0]
    b962:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96a:	781b      	ldrb	r3, [r3, #0]
    b96c:	461a      	mov	r2, r3
    b96e:	f64b 0350 	movw	r3, #47184	; 0xb850
    b972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b976:	78d9      	ldrb	r1, [r3, #3]
    b978:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	5499      	strb	r1, [r3, r2]
    b982:	4b34      	ldr	r3, [pc, #208]	; (ba54 <send_nav_values+0x1090>)
    b984:	781a      	ldrb	r2, [r3, #0]
    b986:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98e:	781b      	ldrb	r3, [r3, #0]
    b990:	4413      	add	r3, r2
    b992:	b2da      	uxtb	r2, r3
    b994:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99c:	701a      	strb	r2, [r3, #0]
    b99e:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a6:	781a      	ldrb	r2, [r3, #0]
    b9a8:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    b9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b0:	781b      	ldrb	r3, [r3, #0]
    b9b2:	4413      	add	r3, r2
    b9b4:	b2da      	uxtb	r2, r3
    b9b6:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    b9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9be:	701a      	strb	r2, [r3, #0]
    b9c0:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	3301      	adds	r3, #1
    b9cc:	b2da      	uxtb	r2, r3
    b9ce:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d6:	701a      	strb	r2, [r3, #0]
    b9d8:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	2bff      	cmp	r3, #255	; 0xff
    b9e4:	d105      	bne.n	b9f2 <send_nav_values+0x102e>
    b9e6:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ee:	2200      	movs	r2, #0
    b9f0:	701a      	strb	r2, [r3, #0]
    b9f2:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    b9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	461a      	mov	r2, r3
    b9fe:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
    ba02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba06:	7819      	ldrb	r1, [r3, #0]
    ba08:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    ba0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba10:	5499      	strb	r1, [r3, r2]
    ba12:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	3301      	adds	r3, #1
    ba1e:	b2da      	uxtb	r2, r3
    ba20:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba28:	701a      	strb	r2, [r3, #0]
    ba2a:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba32:	781b      	ldrb	r3, [r3, #0]
    ba34:	2bff      	cmp	r3, #255	; 0xff
    ba36:	d10f      	bne.n	ba58 <send_nav_values+0x1094>
    ba38:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	2200      	movs	r2, #0
    ba42:	701a      	strb	r2, [r3, #0]
    ba44:	e008      	b.n	ba58 <send_nav_values+0x1094>
    ba46:	bf00      	nop
    ba48:	20000123 	.word	0x20000123
    ba4c:	2004b851 	.word	0x2004b851
    ba50:	2004b852 	.word	0x2004b852
    ba54:	2004b853 	.word	0x2004b853
    ba58:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	461a      	mov	r2, r3
    ba64:	f24b 53c6 	movw	r3, #46534	; 0xb5c6
    ba68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6c:	7819      	ldrb	r1, [r3, #0]
    ba6e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    ba72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba76:	5499      	strb	r1, [r3, r2]
    ba78:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba80:	781b      	ldrb	r3, [r3, #0]
    ba82:	3301      	adds	r3, #1
    ba84:	b2da      	uxtb	r2, r3
    ba86:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8e:	701a      	strb	r2, [r3, #0]
    ba90:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    ba94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba98:	781b      	ldrb	r3, [r3, #0]
    ba9a:	2bff      	cmp	r3, #255	; 0xff
    ba9c:	d105      	bne.n	baaa <send_nav_values+0x10e6>
    ba9e:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    baa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa6:	2200      	movs	r2, #0
    baa8:	701a      	strb	r2, [r3, #0]
    baaa:	f248 0339 	movw	r3, #32825	; 0x8039
    baae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab2:	781b      	ldrb	r3, [r3, #0]
    bab4:	b2db      	uxtb	r3, r3
    bab6:	f003 0310 	and.w	r3, r3, #16
    baba:	2b00      	cmp	r3, #0
    babc:	d15a      	bne.n	bb74 <send_nav_values+0x11b0>
    babe:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    bac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	b2db      	uxtb	r3, r3
    baca:	461a      	mov	r2, r3
    bacc:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    bad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad4:	5c9a      	ldrb	r2, [r3, r2]
    bad6:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    bada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bade:	701a      	strb	r2, [r3, #0]
    bae0:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    bae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae8:	2200      	movs	r2, #0
    baea:	701a      	strb	r2, [r3, #0]
    baec:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    baf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf4:	781b      	ldrb	r3, [r3, #0]
    baf6:	b2db      	uxtb	r3, r3
    baf8:	3301      	adds	r3, #1
    bafa:	b2da      	uxtb	r2, r3
    bafc:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    bb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb04:	701a      	strb	r2, [r3, #0]
    bb06:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    bb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb0e:	781b      	ldrb	r3, [r3, #0]
    bb10:	b2db      	uxtb	r3, r3
    bb12:	2bff      	cmp	r3, #255	; 0xff
    bb14:	d105      	bne.n	bb22 <send_nav_values+0x115e>
    bb16:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    bb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1e:	2200      	movs	r2, #0
    bb20:	701a      	strb	r2, [r3, #0]
    bb22:	f248 0338 	movw	r3, #32824	; 0x8038
    bb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb2a:	f248 0238 	movw	r2, #32824	; 0x8038
    bb2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb32:	7812      	ldrb	r2, [r2, #0]
    bb34:	b2d2      	uxtb	r2, r2
    bb36:	f042 0201 	orr.w	r2, r2, #1
    bb3a:	b2d2      	uxtb	r2, r2
    bb3c:	701a      	strb	r2, [r3, #0]
    bb3e:	f248 0339 	movw	r3, #32825	; 0x8039
    bb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb46:	f248 0239 	movw	r2, #32825	; 0x8039
    bb4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb4e:	7812      	ldrb	r2, [r2, #0]
    bb50:	b2d2      	uxtb	r2, r2
    bb52:	f042 0210 	orr.w	r2, r2, #16
    bb56:	b2d2      	uxtb	r2, r2
    bb58:	701a      	strb	r2, [r3, #0]
    bb5a:	e00b      	b.n	bb74 <send_nav_values+0x11b0>
    bb5c:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    bb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	3301      	adds	r3, #1
    bb68:	b2da      	uxtb	r2, r3
    bb6a:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
    bb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb72:	701a      	strb	r2, [r3, #0]
}
    bb74:	46bd      	mov	sp, r7
    bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb7a:	4770      	bx	lr

0000bb7c <course_run>:

void course_run(void){
    bb7c:	b580      	push	{r7, lr}
    bb7e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bb80:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    bb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	2b02      	cmp	r3, #2
    bb8c:	d006      	beq.n	bb9c <course_run+0x20>
    bb8e:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    bb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	2b03      	cmp	r3, #3
    bb9a:	d112      	bne.n	bbc2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    bb9c:	f24b 43a6 	movw	r3, #46246	; 0xb4a6
    bba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba4:	781b      	ldrb	r3, [r3, #0]
    bba6:	2b02      	cmp	r3, #2
    bba8:	d901      	bls.n	bbae <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    bbaa:	f001 f98d 	bl	cec8 <course_pid_run>
    desired_roll = nav_desired_roll;
    bbae:	f64b 0348 	movw	r3, #47176	; 0xb848
    bbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb6:	681a      	ldr	r2, [r3, #0]
    bbb8:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    bbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    bbc2:	bd80      	pop	{r7, pc}

0000bbc4 <altitude_control_task>:

void altitude_control_task(void)
{
    bbc4:	b580      	push	{r7, lr}
    bbc6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    bbc8:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    bbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	2b02      	cmp	r3, #2
    bbd4:	d006      	beq.n	bbe4 <altitude_control_task+0x20>
    bbd6:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    bbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbde:	781b      	ldrb	r3, [r3, #0]
    bbe0:	2b03      	cmp	r3, #3
    bbe2:	d108      	bne.n	bbf6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    bbe4:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    bbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	2b03      	cmp	r3, #3
    bbf0:	d101      	bne.n	bbf6 <altitude_control_task+0x32>
      			altitude_pid_run();
    bbf2:	f001 fbf1 	bl	d3d8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    bbf6:	bd80      	pop	{r7, pc}

0000bbf8 <climb_control_task>:
void climb_control_task(void)
{
    bbf8:	b580      	push	{r7, lr}
    bbfa:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    bbfc:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    bc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc04:	781b      	ldrb	r3, [r3, #0]
    bc06:	2b02      	cmp	r3, #2
    bc08:	d006      	beq.n	bc18 <climb_control_task+0x20>
    bc0a:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    bc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc12:	781b      	ldrb	r3, [r3, #0]
    bc14:	2b03      	cmp	r3, #3
    bc16:	d135      	bne.n	bc84 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    bc18:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    bc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	2b01      	cmp	r3, #1
    bc24:	d901      	bls.n	bc2a <climb_control_task+0x32>
        	climb_pid_run();
    bc26:	f001 fa07 	bl	d038 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    bc2a:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    bc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	2b01      	cmp	r3, #1
    bc36:	d10a      	bne.n	bc4e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    bc38:	f64b 0340 	movw	r3, #47168	; 0xb840
    bc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc40:	881b      	ldrh	r3, [r3, #0]
    bc42:	b29a      	uxth	r2, r3
    bc44:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    bc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    bc4e:	f24b 43ad 	movw	r3, #46253	; 0xb4ad
    bc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc56:	781b      	ldrb	r3, [r3, #0]
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d10d      	bne.n	bc78 <climb_control_task+0x80>
    bc5c:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    bc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc64:	881b      	ldrh	r3, [r3, #0]
    bc66:	2b00      	cmp	r3, #0
    bc68:	d10c      	bne.n	bc84 <climb_control_task+0x8c>
    bc6a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    bc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc72:	781b      	ldrb	r3, [r3, #0]
    bc74:	2b00      	cmp	r3, #0
    bc76:	d105      	bne.n	bc84 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    bc78:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    bc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc80:	2200      	movs	r2, #0
    bc82:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    bc84:	bd80      	pop	{r7, pc}
    bc86:	bf00      	nop

0000bc88 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    bc88:	b580      	push	{r7, lr}
    bc8a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    bc8c:	f000 ffc2 	bl	cc14 <ir_update>
    estimator_update_state_infrared();
    bc90:	f004 fa48 	bl	10124 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    bc94:	f001 f82c 	bl	ccf0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    bc98:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    bc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca0:	881a      	ldrh	r2, [r3, #0]
    bca2:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    bca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcaa:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    bcac:	f24b 73f6 	movw	r3, #47094	; 0xb7f6
    bcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb4:	881a      	ldrh	r2, [r3, #0]
    bcb6:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    bcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcbe:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    bcc0:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    bcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc8:	881a      	ldrh	r2, [r3, #0]
    bcca:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    bcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    bcd4:	f64b 2380 	movw	r3, #47744	; 0xba80
    bcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcdc:	681b      	ldr	r3, [r3, #0]
    bcde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bce2:	4618      	mov	r0, r3
    bce4:	f006 fe7a 	bl	129dc <__aeabi_f2d>
    bce8:	4602      	mov	r2, r0
    bcea:	460b      	mov	r3, r1
    bcec:	4610      	mov	r0, r2
    bcee:	4619      	mov	r1, r3
    bcf0:	f04f 0200 	mov.w	r2, #0
    bcf4:	f04f 0300 	mov.w	r3, #0
    bcf8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bcfc:	f006 fec2 	bl	12a84 <__aeabi_dmul>
    bd00:	4602      	mov	r2, r0
    bd02:	460b      	mov	r3, r1
    bd04:	4610      	mov	r0, r2
    bd06:	4619      	mov	r1, r3
    bd08:	f04f 0200 	mov.w	r2, #0
    bd0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bd10:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    bd14:	f007 f928 	bl	12f68 <__aeabi_dcmplt>
    bd18:	4603      	mov	r3, r0
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d002      	beq.n	bd24 <stabilisation_task+0x9c>
    bd1e:	f64d 2280 	movw	r2, #55936	; 0xda80
    bd22:	e046      	b.n	bdb2 <stabilisation_task+0x12a>
    bd24:	f64b 2380 	movw	r3, #47744	; 0xba80
    bd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bd32:	4618      	mov	r0, r3
    bd34:	f006 fe52 	bl	129dc <__aeabi_f2d>
    bd38:	4602      	mov	r2, r0
    bd3a:	460b      	mov	r3, r1
    bd3c:	4610      	mov	r0, r2
    bd3e:	4619      	mov	r1, r3
    bd40:	f04f 0200 	mov.w	r2, #0
    bd44:	f04f 0300 	mov.w	r3, #0
    bd48:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bd4c:	f006 fe9a 	bl	12a84 <__aeabi_dmul>
    bd50:	4602      	mov	r2, r0
    bd52:	460b      	mov	r3, r1
    bd54:	4610      	mov	r0, r2
    bd56:	4619      	mov	r1, r3
    bd58:	f04f 0200 	mov.w	r2, #0
    bd5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    bd60:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    bd64:	f007 f91e 	bl	12fa4 <__aeabi_dcmpgt>
    bd68:	4603      	mov	r3, r0
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d002      	beq.n	bd74 <stabilisation_task+0xec>
    bd6e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    bd72:	e01d      	b.n	bdb0 <stabilisation_task+0x128>
    bd74:	f64b 2380 	movw	r3, #47744	; 0xba80
    bd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7c:	681b      	ldr	r3, [r3, #0]
    bd7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    bd82:	4618      	mov	r0, r3
    bd84:	f006 fe2a 	bl	129dc <__aeabi_f2d>
    bd88:	4602      	mov	r2, r0
    bd8a:	460b      	mov	r3, r1
    bd8c:	4610      	mov	r0, r2
    bd8e:	4619      	mov	r1, r3
    bd90:	f04f 0200 	mov.w	r2, #0
    bd94:	f04f 0300 	mov.w	r3, #0
    bd98:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    bd9c:	f006 fe72 	bl	12a84 <__aeabi_dmul>
    bda0:	4602      	mov	r2, r0
    bda2:	460b      	mov	r3, r1
    bda4:	4610      	mov	r0, r2
    bda6:	4619      	mov	r1, r3
    bda8:	f007 f906 	bl	12fb8 <__aeabi_d2iz>
    bdac:	4603      	mov	r3, r0
    bdae:	b29b      	uxth	r3, r3
    bdb0:	b29a      	uxth	r2, r3
    bdb2:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    bdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdba:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    bdbc:	bd80      	pop	{r7, pc}
    bdbe:	bf00      	nop

0000bdc0 <use_gps_pos>:
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void use_gps_pos()
{
    bdc0:	b580      	push	{r7, lr}
    bdc2:	af00      	add	r7, sp, #0
    send_gps_pos();
    bdc4:	f000 f806 	bl	bdd4 <send_gps_pos>
    send_radIR();
    bdc8:	f000 f816 	bl	bdf8 <send_radIR>
    send_takeOff();
    bdcc:	f000 f81a 	bl	be04 <send_takeOff>
}
    bdd0:	bd80      	pop	{r7, pc}
    bdd2:	bf00      	nop

0000bdd4 <send_gps_pos>:

void send_gps_pos( void ) {
    bdd4:	b580      	push	{r7, lr}
    bdd6:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    bdd8:	f24b 6355 	movw	r3, #46677	; 0xb655
    bddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde0:	2200      	movs	r2, #0
    bde2:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    bde4:	f24b 6356 	movw	r3, #46678	; 0xb656
    bde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdec:	781b      	ldrb	r3, [r3, #0]
    bdee:	2b00      	cmp	r3, #0
    bdf0:	d001      	beq.n	bdf6 <send_gps_pos+0x22>
     //DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
     estimator_update_state_gps();
    bdf2:	f004 fc3d 	bl	10670 <estimator_update_state_gps>
  }
}
    bdf6:	bd80      	pop	{r7, pc}

0000bdf8 <send_radIR>:

void send_radIR(void){
    bdf8:	b480      	push	{r7}
    bdfa:	af00      	add	r7, sp, #0
    if (gps_pos_available){
      //DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    }
}
    bdfc:	46bd      	mov	sp, r7
    bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    be02:	4770      	bx	lr

0000be04 <send_takeOff>:

void send_takeOff(void){
    be04:	b580      	push	{r7, lr}
    be06:	af00      	add	r7, sp, #0
  if (gps_pos_available){
    be08:	f24b 6356 	movw	r3, #46678	; 0xb656
    be0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be10:	781b      	ldrb	r3, [r3, #0]
    be12:	2b00      	cmp	r3, #0
    be14:	d027      	beq.n	be66 <send_takeOff+0x62>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
    be16:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    be1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1e:	881b      	ldrh	r3, [r3, #0]
    be20:	2b00      	cmp	r3, #0
    be22:	d11a      	bne.n	be5a <send_takeOff+0x56>
    be24:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    be28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2c:	681b      	ldr	r3, [r3, #0]
    be2e:	4618      	mov	r0, r3
    be30:	f04f 0100 	mov.w	r1, #0
    be34:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    be38:	f007 fc20 	bl	1367c <__aeabi_fcmpgt>
    be3c:	4603      	mov	r3, r0
    be3e:	2b00      	cmp	r3, #0
    be40:	d00b      	beq.n	be5a <send_takeOff+0x56>
        estimator_flight_time = 1;
    be42:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    be46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4a:	2201      	movs	r2, #1
    be4c:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
    be4e:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
    be52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be56:	2201      	movs	r2, #1
    be58:	701a      	strb	r2, [r3, #0]
        //DOWNLINK_SEND_TAKEOFF(&cputime);
     }
     gps_pos_available = FALSE; 
    be5a:	f24b 6356 	movw	r3, #46678	; 0xb656
    be5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be62:	2200      	movs	r2, #0
    be64:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
    be66:	bd80      	pop	{r7, pc}

0000be68 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
    be68:	b480      	push	{r7}
    be6a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
    be6c:	f248 0317 	movw	r3, #32791	; 0x8017
    be70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be74:	f248 0217 	movw	r2, #32791	; 0x8017
    be78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be7c:	7812      	ldrb	r2, [r2, #0]
    be7e:	b2d2      	uxtb	r2, r2
    be80:	f042 0210 	orr.w	r2, r2, #16
    be84:	b2d2      	uxtb	r2, r2
    be86:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
    be88:	f248 0331 	movw	r3, #32817	; 0x8031
    be8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be90:	2201      	movs	r2, #1
    be92:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
    be94:	f248 0333 	movw	r3, #32819	; 0x8033
    be98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9c:	2219      	movs	r2, #25
    be9e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
    bea0:	f248 0311 	movw	r3, #32785	; 0x8011
    bea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea8:	f248 0211 	movw	r2, #32785	; 0x8011
    beac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    beb0:	7812      	ldrb	r2, [r2, #0]
    beb2:	b2d2      	uxtb	r2, r2
    beb4:	f062 023f 	orn	r2, r2, #63	; 0x3f
    beb8:	b2d2      	uxtb	r2, r2
    beba:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bebc:	f248 0312 	movw	r3, #32786	; 0x8012
    bec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec4:	f248 0212 	movw	r2, #32786	; 0x8012
    bec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    becc:	7812      	ldrb	r2, [r2, #0]
    bece:	b2d2      	uxtb	r2, r2
    bed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bed4:	b2d2      	uxtb	r2, r2
    bed6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
    bed8:	f248 0312 	movw	r3, #32786	; 0x8012
    bedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee0:	f248 0212 	movw	r2, #32786	; 0x8012
    bee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bee8:	7812      	ldrb	r2, [r2, #0]
    beea:	b2d2      	uxtb	r2, r2
    beec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bef0:	b2d2      	uxtb	r2, r2
    bef2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
    bef4:	f248 033a 	movw	r3, #32826	; 0x803a
    bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befc:	f248 023a 	movw	r2, #32826	; 0x803a
    bf00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf04:	7812      	ldrb	r2, [r2, #0]
    bf06:	b2d2      	uxtb	r2, r2
    bf08:	f042 0202 	orr.w	r2, r2, #2
    bf0c:	b2d2      	uxtb	r2, r2
    bf0e:	701a      	strb	r2, [r3, #0]
}
    bf10:	46bd      	mov	sp, r7
    bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf16:	4770      	bx	lr

0000bf18 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
    bf18:	b480      	push	{r7}
    bf1a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
    bf1c:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    bf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf24:	781b      	ldrb	r3, [r3, #0]
    bf26:	2b00      	cmp	r3, #0
    bf28:	d10e      	bne.n	bf48 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bf2a:	f248 0312 	movw	r3, #32786	; 0x8012
    bf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf32:	f248 0212 	movw	r2, #32786	; 0x8012
    bf36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf3a:	7812      	ldrb	r2, [r2, #0]
    bf3c:	b2d2      	uxtb	r2, r2
    bf3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bf42:	b2d2      	uxtb	r2, r2
    bf44:	701a      	strb	r2, [r3, #0]
    bf46:	e047      	b.n	bfd8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
    bf48:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    bf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	2b08      	cmp	r3, #8
    bf54:	d832      	bhi.n	bfbc <__vector_5+0xa4>
    if (tx_byte & 0x01)
    bf56:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    bf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5e:	781b      	ldrb	r3, [r3, #0]
    bf60:	f003 0301 	and.w	r3, r3, #1
    bf64:	2b00      	cmp	r3, #0
    bf66:	d00e      	beq.n	bf86 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bf68:	f248 0312 	movw	r3, #32786	; 0x8012
    bf6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf70:	f248 0212 	movw	r2, #32786	; 0x8012
    bf74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf78:	7812      	ldrb	r2, [r2, #0]
    bf7a:	b2d2      	uxtb	r2, r2
    bf7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bf80:	b2d2      	uxtb	r2, r2
    bf82:	701a      	strb	r2, [r3, #0]
    bf84:	e00d      	b.n	bfa2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
    bf86:	f248 0312 	movw	r3, #32786	; 0x8012
    bf8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf8e:	f248 0212 	movw	r2, #32786	; 0x8012
    bf92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf96:	7812      	ldrb	r2, [r2, #0]
    bf98:	b2d2      	uxtb	r2, r2
    bf9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    bf9e:	b2d2      	uxtb	r2, r2
    bfa0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
    bfa2:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    bfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfaa:	781b      	ldrb	r3, [r3, #0]
    bfac:	085b      	lsrs	r3, r3, #1
    bfae:	b2da      	uxtb	r2, r3
    bfb0:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    bfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb8:	701a      	strb	r2, [r3, #0]
    bfba:	e00d      	b.n	bfd8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
    bfbc:	f248 0312 	movw	r3, #32786	; 0x8012
    bfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc4:	f248 0212 	movw	r2, #32786	; 0x8012
    bfc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bfcc:	7812      	ldrb	r2, [r2, #0]
    bfce:	b2d2      	uxtb	r2, r2
    bfd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    bfd4:	b2d2      	uxtb	r2, r2
    bfd6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
    bfd8:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    bfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe0:	781b      	ldrb	r3, [r3, #0]
    bfe2:	3301      	adds	r3, #1
    bfe4:	b2da      	uxtb	r2, r3
    bfe6:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
    bff0:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    bff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff8:	781b      	ldrb	r3, [r3, #0]
    bffa:	2b09      	cmp	r3, #9
    bffc:	d94d      	bls.n	c09a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
    bffe:	f24b 43c1 	movw	r3, #46273	; 0xb4c1
    c002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c006:	781a      	ldrb	r2, [r3, #0]
    c008:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    c00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c010:	781b      	ldrb	r3, [r3, #0]
    c012:	b2db      	uxtb	r3, r3
    c014:	429a      	cmp	r2, r3
    c016:	d10e      	bne.n	c036 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
    c018:	f248 0339 	movw	r3, #32825	; 0x8039
    c01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c020:	f248 0239 	movw	r2, #32825	; 0x8039
    c024:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c028:	7812      	ldrb	r2, [r2, #0]
    c02a:	b2d2      	uxtb	r2, r2
    c02c:	f022 0210 	bic.w	r2, r2, #16
    c030:	b2d2      	uxtb	r2, r2
    c032:	701a      	strb	r2, [r3, #0]
    c034:	e031      	b.n	c09a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
    c036:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    c03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03e:	781b      	ldrb	r3, [r3, #0]
    c040:	b2db      	uxtb	r3, r3
    c042:	461a      	mov	r2, r3
    c044:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    c048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04c:	5c9a      	ldrb	r2, [r3, r2]
    c04e:	f24b 53c3 	movw	r3, #46531	; 0xb5c3
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	701a      	strb	r2, [r3, #0]
    c058:	f24b 53c4 	movw	r3, #46532	; 0xb5c4
    c05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c060:	2200      	movs	r2, #0
    c062:	701a      	strb	r2, [r3, #0]
    c064:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    c068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06c:	781b      	ldrb	r3, [r3, #0]
    c06e:	b2db      	uxtb	r3, r3
    c070:	3301      	adds	r3, #1
    c072:	b2da      	uxtb	r2, r3
    c074:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    c078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07c:	701a      	strb	r2, [r3, #0]
    c07e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    c082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c086:	781b      	ldrb	r3, [r3, #0]
    c088:	b2db      	uxtb	r3, r3
    c08a:	2bff      	cmp	r3, #255	; 0xff
    c08c:	d105      	bne.n	c09a <__vector_5+0x182>
    c08e:	f24b 43c2 	movw	r3, #46274	; 0xb4c2
    c092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c096:	2200      	movs	r2, #0
    c098:	701a      	strb	r2, [r3, #0]
    }
  }
}
    c09a:	46bd      	mov	sp, r7
    c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0a0:	4770      	bx	lr
    c0a2:	bf00      	nop

0000c0a4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
    c0a4:	b480      	push	{r7}
    c0a6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
    c0a8:	f24b 53f7 	movw	r3, #46583	; 0xb5f7
    c0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
    c0b2:	f240 1306 	movw	r3, #262	; 0x106
    c0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ba:	2200      	movs	r2, #0
    c0bc:	701a      	strb	r2, [r3, #0]
}
    c0be:	46bd      	mov	sp, r7
    c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0c4:	4770      	bx	lr
    c0c6:	bf00      	nop

0000c0c8 <link_fbw_send>:

void link_fbw_send(void) {
    c0c8:	b480      	push	{r7}
    c0ca:	b083      	sub	sp, #12
    c0cc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
    c0ce:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d6:	781b      	ldrb	r3, [r3, #0]
    c0d8:	b2db      	uxtb	r3, r3
    c0da:	2b00      	cmp	r3, #0
    c0dc:	d00c      	beq.n	c0f8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
    c0de:	f24b 53fd 	movw	r3, #46589	; 0xb5fd
    c0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e6:	781b      	ldrb	r3, [r3, #0]
    c0e8:	3301      	adds	r3, #1
    c0ea:	b2da      	uxtb	r2, r3
    c0ec:	f24b 53fd 	movw	r3, #46589	; 0xb5fd
    c0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
    c0f6:	e064      	b.n	c1c2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
    c0f8:	f248 030d 	movw	r3, #32781	; 0x800d
    c0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c100:	2251      	movs	r2, #81	; 0x51
    c102:	701a      	strb	r2, [r3, #0]
    c104:	f248 030e 	movw	r3, #32782	; 0x800e
    c108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10c:	781b      	ldrb	r3, [r3, #0]
    c10e:	b2db      	uxtb	r3, r3
    c110:	b2db      	uxtb	r3, r3
    c112:	b25b      	sxtb	r3, r3
    c114:	2b00      	cmp	r3, #0
    c116:	da05      	bge.n	c124 <link_fbw_send+0x5c>
    c118:	f248 030f 	movw	r3, #32783	; 0x800f
    c11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c120:	781b      	ldrb	r3, [r3, #0]
    c122:	71fb      	strb	r3, [r7, #7]
    c124:	f248 030d 	movw	r3, #32781	; 0x800d
    c128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12c:	f248 020d 	movw	r2, #32781	; 0x800d
    c130:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c134:	7812      	ldrb	r2, [r2, #0]
    c136:	b2d2      	uxtb	r2, r2
    c138:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c13c:	b2d2      	uxtb	r2, r2
    c13e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
    c140:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c148:	2201      	movs	r2, #1
    c14a:	701a      	strb	r2, [r3, #0]
    c14c:	f248 0318 	movw	r3, #32792	; 0x8018
    c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c154:	f248 0218 	movw	r2, #32792	; 0x8018
    c158:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c15c:	7812      	ldrb	r2, [r2, #0]
    c15e:	b2d2      	uxtb	r2, r2
    c160:	f022 0201 	bic.w	r2, r2, #1
    c164:	b2d2      	uxtb	r2, r2
    c166:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
    c168:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c170:	2200      	movs	r2, #0
    c172:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
    c174:	f24b 53fa 	movw	r3, #46586	; 0xb5fa
    c178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c17c:	2200      	movs	r2, #0
    c17e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
    c180:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c188:	781b      	ldrb	r3, [r3, #0]
    c18a:	461a      	mov	r2, r3
    c18c:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    c190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c194:	4413      	add	r3, r2
    c196:	781a      	ldrb	r2, [r3, #0]
    c198:	f24b 53fb 	movw	r3, #46587	; 0xb5fb
    c19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
    c1a2:	f248 030f 	movw	r3, #32783	; 0x800f
    c1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1aa:	f24b 52fb 	movw	r2, #46587	; 0xb5fb
    c1ae:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c1b2:	7812      	ldrb	r2, [r2, #0]
    c1b4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
    c1b6:	f24b 53f6 	movw	r3, #46582	; 0xb5f6
    c1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1be:	2200      	movs	r2, #0
    c1c0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
    c1c2:	370c      	adds	r7, #12
    c1c4:	46bd      	mov	sp, r7
    c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ca:	4770      	bx	lr

0000c1cc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
    c1cc:	b480      	push	{r7}
    c1ce:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
    c1d0:	f248 032a 	movw	r3, #32810	; 0x802a
    c1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d8:	f248 022c 	movw	r2, #32812	; 0x802c
    c1dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1e0:	8812      	ldrh	r2, [r2, #0]
    c1e2:	b292      	uxth	r2, r2
    c1e4:	32c8      	adds	r2, #200	; 0xc8
    c1e6:	b292      	uxth	r2, r2
    c1e8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
    c1ea:	f248 0336 	movw	r3, #32822	; 0x8036
    c1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f2:	f248 0236 	movw	r2, #32822	; 0x8036
    c1f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1fa:	7812      	ldrb	r2, [r2, #0]
    c1fc:	b2d2      	uxtb	r2, r2
    c1fe:	f042 0210 	orr.w	r2, r2, #16
    c202:	b2d2      	uxtb	r2, r2
    c204:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
    c206:	f248 0337 	movw	r3, #32823	; 0x8037
    c20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20e:	f248 0237 	movw	r2, #32823	; 0x8037
    c212:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c216:	7812      	ldrb	r2, [r2, #0]
    c218:	b2d2      	uxtb	r2, r2
    c21a:	f042 0210 	orr.w	r2, r2, #16
    c21e:	b2d2      	uxtb	r2, r2
    c220:	701a      	strb	r2, [r3, #0]
}
    c222:	46bd      	mov	sp, r7
    c224:	f85d 7b04 	ldr.w	r7, [sp], #4
    c228:	4770      	bx	lr
    c22a:	bf00      	nop

0000c22c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    c22c:	b480      	push	{r7}
    c22e:	b083      	sub	sp, #12
    c230:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
    c232:	f248 0337 	movw	r3, #32823	; 0x8037
    c236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23a:	f248 0237 	movw	r2, #32823	; 0x8037
    c23e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c242:	7812      	ldrb	r2, [r2, #0]
    c244:	b2d2      	uxtb	r2, r2
    c246:	f022 0210 	bic.w	r2, r2, #16
    c24a:	b2d2      	uxtb	r2, r2
    c24c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
    c24e:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c256:	781b      	ldrb	r3, [r3, #0]
    c258:	3301      	adds	r3, #1
    c25a:	b2da      	uxtb	r2, r3
    c25c:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c264:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
    c266:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26e:	781b      	ldrb	r3, [r3, #0]
    c270:	2b17      	cmp	r3, #23
    c272:	d162      	bne.n	c33a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
    c274:	f248 030f 	movw	r3, #32783	; 0x800f
    c278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27c:	781b      	ldrb	r3, [r3, #0]
    c27e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
    c280:	f24b 53fa 	movw	r3, #46586	; 0xb5fa
    c284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c288:	781b      	ldrb	r3, [r3, #0]
    c28a:	79fa      	ldrb	r2, [r7, #7]
    c28c:	429a      	cmp	r2, r3
    c28e:	d110      	bne.n	c2b2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
    c290:	f24b 53f6 	movw	r3, #46582	; 0xb5f6
    c294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c298:	2201      	movs	r2, #1
    c29a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
    c29c:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    c2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a4:	7d1a      	ldrb	r2, [r3, #20]
    c2a6:	f24b 53f8 	movw	r3, #46584	; 0xb5f8
    c2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ae:	701a      	strb	r2, [r3, #0]
    c2b0:	e00c      	b.n	c2cc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
    c2b2:	f24b 53f7 	movw	r3, #46583	; 0xb5f7
    c2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ba:	781b      	ldrb	r3, [r3, #0]
    c2bc:	b2db      	uxtb	r3, r3
    c2be:	3301      	adds	r3, #1
    c2c0:	b2da      	uxtb	r2, r3
    c2c2:	f24b 53f7 	movw	r3, #46583	; 0xb5f7
    c2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ca:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
    c2cc:	f240 1306 	movw	r3, #262	; 0x106
    c2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d4:	2201      	movs	r2, #1
    c2d6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
    c2d8:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e0:	2200      	movs	r2, #0
    c2e2:	701a      	strb	r2, [r3, #0]
    c2e4:	f248 0318 	movw	r3, #32792	; 0x8018
    c2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ec:	f248 0218 	movw	r2, #32792	; 0x8018
    c2f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2f4:	7812      	ldrb	r2, [r2, #0]
    c2f6:	b2d2      	uxtb	r2, r2
    c2f8:	f042 0201 	orr.w	r2, r2, #1
    c2fc:	b2d2      	uxtb	r2, r2
    c2fe:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
    c300:	f248 030d 	movw	r3, #32781	; 0x800d
    c304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c308:	f248 020d 	movw	r2, #32781	; 0x800d
    c30c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c310:	7812      	ldrb	r2, [r2, #0]
    c312:	b2d2      	uxtb	r2, r2
    c314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c318:	b2d2      	uxtb	r2, r2
    c31a:	701a      	strb	r2, [r3, #0]
    c31c:	f248 030d 	movw	r3, #32781	; 0x800d
    c320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c324:	f248 020d 	movw	r2, #32781	; 0x800d
    c328:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c32c:	7812      	ldrb	r2, [r2, #0]
    c32e:	b2d2      	uxtb	r2, r2
    c330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c334:	b2d2      	uxtb	r2, r2
    c336:	701a      	strb	r2, [r3, #0]
    return;
    c338:	e051      	b.n	c3de <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
    c33a:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c342:	781b      	ldrb	r3, [r3, #0]
    c344:	2b15      	cmp	r3, #21
    c346:	d820      	bhi.n	c38a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
    c348:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	461a      	mov	r2, r3
    c354:	f24b 53e0 	movw	r3, #46560	; 0xb5e0
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	4413      	add	r3, r2
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
    c362:	f248 030f 	movw	r3, #32783	; 0x800f
    c366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c36a:	79fa      	ldrb	r2, [r7, #7]
    c36c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
    c36e:	f24b 53fb 	movw	r3, #46587	; 0xb5fb
    c372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c376:	781a      	ldrb	r2, [r3, #0]
    c378:	79fb      	ldrb	r3, [r7, #7]
    c37a:	4053      	eors	r3, r2
    c37c:	b2da      	uxtb	r2, r3
    c37e:	f24b 53fb 	movw	r3, #46587	; 0xb5fb
    c382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c386:	701a      	strb	r2, [r3, #0]
    c388:	e009      	b.n	c39e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
    c38a:	f248 030f 	movw	r3, #32783	; 0x800f
    c38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c392:	f24b 52fb 	movw	r2, #46587	; 0xb5fb
    c396:	f2c2 0204 	movt	r2, #8196	; 0x2004
    c39a:	7812      	ldrb	r2, [r2, #0]
    c39c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
    c39e:	f248 030f 	movw	r3, #32783	; 0x800f
    c3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a6:	781b      	ldrb	r3, [r3, #0]
    c3a8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
    c3aa:	f24b 53f9 	movw	r3, #46585	; 0xb5f9
    c3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b2:	781b      	ldrb	r3, [r3, #0]
    c3b4:	1e5a      	subs	r2, r3, #1
    c3b6:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    c3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3be:	4413      	add	r3, r2
    c3c0:	79fa      	ldrb	r2, [r7, #7]
    c3c2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
    c3c4:	f24b 53fa 	movw	r3, #46586	; 0xb5fa
    c3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3cc:	781a      	ldrb	r2, [r3, #0]
    c3ce:	79fb      	ldrb	r3, [r7, #7]
    c3d0:	4053      	eors	r3, r2
    c3d2:	b2da      	uxtb	r2, r3
    c3d4:	f24b 53fa 	movw	r3, #46586	; 0xb5fa
    c3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3dc:	701a      	strb	r2, [r3, #0]
}
    c3de:	370c      	adds	r7, #12
    c3e0:	46bd      	mov	sp, r7
    c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3e6:	4770      	bx	lr

0000c3e8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
    c3e8:	b480      	push	{r7}
    c3ea:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
    c3ec:	f248 0317 	movw	r3, #32791	; 0x8017
    c3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f4:	f248 0217 	movw	r2, #32791	; 0x8017
    c3f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3fc:	7812      	ldrb	r2, [r2, #0]
    c3fe:	b2d2      	uxtb	r2, r2
    c400:	f042 0206 	orr.w	r2, r2, #6
    c404:	b2d2      	uxtb	r2, r2
    c406:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
    c408:	f248 0317 	movw	r3, #32791	; 0x8017
    c40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c410:	f248 0217 	movw	r2, #32791	; 0x8017
    c414:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c418:	7812      	ldrb	r2, [r2, #0]
    c41a:	b2d2      	uxtb	r2, r2
    c41c:	f042 0201 	orr.w	r2, r2, #1
    c420:	b2d2      	uxtb	r2, r2
    c422:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
    c424:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42c:	2200      	movs	r2, #0
    c42e:	701a      	strb	r2, [r3, #0]
    c430:	f248 0318 	movw	r3, #32792	; 0x8018
    c434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c438:	f248 0218 	movw	r2, #32792	; 0x8018
    c43c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c440:	7812      	ldrb	r2, [r2, #0]
    c442:	b2d2      	uxtb	r2, r2
    c444:	f042 0201 	orr.w	r2, r2, #1
    c448:	b2d2      	uxtb	r2, r2
    c44a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
    c44c:	f248 0302 	movw	r3, #32770	; 0x8002
    c450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c454:	f248 0202 	movw	r2, #32770	; 0x8002
    c458:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c45c:	7812      	ldrb	r2, [r2, #0]
    c45e:	b2d2      	uxtb	r2, r2
    c460:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c464:	b2d2      	uxtb	r2, r2
    c466:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
    c468:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c470:	2200      	movs	r2, #0
    c472:	701a      	strb	r2, [r3, #0]
    c474:	f248 0303 	movw	r3, #32771	; 0x8003
    c478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47c:	f248 0203 	movw	r2, #32771	; 0x8003
    c480:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c484:	7812      	ldrb	r2, [r2, #0]
    c486:	b2d2      	uxtb	r2, r2
    c488:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c48c:	b2d2      	uxtb	r2, r2
    c48e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
    c490:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c498:	2200      	movs	r2, #0
    c49a:	701a      	strb	r2, [r3, #0]
}
    c49c:	46bd      	mov	sp, r7
    c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4a2:	4770      	bx	lr

0000c4a4 <__vector_17>:


SIGNAL(SIG_SPI) {
    c4a4:	b580      	push	{r7, lr}
    c4a6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
    c4a8:	f24b 53fc 	movw	r3, #46588	; 0xb5fc
    c4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	b2db      	uxtb	r3, r3
    c4b4:	2b01      	cmp	r3, #1
    c4b6:	d102      	bne.n	c4be <__vector_17+0x1a>
    link_fbw_on_spi_it();
    c4b8:	f7ff fe88 	bl	c1cc <link_fbw_on_spi_it>
    c4bc:	e00b      	b.n	c4d6 <__vector_17+0x32>
  else
    fatal_error_nb++;
    c4be:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    c4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c6:	781b      	ldrb	r3, [r3, #0]
    c4c8:	3301      	adds	r3, #1
    c4ca:	b2da      	uxtb	r2, r3
    c4cc:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    c4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d4:	701a      	strb	r2, [r3, #0]
}
    c4d6:	bd80      	pop	{r7, pc}

0000c4d8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
    c4d8:	b480      	push	{r7}
    c4da:	b083      	sub	sp, #12
    c4dc:	af00      	add	r7, sp, #0
    c4de:	4603      	mov	r3, r0
    c4e0:	6039      	str	r1, [r7, #0]
    c4e2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
    c4e4:	79fa      	ldrb	r2, [r7, #7]
    c4e6:	f24b 6310 	movw	r3, #46608	; 0xb610
    c4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ee:	6839      	ldr	r1, [r7, #0]
    c4f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    c4f4:	370c      	adds	r7, #12
    c4f6:	46bd      	mov	sp, r7
    c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4fc:	4770      	bx	lr
    c4fe:	bf00      	nop

0000c500 <adc_init>:

void 
adc_init( void )
{
    c500:	b480      	push	{r7}
    c502:	b083      	sub	sp, #12
    c504:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
    c506:	f248 0362 	movw	r3, #32866	; 0x8062
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	2200      	movs	r2, #0
    c510:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
    c512:	f248 0361 	movw	r3, #32865	; 0x8061
    c516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51a:	2200      	movs	r2, #0
    c51c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
    c51e:	f248 0307 	movw	r3, #32775	; 0x8007
    c522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c526:	2240      	movs	r2, #64	; 0x40
    c528:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
    c52a:	f248 0308 	movw	r3, #32776	; 0x8008
    c52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c532:	f248 0208 	movw	r2, #32776	; 0x8008
    c536:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c53a:	7812      	ldrb	r2, [r2, #0]
    c53c:	b2d2      	uxtb	r2, r2
    c53e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c542:	b2d2      	uxtb	r2, r2
    c544:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
    c546:	f248 0306 	movw	r3, #32774	; 0x8006
    c54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54e:	22cf      	movs	r2, #207	; 0xcf
    c550:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c552:	2300      	movs	r3, #0
    c554:	71fb      	strb	r3, [r7, #7]
    c556:	e00a      	b.n	c56e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
    c558:	79fa      	ldrb	r2, [r7, #7]
    c55a:	f24b 6310 	movw	r3, #46608	; 0xb610
    c55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c562:	2100      	movs	r1, #0
    c564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
    c568:	79fb      	ldrb	r3, [r7, #7]
    c56a:	3301      	adds	r3, #1
    c56c:	71fb      	strb	r3, [r7, #7]
    c56e:	79fb      	ldrb	r3, [r7, #7]
    c570:	2b07      	cmp	r3, #7
    c572:	d9f1      	bls.n	c558 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
    c574:	370c      	adds	r7, #12
    c576:	46bd      	mov	sp, r7
    c578:	f85d 7b04 	ldr.w	r7, [sp], #4
    c57c:	4770      	bx	lr
    c57e:	bf00      	nop

0000c580 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
    c580:	b480      	push	{r7}
    c582:	b085      	sub	sp, #20
    c584:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
    c586:	f248 0307 	movw	r3, #32775	; 0x8007
    c58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c58e:	781b      	ldrb	r3, [r3, #0]
    c590:	b2db      	uxtb	r3, r3
    c592:	f003 0307 	and.w	r3, r3, #7
    c596:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
    c598:	7bfa      	ldrb	r2, [r7, #15]
    c59a:	f24b 6310 	movw	r3, #46608	; 0xb610
    c59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c5a6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
    c5a8:	f248 0304 	movw	r3, #32772	; 0x8004
    c5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b0:	881b      	ldrh	r3, [r3, #0]
    c5b2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
    c5b4:	7bfa      	ldrb	r2, [r7, #15]
    c5b6:	f24b 6300 	movw	r3, #46592	; 0xb600
    c5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5be:	88f9      	ldrh	r1, [r7, #6]
    c5c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
    c5c4:	68bb      	ldr	r3, [r7, #8]
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d025      	beq.n	c616 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
    c5ca:	68bb      	ldr	r3, [r7, #8]
    c5cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    c5d0:	3301      	adds	r3, #1
    c5d2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
    c5d4:	7bbb      	ldrb	r3, [r7, #14]
    c5d6:	2b1f      	cmp	r3, #31
    c5d8:	d901      	bls.n	c5de <__vector_21+0x5e>
    c5da:	2300      	movs	r3, #0
    c5dc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
    c5de:	68bb      	ldr	r3, [r7, #8]
    c5e0:	881a      	ldrh	r2, [r3, #0]
    c5e2:	7bbb      	ldrb	r3, [r7, #14]
    c5e4:	68b9      	ldr	r1, [r7, #8]
    c5e6:	005b      	lsls	r3, r3, #1
    c5e8:	440b      	add	r3, r1
    c5ea:	885b      	ldrh	r3, [r3, #2]
    c5ec:	1ad3      	subs	r3, r2, r3
    c5ee:	b29a      	uxth	r2, r3
    c5f0:	68bb      	ldr	r3, [r7, #8]
    c5f2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
    c5f4:	7bbb      	ldrb	r3, [r7, #14]
    c5f6:	68ba      	ldr	r2, [r7, #8]
    c5f8:	005b      	lsls	r3, r3, #1
    c5fa:	4413      	add	r3, r2
    c5fc:	88fa      	ldrh	r2, [r7, #6]
    c5fe:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
    c600:	68bb      	ldr	r3, [r7, #8]
    c602:	881a      	ldrh	r2, [r3, #0]
    c604:	88fb      	ldrh	r3, [r7, #6]
    c606:	4413      	add	r3, r2
    c608:	b29a      	uxth	r2, r3
    c60a:	68bb      	ldr	r3, [r7, #8]
    c60c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
    c60e:	68bb      	ldr	r3, [r7, #8]
    c610:	7bba      	ldrb	r2, [r7, #14]
    c612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
    c616:	7bfb      	ldrb	r3, [r7, #15]
    c618:	3301      	adds	r3, #1
    c61a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
    c61c:	7bfb      	ldrb	r3, [r7, #15]
    c61e:	2b07      	cmp	r3, #7
    c620:	d901      	bls.n	c626 <__vector_21+0xa6>
    adc_input = 0;
    c622:	2300      	movs	r3, #0
    c624:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
    c626:	f248 0307 	movw	r3, #32775	; 0x8007
    c62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62e:	7bfa      	ldrb	r2, [r7, #15]
    c630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c634:	b2d2      	uxtb	r2, r2
    c636:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
    c638:	f248 0306 	movw	r3, #32774	; 0x8006
    c63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c640:	f248 0206 	movw	r2, #32774	; 0x8006
    c644:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c648:	7812      	ldrb	r2, [r2, #0]
    c64a:	b2d2      	uxtb	r2, r2
    c64c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c650:	b2d2      	uxtb	r2, r2
    c652:	701a      	strb	r2, [r3, #0]
  
}
    c654:	3714      	adds	r7, #20
    c656:	46bd      	mov	sp, r7
    c658:	f85d 7b04 	ldr.w	r7, [sp], #4
    c65c:	4770      	bx	lr
    c65e:	bf00      	nop

0000c660 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
    c660:	b580      	push	{r7, lr}
    c662:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
    c664:	f003 fcc0 	bl	ffe8 <uart1_init>
#endif
  ubx_status = UNINIT;
    c668:	f24b 7357 	movw	r3, #46935	; 0xb757
    c66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c670:	2200      	movs	r2, #0
    c672:	701a      	strb	r2, [r3, #0]
}
    c674:	bd80      	pop	{r7, pc}
    c676:	bf00      	nop

0000c678 <parse_gps_msg>:

void parse_gps_msg( void ) {
    c678:	b580      	push	{r7, lr}
    c67a:	af00      	add	r7, sp, #0
  //vPrintString("S_16 receive_gps_data_task start!\n\r");
    //added by SunnyBeike
    
    ubx_class = UBX_NAV_ID; 
    c67c:	f24b 735e 	movw	r3, #46942	; 0xb75e
    c680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c684:	2201      	movs	r2, #1
    c686:	701a      	strb	r2, [r3, #0]
    ubx_id = (ubx_id + 1)%0x40;
    c688:	f24b 735d 	movw	r3, #46941	; 0xb75d
    c68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c690:	781b      	ldrb	r3, [r3, #0]
    c692:	1c5a      	adds	r2, r3, #1
    c694:	17d3      	asrs	r3, r2, #31
    c696:	0e9b      	lsrs	r3, r3, #26
    c698:	441a      	add	r2, r3
    c69a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    c69e:	1ad3      	subs	r3, r2, r3
    c6a0:	b2da      	uxtb	r2, r3
    c6a2:	f24b 735d 	movw	r3, #46941	; 0xb75d
    c6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6aa:	701a      	strb	r2, [r3, #0]
    
    //end

  if (ubx_class == UBX_NAV_ID) {
    c6ac:	f24b 735e 	movw	r3, #46942	; 0xb75e
    c6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b4:	781b      	ldrb	r3, [r3, #0]
    c6b6:	2b01      	cmp	r3, #1
    c6b8:	f040 80f9 	bne.w	c8ae <parse_gps_msg+0x236>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
    c6bc:	f24b 735d 	movw	r3, #46941	; 0xb75d
    c6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c4:	781b      	ldrb	r3, [r3, #0]
    c6c6:	2b08      	cmp	r3, #8
    c6c8:	d128      	bne.n	c71c <parse_gps_msg+0xa4>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
    c6ca:	f24b 6358 	movw	r3, #46680	; 0xb658
    c6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d2:	685a      	ldr	r2, [r3, #4]
    c6d4:	f24b 6344 	movw	r3, #46660	; 0xb644
    c6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6dc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
    c6de:	f24b 6358 	movw	r3, #46680	; 0xb658
    c6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e6:	689a      	ldr	r2, [r3, #8]
    c6e8:	f24b 6348 	movw	r3, #46664	; 0xb648
    c6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
    c6f2:	4b73      	ldr	r3, [pc, #460]	; (c8c0 <parse_gps_msg+0x248>)
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	4618      	mov	r0, r3
    c6f8:	f006 fdb0 	bl	1325c <__aeabi_i2f>
    c6fc:	4603      	mov	r3, r0
    c6fe:	4618      	mov	r0, r3
    c700:	f04f 0100 	mov.w	r1, #0
    c704:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c708:	f006 feb0 	bl	1346c <__aeabi_fdiv>
    c70c:	4603      	mov	r3, r0
    c70e:	461a      	mov	r2, r3
    c710:	f24b 6334 	movw	r3, #46644	; 0xb634
    c714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c718:	601a      	str	r2, [r3, #0]
    c71a:	e0c8      	b.n	c8ae <parse_gps_msg+0x236>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
    c71c:	f24b 735d 	movw	r3, #46941	; 0xb75d
    c720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c724:	781b      	ldrb	r3, [r3, #0]
    c726:	2b03      	cmp	r3, #3
    c728:	d10a      	bne.n	c740 <parse_gps_msg+0xc8>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
    c72a:	f24b 6358 	movw	r3, #46680	; 0xb658
    c72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c732:	791a      	ldrb	r2, [r3, #4]
    c734:	f24b 6354 	movw	r3, #46676	; 0xb654
    c738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73c:	701a      	strb	r2, [r3, #0]
    c73e:	e0b6      	b.n	c8ae <parse_gps_msg+0x236>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
    c740:	f24b 735d 	movw	r3, #46941	; 0xb75d
    c744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c748:	781b      	ldrb	r3, [r3, #0]
    c74a:	2b12      	cmp	r3, #18
    c74c:	f040 80af 	bne.w	c8ae <parse_gps_msg+0x236>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
    c750:	4b5c      	ldr	r3, [pc, #368]	; (c8c4 <parse_gps_msg+0x24c>)
    c752:	681b      	ldr	r3, [r3, #0]
    c754:	4618      	mov	r0, r3
    c756:	f006 fd7d 	bl	13254 <__aeabi_ui2f>
    c75a:	4603      	mov	r3, r0
    c75c:	4618      	mov	r0, r3
    c75e:	f04f 0100 	mov.w	r1, #0
    c762:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    c766:	f006 fe81 	bl	1346c <__aeabi_fdiv>
    c76a:	4603      	mov	r3, r0
    c76c:	461a      	mov	r2, r3
    c76e:	f24b 6338 	movw	r3, #46648	; 0xb638
    c772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c776:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
    c778:	4b51      	ldr	r3, [pc, #324]	; (c8c0 <parse_gps_msg+0x248>)
    c77a:	681b      	ldr	r3, [r3, #0]
    c77c:	4618      	mov	r0, r3
    c77e:	f006 fd6d 	bl	1325c <__aeabi_i2f>
    c782:	4603      	mov	r3, r0
    c784:	4618      	mov	r0, r3
    c786:	f04f 0100 	mov.w	r1, #0
    c78a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    c78e:	f006 fe6d 	bl	1346c <__aeabi_fdiv>
    c792:	4603      	mov	r3, r0
    c794:	461a      	mov	r2, r3
    c796:	f24b 633c 	movw	r3, #46652	; 0xb63c
    c79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
    c7a0:	4b49      	ldr	r3, [pc, #292]	; (c8c8 <parse_gps_msg+0x250>)
    c7a2:	681b      	ldr	r3, [r3, #0]
    c7a4:	4618      	mov	r0, r3
    c7a6:	f006 fd59 	bl	1325c <__aeabi_i2f>
    c7aa:	4603      	mov	r3, r0
    c7ac:	4618      	mov	r0, r3
    c7ae:	f006 f915 	bl	129dc <__aeabi_f2d>
    c7b2:	4602      	mov	r2, r0
    c7b4:	460b      	mov	r3, r1
    c7b6:	4610      	mov	r0, r2
    c7b8:	4619      	mov	r1, r3
    c7ba:	a33d      	add	r3, pc, #244	; (adr r3, c8b0 <parse_gps_msg+0x238>)
    c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7c0:	f006 fa8a 	bl	12cd8 <__aeabi_ddiv>
    c7c4:	4602      	mov	r2, r0
    c7c6:	460b      	mov	r3, r1
    c7c8:	4610      	mov	r0, r2
    c7ca:	4619      	mov	r1, r3
    c7cc:	f04f 0200 	mov.w	r2, #0
    c7d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c7d4:	f2c4 0366 	movt	r3, #16486	; 0x4066
    c7d8:	f006 fa7e 	bl	12cd8 <__aeabi_ddiv>
    c7dc:	4602      	mov	r2, r0
    c7de:	460b      	mov	r3, r1
    c7e0:	4610      	mov	r0, r2
    c7e2:	4619      	mov	r1, r3
    c7e4:	a334      	add	r3, pc, #208	; (adr r3, c8b8 <parse_gps_msg+0x240>)
    c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7ea:	f006 f94b 	bl	12a84 <__aeabi_dmul>
    c7ee:	4602      	mov	r2, r0
    c7f0:	460b      	mov	r3, r1
    c7f2:	4610      	mov	r0, r2
    c7f4:	4619      	mov	r1, r3
    c7f6:	f006 fc27 	bl	13048 <__aeabi_d2f>
    c7fa:	4602      	mov	r2, r0
    c7fc:	f24b 6340 	movw	r3, #46656	; 0xb640
    c800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c804:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
    c806:	f24b 6358 	movw	r3, #46680	; 0xb658
    c80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80e:	681b      	ldr	r3, [r3, #0]
    c810:	4618      	mov	r0, r3
    c812:	f006 fd1f 	bl	13254 <__aeabi_ui2f>
    c816:	4603      	mov	r3, r0
    c818:	4618      	mov	r0, r3
    c81a:	f04f 0100 	mov.w	r1, #0
    c81e:	f2c4 417a 	movt	r1, #17530	; 0x447a
    c822:	f006 fe23 	bl	1346c <__aeabi_fdiv>
    c826:	4603      	mov	r3, r0
    c828:	461a      	mov	r2, r3
    c82a:	f24b 6330 	movw	r3, #46640	; 0xb630
    c82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c832:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
    c834:	f24b 6344 	movw	r3, #46660	; 0xb644
    c838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83c:	681a      	ldr	r2, [r3, #0]
    c83e:	f248 531f 	movw	r3, #34079	; 0x851f
    c842:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c846:	fb83 1302 	smull	r1, r3, r3, r2
    c84a:	1159      	asrs	r1, r3, #5
    c84c:	17d3      	asrs	r3, r2, #31
    c84e:	1acb      	subs	r3, r1, r3
    c850:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
    c854:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
    c858:	4618      	mov	r0, r3
    c85a:	f006 fcff 	bl	1325c <__aeabi_i2f>
    c85e:	4602      	mov	r2, r0
    c860:	f24b 634c 	movw	r3, #46668	; 0xb64c
    c864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c868:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
    c86a:	f24b 6348 	movw	r3, #46664	; 0xb648
    c86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c872:	681a      	ldr	r2, [r3, #0]
    c874:	f248 531f 	movw	r3, #34079	; 0x851f
    c878:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c87c:	fb83 1302 	smull	r1, r3, r3, r2
    c880:	1159      	asrs	r1, r3, #5
    c882:	17d3      	asrs	r3, r2, #31
    c884:	1aca      	subs	r2, r1, r3
    c886:	f648 231a 	movw	r3, #35354	; 0x8a1a
    c88a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
    c88e:	4413      	add	r3, r2
    c890:	4618      	mov	r0, r3
    c892:	f006 fce3 	bl	1325c <__aeabi_i2f>
    c896:	4602      	mov	r2, r0
    c898:	f24b 6350 	movw	r3, #46672	; 0xb650
    c89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a0:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
    c8a2:	f24b 6356 	movw	r3, #46678	; 0xb656
    c8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8aa:	2201      	movs	r2, #1
    c8ac:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
    c8ae:	bd80      	pop	{r7, pc}
    c8b0:	00000000 	.word	0x00000000
    c8b4:	40f86a00 	.word	0x40f86a00
    c8b8:	5a7ed197 	.word	0x5a7ed197
    c8bc:	400921fb 	.word	0x400921fb
    c8c0:	2004b664 	.word	0x2004b664
    c8c4:	2004b66c 	.word	0x2004b66c
    c8c8:	2004b670 	.word	0x2004b670

0000c8cc <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
    c8cc:	b480      	push	{r7}
    c8ce:	b083      	sub	sp, #12
    c8d0:	af00      	add	r7, sp, #0
    c8d2:	4603      	mov	r3, r0
    c8d4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
    c8d6:	f24b 7357 	movw	r3, #46935	; 0xb757
    c8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8de:	781b      	ldrb	r3, [r3, #0]
    c8e0:	2b06      	cmp	r3, #6
    c8e2:	d81d      	bhi.n	c920 <parse_ubx+0x54>
    ck_a += c;
    c8e4:	f24b 735b 	movw	r3, #46939	; 0xb75b
    c8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ec:	781a      	ldrb	r2, [r3, #0]
    c8ee:	79fb      	ldrb	r3, [r7, #7]
    c8f0:	4413      	add	r3, r2
    c8f2:	b2da      	uxtb	r2, r3
    c8f4:	f24b 735b 	movw	r3, #46939	; 0xb75b
    c8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
    c8fe:	f24b 735c 	movw	r3, #46940	; 0xb75c
    c902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c906:	781a      	ldrb	r2, [r3, #0]
    c908:	f24b 735b 	movw	r3, #46939	; 0xb75b
    c90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c910:	781b      	ldrb	r3, [r3, #0]
    c912:	4413      	add	r3, r2
    c914:	b2da      	uxtb	r2, r3
    c916:	f24b 735c 	movw	r3, #46940	; 0xb75c
    c91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c91e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
    c920:	f24b 7357 	movw	r3, #46935	; 0xb757
    c924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c928:	781b      	ldrb	r3, [r3, #0]
    c92a:	2b00      	cmp	r3, #0
    c92c:	d110      	bne.n	c950 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
    c92e:	79fb      	ldrb	r3, [r7, #7]
    c930:	2bb5      	cmp	r3, #181	; 0xb5
    c932:	f040 8135 	bne.w	cba0 <parse_ubx+0x2d4>
      ubx_status++;
    c936:	f24b 7357 	movw	r3, #46935	; 0xb757
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	3301      	adds	r3, #1
    c942:	b2da      	uxtb	r2, r3
    c944:	f24b 7357 	movw	r3, #46935	; 0xb757
    c948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    c94e:	e12f      	b.n	cbb0 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
    c950:	f24b 7357 	movw	r3, #46935	; 0xb757
    c954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c958:	781b      	ldrb	r3, [r3, #0]
    c95a:	2b01      	cmp	r3, #1
    c95c:	d11c      	bne.n	c998 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
    c95e:	79fb      	ldrb	r3, [r7, #7]
    c960:	2b62      	cmp	r3, #98	; 0x62
    c962:	d000      	beq.n	c966 <parse_ubx+0x9a>
      goto error;
    c964:	e11d      	b.n	cba2 <parse_ubx+0x2d6>
    ck_a = 0;
    c966:	f24b 735b 	movw	r3, #46939	; 0xb75b
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	2200      	movs	r2, #0
    c970:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
    c972:	f24b 735c 	movw	r3, #46940	; 0xb75c
    c976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97a:	2200      	movs	r2, #0
    c97c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c97e:	f24b 7357 	movw	r3, #46935	; 0xb757
    c982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c986:	781b      	ldrb	r3, [r3, #0]
    c988:	3301      	adds	r3, #1
    c98a:	b2da      	uxtb	r2, r3
    c98c:	f24b 7357 	movw	r3, #46935	; 0xb757
    c990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c994:	701a      	strb	r2, [r3, #0]
    c996:	e103      	b.n	cba0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
    c998:	f24b 7357 	movw	r3, #46935	; 0xb757
    c99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a0:	781b      	ldrb	r3, [r3, #0]
    c9a2:	2b02      	cmp	r3, #2
    c9a4:	d127      	bne.n	c9f6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
    c9a6:	f24b 6355 	movw	r3, #46677	; 0xb655
    c9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ae:	781b      	ldrb	r3, [r3, #0]
    c9b0:	b2db      	uxtb	r3, r3
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	d00c      	beq.n	c9d0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
    c9b6:	f24b 735f 	movw	r3, #46943	; 0xb75f
    c9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9be:	781b      	ldrb	r3, [r3, #0]
    c9c0:	3301      	adds	r3, #1
    c9c2:	b2da      	uxtb	r2, r3
    c9c4:	f24b 735f 	movw	r3, #46943	; 0xb75f
    c9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9cc:	701a      	strb	r2, [r3, #0]
      goto error;
    c9ce:	e0e8      	b.n	cba2 <parse_ubx+0x2d6>
    }
    ubx_class = c;
    c9d0:	f24b 735e 	movw	r3, #46942	; 0xb75e
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	79fa      	ldrb	r2, [r7, #7]
    c9da:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    c9dc:	f24b 7357 	movw	r3, #46935	; 0xb757
    c9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	3301      	adds	r3, #1
    c9e8:	b2da      	uxtb	r2, r3
    c9ea:	f24b 7357 	movw	r3, #46935	; 0xb757
    c9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f2:	701a      	strb	r2, [r3, #0]
    c9f4:	e0d4      	b.n	cba0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
    c9f6:	f24b 7357 	movw	r3, #46935	; 0xb757
    c9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fe:	781b      	ldrb	r3, [r3, #0]
    ca00:	2b03      	cmp	r3, #3
    ca02:	d112      	bne.n	ca2a <parse_ubx+0x15e>
  {
    ubx_id = c;
    ca04:	f24b 735d 	movw	r3, #46941	; 0xb75d
    ca08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0c:	79fa      	ldrb	r2, [r7, #7]
    ca0e:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    ca10:	f24b 7357 	movw	r3, #46935	; 0xb757
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	3301      	adds	r3, #1
    ca1c:	b2da      	uxtb	r2, r3
    ca1e:	f24b 7357 	movw	r3, #46935	; 0xb757
    ca22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	e0ba      	b.n	cba0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
    ca2a:	f24b 7357 	movw	r3, #46935	; 0xb757
    ca2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	2b04      	cmp	r3, #4
    ca36:	d113      	bne.n	ca60 <parse_ubx+0x194>
  {
    ubx_len = c;
    ca38:	79fb      	ldrb	r3, [r7, #7]
    ca3a:	b29a      	uxth	r2, r3
    ca3c:	f24b 7358 	movw	r3, #46936	; 0xb758
    ca40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca44:	801a      	strh	r2, [r3, #0]
    ubx_status++;
    ca46:	f24b 7357 	movw	r3, #46935	; 0xb757
    ca4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4e:	781b      	ldrb	r3, [r3, #0]
    ca50:	3301      	adds	r3, #1
    ca52:	b2da      	uxtb	r2, r3
    ca54:	f24b 7357 	movw	r3, #46935	; 0xb757
    ca58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5c:	701a      	strb	r2, [r3, #0]
    ca5e:	e09f      	b.n	cba0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
    ca60:	f24b 7357 	movw	r3, #46935	; 0xb757
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	2b05      	cmp	r3, #5
    ca6c:	d12b      	bne.n	cac6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
    ca6e:	79fb      	ldrb	r3, [r7, #7]
    ca70:	021b      	lsls	r3, r3, #8
    ca72:	b29a      	uxth	r2, r3
    ca74:	f24b 7358 	movw	r3, #46936	; 0xb758
    ca78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7c:	881b      	ldrh	r3, [r3, #0]
    ca7e:	b29b      	uxth	r3, r3
    ca80:	4313      	orrs	r3, r2
    ca82:	b29b      	uxth	r3, r3
    ca84:	b29a      	uxth	r2, r3
    ca86:	f24b 7358 	movw	r3, #46936	; 0xb758
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
    ca90:	f24b 7358 	movw	r3, #46936	; 0xb758
    ca94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca98:	881b      	ldrh	r3, [r3, #0]
    ca9a:	2bff      	cmp	r3, #255	; 0xff
    ca9c:	d900      	bls.n	caa0 <parse_ubx+0x1d4>
      goto error;
    ca9e:	e080      	b.n	cba2 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
    caa0:	f24b 735a 	movw	r3, #46938	; 0xb75a
    caa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa8:	2200      	movs	r2, #0
    caaa:	701a      	strb	r2, [r3, #0]
    ubx_status++;
    caac:	f24b 7357 	movw	r3, #46935	; 0xb757
    cab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab4:	781b      	ldrb	r3, [r3, #0]
    cab6:	3301      	adds	r3, #1
    cab8:	b2da      	uxtb	r2, r3
    caba:	f24b 7357 	movw	r3, #46935	; 0xb757
    cabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac2:	701a      	strb	r2, [r3, #0]
    cac4:	e06c      	b.n	cba0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
    cac6:	f24b 7357 	movw	r3, #46935	; 0xb757
    caca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	2b06      	cmp	r3, #6
    cad2:	d131      	bne.n	cb38 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
    cad4:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cadc:	781b      	ldrb	r3, [r3, #0]
    cade:	461a      	mov	r2, r3
    cae0:	f24b 6358 	movw	r3, #46680	; 0xb658
    cae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae8:	79f9      	ldrb	r1, [r7, #7]
    caea:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
    caec:	f24b 735a 	movw	r3, #46938	; 0xb75a
    caf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf4:	781b      	ldrb	r3, [r3, #0]
    caf6:	3301      	adds	r3, #1
    caf8:	b2da      	uxtb	r2, r3
    cafa:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb02:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
    cb04:	f24b 735a 	movw	r3, #46938	; 0xb75a
    cb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0c:	781b      	ldrb	r3, [r3, #0]
    cb0e:	461a      	mov	r2, r3
    cb10:	f24b 7358 	movw	r3, #46936	; 0xb758
    cb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb18:	881b      	ldrh	r3, [r3, #0]
    cb1a:	429a      	cmp	r2, r3
    cb1c:	d340      	bcc.n	cba0 <parse_ubx+0x2d4>
      ubx_status++;
    cb1e:	f24b 7357 	movw	r3, #46935	; 0xb757
    cb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb26:	781b      	ldrb	r3, [r3, #0]
    cb28:	3301      	adds	r3, #1
    cb2a:	b2da      	uxtb	r2, r3
    cb2c:	f24b 7357 	movw	r3, #46935	; 0xb757
    cb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb34:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
    cb36:	e03b      	b.n	cbb0 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
    cb38:	f24b 7357 	movw	r3, #46935	; 0xb757
    cb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb40:	781b      	ldrb	r3, [r3, #0]
    cb42:	2b07      	cmp	r3, #7
    cb44:	d115      	bne.n	cb72 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
    cb46:	f24b 735b 	movw	r3, #46939	; 0xb75b
    cb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	79fa      	ldrb	r2, [r7, #7]
    cb52:	429a      	cmp	r2, r3
    cb54:	d000      	beq.n	cb58 <parse_ubx+0x28c>
      goto error;
    cb56:	e024      	b.n	cba2 <parse_ubx+0x2d6>
    ubx_status++;
    cb58:	f24b 7357 	movw	r3, #46935	; 0xb757
    cb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb60:	781b      	ldrb	r3, [r3, #0]
    cb62:	3301      	adds	r3, #1
    cb64:	b2da      	uxtb	r2, r3
    cb66:	f24b 7357 	movw	r3, #46935	; 0xb757
    cb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6e:	701a      	strb	r2, [r3, #0]
    cb70:	e016      	b.n	cba0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
    cb72:	f24b 7357 	movw	r3, #46935	; 0xb757
    cb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	2b08      	cmp	r3, #8
    cb7e:	d10f      	bne.n	cba0 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
    cb80:	f24b 735c 	movw	r3, #46940	; 0xb75c
    cb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb88:	781b      	ldrb	r3, [r3, #0]
    cb8a:	79fa      	ldrb	r2, [r7, #7]
    cb8c:	429a      	cmp	r2, r3
    cb8e:	d000      	beq.n	cb92 <parse_ubx+0x2c6>
      goto error;
    cb90:	e007      	b.n	cba2 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
    cb92:	f24b 6355 	movw	r3, #46677	; 0xb655
    cb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9a:	2201      	movs	r2, #1
    cb9c:	701a      	strb	r2, [r3, #0]
    goto restart;
    cb9e:	e000      	b.n	cba2 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
    cba0:	e006      	b.n	cbb0 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
    cba2:	f24b 7357 	movw	r3, #46935	; 0xb757
    cba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbaa:	2200      	movs	r2, #0
    cbac:	701a      	strb	r2, [r3, #0]
  return;
    cbae:	bf00      	nop
}
    cbb0:	370c      	adds	r7, #12
    cbb2:	46bd      	mov	sp, r7
    cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbb8:	4770      	bx	lr
    cbba:	bf00      	nop

0000cbbc <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
    cbbc:	b580      	push	{r7, lr}
    cbbe:	b082      	sub	sp, #8
    cbc0:	af00      	add	r7, sp, #0
    cbc2:	f248 039c 	movw	r3, #32924	; 0x809c
    cbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	71fb      	strb	r3, [r7, #7]
    cbce:	79fb      	ldrb	r3, [r7, #7]
    cbd0:	4618      	mov	r0, r3
    cbd2:	f7ff fe7b 	bl	c8cc <parse_ubx>
    cbd6:	3708      	adds	r7, #8
    cbd8:	46bd      	mov	sp, r7
    cbda:	bd80      	pop	{r7, pc}
    cbdc:	f3af 8000 	nop.w

0000cbe0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
    cbe0:	b580      	push	{r7, lr}
    cbe2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
    cbe4:	f240 1310 	movw	r3, #272	; 0x110
    cbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbec:	f24c 228f 	movw	r2, #49807	; 0xc28f
    cbf0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
    cbf4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
    cbf6:	2001      	movs	r0, #1
    cbf8:	f24b 7164 	movw	r1, #46948	; 0xb764
    cbfc:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cc00:	f7ff fc6a 	bl	c4d8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
    cc04:	2002      	movs	r0, #2
    cc06:	f24b 71a8 	movw	r1, #47016	; 0xb7a8
    cc0a:	f2c2 0104 	movt	r1, #8196	; 0x2004
    cc0e:	f7ff fc63 	bl	c4d8 <adc_buf_channel>
}
    cc12:	bd80      	pop	{r7, pc}

0000cc14 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
    cc14:	b480      	push	{r7}
    cc16:	b083      	sub	sp, #12
    cc18:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
    cc1a:	f24b 7364 	movw	r3, #46948	; 0xb764
    cc1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc22:	881b      	ldrh	r3, [r3, #0]
    cc24:	095b      	lsrs	r3, r3, #5
    cc26:	b29b      	uxth	r3, r3
    cc28:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
    cc2a:	f24b 73a8 	movw	r3, #47016	; 0xb7a8
    cc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc32:	881b      	ldrh	r3, [r3, #0]
    cc34:	095b      	lsrs	r3, r3, #5
    cc36:	b29b      	uxth	r3, r3
    cc38:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
    cc3a:	88fb      	ldrh	r3, [r7, #6]
    cc3c:	425b      	negs	r3, r3
    cc3e:	b29a      	uxth	r2, r3
    cc40:	88bb      	ldrh	r3, [r7, #4]
    cc42:	1ad3      	subs	r3, r2, r3
    cc44:	b29a      	uxth	r2, r3
    cc46:	f240 130a 	movw	r3, #266	; 0x10a
    cc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc4e:	881b      	ldrh	r3, [r3, #0]
    cc50:	b29b      	uxth	r3, r3
    cc52:	1ad3      	subs	r3, r2, r3
    cc54:	b29b      	uxth	r3, r3
    cc56:	b29a      	uxth	r2, r3
    cc58:	f24b 7360 	movw	r3, #46944	; 0xb760
    cc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc60:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
    cc62:	88ba      	ldrh	r2, [r7, #4]
    cc64:	88fb      	ldrh	r3, [r7, #6]
    cc66:	1ad3      	subs	r3, r2, r3
    cc68:	b29a      	uxth	r2, r3
    cc6a:	f240 130c 	movw	r3, #268	; 0x10c
    cc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc72:	881b      	ldrh	r3, [r3, #0]
    cc74:	b29b      	uxth	r3, r3
    cc76:	1ad3      	subs	r3, r2, r3
    cc78:	b29b      	uxth	r3, r3
    cc7a:	b29a      	uxth	r2, r3
    cc7c:	f24b 7362 	movw	r3, #46946	; 0xb762
    cc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc84:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
    cc86:	370c      	adds	r7, #12
    cc88:	46bd      	mov	sp, r7
    cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc8e:	4770      	bx	lr

0000cc90 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
    cc90:	b580      	push	{r7, lr}
    cc92:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
    cc94:	f24b 7362 	movw	r3, #46946	; 0xb762
    cc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9c:	881b      	ldrh	r3, [r3, #0]
    cc9e:	b29b      	uxth	r3, r3
    cca0:	425b      	negs	r3, r3
    cca2:	b29b      	uxth	r3, r3
    cca4:	b29a      	uxth	r2, r3
    cca6:	f240 1308 	movw	r3, #264	; 0x108
    ccaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccae:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
    ccb0:	f240 1308 	movw	r3, #264	; 0x108
    ccb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb8:	881b      	ldrh	r3, [r3, #0]
    ccba:	b21b      	sxth	r3, r3
    ccbc:	4618      	mov	r0, r3
    ccbe:	f005 fe7b 	bl	129b8 <__aeabi_i2d>
    ccc2:	4602      	mov	r2, r0
    ccc4:	460b      	mov	r3, r1
    ccc6:	f04f 0000 	mov.w	r0, #0
    ccca:	f04f 0100 	mov.w	r1, #0
    ccce:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
    ccd2:	f006 f801 	bl	12cd8 <__aeabi_ddiv>
    ccd6:	4602      	mov	r2, r0
    ccd8:	460b      	mov	r3, r1
    ccda:	4610      	mov	r0, r2
    ccdc:	4619      	mov	r1, r3
    ccde:	f006 f9b3 	bl	13048 <__aeabi_d2f>
    cce2:	4602      	mov	r2, r0
    cce4:	f240 1310 	movw	r3, #272	; 0x110
    cce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccec:	601a      	str	r2, [r3, #0]
}
    ccee:	bd80      	pop	{r7, pc}

0000ccf0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
    ccf0:	b590      	push	{r4, r7, lr}
    ccf2:	b083      	sub	sp, #12
    ccf4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
    ccf6:	f64b 2380 	movw	r3, #47744	; 0xba80
    ccfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfe:	681a      	ldr	r2, [r3, #0]
    cd00:	f24b 73ec 	movw	r3, #47084	; 0xb7ec
    cd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd08:	681b      	ldr	r3, [r3, #0]
    cd0a:	4610      	mov	r0, r2
    cd0c:	4619      	mov	r1, r3
    cd0e:	f006 f9ef 	bl	130f0 <__aeabi_fsub>
    cd12:	4603      	mov	r3, r0
    cd14:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
    cd16:	f240 1314 	movw	r3, #276	; 0x114
    cd1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd1e:	681b      	ldr	r3, [r3, #0]
    cd20:	4618      	mov	r0, r3
    cd22:	6879      	ldr	r1, [r7, #4]
    cd24:	f006 faee 	bl	13304 <__aeabi_fmul>
    cd28:	4603      	mov	r3, r0
    cd2a:	4618      	mov	r0, r3
    cd2c:	f04f 0100 	mov.w	r1, #0
    cd30:	f2cc 6116 	movt	r1, #50710	; 0xc616
    cd34:	f006 fc84 	bl	13640 <__aeabi_fcmplt>
    cd38:	4603      	mov	r3, r0
    cd3a:	2b00      	cmp	r3, #0
    cd3c:	d002      	beq.n	cd44 <roll_pitch_pid_run+0x54>
    cd3e:	f64d 2280 	movw	r2, #55936	; 0xda80
    cd42:	e026      	b.n	cd92 <roll_pitch_pid_run+0xa2>
    cd44:	f240 1314 	movw	r3, #276	; 0x114
    cd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd4c:	681b      	ldr	r3, [r3, #0]
    cd4e:	4618      	mov	r0, r3
    cd50:	6879      	ldr	r1, [r7, #4]
    cd52:	f006 fad7 	bl	13304 <__aeabi_fmul>
    cd56:	4603      	mov	r3, r0
    cd58:	4618      	mov	r0, r3
    cd5a:	f04f 0100 	mov.w	r1, #0
    cd5e:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cd62:	f006 fc8b 	bl	1367c <__aeabi_fcmpgt>
    cd66:	4603      	mov	r3, r0
    cd68:	2b00      	cmp	r3, #0
    cd6a:	d002      	beq.n	cd72 <roll_pitch_pid_run+0x82>
    cd6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    cd70:	e00e      	b.n	cd90 <roll_pitch_pid_run+0xa0>
    cd72:	f240 1314 	movw	r3, #276	; 0x114
    cd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7a:	681b      	ldr	r3, [r3, #0]
    cd7c:	4618      	mov	r0, r3
    cd7e:	6879      	ldr	r1, [r7, #4]
    cd80:	f006 fac0 	bl	13304 <__aeabi_fmul>
    cd84:	4603      	mov	r3, r0
    cd86:	4618      	mov	r0, r3
    cd88:	f006 fc82 	bl	13690 <__aeabi_f2iz>
    cd8c:	4603      	mov	r3, r0
    cd8e:	b29b      	uxth	r3, r3
    cd90:	b29a      	uxth	r2, r3
    cd92:	f24b 73f6 	movw	r3, #47094	; 0xb7f6
    cd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
    cd9c:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	681b      	ldr	r3, [r3, #0]
    cda6:	4618      	mov	r0, r3
    cda8:	f04f 0100 	mov.w	r1, #0
    cdac:	f006 fc48 	bl	13640 <__aeabi_fcmplt>
    cdb0:	4603      	mov	r3, r0
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d006      	beq.n	cdc4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
    cdb6:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    cdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbe:	f04f 0200 	mov.w	r2, #0
    cdc2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
    cdc4:	f64b 2388 	movw	r3, #47752	; 0xba88
    cdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdcc:	681a      	ldr	r2, [r3, #0]
    cdce:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    cdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd6:	681b      	ldr	r3, [r3, #0]
    cdd8:	4610      	mov	r0, r2
    cdda:	4619      	mov	r1, r3
    cddc:	f006 f988 	bl	130f0 <__aeabi_fsub>
    cde0:	4603      	mov	r3, r0
    cde2:	461c      	mov	r4, r3
    cde4:	f64b 2380 	movw	r3, #47744	; 0xba80
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	681b      	ldr	r3, [r3, #0]
    cdee:	4618      	mov	r0, r3
    cdf0:	f04f 0100 	mov.w	r1, #0
    cdf4:	f006 fc24 	bl	13640 <__aeabi_fcmplt>
    cdf8:	4603      	mov	r3, r0
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d007      	beq.n	ce0e <roll_pitch_pid_run+0x11e>
    cdfe:	f64b 2380 	movw	r3, #47744	; 0xba80
    ce02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce06:	681b      	ldr	r3, [r3, #0]
    ce08:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    ce0c:	e004      	b.n	ce18 <roll_pitch_pid_run+0x128>
    ce0e:	f64b 2380 	movw	r3, #47744	; 0xba80
    ce12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce16:	681a      	ldr	r2, [r3, #0]
    ce18:	f24b 73fc 	movw	r3, #47100	; 0xb7fc
    ce1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce20:	681b      	ldr	r3, [r3, #0]
    ce22:	4610      	mov	r0, r2
    ce24:	4619      	mov	r1, r3
    ce26:	f006 fa6d 	bl	13304 <__aeabi_fmul>
    ce2a:	4603      	mov	r3, r0
    ce2c:	4620      	mov	r0, r4
    ce2e:	4619      	mov	r1, r3
    ce30:	f006 f95e 	bl	130f0 <__aeabi_fsub>
    ce34:	4603      	mov	r3, r0
    ce36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ce3a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
    ce3c:	f240 1318 	movw	r3, #280	; 0x118
    ce40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce44:	681b      	ldr	r3, [r3, #0]
    ce46:	4618      	mov	r0, r3
    ce48:	6879      	ldr	r1, [r7, #4]
    ce4a:	f006 fa5b 	bl	13304 <__aeabi_fmul>
    ce4e:	4603      	mov	r3, r0
    ce50:	4618      	mov	r0, r3
    ce52:	f04f 0100 	mov.w	r1, #0
    ce56:	f2cc 6116 	movt	r1, #50710	; 0xc616
    ce5a:	f006 fbf1 	bl	13640 <__aeabi_fcmplt>
    ce5e:	4603      	mov	r3, r0
    ce60:	2b00      	cmp	r3, #0
    ce62:	d002      	beq.n	ce6a <roll_pitch_pid_run+0x17a>
    ce64:	f64d 2280 	movw	r2, #55936	; 0xda80
    ce68:	e026      	b.n	ceb8 <roll_pitch_pid_run+0x1c8>
    ce6a:	f240 1318 	movw	r3, #280	; 0x118
    ce6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce72:	681b      	ldr	r3, [r3, #0]
    ce74:	4618      	mov	r0, r3
    ce76:	6879      	ldr	r1, [r7, #4]
    ce78:	f006 fa44 	bl	13304 <__aeabi_fmul>
    ce7c:	4603      	mov	r3, r0
    ce7e:	4618      	mov	r0, r3
    ce80:	f04f 0100 	mov.w	r1, #0
    ce84:	f2c4 6116 	movt	r1, #17942	; 0x4616
    ce88:	f006 fbf8 	bl	1367c <__aeabi_fcmpgt>
    ce8c:	4603      	mov	r3, r0
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d002      	beq.n	ce98 <roll_pitch_pid_run+0x1a8>
    ce92:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ce96:	e00e      	b.n	ceb6 <roll_pitch_pid_run+0x1c6>
    ce98:	f240 1318 	movw	r3, #280	; 0x118
    ce9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea0:	681b      	ldr	r3, [r3, #0]
    cea2:	4618      	mov	r0, r3
    cea4:	6879      	ldr	r1, [r7, #4]
    cea6:	f006 fa2d 	bl	13304 <__aeabi_fmul>
    ceaa:	4603      	mov	r3, r0
    ceac:	4618      	mov	r0, r3
    ceae:	f006 fbef 	bl	13690 <__aeabi_f2iz>
    ceb2:	4603      	mov	r3, r0
    ceb4:	b29b      	uxth	r3, r3
    ceb6:	b29a      	uxth	r2, r3
    ceb8:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    cebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec0:	801a      	strh	r2, [r3, #0]
}
    cec2:	370c      	adds	r7, #12
    cec4:	46bd      	mov	sp, r7
    cec6:	bd90      	pop	{r4, r7, pc}

0000cec8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
    cec8:	b580      	push	{r7, lr}
    ceca:	b082      	sub	sp, #8
    cecc:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
    cece:	f64b 23b0 	movw	r3, #47792	; 0xbab0
    ced2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced6:	681a      	ldr	r2, [r3, #0]
    ced8:	f64b 0304 	movw	r3, #47108	; 0xb804
    cedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee0:	681b      	ldr	r3, [r3, #0]
    cee2:	4610      	mov	r0, r2
    cee4:	4619      	mov	r1, r3
    cee6:	f006 f903 	bl	130f0 <__aeabi_fsub>
    ceea:	4603      	mov	r3, r0
    ceec:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
    ceee:	e013      	b.n	cf18 <course_pid_run+0x50>
    cef0:	6878      	ldr	r0, [r7, #4]
    cef2:	f005 fd73 	bl	129dc <__aeabi_f2d>
    cef6:	4602      	mov	r2, r0
    cef8:	460b      	mov	r3, r1
    cefa:	4610      	mov	r0, r2
    cefc:	4619      	mov	r1, r3
    cefe:	a348      	add	r3, pc, #288	; (adr r3, d020 <course_pid_run+0x158>)
    cf00:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf04:	f005 fc0a 	bl	1271c <__aeabi_dsub>
    cf08:	4602      	mov	r2, r0
    cf0a:	460b      	mov	r3, r1
    cf0c:	4610      	mov	r0, r2
    cf0e:	4619      	mov	r1, r3
    cf10:	f006 f89a 	bl	13048 <__aeabi_d2f>
    cf14:	4603      	mov	r3, r0
    cf16:	607b      	str	r3, [r7, #4]
    cf18:	6878      	ldr	r0, [r7, #4]
    cf1a:	f005 fd5f 	bl	129dc <__aeabi_f2d>
    cf1e:	4602      	mov	r2, r0
    cf20:	460b      	mov	r3, r1
    cf22:	4610      	mov	r0, r2
    cf24:	4619      	mov	r1, r3
    cf26:	a340      	add	r3, pc, #256	; (adr r3, d028 <course_pid_run+0x160>)
    cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf2c:	f006 f83a 	bl	12fa4 <__aeabi_dcmpgt>
    cf30:	4603      	mov	r3, r0
    cf32:	2b00      	cmp	r3, #0
    cf34:	d1dc      	bne.n	cef0 <course_pid_run+0x28>
    cf36:	e013      	b.n	cf60 <course_pid_run+0x98>
    cf38:	6878      	ldr	r0, [r7, #4]
    cf3a:	f005 fd4f 	bl	129dc <__aeabi_f2d>
    cf3e:	4602      	mov	r2, r0
    cf40:	460b      	mov	r3, r1
    cf42:	4610      	mov	r0, r2
    cf44:	4619      	mov	r1, r3
    cf46:	a336      	add	r3, pc, #216	; (adr r3, d020 <course_pid_run+0x158>)
    cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf4c:	f005 fbe8 	bl	12720 <__adddf3>
    cf50:	4602      	mov	r2, r0
    cf52:	460b      	mov	r3, r1
    cf54:	4610      	mov	r0, r2
    cf56:	4619      	mov	r1, r3
    cf58:	f006 f876 	bl	13048 <__aeabi_d2f>
    cf5c:	4603      	mov	r3, r0
    cf5e:	607b      	str	r3, [r7, #4]
    cf60:	6878      	ldr	r0, [r7, #4]
    cf62:	f005 fd3b 	bl	129dc <__aeabi_f2d>
    cf66:	4602      	mov	r2, r0
    cf68:	460b      	mov	r3, r1
    cf6a:	4610      	mov	r0, r2
    cf6c:	4619      	mov	r1, r3
    cf6e:	a330      	add	r3, pc, #192	; (adr r3, d030 <course_pid_run+0x168>)
    cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf74:	f005 fff8 	bl	12f68 <__aeabi_dcmplt>
    cf78:	4603      	mov	r3, r0
    cf7a:	2b00      	cmp	r3, #0
    cf7c:	d1dc      	bne.n	cf38 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
    cf7e:	f240 1320 	movw	r3, #288	; 0x120
    cf82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	4618      	mov	r0, r3
    cf8a:	6879      	ldr	r1, [r7, #4]
    cf8c:	f006 f9ba 	bl	13304 <__aeabi_fmul>
    cf90:	4603      	mov	r3, r0
    cf92:	461a      	mov	r2, r3
    cf94:	f64b 0348 	movw	r3, #47176	; 0xb848
    cf98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
    cf9e:	f64b 0348 	movw	r3, #47176	; 0xb848
    cfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa6:	681a      	ldr	r2, [r3, #0]
    cfa8:	f240 1324 	movw	r3, #292	; 0x124
    cfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb0:	681b      	ldr	r3, [r3, #0]
    cfb2:	4610      	mov	r0, r2
    cfb4:	4619      	mov	r1, r3
    cfb6:	f006 fb61 	bl	1367c <__aeabi_fcmpgt>
    cfba:	4603      	mov	r3, r0
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d00a      	beq.n	cfd6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
    cfc0:	f240 1324 	movw	r3, #292	; 0x124
    cfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc8:	681a      	ldr	r2, [r3, #0]
    cfca:	f64b 0348 	movw	r3, #47176	; 0xb848
    cfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd2:	601a      	str	r2, [r3, #0]
    cfd4:	e01e      	b.n	d014 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
    cfd6:	f240 1324 	movw	r3, #292	; 0x124
    cfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfde:	681b      	ldr	r3, [r3, #0]
    cfe0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    cfe4:	f64b 0348 	movw	r3, #47176	; 0xb848
    cfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfec:	681b      	ldr	r3, [r3, #0]
    cfee:	4610      	mov	r0, r2
    cff0:	4619      	mov	r1, r3
    cff2:	f006 fb43 	bl	1367c <__aeabi_fcmpgt>
    cff6:	4603      	mov	r3, r0
    cff8:	2b00      	cmp	r3, #0
    cffa:	d00b      	beq.n	d014 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
    cffc:	f240 1324 	movw	r3, #292	; 0x124
    d000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d004:	681b      	ldr	r3, [r3, #0]
    d006:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    d00a:	f64b 0348 	movw	r3, #47176	; 0xb848
    d00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d012:	601a      	str	r2, [r3, #0]
}
    d014:	3708      	adds	r7, #8
    d016:	46bd      	mov	sp, r7
    d018:	bd80      	pop	{r7, pc}
    d01a:	bf00      	nop
    d01c:	f3af 8000 	nop.w
    d020:	54442d18 	.word	0x54442d18
    d024:	401921fb 	.word	0x401921fb
    d028:	54442d18 	.word	0x54442d18
    d02c:	400921fb 	.word	0x400921fb
    d030:	54442d18 	.word	0x54442d18
    d034:	c00921fb 	.word	0xc00921fb

0000d038 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
    d038:	b5b0      	push	{r4, r5, r7, lr}
    d03a:	b082      	sub	sp, #8
    d03c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
    d03e:	f64b 2394 	movw	r3, #47764	; 0xba94
    d042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d046:	681a      	ldr	r2, [r3, #0]
    d048:	f64b 0308 	movw	r3, #47112	; 0xb808
    d04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d050:	681b      	ldr	r3, [r3, #0]
    d052:	4610      	mov	r0, r2
    d054:	4619      	mov	r1, r3
    d056:	f006 f84b 	bl	130f0 <__aeabi_fsub>
    d05a:	4603      	mov	r3, r0
    d05c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
    d05e:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    d062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d066:	781b      	ldrb	r3, [r3, #0]
    d068:	2b00      	cmp	r3, #0
    d06a:	f000 80a8 	beq.w	d1be <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
    d06e:	f64b 0340 	movw	r3, #47168	; 0xb840
    d072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d076:	881b      	ldrh	r3, [r3, #0]
    d078:	b29a      	uxth	r2, r3
    d07a:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    d07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d082:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
    d084:	f240 132c 	movw	r3, #300	; 0x12c
    d088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08c:	681a      	ldr	r2, [r3, #0]
    d08e:	f64b 0314 	movw	r3, #47124	; 0xb814
    d092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	4610      	mov	r0, r2
    d09a:	4619      	mov	r1, r3
    d09c:	f006 f932 	bl	13304 <__aeabi_fmul>
    d0a0:	4603      	mov	r3, r0
    d0a2:	4618      	mov	r0, r3
    d0a4:	6879      	ldr	r1, [r7, #4]
    d0a6:	f006 f825 	bl	130f4 <__addsf3>
    d0aa:	4603      	mov	r3, r0
    d0ac:	461a      	mov	r2, r3
    d0ae:	f240 1328 	movw	r3, #296	; 0x128
    d0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b6:	681b      	ldr	r3, [r3, #0]
    d0b8:	4610      	mov	r0, r2
    d0ba:	4619      	mov	r1, r3
    d0bc:	f006 f922 	bl	13304 <__aeabi_fmul>
    d0c0:	4603      	mov	r3, r0
    d0c2:	461a      	mov	r2, r3
    d0c4:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    d0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0cc:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
    d0ce:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    d0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d6:	681a      	ldr	r2, [r3, #0]
    d0d8:	f240 1330 	movw	r3, #304	; 0x130
    d0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e0:	681b      	ldr	r3, [r3, #0]
    d0e2:	4610      	mov	r0, r2
    d0e4:	4619      	mov	r1, r3
    d0e6:	f006 fac9 	bl	1367c <__aeabi_fcmpgt>
    d0ea:	4603      	mov	r3, r0
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d009      	beq.n	d104 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
    d0f0:	f240 1330 	movw	r3, #304	; 0x130
    d0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f8:	681a      	ldr	r2, [r3, #0]
    d0fa:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    d0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d102:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
    d104:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    d108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10c:	681a      	ldr	r2, [r3, #0]
    d10e:	f240 1334 	movw	r3, #308	; 0x134
    d112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d116:	681b      	ldr	r3, [r3, #0]
    d118:	4610      	mov	r0, r2
    d11a:	4619      	mov	r1, r3
    d11c:	f006 fa90 	bl	13640 <__aeabi_fcmplt>
    d120:	4603      	mov	r3, r0
    d122:	2b00      	cmp	r3, #0
    d124:	d009      	beq.n	d13a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
    d126:	f240 1334 	movw	r3, #308	; 0x134
    d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12e:	681a      	ldr	r2, [r3, #0]
    d130:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    d134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d138:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
    d13a:	f64b 0314 	movw	r3, #47124	; 0xb814
    d13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d142:	681b      	ldr	r3, [r3, #0]
    d144:	4618      	mov	r0, r3
    d146:	6879      	ldr	r1, [r7, #4]
    d148:	f005 ffd4 	bl	130f4 <__addsf3>
    d14c:	4603      	mov	r3, r0
    d14e:	461a      	mov	r2, r3
    d150:	f64b 0314 	movw	r3, #47124	; 0xb814
    d154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d158:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
    d15a:	f64b 0314 	movw	r3, #47124	; 0xb814
    d15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d162:	681b      	ldr	r3, [r3, #0]
    d164:	4618      	mov	r0, r3
    d166:	f04f 0100 	mov.w	r1, #0
    d16a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d16e:	f006 fa85 	bl	1367c <__aeabi_fcmpgt>
    d172:	4603      	mov	r3, r0
    d174:	2b00      	cmp	r3, #0
    d176:	d008      	beq.n	d18a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
    d178:	f64b 0314 	movw	r3, #47124	; 0xb814
    d17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d180:	f04f 0200 	mov.w	r2, #0
    d184:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d188:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
    d18a:	f64b 0314 	movw	r3, #47124	; 0xb814
    d18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d192:	681b      	ldr	r3, [r3, #0]
    d194:	4618      	mov	r0, r3
    d196:	f04f 0100 	mov.w	r1, #0
    d19a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d19e:	f006 fa4f 	bl	13640 <__aeabi_fcmplt>
    d1a2:	4603      	mov	r3, r0
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d100      	bne.n	d1aa <climb_pid_run+0x172>
    d1a8:	e109      	b.n	d3be <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
    d1aa:	f64b 0314 	movw	r3, #47124	; 0xb814
    d1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b2:	f04f 0200 	mov.w	r2, #0
    d1b6:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d1ba:	601a      	str	r2, [r3, #0]
    d1bc:	e0ff      	b.n	d3be <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
    d1be:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c6:	681b      	ldr	r3, [r3, #0]
    d1c8:	4618      	mov	r0, r3
    d1ca:	f04f 0100 	mov.w	r1, #0
    d1ce:	f006 fa55 	bl	1367c <__aeabi_fcmpgt>
    d1d2:	4603      	mov	r3, r0
    d1d4:	2b00      	cmp	r3, #0
    d1d6:	d010      	beq.n	d1fa <climb_pid_run+0x1c2>
    d1d8:	f64b 0308 	movw	r3, #47112	; 0xb808
    d1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e0:	681a      	ldr	r2, [r3, #0]
    d1e2:	f240 131c 	movw	r3, #284	; 0x11c
    d1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ea:	681b      	ldr	r3, [r3, #0]
    d1ec:	4610      	mov	r0, r2
    d1ee:	4619      	mov	r1, r3
    d1f0:	f006 f888 	bl	13304 <__aeabi_fmul>
    d1f4:	4603      	mov	r3, r0
    d1f6:	461a      	mov	r2, r3
    d1f8:	e001      	b.n	d1fe <climb_pid_run+0x1c6>
    d1fa:	f04f 0200 	mov.w	r2, #0
    d1fe:	f64b 0300 	movw	r3, #47104	; 0xb800
    d202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d206:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
    d208:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    d20c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    d210:	f64b 0310 	movw	r3, #47120	; 0xb810
    d214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d218:	681b      	ldr	r3, [r3, #0]
    d21a:	4610      	mov	r0, r2
    d21c:	4619      	mov	r1, r3
    d21e:	f006 f871 	bl	13304 <__aeabi_fmul>
    d222:	4603      	mov	r3, r0
    d224:	4618      	mov	r0, r3
    d226:	6879      	ldr	r1, [r7, #4]
    d228:	f005 ff64 	bl	130f4 <__addsf3>
    d22c:	4603      	mov	r3, r0
    d22e:	461a      	mov	r2, r3
    d230:	f24c 238f 	movw	r3, #49807	; 0xc28f
    d234:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
    d238:	4610      	mov	r0, r2
    d23a:	4619      	mov	r1, r3
    d23c:	f006 f862 	bl	13304 <__aeabi_fmul>
    d240:	4603      	mov	r3, r0
    d242:	4618      	mov	r0, r3
    d244:	f005 fbca 	bl	129dc <__aeabi_f2d>
    d248:	4602      	mov	r2, r0
    d24a:	460b      	mov	r3, r1
    d24c:	4610      	mov	r0, r2
    d24e:	4619      	mov	r1, r3
    d250:	a35d      	add	r3, pc, #372	; (adr r3, d3c8 <climb_pid_run+0x390>)
    d252:	e9d3 2300 	ldrd	r2, r3, [r3]
    d256:	f005 fa63 	bl	12720 <__adddf3>
    d25a:	4602      	mov	r2, r0
    d25c:	460b      	mov	r3, r1
    d25e:	4614      	mov	r4, r2
    d260:	461d      	mov	r5, r3
    d262:	f64b 0308 	movw	r3, #47112	; 0xb808
    d266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26a:	681b      	ldr	r3, [r3, #0]
    d26c:	4618      	mov	r0, r3
    d26e:	f005 fbb5 	bl	129dc <__aeabi_f2d>
    d272:	4602      	mov	r2, r0
    d274:	460b      	mov	r3, r1
    d276:	4610      	mov	r0, r2
    d278:	4619      	mov	r1, r3
    d27a:	a355      	add	r3, pc, #340	; (adr r3, d3d0 <climb_pid_run+0x398>)
    d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d280:	f005 fc00 	bl	12a84 <__aeabi_dmul>
    d284:	4602      	mov	r2, r0
    d286:	460b      	mov	r3, r1
    d288:	4620      	mov	r0, r4
    d28a:	4629      	mov	r1, r5
    d28c:	f005 fa48 	bl	12720 <__adddf3>
    d290:	4602      	mov	r2, r0
    d292:	460b      	mov	r3, r1
    d294:	4610      	mov	r0, r2
    d296:	4619      	mov	r1, r3
    d298:	f005 fed6 	bl	13048 <__aeabi_d2f>
    d29c:	4603      	mov	r3, r0
    d29e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
    d2a0:	f64b 0310 	movw	r3, #47120	; 0xb810
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	681b      	ldr	r3, [r3, #0]
    d2aa:	4618      	mov	r0, r3
    d2ac:	6879      	ldr	r1, [r7, #4]
    d2ae:	f005 ff21 	bl	130f4 <__addsf3>
    d2b2:	4603      	mov	r3, r0
    d2b4:	461a      	mov	r2, r3
    d2b6:	f64b 0310 	movw	r3, #47120	; 0xb810
    d2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2be:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
    d2c0:	f64b 0310 	movw	r3, #47120	; 0xb810
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	681b      	ldr	r3, [r3, #0]
    d2ca:	4618      	mov	r0, r3
    d2cc:	f04f 0100 	mov.w	r1, #0
    d2d0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
    d2d4:	f006 f9d2 	bl	1367c <__aeabi_fcmpgt>
    d2d8:	4603      	mov	r3, r0
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d008      	beq.n	d2f0 <climb_pid_run+0x2b8>
    d2de:	f64b 0310 	movw	r3, #47120	; 0xb810
    d2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e6:	f04f 0200 	mov.w	r2, #0
    d2ea:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    d2ee:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
    d2f0:	f64b 0310 	movw	r3, #47120	; 0xb810
    d2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f8:	681b      	ldr	r3, [r3, #0]
    d2fa:	4618      	mov	r0, r3
    d2fc:	f04f 0100 	mov.w	r1, #0
    d300:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    d304:	f006 f99c 	bl	13640 <__aeabi_fcmplt>
    d308:	4603      	mov	r3, r0
    d30a:	2b00      	cmp	r3, #0
    d30c:	d008      	beq.n	d320 <climb_pid_run+0x2e8>
    d30e:	f64b 0310 	movw	r3, #47120	; 0xb810
    d312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d316:	f04f 0200 	mov.w	r2, #0
    d31a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
    d31e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
    d320:	6838      	ldr	r0, [r7, #0]
    d322:	f04f 0100 	mov.w	r1, #0
    d326:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d32a:	f005 ffeb 	bl	13304 <__aeabi_fmul>
    d32e:	4603      	mov	r3, r0
    d330:	4618      	mov	r0, r3
    d332:	f04f 0100 	mov.w	r1, #0
    d336:	f006 f983 	bl	13640 <__aeabi_fcmplt>
    d33a:	4603      	mov	r3, r0
    d33c:	2b00      	cmp	r3, #0
    d33e:	d001      	beq.n	d344 <climb_pid_run+0x30c>
    d340:	2200      	movs	r2, #0
    d342:	e022      	b.n	d38a <climb_pid_run+0x352>
    d344:	6838      	ldr	r0, [r7, #0]
    d346:	f04f 0100 	mov.w	r1, #0
    d34a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d34e:	f005 ffd9 	bl	13304 <__aeabi_fmul>
    d352:	4603      	mov	r3, r0
    d354:	4618      	mov	r0, r3
    d356:	f04f 0100 	mov.w	r1, #0
    d35a:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d35e:	f006 f98d 	bl	1367c <__aeabi_fcmpgt>
    d362:	4603      	mov	r3, r0
    d364:	2b00      	cmp	r3, #0
    d366:	d002      	beq.n	d36e <climb_pid_run+0x336>
    d368:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    d36c:	e00c      	b.n	d388 <climb_pid_run+0x350>
    d36e:	6838      	ldr	r0, [r7, #0]
    d370:	f04f 0100 	mov.w	r1, #0
    d374:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d378:	f005 ffc4 	bl	13304 <__aeabi_fmul>
    d37c:	4603      	mov	r3, r0
    d37e:	4618      	mov	r0, r3
    d380:	f006 f986 	bl	13690 <__aeabi_f2iz>
    d384:	4603      	mov	r3, r0
    d386:	b29b      	uxth	r3, r3
    d388:	b29a      	uxth	r2, r3
    d38a:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    d38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d392:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
    d394:	f64b 0344 	movw	r3, #47172	; 0xb844
    d398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39c:	681a      	ldr	r2, [r3, #0]
    d39e:	f64b 0300 	movw	r3, #47104	; 0xb800
    d3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a6:	681b      	ldr	r3, [r3, #0]
    d3a8:	4610      	mov	r0, r2
    d3aa:	4619      	mov	r1, r3
    d3ac:	f005 fea2 	bl	130f4 <__addsf3>
    d3b0:	4603      	mov	r3, r0
    d3b2:	461a      	mov	r2, r3
    d3b4:	f24b 73f0 	movw	r3, #47088	; 0xb7f0
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	601a      	str	r2, [r3, #0]
  }
}
    d3be:	3708      	adds	r7, #8
    d3c0:	46bd      	mov	sp, r7
    d3c2:	bdb0      	pop	{r4, r5, r7, pc}
    d3c4:	f3af 8000 	nop.w
    d3c8:	3d70a3d7 	.word	0x3d70a3d7
    d3cc:	3fd3d70a 	.word	0x3fd3d70a
    d3d0:	9999999a 	.word	0x9999999a
    d3d4:	3fc99999 	.word	0x3fc99999

0000d3d8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
    d3d8:	b580      	push	{r7, lr}
    d3da:	b082      	sub	sp, #8
    d3dc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
    d3de:	f64b 237c 	movw	r3, #47740	; 0xba7c
    d3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e6:	681a      	ldr	r2, [r3, #0]
    d3e8:	f240 133c 	movw	r3, #316	; 0x13c
    d3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f0:	681b      	ldr	r3, [r3, #0]
    d3f2:	4610      	mov	r0, r2
    d3f4:	4619      	mov	r1, r3
    d3f6:	f005 fe7b 	bl	130f0 <__aeabi_fsub>
    d3fa:	4603      	mov	r3, r0
    d3fc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
    d3fe:	f240 1338 	movw	r3, #312	; 0x138
    d402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d406:	681b      	ldr	r3, [r3, #0]
    d408:	4618      	mov	r0, r3
    d40a:	6879      	ldr	r1, [r7, #4]
    d40c:	f005 ff7a 	bl	13304 <__aeabi_fmul>
    d410:	4603      	mov	r3, r0
    d412:	461a      	mov	r2, r3
    d414:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	4610      	mov	r0, r2
    d420:	4619      	mov	r1, r3
    d422:	f005 fe67 	bl	130f4 <__addsf3>
    d426:	4603      	mov	r3, r0
    d428:	461a      	mov	r2, r3
    d42a:	f64b 0308 	movw	r3, #47112	; 0xb808
    d42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d432:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
    d434:	f64b 0308 	movw	r3, #47112	; 0xb808
    d438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43c:	681b      	ldr	r3, [r3, #0]
    d43e:	4618      	mov	r0, r3
    d440:	f04f 0100 	mov.w	r1, #0
    d444:	f6cb 7180 	movt	r1, #49024	; 0xbf80
    d448:	f006 f8fa 	bl	13640 <__aeabi_fcmplt>
    d44c:	4603      	mov	r3, r0
    d44e:	2b00      	cmp	r3, #0
    d450:	d008      	beq.n	d464 <altitude_pid_run+0x8c>
    d452:	f64b 0308 	movw	r3, #47112	; 0xb808
    d456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45a:	f04f 0200 	mov.w	r2, #0
    d45e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
    d462:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
    d464:	f64b 0308 	movw	r3, #47112	; 0xb808
    d468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	4618      	mov	r0, r3
    d470:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d474:	f006 f902 	bl	1367c <__aeabi_fcmpgt>
    d478:	4603      	mov	r3, r0
    d47a:	2b00      	cmp	r3, #0
    d47c:	d006      	beq.n	d48c <altitude_pid_run+0xb4>
    d47e:	f64b 0308 	movw	r3, #47112	; 0xb808
    d482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d486:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d48a:	601a      	str	r2, [r3, #0]
}
    d48c:	3708      	adds	r7, #8
    d48e:	46bd      	mov	sp, r7
    d490:	bd80      	pop	{r7, pc}
    d492:	bf00      	nop
    d494:	f3af 8000 	nop.w

0000d498 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
    d498:	b5f0      	push	{r4, r5, r6, r7, lr}
    d49a:	b08b      	sub	sp, #44	; 0x2c
    d49c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
    d49e:	f64b 0319 	movw	r3, #47129	; 0xb819
    d4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	f040 8169 	bne.w	d780 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
    d4ae:	f64b 0318 	movw	r3, #47128	; 0xb818
    d4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b6:	781b      	ldrb	r3, [r3, #0]
    d4b8:	2b00      	cmp	r3, #0
    d4ba:	d13c      	bne.n	d536 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
    d4bc:	f64b 0318 	movw	r3, #47128	; 0xb818
    d4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c4:	2200      	movs	r2, #0
    d4c6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
    d4c8:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    d4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d0:	881b      	ldrh	r3, [r3, #0]
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	d000      	beq.n	d4d8 <auto_nav+0x40>
    d4d6:	e03d      	b.n	d554 <auto_nav+0xbc>
	else NextStage(); 
    d4d8:	f64b 0318 	movw	r3, #47128	; 0xb818
    d4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e0:	781b      	ldrb	r3, [r3, #0]
    d4e2:	3301      	adds	r3, #1
    d4e4:	b2da      	uxtb	r2, r3
    d4e6:	f64b 0318 	movw	r3, #47128	; 0xb818
    d4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ee:	701a      	strb	r2, [r3, #0]
    d4f0:	f64b 2374 	movw	r3, #47732	; 0xba74
    d4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f8:	681a      	ldr	r2, [r3, #0]
    d4fa:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d502:	601a      	str	r2, [r3, #0]
    d504:	f64b 2378 	movw	r3, #47736	; 0xba78
    d508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50c:	681a      	ldr	r2, [r3, #0]
    d50e:	f64b 0320 	movw	r3, #47136	; 0xb820
    d512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d516:	601a      	str	r2, [r3, #0]
    d518:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d520:	2200      	movs	r2, #0
    d522:	801a      	strh	r2, [r3, #0]
    d524:	f64b 0330 	movw	r3, #47152	; 0xb830
    d528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52c:	f04f 0200 	mov.w	r2, #0
    d530:	601a      	str	r2, [r3, #0]
    d532:	f002 b883 	b.w	f63c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d536:	f64b 0318 	movw	r3, #47128	; 0xb818
    d53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53e:	781b      	ldrb	r3, [r3, #0]
    d540:	2b01      	cmp	r3, #1
    d542:	d100      	bne.n	d546 <auto_nav+0xae>
    {   Goto(while_1)}
    d544:	e7ba      	b.n	d4bc <auto_nav+0x24>
    else if (nav_stage == 2)
    d546:	f64b 0318 	movw	r3, #47128	; 0xb818
    d54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54e:	781b      	ldrb	r3, [r3, #0]
    d550:	2b02      	cmp	r3, #2
    d552:	d162      	bne.n	d61a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
    d554:	f64b 0318 	movw	r3, #47128	; 0xb818
    d558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55c:	2202      	movs	r2, #2
    d55e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
    d560:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
    d564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d568:	881b      	ldrh	r3, [r3, #0]
    d56a:	2b08      	cmp	r3, #8
    d56c:	d92e      	bls.n	d5cc <auto_nav+0x134>
    d56e:	f64b 0318 	movw	r3, #47128	; 0xb818
    d572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d576:	781b      	ldrb	r3, [r3, #0]
    d578:	3301      	adds	r3, #1
    d57a:	b2da      	uxtb	r2, r3
    d57c:	f64b 0318 	movw	r3, #47128	; 0xb818
    d580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d584:	701a      	strb	r2, [r3, #0]
    d586:	f64b 2374 	movw	r3, #47732	; 0xba74
    d58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58e:	681a      	ldr	r2, [r3, #0]
    d590:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d598:	601a      	str	r2, [r3, #0]
    d59a:	f64b 2378 	movw	r3, #47736	; 0xba78
    d59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a2:	681a      	ldr	r2, [r3, #0]
    d5a4:	f64b 0320 	movw	r3, #47136	; 0xb820
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	601a      	str	r2, [r3, #0]
    d5ae:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b6:	2200      	movs	r2, #0
    d5b8:	801a      	strh	r2, [r3, #0]
    d5ba:	f64b 0330 	movw	r3, #47152	; 0xb830
    d5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c2:	f04f 0200 	mov.w	r2, #0
    d5c6:	601a      	str	r2, [r3, #0]
    d5c8:	f002 b838 	b.w	f63c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d5cc:	f64b 0304 	movw	r3, #47108	; 0xb804
    d5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d5d8:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d5dc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d5de:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    d5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e6:	2200      	movs	r2, #0
    d5e8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
    d5ea:	f64b 0344 	movw	r3, #47172	; 0xb844
    d5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f2:	f649 129a 	movw	r2, #39322	; 0x999a
    d5f6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
    d5fa:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
    d5fc:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    d600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d604:	2201      	movs	r2, #1
    d606:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
    d608:	f64b 0340 	movw	r3, #47168	; 0xb840
    d60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d610:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    d614:	801a      	strh	r2, [r3, #0]
        }
        return;
    d616:	f002 b811 	b.w	f63c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
    d61a:	f64b 0318 	movw	r3, #47128	; 0xb818
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	781b      	ldrb	r3, [r3, #0]
    d624:	2b03      	cmp	r3, #3
    d626:	d168      	bne.n	d6fa <auto_nav+0x262>
     {
	nav_stage = 3;	
    d628:	f64b 0318 	movw	r3, #47128	; 0xb818
    d62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d630:	2203      	movs	r2, #3
    d632:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
    d634:	f64b 237c 	movw	r3, #47740	; 0xba7c
    d638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63c:	681b      	ldr	r3, [r3, #0]
    d63e:	4618      	mov	r0, r3
    d640:	f04f 0100 	mov.w	r1, #0
    d644:	f2c4 3116 	movt	r1, #17174	; 0x4316
    d648:	f006 f818 	bl	1367c <__aeabi_fcmpgt>
    d64c:	4603      	mov	r3, r0
    d64e:	2b00      	cmp	r3, #0
    d650:	d02e      	beq.n	d6b0 <auto_nav+0x218>
    d652:	f64b 0318 	movw	r3, #47128	; 0xb818
    d656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65a:	781b      	ldrb	r3, [r3, #0]
    d65c:	3301      	adds	r3, #1
    d65e:	b2da      	uxtb	r2, r3
    d660:	f64b 0318 	movw	r3, #47128	; 0xb818
    d664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d668:	701a      	strb	r2, [r3, #0]
    d66a:	f64b 2374 	movw	r3, #47732	; 0xba74
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	681a      	ldr	r2, [r3, #0]
    d674:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67c:	601a      	str	r2, [r3, #0]
    d67e:	f64b 2378 	movw	r3, #47736	; 0xba78
    d682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d686:	681a      	ldr	r2, [r3, #0]
    d688:	f64b 0320 	movw	r3, #47136	; 0xb820
    d68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d690:	601a      	str	r2, [r3, #0]
    d692:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69a:	2200      	movs	r2, #0
    d69c:	801a      	strh	r2, [r3, #0]
    d69e:	f64b 0330 	movw	r3, #47152	; 0xb830
    d6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a6:	f04f 0200 	mov.w	r2, #0
    d6aa:	601a      	str	r2, [r3, #0]
    d6ac:	f001 bfc6 	b.w	f63c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
    d6b0:	f64b 0304 	movw	r3, #47108	; 0xb804
    d6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b8:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
    d6bc:	f2c4 0296 	movt	r2, #16534	; 0x4096
    d6c0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
    d6c2:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    d6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ca:	2200      	movs	r2, #0
    d6cc:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    d6ce:	f64b 0344 	movw	r3, #47172	; 0xb844
    d6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d6:	f04f 0200 	mov.w	r2, #0
    d6da:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
    d6dc:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    d6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e4:	2202      	movs	r2, #2
    d6e6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
    d6e8:	f64b 0308 	movw	r3, #47112	; 0xb808
    d6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    d6f4:	601a      	str	r2, [r3, #0]
        }
        return;
    d6f6:	f001 bfa1 	b.w	f63c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
    d6fa:	f64b 0318 	movw	r3, #47128	; 0xb818
    d6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d702:	781b      	ldrb	r3, [r3, #0]
    d704:	2b04      	cmp	r3, #4
    d706:	f041 8799 	bne.w	f63c <auto_nav+0x21a4>
        NextBlock()
    d70a:	f64b 0319 	movw	r3, #47129	; 0xb819
    d70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d712:	781b      	ldrb	r3, [r3, #0]
    d714:	3301      	adds	r3, #1
    d716:	b2da      	uxtb	r2, r3
    d718:	f64b 0319 	movw	r3, #47129	; 0xb819
    d71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d720:	701a      	strb	r2, [r3, #0]
    d722:	f64b 0318 	movw	r3, #47128	; 0xb818
    d726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72a:	2200      	movs	r2, #0
    d72c:	701a      	strb	r2, [r3, #0]
    d72e:	f64b 032e 	movw	r3, #47150	; 0xb82e
    d732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d736:	2200      	movs	r2, #0
    d738:	801a      	strh	r2, [r3, #0]
    d73a:	f64b 2374 	movw	r3, #47732	; 0xba74
    d73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d742:	681a      	ldr	r2, [r3, #0]
    d744:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74c:	601a      	str	r2, [r3, #0]
    d74e:	f64b 2378 	movw	r3, #47736	; 0xba78
    d752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d756:	681a      	ldr	r2, [r3, #0]
    d758:	f64b 0320 	movw	r3, #47136	; 0xb820
    d75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d760:	601a      	str	r2, [r3, #0]
    d762:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d76a:	2200      	movs	r2, #0
    d76c:	801a      	strh	r2, [r3, #0]
    d76e:	f64b 0330 	movw	r3, #47152	; 0xb830
    d772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d776:	f04f 0200 	mov.w	r2, #0
    d77a:	601a      	str	r2, [r3, #0]
    d77c:	f001 bf5e 	b.w	f63c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
    d780:	f64b 0319 	movw	r3, #47129	; 0xb819
    d784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d788:	781b      	ldrb	r3, [r3, #0]
    d78a:	2b01      	cmp	r3, #1
    d78c:	f040 81bc 	bne.w	db08 <auto_nav+0x670>
{
    nav_block = 1;
    d790:	f64b 0319 	movw	r3, #47129	; 0xb819
    d794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d798:	2201      	movs	r2, #1
    d79a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
    d79c:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    d7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d007      	beq.n	d7ba <auto_nav+0x322>
    d7aa:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    d7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b2:	2200      	movs	r2, #0
    d7b4:	701a      	strb	r2, [r3, #0]
    d7b6:	2301      	movs	r3, #1
    d7b8:	e000      	b.n	d7bc <auto_nav+0x324>
    d7ba:	2300      	movs	r3, #0
    d7bc:	2b00      	cmp	r3, #0
    d7be:	d034      	beq.n	d82a <auto_nav+0x392>
	{ GotoBlock(2) }
    d7c0:	f64b 0319 	movw	r3, #47129	; 0xb819
    d7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c8:	2202      	movs	r2, #2
    d7ca:	701a      	strb	r2, [r3, #0]
    d7cc:	f64b 0318 	movw	r3, #47128	; 0xb818
    d7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d4:	2200      	movs	r2, #0
    d7d6:	701a      	strb	r2, [r3, #0]
    d7d8:	f64b 032e 	movw	r3, #47150	; 0xb82e
    d7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e0:	2200      	movs	r2, #0
    d7e2:	801a      	strh	r2, [r3, #0]
    d7e4:	f64b 2374 	movw	r3, #47732	; 0xba74
    d7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ec:	681a      	ldr	r2, [r3, #0]
    d7ee:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f6:	601a      	str	r2, [r3, #0]
    d7f8:	f64b 2378 	movw	r3, #47736	; 0xba78
    d7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d800:	681a      	ldr	r2, [r3, #0]
    d802:	f64b 0320 	movw	r3, #47136	; 0xb820
    d806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80a:	601a      	str	r2, [r3, #0]
    d80c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d814:	2200      	movs	r2, #0
    d816:	801a      	strh	r2, [r3, #0]
    d818:	f64b 0330 	movw	r3, #47152	; 0xb830
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	f04f 0200 	mov.w	r2, #0
    d824:	601a      	str	r2, [r3, #0]
    d826:	f001 bf09 	b.w	f63c <auto_nav+0x21a4>
    if(nav_stage == 0)
    d82a:	f64b 0318 	movw	r3, #47128	; 0xb818
    d82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d832:	781b      	ldrb	r3, [r3, #0]
    d834:	2b00      	cmp	r3, #0
    d836:	d12e      	bne.n	d896 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
    d838:	f64b 0318 	movw	r3, #47128	; 0xb818
    d83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d840:	781b      	ldrb	r3, [r3, #0]
    d842:	3301      	adds	r3, #1
    d844:	b2da      	uxtb	r2, r3
    d846:	f64b 0318 	movw	r3, #47128	; 0xb818
    d84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84e:	701a      	strb	r2, [r3, #0]
    d850:	f64b 2374 	movw	r3, #47732	; 0xba74
    d854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d858:	681a      	ldr	r2, [r3, #0]
    d85a:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d862:	601a      	str	r2, [r3, #0]
    d864:	f64b 2378 	movw	r3, #47736	; 0xba78
    d868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86c:	681a      	ldr	r2, [r3, #0]
    d86e:	f64b 0320 	movw	r3, #47136	; 0xb820
    d872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d876:	601a      	str	r2, [r3, #0]
    d878:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d880:	2200      	movs	r2, #0
    d882:	801a      	strh	r2, [r3, #0]
    d884:	f64b 0330 	movw	r3, #47152	; 0xb830
    d888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88c:	f04f 0200 	mov.w	r2, #0
    d890:	601a      	str	r2, [r3, #0]
    d892:	f001 bed3 	b.w	f63c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    d896:	f64b 0318 	movw	r3, #47128	; 0xb818
    d89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	2b01      	cmp	r3, #1
    d8a2:	d169      	bne.n	d978 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
    d8a4:	f64b 0318 	movw	r3, #47128	; 0xb818
    d8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ac:	2201      	movs	r2, #1
    d8ae:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
    d8b0:	2001      	movs	r0, #1
    d8b2:	f001 fed1 	bl	f658 <approaching>
    d8b6:	4603      	mov	r3, r0
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d034      	beq.n	d926 <auto_nav+0x48e>
    d8bc:	f64b 0324 	movw	r3, #47140	; 0xb824
    d8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c4:	2201      	movs	r2, #1
    d8c6:	701a      	strb	r2, [r3, #0]
    d8c8:	f64b 0318 	movw	r3, #47128	; 0xb818
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	781b      	ldrb	r3, [r3, #0]
    d8d2:	3301      	adds	r3, #1
    d8d4:	b2da      	uxtb	r2, r3
    d8d6:	f64b 0318 	movw	r3, #47128	; 0xb818
    d8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8de:	701a      	strb	r2, [r3, #0]
    d8e0:	f64b 2374 	movw	r3, #47732	; 0xba74
    d8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e8:	681a      	ldr	r2, [r3, #0]
    d8ea:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f2:	601a      	str	r2, [r3, #0]
    d8f4:	f64b 2378 	movw	r3, #47736	; 0xba78
    d8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fc:	681a      	ldr	r2, [r3, #0]
    d8fe:	f64b 0320 	movw	r3, #47136	; 0xb820
    d902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d906:	601a      	str	r2, [r3, #0]
    d908:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d910:	2200      	movs	r2, #0
    d912:	801a      	strh	r2, [r3, #0]
    d914:	f64b 0330 	movw	r3, #47152	; 0xb830
    d918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91c:	f04f 0200 	mov.w	r2, #0
    d920:	601a      	str	r2, [r3, #0]
    d922:	f001 be8b 	b.w	f63c <auto_nav+0x21a4>
            fly_to(1);
    d926:	2001      	movs	r0, #1
    d928:	f001 ffca 	bl	f8c0 <fly_to>
            auto_pitch = FALSE;
    d92c:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    d930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d934:	2200      	movs	r2, #0
    d936:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    d938:	f64b 0344 	movw	r3, #47172	; 0xb844
    d93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d940:	f04f 0200 	mov.w	r2, #0
    d944:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    d946:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	2203      	movs	r2, #3
    d950:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    d952:	f240 1340 	movw	r3, #320	; 0x140
    d956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d95a:	695a      	ldr	r2, [r3, #20]
    d95c:	f240 133c 	movw	r3, #316	; 0x13c
    d960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d964:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    d966:	f64b 030c 	movw	r3, #47116	; 0xb80c
    d96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96e:	f04f 0200 	mov.w	r2, #0
    d972:	601a      	str	r2, [r3, #0]
          }
          return;
    d974:	f001 be62 	b.w	f63c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    d978:	f64b 0318 	movw	r3, #47128	; 0xb818
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	781b      	ldrb	r3, [r3, #0]
    d982:	2b02      	cmp	r3, #2
    d984:	d169      	bne.n	da5a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
    d986:	f64b 0318 	movw	r3, #47128	; 0xb818
    d98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98e:	2202      	movs	r2, #2
    d990:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    d992:	2004      	movs	r0, #4
    d994:	f001 fe60 	bl	f658 <approaching>
    d998:	4603      	mov	r3, r0
    d99a:	2b00      	cmp	r3, #0
    d99c:	d034      	beq.n	da08 <auto_nav+0x570>
    d99e:	f64b 0324 	movw	r3, #47140	; 0xb824
    d9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a6:	2204      	movs	r2, #4
    d9a8:	701a      	strb	r2, [r3, #0]
    d9aa:	f64b 0318 	movw	r3, #47128	; 0xb818
    d9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b2:	781b      	ldrb	r3, [r3, #0]
    d9b4:	3301      	adds	r3, #1
    d9b6:	b2da      	uxtb	r2, r3
    d9b8:	f64b 0318 	movw	r3, #47128	; 0xb818
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	701a      	strb	r2, [r3, #0]
    d9c2:	f64b 2374 	movw	r3, #47732	; 0xba74
    d9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ca:	681a      	ldr	r2, [r3, #0]
    d9cc:	f64b 031c 	movw	r3, #47132	; 0xb81c
    d9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d4:	601a      	str	r2, [r3, #0]
    d9d6:	f64b 2378 	movw	r3, #47736	; 0xba78
    d9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9de:	681a      	ldr	r2, [r3, #0]
    d9e0:	f64b 0320 	movw	r3, #47136	; 0xb820
    d9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e8:	601a      	str	r2, [r3, #0]
    d9ea:	f64b 032c 	movw	r3, #47148	; 0xb82c
    d9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f2:	2200      	movs	r2, #0
    d9f4:	801a      	strh	r2, [r3, #0]
    d9f6:	f64b 0330 	movw	r3, #47152	; 0xb830
    d9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fe:	f04f 0200 	mov.w	r2, #0
    da02:	601a      	str	r2, [r3, #0]
    da04:	f001 be1a 	b.w	f63c <auto_nav+0x21a4>
            fly_to(4);
    da08:	2004      	movs	r0, #4
    da0a:	f001 ff59 	bl	f8c0 <fly_to>
            auto_pitch = FALSE;
    da0e:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    da12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da16:	2200      	movs	r2, #0
    da18:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    da1a:	f64b 0344 	movw	r3, #47172	; 0xb844
    da1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da22:	f04f 0200 	mov.w	r2, #0
    da26:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    da28:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    da2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da30:	2203      	movs	r2, #3
    da32:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    da34:	f240 1340 	movw	r3, #320	; 0x140
    da38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    da3e:	f240 133c 	movw	r3, #316	; 0x13c
    da42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da46:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    da48:	f64b 030c 	movw	r3, #47116	; 0xb80c
    da4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da50:	f04f 0200 	mov.w	r2, #0
    da54:	601a      	str	r2, [r3, #0]
          }
          return;
    da56:	f001 bdf1 	b.w	f63c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    da5a:	f64b 0318 	movw	r3, #47128	; 0xb818
    da5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da62:	781b      	ldrb	r3, [r3, #0]
    da64:	2b03      	cmp	r3, #3
    da66:	d106      	bne.n	da76 <auto_nav+0x5de>
      {
	  nav_stage = 3;
    da68:	f64b 0318 	movw	r3, #47128	; 0xb818
    da6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da70:	2203      	movs	r2, #3
    da72:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
    da74:	e6e0      	b.n	d838 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
    da76:	f64b 0318 	movw	r3, #47128	; 0xb818
    da7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7e:	781b      	ldrb	r3, [r3, #0]
    da80:	2b04      	cmp	r3, #4
    da82:	f041 85db 	bne.w	f63c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
    da86:	f64b 0318 	movw	r3, #47128	; 0xb818
    da8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8e:	2204      	movs	r2, #4
    da90:	701a      	strb	r2, [r3, #0]
        NextBlock()
    da92:	f64b 0319 	movw	r3, #47129	; 0xb819
    da96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9a:	781b      	ldrb	r3, [r3, #0]
    da9c:	3301      	adds	r3, #1
    da9e:	b2da      	uxtb	r2, r3
    daa0:	f64b 0319 	movw	r3, #47129	; 0xb819
    daa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa8:	701a      	strb	r2, [r3, #0]
    daaa:	f64b 0318 	movw	r3, #47128	; 0xb818
    daae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab2:	2200      	movs	r2, #0
    dab4:	701a      	strb	r2, [r3, #0]
    dab6:	f64b 032e 	movw	r3, #47150	; 0xb82e
    daba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabe:	2200      	movs	r2, #0
    dac0:	801a      	strh	r2, [r3, #0]
    dac2:	f64b 2374 	movw	r3, #47732	; 0xba74
    dac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daca:	681a      	ldr	r2, [r3, #0]
    dacc:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad4:	601a      	str	r2, [r3, #0]
    dad6:	f64b 2378 	movw	r3, #47736	; 0xba78
    dada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dade:	681a      	ldr	r2, [r3, #0]
    dae0:	f64b 0320 	movw	r3, #47136	; 0xb820
    dae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae8:	601a      	str	r2, [r3, #0]
    daea:	f64b 032c 	movw	r3, #47148	; 0xb82c
    daee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf2:	2200      	movs	r2, #0
    daf4:	801a      	strh	r2, [r3, #0]
    daf6:	f64b 0330 	movw	r3, #47152	; 0xb830
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	f04f 0200 	mov.w	r2, #0
    db02:	601a      	str	r2, [r3, #0]
    db04:	f001 bd9a 	b.w	f63c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
    db08:	f64b 0319 	movw	r3, #47129	; 0xb819
    db0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db10:	781b      	ldrb	r3, [r3, #0]
    db12:	2b02      	cmp	r3, #2
    db14:	f040 8392 	bne.w	e23c <auto_nav+0xda4>
{
	nav_block = 2;
    db18:	f64b 0319 	movw	r3, #47129	; 0xb819
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	2202      	movs	r2, #2
    db22:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
    db24:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    db28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2c:	781b      	ldrb	r3, [r3, #0]
    db2e:	2b00      	cmp	r3, #0
    db30:	d007      	beq.n	db42 <auto_nav+0x6aa>
    db32:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    db36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3a:	2200      	movs	r2, #0
    db3c:	701a      	strb	r2, [r3, #0]
    db3e:	2301      	movs	r3, #1
    db40:	e000      	b.n	db44 <auto_nav+0x6ac>
    db42:	2300      	movs	r3, #0
    db44:	2b00      	cmp	r3, #0
    db46:	d034      	beq.n	dbb2 <auto_nav+0x71a>
    db48:	f64b 0319 	movw	r3, #47129	; 0xb819
    db4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db50:	2203      	movs	r2, #3
    db52:	701a      	strb	r2, [r3, #0]
    db54:	f64b 0318 	movw	r3, #47128	; 0xb818
    db58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5c:	2200      	movs	r2, #0
    db5e:	701a      	strb	r2, [r3, #0]
    db60:	f64b 032e 	movw	r3, #47150	; 0xb82e
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	2200      	movs	r2, #0
    db6a:	801a      	strh	r2, [r3, #0]
    db6c:	f64b 2374 	movw	r3, #47732	; 0xba74
    db70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db74:	681a      	ldr	r2, [r3, #0]
    db76:	f64b 031c 	movw	r3, #47132	; 0xb81c
    db7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7e:	601a      	str	r2, [r3, #0]
    db80:	f64b 2378 	movw	r3, #47736	; 0xba78
    db84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db88:	681a      	ldr	r2, [r3, #0]
    db8a:	f64b 0320 	movw	r3, #47136	; 0xb820
    db8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db92:	601a      	str	r2, [r3, #0]
    db94:	f64b 032c 	movw	r3, #47148	; 0xb82c
    db98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9c:	2200      	movs	r2, #0
    db9e:	801a      	strh	r2, [r3, #0]
    dba0:	f64b 0330 	movw	r3, #47152	; 0xb830
    dba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba8:	f04f 0200 	mov.w	r2, #0
    dbac:	601a      	str	r2, [r3, #0]
    dbae:	f001 bd45 	b.w	f63c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
    dbb2:	f64b 0318 	movw	r3, #47128	; 0xb818
    dbb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbba:	781b      	ldrb	r3, [r3, #0]
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d134      	bne.n	dc2a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
    dbc0:	f64b 0318 	movw	r3, #47128	; 0xb818
    dbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc8:	2200      	movs	r2, #0
    dbca:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
    dbcc:	f64b 0318 	movw	r3, #47128	; 0xb818
    dbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	3301      	adds	r3, #1
    dbd8:	b2da      	uxtb	r2, r3
    dbda:	f64b 0318 	movw	r3, #47128	; 0xb818
    dbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe2:	701a      	strb	r2, [r3, #0]
    dbe4:	f64b 2374 	movw	r3, #47732	; 0xba74
    dbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbec:	681a      	ldr	r2, [r3, #0]
    dbee:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	601a      	str	r2, [r3, #0]
    dbf8:	f64b 2378 	movw	r3, #47736	; 0xba78
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	681a      	ldr	r2, [r3, #0]
    dc02:	f64b 0320 	movw	r3, #47136	; 0xb820
    dc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0a:	601a      	str	r2, [r3, #0]
    dc0c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    dc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc14:	2200      	movs	r2, #0
    dc16:	801a      	strh	r2, [r3, #0]
    dc18:	f64b 0330 	movw	r3, #47152	; 0xb830
    dc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc20:	f04f 0200 	mov.w	r2, #0
    dc24:	601a      	str	r2, [r3, #0]
    dc26:	f001 bd09 	b.w	f63c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
    dc2a:	f64b 0318 	movw	r3, #47128	; 0xb818
    dc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc32:	781b      	ldrb	r3, [r3, #0]
    dc34:	2b01      	cmp	r3, #1
    dc36:	d169      	bne.n	dd0c <auto_nav+0x874>
    {
         nav_stage =1;
    dc38:	f64b 0318 	movw	r3, #47128	; 0xb818
    dc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc40:	2201      	movs	r2, #1
    dc42:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
    dc44:	2006      	movs	r0, #6
    dc46:	f001 fd07 	bl	f658 <approaching>
    dc4a:	4603      	mov	r3, r0
    dc4c:	2b00      	cmp	r3, #0
    dc4e:	d034      	beq.n	dcba <auto_nav+0x822>
    dc50:	f64b 0324 	movw	r3, #47140	; 0xb824
    dc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc58:	2206      	movs	r2, #6
    dc5a:	701a      	strb	r2, [r3, #0]
    dc5c:	f64b 0318 	movw	r3, #47128	; 0xb818
    dc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc64:	781b      	ldrb	r3, [r3, #0]
    dc66:	3301      	adds	r3, #1
    dc68:	b2da      	uxtb	r2, r3
    dc6a:	f64b 0318 	movw	r3, #47128	; 0xb818
    dc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc72:	701a      	strb	r2, [r3, #0]
    dc74:	f64b 2374 	movw	r3, #47732	; 0xba74
    dc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7c:	681a      	ldr	r2, [r3, #0]
    dc7e:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc86:	601a      	str	r2, [r3, #0]
    dc88:	f64b 2378 	movw	r3, #47736	; 0xba78
    dc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc90:	681a      	ldr	r2, [r3, #0]
    dc92:	f64b 0320 	movw	r3, #47136	; 0xb820
    dc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9a:	601a      	str	r2, [r3, #0]
    dc9c:	f64b 032c 	movw	r3, #47148	; 0xb82c
    dca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca4:	2200      	movs	r2, #0
    dca6:	801a      	strh	r2, [r3, #0]
    dca8:	f64b 0330 	movw	r3, #47152	; 0xb830
    dcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb0:	f04f 0200 	mov.w	r2, #0
    dcb4:	601a      	str	r2, [r3, #0]
    dcb6:	f001 bcc1 	b.w	f63c <auto_nav+0x21a4>
            fly_to(6);
    dcba:	2006      	movs	r0, #6
    dcbc:	f001 fe00 	bl	f8c0 <fly_to>
            auto_pitch = FALSE;
    dcc0:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    dcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc8:	2200      	movs	r2, #0
    dcca:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    dccc:	f64b 0344 	movw	r3, #47172	; 0xb844
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	f04f 0200 	mov.w	r2, #0
    dcd8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    dcda:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    dcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce2:	2203      	movs	r2, #3
    dce4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
    dce6:	f240 1340 	movw	r3, #320	; 0x140
    dcea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    dcf0:	f240 133c 	movw	r3, #316	; 0x13c
    dcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dcfa:	f64b 030c 	movw	r3, #47116	; 0xb80c
    dcfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd02:	f04f 0200 	mov.w	r2, #0
    dd06:	601a      	str	r2, [r3, #0]
          }
          return;
    dd08:	f001 bc98 	b.w	f63c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
    dd0c:	f64b 0318 	movw	r3, #47128	; 0xb818
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	781b      	ldrb	r3, [r3, #0]
    dd16:	2b02      	cmp	r3, #2
    dd18:	d169      	bne.n	ddee <auto_nav+0x956>
     {
         nav_stage =2; 
    dd1a:	f64b 0318 	movw	r3, #47128	; 0xb818
    dd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd22:	2202      	movs	r2, #2
    dd24:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
    dd26:	2001      	movs	r0, #1
    dd28:	f001 fc96 	bl	f658 <approaching>
    dd2c:	4603      	mov	r3, r0
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d034      	beq.n	dd9c <auto_nav+0x904>
    dd32:	f64b 0324 	movw	r3, #47140	; 0xb824
    dd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3a:	2201      	movs	r2, #1
    dd3c:	701a      	strb	r2, [r3, #0]
    dd3e:	f64b 0318 	movw	r3, #47128	; 0xb818
    dd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd46:	781b      	ldrb	r3, [r3, #0]
    dd48:	3301      	adds	r3, #1
    dd4a:	b2da      	uxtb	r2, r3
    dd4c:	f64b 0318 	movw	r3, #47128	; 0xb818
    dd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd54:	701a      	strb	r2, [r3, #0]
    dd56:	f64b 2374 	movw	r3, #47732	; 0xba74
    dd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5e:	681a      	ldr	r2, [r3, #0]
    dd60:	f64b 031c 	movw	r3, #47132	; 0xb81c
    dd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd68:	601a      	str	r2, [r3, #0]
    dd6a:	f64b 2378 	movw	r3, #47736	; 0xba78
    dd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd72:	681a      	ldr	r2, [r3, #0]
    dd74:	f64b 0320 	movw	r3, #47136	; 0xb820
    dd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7c:	601a      	str	r2, [r3, #0]
    dd7e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    dd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd86:	2200      	movs	r2, #0
    dd88:	801a      	strh	r2, [r3, #0]
    dd8a:	f64b 0330 	movw	r3, #47152	; 0xb830
    dd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd92:	f04f 0200 	mov.w	r2, #0
    dd96:	601a      	str	r2, [r3, #0]
    dd98:	f001 bc50 	b.w	f63c <auto_nav+0x21a4>
            fly_to(1);
    dd9c:	2001      	movs	r0, #1
    dd9e:	f001 fd8f 	bl	f8c0 <fly_to>
            auto_pitch = FALSE;
    dda2:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    dda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddaa:	2200      	movs	r2, #0
    ddac:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    ddae:	f64b 0344 	movw	r3, #47172	; 0xb844
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	f04f 0200 	mov.w	r2, #0
    ddba:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ddbc:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	2203      	movs	r2, #3
    ddc6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
    ddc8:	f240 1340 	movw	r3, #320	; 0x140
    ddcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd0:	695a      	ldr	r2, [r3, #20]
    ddd2:	f240 133c 	movw	r3, #316	; 0x13c
    ddd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddda:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dddc:	f64b 030c 	movw	r3, #47116	; 0xb80c
    dde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde4:	f04f 0200 	mov.w	r2, #0
    dde8:	601a      	str	r2, [r3, #0]
          }
          return;
    ddea:	f001 bc27 	b.w	f63c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
    ddee:	f64b 0318 	movw	r3, #47128	; 0xb818
    ddf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf6:	781b      	ldrb	r3, [r3, #0]
    ddf8:	2b03      	cmp	r3, #3
    ddfa:	d16f      	bne.n	dedc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
    ddfc:	f64b 0318 	movw	r3, #47128	; 0xb818
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	2203      	movs	r2, #3
    de06:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
    de08:	2002      	movs	r0, #2
    de0a:	f001 fc25 	bl	f658 <approaching>
    de0e:	4603      	mov	r3, r0
    de10:	2b00      	cmp	r3, #0
    de12:	d034      	beq.n	de7e <auto_nav+0x9e6>
    de14:	f64b 0324 	movw	r3, #47140	; 0xb824
    de18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1c:	2202      	movs	r2, #2
    de1e:	701a      	strb	r2, [r3, #0]
    de20:	f64b 0318 	movw	r3, #47128	; 0xb818
    de24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de28:	781b      	ldrb	r3, [r3, #0]
    de2a:	3301      	adds	r3, #1
    de2c:	b2da      	uxtb	r2, r3
    de2e:	f64b 0318 	movw	r3, #47128	; 0xb818
    de32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de36:	701a      	strb	r2, [r3, #0]
    de38:	f64b 2374 	movw	r3, #47732	; 0xba74
    de3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de40:	681a      	ldr	r2, [r3, #0]
    de42:	f64b 031c 	movw	r3, #47132	; 0xb81c
    de46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4a:	601a      	str	r2, [r3, #0]
    de4c:	f64b 2378 	movw	r3, #47736	; 0xba78
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	681a      	ldr	r2, [r3, #0]
    de56:	f64b 0320 	movw	r3, #47136	; 0xb820
    de5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5e:	601a      	str	r2, [r3, #0]
    de60:	f64b 032c 	movw	r3, #47148	; 0xb82c
    de64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de68:	2200      	movs	r2, #0
    de6a:	801a      	strh	r2, [r3, #0]
    de6c:	f64b 0330 	movw	r3, #47152	; 0xb830
    de70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de74:	f04f 0200 	mov.w	r2, #0
    de78:	601a      	str	r2, [r3, #0]
    de7a:	f001 bbdf 	b.w	f63c <auto_nav+0x21a4>
            route_to(last_wp, 2);
    de7e:	f64b 0324 	movw	r3, #47140	; 0xb824
    de82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	4618      	mov	r0, r3
    de8a:	2102      	movs	r1, #2
    de8c:	f001 fd3a 	bl	f904 <route_to>
            auto_pitch = FALSE;
    de90:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    de94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de98:	2200      	movs	r2, #0
    de9a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    de9c:	f64b 0344 	movw	r3, #47172	; 0xb844
    dea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea4:	f04f 0200 	mov.w	r2, #0
    dea8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    deaa:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    deae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb2:	2203      	movs	r2, #3
    deb4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
    deb6:	f240 1340 	movw	r3, #320	; 0x140
    deba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    debe:	6a1a      	ldr	r2, [r3, #32]
    dec0:	f240 133c 	movw	r3, #316	; 0x13c
    dec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    deca:	f64b 030c 	movw	r3, #47116	; 0xb80c
    dece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded2:	f04f 0200 	mov.w	r2, #0
    ded6:	601a      	str	r2, [r3, #0]
          }
          return;
    ded8:	f001 bbb0 	b.w	f63c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
    dedc:	f64b 0318 	movw	r3, #47128	; 0xb818
    dee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee4:	781b      	ldrb	r3, [r3, #0]
    dee6:	2b04      	cmp	r3, #4
    dee8:	d169      	bne.n	dfbe <auto_nav+0xb26>
       {
          nav_stage = 4;
    deea:	f64b 0318 	movw	r3, #47128	; 0xb818
    deee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def2:	2204      	movs	r2, #4
    def4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
    def6:	2003      	movs	r0, #3
    def8:	f001 fbae 	bl	f658 <approaching>
    defc:	4603      	mov	r3, r0
    defe:	2b00      	cmp	r3, #0
    df00:	d034      	beq.n	df6c <auto_nav+0xad4>
    df02:	f64b 0324 	movw	r3, #47140	; 0xb824
    df06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0a:	2203      	movs	r2, #3
    df0c:	701a      	strb	r2, [r3, #0]
    df0e:	f64b 0318 	movw	r3, #47128	; 0xb818
    df12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	3301      	adds	r3, #1
    df1a:	b2da      	uxtb	r2, r3
    df1c:	f64b 0318 	movw	r3, #47128	; 0xb818
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	701a      	strb	r2, [r3, #0]
    df26:	f64b 2374 	movw	r3, #47732	; 0xba74
    df2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2e:	681a      	ldr	r2, [r3, #0]
    df30:	f64b 031c 	movw	r3, #47132	; 0xb81c
    df34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df38:	601a      	str	r2, [r3, #0]
    df3a:	f64b 2378 	movw	r3, #47736	; 0xba78
    df3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df42:	681a      	ldr	r2, [r3, #0]
    df44:	f64b 0320 	movw	r3, #47136	; 0xb820
    df48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4c:	601a      	str	r2, [r3, #0]
    df4e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    df52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df56:	2200      	movs	r2, #0
    df58:	801a      	strh	r2, [r3, #0]
    df5a:	f64b 0330 	movw	r3, #47152	; 0xb830
    df5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df62:	f04f 0200 	mov.w	r2, #0
    df66:	601a      	str	r2, [r3, #0]
    df68:	f001 bb68 	b.w	f63c <auto_nav+0x21a4>
            fly_to(3);
    df6c:	2003      	movs	r0, #3
    df6e:	f001 fca7 	bl	f8c0 <fly_to>
            auto_pitch = FALSE;
    df72:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    df76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7a:	2200      	movs	r2, #0
    df7c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    df7e:	f64b 0344 	movw	r3, #47172	; 0xb844
    df82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df86:	f04f 0200 	mov.w	r2, #0
    df8a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    df8c:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	2203      	movs	r2, #3
    df96:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
    df98:	f240 1340 	movw	r3, #320	; 0x140
    df9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dfa2:	f240 133c 	movw	r3, #316	; 0x13c
    dfa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfaa:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    dfac:	f64b 030c 	movw	r3, #47116	; 0xb80c
    dfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb4:	f04f 0200 	mov.w	r2, #0
    dfb8:	601a      	str	r2, [r3, #0]
          }
          return;
    dfba:	f001 bb3f 	b.w	f63c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
    dfbe:	f64b 0318 	movw	r3, #47128	; 0xb818
    dfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	2b05      	cmp	r3, #5
    dfca:	d169      	bne.n	e0a0 <auto_nav+0xc08>
       {
          nav_stage =5;
    dfcc:	f64b 0318 	movw	r3, #47128	; 0xb818
    dfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd4:	2205      	movs	r2, #5
    dfd6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
    dfd8:	2004      	movs	r0, #4
    dfda:	f001 fb3d 	bl	f658 <approaching>
    dfde:	4603      	mov	r3, r0
    dfe0:	2b00      	cmp	r3, #0
    dfe2:	d034      	beq.n	e04e <auto_nav+0xbb6>
    dfe4:	f64b 0324 	movw	r3, #47140	; 0xb824
    dfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfec:	2204      	movs	r2, #4
    dfee:	701a      	strb	r2, [r3, #0]
    dff0:	f64b 0318 	movw	r3, #47128	; 0xb818
    dff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff8:	781b      	ldrb	r3, [r3, #0]
    dffa:	3301      	adds	r3, #1
    dffc:	b2da      	uxtb	r2, r3
    dffe:	f64b 0318 	movw	r3, #47128	; 0xb818
    e002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e006:	701a      	strb	r2, [r3, #0]
    e008:	f64b 2374 	movw	r3, #47732	; 0xba74
    e00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e010:	681a      	ldr	r2, [r3, #0]
    e012:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01a:	601a      	str	r2, [r3, #0]
    e01c:	f64b 2378 	movw	r3, #47736	; 0xba78
    e020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e024:	681a      	ldr	r2, [r3, #0]
    e026:	f64b 0320 	movw	r3, #47136	; 0xb820
    e02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02e:	601a      	str	r2, [r3, #0]
    e030:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e038:	2200      	movs	r2, #0
    e03a:	801a      	strh	r2, [r3, #0]
    e03c:	f64b 0330 	movw	r3, #47152	; 0xb830
    e040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e044:	f04f 0200 	mov.w	r2, #0
    e048:	601a      	str	r2, [r3, #0]
    e04a:	f001 baf7 	b.w	f63c <auto_nav+0x21a4>
            fly_to(4);
    e04e:	2004      	movs	r0, #4
    e050:	f001 fc36 	bl	f8c0 <fly_to>
            auto_pitch = FALSE;
    e054:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    e058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05c:	2200      	movs	r2, #0
    e05e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e060:	f64b 0344 	movw	r3, #47172	; 0xb844
    e064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e068:	f04f 0200 	mov.w	r2, #0
    e06c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e06e:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    e072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e076:	2203      	movs	r2, #3
    e078:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
    e07a:	f240 1340 	movw	r3, #320	; 0x140
    e07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e084:	f240 133c 	movw	r3, #316	; 0x13c
    e088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e08c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e08e:	f64b 030c 	movw	r3, #47116	; 0xb80c
    e092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e096:	f04f 0200 	mov.w	r2, #0
    e09a:	601a      	str	r2, [r3, #0]
          }
          return;
    e09c:	f001 bace 	b.w	f63c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
    e0a0:	f64b 0318 	movw	r3, #47128	; 0xb818
    e0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a8:	781b      	ldrb	r3, [r3, #0]
    e0aa:	2b06      	cmp	r3, #6
    e0ac:	d16f      	bne.n	e18e <auto_nav+0xcf6>
       {
          nav_stage =6;
    e0ae:	f64b 0318 	movw	r3, #47128	; 0xb818
    e0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b6:	2206      	movs	r2, #6
    e0b8:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
    e0ba:	2005      	movs	r0, #5
    e0bc:	f001 facc 	bl	f658 <approaching>
    e0c0:	4603      	mov	r3, r0
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d034      	beq.n	e130 <auto_nav+0xc98>
    e0c6:	f64b 0324 	movw	r3, #47140	; 0xb824
    e0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ce:	2205      	movs	r2, #5
    e0d0:	701a      	strb	r2, [r3, #0]
    e0d2:	f64b 0318 	movw	r3, #47128	; 0xb818
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	3301      	adds	r3, #1
    e0de:	b2da      	uxtb	r2, r3
    e0e0:	f64b 0318 	movw	r3, #47128	; 0xb818
    e0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e8:	701a      	strb	r2, [r3, #0]
    e0ea:	f64b 2374 	movw	r3, #47732	; 0xba74
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	681a      	ldr	r2, [r3, #0]
    e0f4:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fc:	601a      	str	r2, [r3, #0]
    e0fe:	f64b 2378 	movw	r3, #47736	; 0xba78
    e102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e106:	681a      	ldr	r2, [r3, #0]
    e108:	f64b 0320 	movw	r3, #47136	; 0xb820
    e10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e110:	601a      	str	r2, [r3, #0]
    e112:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11a:	2200      	movs	r2, #0
    e11c:	801a      	strh	r2, [r3, #0]
    e11e:	f64b 0330 	movw	r3, #47152	; 0xb830
    e122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e126:	f04f 0200 	mov.w	r2, #0
    e12a:	601a      	str	r2, [r3, #0]
    e12c:	f001 ba86 	b.w	f63c <auto_nav+0x21a4>
            route_to(last_wp, 5);
    e130:	f64b 0324 	movw	r3, #47140	; 0xb824
    e134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e138:	781b      	ldrb	r3, [r3, #0]
    e13a:	4618      	mov	r0, r3
    e13c:	2105      	movs	r1, #5
    e13e:	f001 fbe1 	bl	f904 <route_to>
            auto_pitch = FALSE;
    e142:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    e146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14a:	2200      	movs	r2, #0
    e14c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
    e14e:	f64b 0344 	movw	r3, #47172	; 0xb844
    e152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e156:	f04f 0200 	mov.w	r2, #0
    e15a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
    e15c:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    e160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e164:	2203      	movs	r2, #3
    e166:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
    e168:	f240 1340 	movw	r3, #320	; 0x140
    e16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e172:	f240 133c 	movw	r3, #316	; 0x13c
    e176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
    e17c:	f64b 030c 	movw	r3, #47116	; 0xb80c
    e180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e184:	f04f 0200 	mov.w	r2, #0
    e188:	601a      	str	r2, [r3, #0]
          }
          return;
    e18a:	f001 ba57 	b.w	f63c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
    e18e:	f64b 0318 	movw	r3, #47128	; 0xb818
    e192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e196:	781b      	ldrb	r3, [r3, #0]
    e198:	2b07      	cmp	r3, #7
    e19a:	d106      	bne.n	e1aa <auto_nav+0xd12>
       {
	   nav_stage =7;
    e19c:	f64b 0318 	movw	r3, #47128	; 0xb818
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	2207      	movs	r2, #7
    e1a6:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
    e1a8:	e50a      	b.n	dbc0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
    e1aa:	f64b 0318 	movw	r3, #47128	; 0xb818
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	781b      	ldrb	r3, [r3, #0]
    e1b4:	2b08      	cmp	r3, #8
    e1b6:	f041 8241 	bne.w	f63c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
    e1ba:	f64b 0318 	movw	r3, #47128	; 0xb818
    e1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c2:	2208      	movs	r2, #8
    e1c4:	701a      	strb	r2, [r3, #0]
          NextBlock();
    e1c6:	f64b 0319 	movw	r3, #47129	; 0xb819
    e1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ce:	781b      	ldrb	r3, [r3, #0]
    e1d0:	3301      	adds	r3, #1
    e1d2:	b2da      	uxtb	r2, r3
    e1d4:	f64b 0319 	movw	r3, #47129	; 0xb819
    e1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1dc:	701a      	strb	r2, [r3, #0]
    e1de:	f64b 0318 	movw	r3, #47128	; 0xb818
    e1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e6:	2200      	movs	r2, #0
    e1e8:	701a      	strb	r2, [r3, #0]
    e1ea:	f64b 032e 	movw	r3, #47150	; 0xb82e
    e1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f2:	2200      	movs	r2, #0
    e1f4:	801a      	strh	r2, [r3, #0]
    e1f6:	f64b 2374 	movw	r3, #47732	; 0xba74
    e1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fe:	681a      	ldr	r2, [r3, #0]
    e200:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e208:	601a      	str	r2, [r3, #0]
    e20a:	f64b 2378 	movw	r3, #47736	; 0xba78
    e20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e212:	681a      	ldr	r2, [r3, #0]
    e214:	f64b 0320 	movw	r3, #47136	; 0xb820
    e218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21c:	601a      	str	r2, [r3, #0]
    e21e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e226:	2200      	movs	r2, #0
    e228:	801a      	strh	r2, [r3, #0]
    e22a:	f64b 0330 	movw	r3, #47152	; 0xb830
    e22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e232:	f04f 0200 	mov.w	r2, #0
    e236:	601a      	str	r2, [r3, #0]
    e238:	f001 ba00 	b.w	f63c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
    e23c:	f64b 0319 	movw	r3, #47129	; 0xb819
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	781b      	ldrb	r3, [r3, #0]
    e246:	2b03      	cmp	r3, #3
    e248:	f040 8388 	bne.w	e95c <auto_nav+0x14c4>
{
    nav_block = 3;
    e24c:	f64b 0319 	movw	r3, #47129	; 0xb819
    e250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e254:	2203      	movs	r2, #3
    e256:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
    e258:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e260:	781b      	ldrb	r3, [r3, #0]
    e262:	2b00      	cmp	r3, #0
    e264:	d007      	beq.n	e276 <auto_nav+0xdde>
    e266:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26e:	2200      	movs	r2, #0
    e270:	701a      	strb	r2, [r3, #0]
    e272:	2301      	movs	r3, #1
    e274:	e000      	b.n	e278 <auto_nav+0xde0>
    e276:	2300      	movs	r3, #0
    e278:	2b00      	cmp	r3, #0
    e27a:	d034      	beq.n	e2e6 <auto_nav+0xe4e>
    e27c:	f64b 0319 	movw	r3, #47129	; 0xb819
    e280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e284:	2204      	movs	r2, #4
    e286:	701a      	strb	r2, [r3, #0]
    e288:	f64b 0318 	movw	r3, #47128	; 0xb818
    e28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e290:	2200      	movs	r2, #0
    e292:	701a      	strb	r2, [r3, #0]
    e294:	f64b 032e 	movw	r3, #47150	; 0xb82e
    e298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29c:	2200      	movs	r2, #0
    e29e:	801a      	strh	r2, [r3, #0]
    e2a0:	f64b 2374 	movw	r3, #47732	; 0xba74
    e2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a8:	681a      	ldr	r2, [r3, #0]
    e2aa:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b2:	601a      	str	r2, [r3, #0]
    e2b4:	f64b 2378 	movw	r3, #47736	; 0xba78
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	681a      	ldr	r2, [r3, #0]
    e2be:	f64b 0320 	movw	r3, #47136	; 0xb820
    e2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c6:	601a      	str	r2, [r3, #0]
    e2c8:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d0:	2200      	movs	r2, #0
    e2d2:	801a      	strh	r2, [r3, #0]
    e2d4:	f64b 0330 	movw	r3, #47152	; 0xb830
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	f04f 0200 	mov.w	r2, #0
    e2e0:	601a      	str	r2, [r3, #0]
    e2e2:	f001 b9ab 	b.w	f63c <auto_nav+0x21a4>
    if(nav_stage == 0)
    e2e6:	f64b 0318 	movw	r3, #47128	; 0xb818
    e2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ee:	781b      	ldrb	r3, [r3, #0]
    e2f0:	2b00      	cmp	r3, #0
    e2f2:	f040 82ea 	bne.w	e8ca <auto_nav+0x1432>
    {
        nav_stage = 0;
    e2f6:	f64b 0318 	movw	r3, #47128	; 0xb818
    e2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fe:	2200      	movs	r2, #0
    e300:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
    e302:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
    e306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30a:	781b      	ldrb	r3, [r3, #0]
    e30c:	2b02      	cmp	r3, #2
    e30e:	f040 81a5 	bne.w	e65c <auto_nav+0x11c4>
    e312:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    e316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31a:	88db      	ldrh	r3, [r3, #6]
    e31c:	84fb      	strh	r3, [r7, #38]	; 0x26
    e31e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e322:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e326:	dc04      	bgt.n	e332 <auto_nav+0xe9a>
    e328:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e32c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e330:	da7e      	bge.n	e430 <auto_nav+0xf98>
    e332:	f64b 0364 	movw	r3, #47204	; 0xb864
    e336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33a:	681b      	ldr	r3, [r3, #0]
    e33c:	4618      	mov	r0, r3
    e33e:	f004 fb4d 	bl	129dc <__aeabi_f2d>
    e342:	4604      	mov	r4, r0
    e344:	460d      	mov	r5, r1
    e346:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e34a:	4618      	mov	r0, r3
    e34c:	f004 ff86 	bl	1325c <__aeabi_i2f>
    e350:	4603      	mov	r3, r0
    e352:	4618      	mov	r0, r3
    e354:	f04f 0100 	mov.w	r1, #0
    e358:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e35c:	f005 f886 	bl	1346c <__aeabi_fdiv>
    e360:	4603      	mov	r3, r0
    e362:	4618      	mov	r0, r3
    e364:	f004 fb3a 	bl	129dc <__aeabi_f2d>
    e368:	4602      	mov	r2, r0
    e36a:	460b      	mov	r3, r1
    e36c:	4610      	mov	r0, r2
    e36e:	4619      	mov	r1, r3
    e370:	f04f 0200 	mov.w	r2, #0
    e374:	f04f 0300 	mov.w	r3, #0
    e378:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e37c:	f004 fb82 	bl	12a84 <__aeabi_dmul>
    e380:	4602      	mov	r2, r0
    e382:	460b      	mov	r3, r1
    e384:	4610      	mov	r0, r2
    e386:	4619      	mov	r1, r3
    e388:	f04f 0200 	mov.w	r2, #0
    e38c:	f04f 0300 	mov.w	r3, #0
    e390:	f004 f9c6 	bl	12720 <__adddf3>
    e394:	4602      	mov	r2, r0
    e396:	460b      	mov	r3, r1
    e398:	4620      	mov	r0, r4
    e39a:	4629      	mov	r1, r5
    e39c:	f004 f9c0 	bl	12720 <__adddf3>
    e3a0:	4602      	mov	r2, r0
    e3a2:	460b      	mov	r3, r1
    e3a4:	4610      	mov	r0, r2
    e3a6:	4619      	mov	r1, r3
    e3a8:	f004 fe4e 	bl	13048 <__aeabi_d2f>
    e3ac:	4602      	mov	r2, r0
    e3ae:	f64b 0364 	movw	r3, #47204	; 0xb864
    e3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b6:	601a      	str	r2, [r3, #0]
    e3b8:	f64b 0364 	movw	r3, #47204	; 0xb864
    e3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c0:	681b      	ldr	r3, [r3, #0]
    e3c2:	4618      	mov	r0, r3
    e3c4:	f04f 0100 	mov.w	r1, #0
    e3c8:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e3cc:	f005 f942 	bl	13654 <__aeabi_fcmple>
    e3d0:	4603      	mov	r3, r0
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d005      	beq.n	e3e2 <auto_nav+0xf4a>
    e3d6:	f64b 0364 	movw	r3, #47204	; 0xb864
    e3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3de:	681a      	ldr	r2, [r3, #0]
    e3e0:	e003      	b.n	e3ea <auto_nav+0xf52>
    e3e2:	f04f 0200 	mov.w	r2, #0
    e3e6:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e3ea:	f64b 0364 	movw	r3, #47204	; 0xb864
    e3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f2:	601a      	str	r2, [r3, #0]
    e3f4:	f64b 0364 	movw	r3, #47204	; 0xb864
    e3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fc:	681b      	ldr	r3, [r3, #0]
    e3fe:	4618      	mov	r0, r3
    e400:	f04f 0100 	mov.w	r1, #0
    e404:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e408:	f005 f92e 	bl	13668 <__aeabi_fcmpge>
    e40c:	4603      	mov	r3, r0
    e40e:	2b00      	cmp	r3, #0
    e410:	d005      	beq.n	e41e <auto_nav+0xf86>
    e412:	f64b 0364 	movw	r3, #47204	; 0xb864
    e416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41a:	681a      	ldr	r2, [r3, #0]
    e41c:	e003      	b.n	e426 <auto_nav+0xf8e>
    e41e:	f04f 0200 	mov.w	r2, #0
    e422:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e426:	f64b 0364 	movw	r3, #47204	; 0xb864
    e42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42e:	601a      	str	r2, [r3, #0]
    e430:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    e434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e438:	889b      	ldrh	r3, [r3, #4]
    e43a:	84bb      	strh	r3, [r7, #36]	; 0x24
    e43c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e440:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e444:	dc04      	bgt.n	e450 <auto_nav+0xfb8>
    e446:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e44a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e44e:	da7e      	bge.n	e54e <auto_nav+0x10b6>
    e450:	f64b 0368 	movw	r3, #47208	; 0xb868
    e454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e458:	681b      	ldr	r3, [r3, #0]
    e45a:	4618      	mov	r0, r3
    e45c:	f004 fabe 	bl	129dc <__aeabi_f2d>
    e460:	4604      	mov	r4, r0
    e462:	460d      	mov	r5, r1
    e464:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e468:	4618      	mov	r0, r3
    e46a:	f004 fef7 	bl	1325c <__aeabi_i2f>
    e46e:	4603      	mov	r3, r0
    e470:	4618      	mov	r0, r3
    e472:	f04f 0100 	mov.w	r1, #0
    e476:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e47a:	f004 fff7 	bl	1346c <__aeabi_fdiv>
    e47e:	4603      	mov	r3, r0
    e480:	4618      	mov	r0, r3
    e482:	f004 faab 	bl	129dc <__aeabi_f2d>
    e486:	4602      	mov	r2, r0
    e488:	460b      	mov	r3, r1
    e48a:	4610      	mov	r0, r2
    e48c:	4619      	mov	r1, r3
    e48e:	f04f 0200 	mov.w	r2, #0
    e492:	f04f 0300 	mov.w	r3, #0
    e496:	f2cc 0334 	movt	r3, #49204	; 0xc034
    e49a:	f004 faf3 	bl	12a84 <__aeabi_dmul>
    e49e:	4602      	mov	r2, r0
    e4a0:	460b      	mov	r3, r1
    e4a2:	4610      	mov	r0, r2
    e4a4:	4619      	mov	r1, r3
    e4a6:	f04f 0200 	mov.w	r2, #0
    e4aa:	f04f 0300 	mov.w	r3, #0
    e4ae:	f004 f937 	bl	12720 <__adddf3>
    e4b2:	4602      	mov	r2, r0
    e4b4:	460b      	mov	r3, r1
    e4b6:	4620      	mov	r0, r4
    e4b8:	4629      	mov	r1, r5
    e4ba:	f004 f931 	bl	12720 <__adddf3>
    e4be:	4602      	mov	r2, r0
    e4c0:	460b      	mov	r3, r1
    e4c2:	4610      	mov	r0, r2
    e4c4:	4619      	mov	r1, r3
    e4c6:	f004 fdbf 	bl	13048 <__aeabi_d2f>
    e4ca:	4602      	mov	r2, r0
    e4cc:	f64b 0368 	movw	r3, #47208	; 0xb868
    e4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d4:	601a      	str	r2, [r3, #0]
    e4d6:	f64b 0368 	movw	r3, #47208	; 0xb868
    e4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4de:	681b      	ldr	r3, [r3, #0]
    e4e0:	4618      	mov	r0, r3
    e4e2:	f04f 0100 	mov.w	r1, #0
    e4e6:	f2c4 317a 	movt	r1, #17274	; 0x437a
    e4ea:	f005 f8b3 	bl	13654 <__aeabi_fcmple>
    e4ee:	4603      	mov	r3, r0
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d005      	beq.n	e500 <auto_nav+0x1068>
    e4f4:	f64b 0368 	movw	r3, #47208	; 0xb868
    e4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fc:	681a      	ldr	r2, [r3, #0]
    e4fe:	e003      	b.n	e508 <auto_nav+0x1070>
    e500:	f04f 0200 	mov.w	r2, #0
    e504:	f2c4 327a 	movt	r2, #17274	; 0x437a
    e508:	f64b 0368 	movw	r3, #47208	; 0xb868
    e50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e510:	601a      	str	r2, [r3, #0]
    e512:	f64b 0368 	movw	r3, #47208	; 0xb868
    e516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51a:	681b      	ldr	r3, [r3, #0]
    e51c:	4618      	mov	r0, r3
    e51e:	f04f 0100 	mov.w	r1, #0
    e522:	f2cc 317a 	movt	r1, #50042	; 0xc37a
    e526:	f005 f89f 	bl	13668 <__aeabi_fcmpge>
    e52a:	4603      	mov	r3, r0
    e52c:	2b00      	cmp	r3, #0
    e52e:	d005      	beq.n	e53c <auto_nav+0x10a4>
    e530:	f64b 0368 	movw	r3, #47208	; 0xb868
    e534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e538:	681a      	ldr	r2, [r3, #0]
    e53a:	e003      	b.n	e544 <auto_nav+0x10ac>
    e53c:	f04f 0200 	mov.w	r2, #0
    e540:	f2cc 327a 	movt	r2, #50042	; 0xc37a
    e544:	f64b 0368 	movw	r3, #47208	; 0xb868
    e548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54c:	601a      	str	r2, [r3, #0]
    e54e:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    e552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e556:	2203      	movs	r2, #3
    e558:	701a      	strb	r2, [r3, #0]
    e55a:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
    e55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e562:	885b      	ldrh	r3, [r3, #2]
    e564:	847b      	strh	r3, [r7, #34]	; 0x22
    e566:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e56a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    e56e:	dc04      	bgt.n	e57a <auto_nav+0x10e2>
    e570:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e574:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
    e578:	da70      	bge.n	e65c <auto_nav+0x11c4>
    e57a:	f240 133c 	movw	r3, #316	; 0x13c
    e57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e582:	681b      	ldr	r3, [r3, #0]
    e584:	4618      	mov	r0, r3
    e586:	f004 fa29 	bl	129dc <__aeabi_f2d>
    e58a:	4604      	mov	r4, r0
    e58c:	460d      	mov	r5, r1
    e58e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e592:	4618      	mov	r0, r3
    e594:	f004 fe62 	bl	1325c <__aeabi_i2f>
    e598:	4603      	mov	r3, r0
    e59a:	4618      	mov	r0, r3
    e59c:	f04f 0100 	mov.w	r1, #0
    e5a0:	f2c4 6116 	movt	r1, #17942	; 0x4616
    e5a4:	f004 ff62 	bl	1346c <__aeabi_fdiv>
    e5a8:	4603      	mov	r3, r0
    e5aa:	4618      	mov	r0, r3
    e5ac:	f004 fa16 	bl	129dc <__aeabi_f2d>
    e5b0:	4602      	mov	r2, r0
    e5b2:	460b      	mov	r3, r1
    e5b4:	f04f 0000 	mov.w	r0, #0
    e5b8:	f04f 0100 	mov.w	r1, #0
    e5bc:	f004 f8ae 	bl	1271c <__aeabi_dsub>
    e5c0:	4602      	mov	r2, r0
    e5c2:	460b      	mov	r3, r1
    e5c4:	4620      	mov	r0, r4
    e5c6:	4629      	mov	r1, r5
    e5c8:	f004 f8aa 	bl	12720 <__adddf3>
    e5cc:	4602      	mov	r2, r0
    e5ce:	460b      	mov	r3, r1
    e5d0:	4610      	mov	r0, r2
    e5d2:	4619      	mov	r1, r3
    e5d4:	f004 fd38 	bl	13048 <__aeabi_d2f>
    e5d8:	4602      	mov	r2, r0
    e5da:	f240 133c 	movw	r3, #316	; 0x13c
    e5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e2:	601a      	str	r2, [r3, #0]
    e5e4:	f240 133c 	movw	r3, #316	; 0x13c
    e5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ec:	681b      	ldr	r3, [r3, #0]
    e5ee:	4618      	mov	r0, r3
    e5f0:	f04f 0100 	mov.w	r1, #0
    e5f4:	f2c4 312f 	movt	r1, #17199	; 0x432f
    e5f8:	f005 f836 	bl	13668 <__aeabi_fcmpge>
    e5fc:	4603      	mov	r3, r0
    e5fe:	2b00      	cmp	r3, #0
    e600:	d005      	beq.n	e60e <auto_nav+0x1176>
    e602:	f240 133c 	movw	r3, #316	; 0x13c
    e606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e60a:	681a      	ldr	r2, [r3, #0]
    e60c:	e003      	b.n	e616 <auto_nav+0x117e>
    e60e:	f04f 0200 	mov.w	r2, #0
    e612:	f2c4 322f 	movt	r2, #17199	; 0x432f
    e616:	f240 133c 	movw	r3, #316	; 0x13c
    e61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e61e:	601a      	str	r2, [r3, #0]
    e620:	f240 133c 	movw	r3, #316	; 0x13c
    e624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e628:	681b      	ldr	r3, [r3, #0]
    e62a:	4618      	mov	r0, r3
    e62c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e630:	f2c4 3189 	movt	r1, #17289	; 0x4389
    e634:	f005 f80e 	bl	13654 <__aeabi_fcmple>
    e638:	4603      	mov	r3, r0
    e63a:	2b00      	cmp	r3, #0
    e63c:	d005      	beq.n	e64a <auto_nav+0x11b2>
    e63e:	f240 133c 	movw	r3, #316	; 0x13c
    e642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e646:	681a      	ldr	r2, [r3, #0]
    e648:	e003      	b.n	e652 <auto_nav+0x11ba>
    e64a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e64e:	f2c4 3289 	movt	r2, #17289	; 0x4389
    e652:	f240 133c 	movw	r3, #316	; 0x13c
    e656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e65a:	601a      	str	r2, [r3, #0]
    e65c:	f64b 2378 	movw	r3, #47736	; 0xba78
    e660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e664:	681a      	ldr	r2, [r3, #0]
    e666:	f64b 0368 	movw	r3, #47208	; 0xb868
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	681b      	ldr	r3, [r3, #0]
    e670:	4610      	mov	r0, r2
    e672:	4619      	mov	r1, r3
    e674:	f004 fd3c 	bl	130f0 <__aeabi_fsub>
    e678:	4603      	mov	r3, r0
    e67a:	4618      	mov	r0, r3
    e67c:	f004 f9ae 	bl	129dc <__aeabi_f2d>
    e680:	4604      	mov	r4, r0
    e682:	460d      	mov	r5, r1
    e684:	f64b 2374 	movw	r3, #47732	; 0xba74
    e688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68c:	681a      	ldr	r2, [r3, #0]
    e68e:	f64b 0364 	movw	r3, #47204	; 0xb864
    e692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e696:	681b      	ldr	r3, [r3, #0]
    e698:	4610      	mov	r0, r2
    e69a:	4619      	mov	r1, r3
    e69c:	f004 fd28 	bl	130f0 <__aeabi_fsub>
    e6a0:	4603      	mov	r3, r0
    e6a2:	4618      	mov	r0, r3
    e6a4:	f004 f99a 	bl	129dc <__aeabi_f2d>
    e6a8:	4602      	mov	r2, r0
    e6aa:	460b      	mov	r3, r1
    e6ac:	4620      	mov	r0, r4
    e6ae:	4629      	mov	r1, r5
    e6b0:	f002 fa12 	bl	10ad8 <pp_atan2>
    e6b4:	4602      	mov	r2, r0
    e6b6:	460b      	mov	r3, r1
    e6b8:	4610      	mov	r0, r2
    e6ba:	4619      	mov	r1, r3
    e6bc:	f004 fcc4 	bl	13048 <__aeabi_d2f>
    e6c0:	4603      	mov	r3, r0
    e6c2:	61fb      	str	r3, [r7, #28]
    e6c4:	69f8      	ldr	r0, [r7, #28]
    e6c6:	f004 f989 	bl	129dc <__aeabi_f2d>
    e6ca:	4604      	mov	r4, r0
    e6cc:	460d      	mov	r5, r1
    e6ce:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    e6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d6:	681b      	ldr	r3, [r3, #0]
    e6d8:	4618      	mov	r0, r3
    e6da:	f04f 0100 	mov.w	r1, #0
    e6de:	f2cc 2148 	movt	r1, #49736	; 0xc248
    e6e2:	f004 fe0f 	bl	13304 <__aeabi_fmul>
    e6e6:	4603      	mov	r3, r0
    e6e8:	4618      	mov	r0, r3
    e6ea:	f004 f977 	bl	129dc <__aeabi_f2d>
    e6ee:	4602      	mov	r2, r0
    e6f0:	460b      	mov	r3, r1
    e6f2:	f04f 0000 	mov.w	r0, #0
    e6f6:	f04f 0100 	mov.w	r1, #0
    e6fa:	f2c4 0114 	movt	r1, #16404	; 0x4014
    e6fe:	f004 faeb 	bl	12cd8 <__aeabi_ddiv>
    e702:	4602      	mov	r2, r0
    e704:	460b      	mov	r3, r1
    e706:	4620      	mov	r0, r4
    e708:	4629      	mov	r1, r5
    e70a:	f004 f809 	bl	12720 <__adddf3>
    e70e:	4602      	mov	r2, r0
    e710:	460b      	mov	r3, r1
    e712:	4610      	mov	r0, r2
    e714:	4619      	mov	r1, r3
    e716:	f004 fc97 	bl	13048 <__aeabi_d2f>
    e71a:	4603      	mov	r3, r0
    e71c:	61bb      	str	r3, [r7, #24]
    e71e:	f64b 0364 	movw	r3, #47204	; 0xb864
    e722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e726:	681b      	ldr	r3, [r3, #0]
    e728:	4618      	mov	r0, r3
    e72a:	f004 f957 	bl	129dc <__aeabi_f2d>
    e72e:	4604      	mov	r4, r0
    e730:	460d      	mov	r5, r1
    e732:	69b8      	ldr	r0, [r7, #24]
    e734:	f004 f952 	bl	129dc <__aeabi_f2d>
    e738:	4602      	mov	r2, r0
    e73a:	460b      	mov	r3, r1
    e73c:	4610      	mov	r0, r2
    e73e:	4619      	mov	r1, r3
    e740:	a3b1      	add	r3, pc, #708	; (adr r3, ea08 <auto_nav+0x1570>)
    e742:	e9d3 2300 	ldrd	r2, r3, [r3]
    e746:	f003 ffeb 	bl	12720 <__adddf3>
    e74a:	4602      	mov	r2, r0
    e74c:	460b      	mov	r3, r1
    e74e:	4610      	mov	r0, r2
    e750:	4619      	mov	r1, r3
    e752:	f002 fa81 	bl	10c58 <pp_sin>
    e756:	4602      	mov	r2, r0
    e758:	460b      	mov	r3, r1
    e75a:	4610      	mov	r0, r2
    e75c:	4619      	mov	r1, r3
    e75e:	f04f 0200 	mov.w	r2, #0
    e762:	f04f 0300 	mov.w	r3, #0
    e766:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e76a:	f004 f98b 	bl	12a84 <__aeabi_dmul>
    e76e:	4602      	mov	r2, r0
    e770:	460b      	mov	r3, r1
    e772:	4620      	mov	r0, r4
    e774:	4629      	mov	r1, r5
    e776:	f003 ffd3 	bl	12720 <__adddf3>
    e77a:	4602      	mov	r2, r0
    e77c:	460b      	mov	r3, r1
    e77e:	4610      	mov	r0, r2
    e780:	4619      	mov	r1, r3
    e782:	f004 fc61 	bl	13048 <__aeabi_d2f>
    e786:	4606      	mov	r6, r0
    e788:	f64b 0368 	movw	r3, #47208	; 0xb868
    e78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e790:	681b      	ldr	r3, [r3, #0]
    e792:	4618      	mov	r0, r3
    e794:	f004 f922 	bl	129dc <__aeabi_f2d>
    e798:	4604      	mov	r4, r0
    e79a:	460d      	mov	r5, r1
    e79c:	69b8      	ldr	r0, [r7, #24]
    e79e:	f004 f91d 	bl	129dc <__aeabi_f2d>
    e7a2:	4602      	mov	r2, r0
    e7a4:	460b      	mov	r3, r1
    e7a6:	4610      	mov	r0, r2
    e7a8:	4619      	mov	r1, r3
    e7aa:	f002 fa55 	bl	10c58 <pp_sin>
    e7ae:	4602      	mov	r2, r0
    e7b0:	460b      	mov	r3, r1
    e7b2:	4610      	mov	r0, r2
    e7b4:	4619      	mov	r1, r3
    e7b6:	f04f 0200 	mov.w	r2, #0
    e7ba:	f04f 0300 	mov.w	r3, #0
    e7be:	f2c4 0349 	movt	r3, #16457	; 0x4049
    e7c2:	f004 f95f 	bl	12a84 <__aeabi_dmul>
    e7c6:	4602      	mov	r2, r0
    e7c8:	460b      	mov	r3, r1
    e7ca:	4620      	mov	r0, r4
    e7cc:	4629      	mov	r1, r5
    e7ce:	f003 ffa7 	bl	12720 <__adddf3>
    e7d2:	4602      	mov	r2, r0
    e7d4:	460b      	mov	r3, r1
    e7d6:	4610      	mov	r0, r2
    e7d8:	4619      	mov	r1, r3
    e7da:	f004 fc35 	bl	13048 <__aeabi_d2f>
    e7de:	4603      	mov	r3, r0
    e7e0:	4630      	mov	r0, r6
    e7e2:	4619      	mov	r1, r3
    e7e4:	f001 f81c 	bl	f820 <fly_to_xy>
    e7e8:	69b8      	ldr	r0, [r7, #24]
    e7ea:	f004 f8f7 	bl	129dc <__aeabi_f2d>
    e7ee:	4602      	mov	r2, r0
    e7f0:	460b      	mov	r3, r1
    e7f2:	a185      	add	r1, pc, #532	; (adr r1, ea08 <auto_nav+0x1570>)
    e7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
    e7f8:	f003 ff90 	bl	1271c <__aeabi_dsub>
    e7fc:	4602      	mov	r2, r0
    e7fe:	460b      	mov	r3, r1
    e800:	4610      	mov	r0, r2
    e802:	4619      	mov	r1, r3
    e804:	a382      	add	r3, pc, #520	; (adr r3, ea10 <auto_nav+0x1578>)
    e806:	e9d3 2300 	ldrd	r2, r3, [r3]
    e80a:	f004 fa65 	bl	12cd8 <__aeabi_ddiv>
    e80e:	4602      	mov	r2, r0
    e810:	460b      	mov	r3, r1
    e812:	4610      	mov	r0, r2
    e814:	4619      	mov	r1, r3
    e816:	f04f 0200 	mov.w	r2, #0
    e81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e81e:	f2c4 0366 	movt	r3, #16486	; 0x4066
    e822:	f004 f92f 	bl	12a84 <__aeabi_dmul>
    e826:	4602      	mov	r2, r0
    e828:	460b      	mov	r3, r1
    e82a:	4610      	mov	r0, r2
    e82c:	4619      	mov	r1, r3
    e82e:	f004 fc0b 	bl	13048 <__aeabi_d2f>
    e832:	4602      	mov	r2, r0
    e834:	f64b 0334 	movw	r3, #47156	; 0xb834
    e838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e83c:	601a      	str	r2, [r3, #0]
    e83e:	e012      	b.n	e866 <auto_nav+0x13ce>
    e840:	f64b 0334 	movw	r3, #47156	; 0xb834
    e844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e848:	681b      	ldr	r3, [r3, #0]
    e84a:	4618      	mov	r0, r3
    e84c:	f04f 0100 	mov.w	r1, #0
    e850:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e854:	f004 fc4e 	bl	130f4 <__addsf3>
    e858:	4603      	mov	r3, r0
    e85a:	461a      	mov	r2, r3
    e85c:	f64b 0334 	movw	r3, #47156	; 0xb834
    e860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e864:	601a      	str	r2, [r3, #0]
    e866:	f64b 0334 	movw	r3, #47156	; 0xb834
    e86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86e:	681b      	ldr	r3, [r3, #0]
    e870:	4618      	mov	r0, r3
    e872:	f04f 0100 	mov.w	r1, #0
    e876:	f004 fee3 	bl	13640 <__aeabi_fcmplt>
    e87a:	4603      	mov	r3, r0
    e87c:	2b00      	cmp	r3, #0
    e87e:	d1df      	bne.n	e840 <auto_nav+0x13a8>
    e880:	e012      	b.n	e8a8 <auto_nav+0x1410>
    e882:	f64b 0334 	movw	r3, #47156	; 0xb834
    e886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88a:	681b      	ldr	r3, [r3, #0]
    e88c:	4618      	mov	r0, r3
    e88e:	f04f 0100 	mov.w	r1, #0
    e892:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e896:	f004 fc2b 	bl	130f0 <__aeabi_fsub>
    e89a:	4603      	mov	r3, r0
    e89c:	461a      	mov	r2, r3
    e89e:	f64b 0334 	movw	r3, #47156	; 0xb834
    e8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a6:	601a      	str	r2, [r3, #0]
    e8a8:	f64b 0334 	movw	r3, #47156	; 0xb834
    e8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b0:	681b      	ldr	r3, [r3, #0]
    e8b2:	4618      	mov	r0, r3
    e8b4:	f04f 0100 	mov.w	r1, #0
    e8b8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    e8bc:	f004 fed4 	bl	13668 <__aeabi_fcmpge>
    e8c0:	4603      	mov	r3, r0
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d1dd      	bne.n	e882 <auto_nav+0x13ea>
        return;
    e8c6:	f000 beb9 	b.w	f63c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    e8ca:	f64b 0318 	movw	r3, #47128	; 0xb818
    e8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d2:	781b      	ldrb	r3, [r3, #0]
    e8d4:	2b01      	cmp	r3, #1
    e8d6:	f040 86b1 	bne.w	f63c <auto_nav+0x21a4>
    {
        nav_stage = 1;
    e8da:	f64b 0318 	movw	r3, #47128	; 0xb818
    e8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e2:	2201      	movs	r2, #1
    e8e4:	701a      	strb	r2, [r3, #0]
        NextBlock()
    e8e6:	f64b 0319 	movw	r3, #47129	; 0xb819
    e8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ee:	781b      	ldrb	r3, [r3, #0]
    e8f0:	3301      	adds	r3, #1
    e8f2:	b2da      	uxtb	r2, r3
    e8f4:	f64b 0319 	movw	r3, #47129	; 0xb819
    e8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fc:	701a      	strb	r2, [r3, #0]
    e8fe:	f64b 0318 	movw	r3, #47128	; 0xb818
    e902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e906:	2200      	movs	r2, #0
    e908:	701a      	strb	r2, [r3, #0]
    e90a:	f64b 032e 	movw	r3, #47150	; 0xb82e
    e90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e912:	2200      	movs	r2, #0
    e914:	801a      	strh	r2, [r3, #0]
    e916:	f64b 2374 	movw	r3, #47732	; 0xba74
    e91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91e:	681a      	ldr	r2, [r3, #0]
    e920:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e928:	601a      	str	r2, [r3, #0]
    e92a:	f64b 2378 	movw	r3, #47736	; 0xba78
    e92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e932:	681a      	ldr	r2, [r3, #0]
    e934:	f64b 0320 	movw	r3, #47136	; 0xb820
    e938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e93c:	601a      	str	r2, [r3, #0]
    e93e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e946:	2200      	movs	r2, #0
    e948:	801a      	strh	r2, [r3, #0]
    e94a:	f64b 0330 	movw	r3, #47152	; 0xb830
    e94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e952:	f04f 0200 	mov.w	r2, #0
    e956:	601a      	str	r2, [r3, #0]
    e958:	f000 be70 	b.w	f63c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
    e95c:	f64b 0319 	movw	r3, #47129	; 0xb819
    e960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e964:	781b      	ldrb	r3, [r3, #0]
    e966:	2b04      	cmp	r3, #4
    e968:	f040 8202 	bne.w	ed70 <auto_nav+0x18d8>
{
    nav_block = 4;
    e96c:	f64b 0319 	movw	r3, #47129	; 0xb819
    e970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e974:	2204      	movs	r2, #4
    e976:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
    e978:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e980:	781b      	ldrb	r3, [r3, #0]
    e982:	2b00      	cmp	r3, #0
    e984:	d007      	beq.n	e996 <auto_nav+0x14fe>
    e986:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98e:	2200      	movs	r2, #0
    e990:	701a      	strb	r2, [r3, #0]
    e992:	2301      	movs	r3, #1
    e994:	e000      	b.n	e998 <auto_nav+0x1500>
    e996:	2300      	movs	r3, #0
    e998:	2b00      	cmp	r3, #0
    e99a:	d03d      	beq.n	ea18 <auto_nav+0x1580>
    e99c:	f64b 0319 	movw	r3, #47129	; 0xb819
    e9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a4:	2205      	movs	r2, #5
    e9a6:	701a      	strb	r2, [r3, #0]
    e9a8:	f64b 0318 	movw	r3, #47128	; 0xb818
    e9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b0:	2200      	movs	r2, #0
    e9b2:	701a      	strb	r2, [r3, #0]
    e9b4:	f64b 032e 	movw	r3, #47150	; 0xb82e
    e9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9bc:	2200      	movs	r2, #0
    e9be:	801a      	strh	r2, [r3, #0]
    e9c0:	f64b 2374 	movw	r3, #47732	; 0xba74
    e9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c8:	681a      	ldr	r2, [r3, #0]
    e9ca:	f64b 031c 	movw	r3, #47132	; 0xb81c
    e9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d2:	601a      	str	r2, [r3, #0]
    e9d4:	f64b 2378 	movw	r3, #47736	; 0xba78
    e9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9dc:	681a      	ldr	r2, [r3, #0]
    e9de:	f64b 0320 	movw	r3, #47136	; 0xb820
    e9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e6:	601a      	str	r2, [r3, #0]
    e9e8:	f64b 032c 	movw	r3, #47148	; 0xb82c
    e9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f0:	2200      	movs	r2, #0
    e9f2:	801a      	strh	r2, [r3, #0]
    e9f4:	f64b 0330 	movw	r3, #47152	; 0xb830
    e9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9fc:	f04f 0200 	mov.w	r2, #0
    ea00:	601a      	str	r2, [r3, #0]
    ea02:	f000 be1b 	b.w	f63c <auto_nav+0x21a4>
    ea06:	bf00      	nop
    ea08:	54442d18 	.word	0x54442d18
    ea0c:	3ff921fb 	.word	0x3ff921fb
    ea10:	54442d18 	.word	0x54442d18
    ea14:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
    ea18:	f64b 0318 	movw	r3, #47128	; 0xb818
    ea1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea20:	781b      	ldrb	r3, [r3, #0]
    ea22:	2b00      	cmp	r3, #0
    ea24:	f040 815b 	bne.w	ecde <auto_nav+0x1846>
    {
        nav_stage = 0;
    ea28:	f64b 0318 	movw	r3, #47128	; 0xb818
    ea2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea30:	2200      	movs	r2, #0
    ea32:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    ea34:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    ea38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3c:	2200      	movs	r2, #0
    ea3e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    ea40:	f64b 0344 	movw	r3, #47172	; 0xb844
    ea44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea48:	f04f 0200 	mov.w	r2, #0
    ea4c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    ea4e:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    ea52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea56:	2203      	movs	r2, #3
    ea58:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
    ea5a:	f240 1340 	movw	r3, #320	; 0x140
    ea5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea62:	689a      	ldr	r2, [r3, #8]
    ea64:	f240 133c 	movw	r3, #316	; 0x13c
    ea68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea6c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ea6e:	f64b 030c 	movw	r3, #47116	; 0xb80c
    ea72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea76:	f04f 0200 	mov.w	r2, #0
    ea7a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
    ea7c:	f64b 2378 	movw	r3, #47736	; 0xba78
    ea80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea84:	681a      	ldr	r2, [r3, #0]
    ea86:	f240 1340 	movw	r3, #320	; 0x140
    ea8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8e:	685b      	ldr	r3, [r3, #4]
    ea90:	4610      	mov	r0, r2
    ea92:	4619      	mov	r1, r3
    ea94:	f004 fb2c 	bl	130f0 <__aeabi_fsub>
    ea98:	4603      	mov	r3, r0
    ea9a:	4618      	mov	r0, r3
    ea9c:	f003 ff9e 	bl	129dc <__aeabi_f2d>
    eaa0:	4604      	mov	r4, r0
    eaa2:	460d      	mov	r5, r1
    eaa4:	f64b 2374 	movw	r3, #47732	; 0xba74
    eaa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaac:	681a      	ldr	r2, [r3, #0]
    eaae:	f240 1340 	movw	r3, #320	; 0x140
    eab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	4610      	mov	r0, r2
    eaba:	4619      	mov	r1, r3
    eabc:	f004 fb18 	bl	130f0 <__aeabi_fsub>
    eac0:	4603      	mov	r3, r0
    eac2:	4618      	mov	r0, r3
    eac4:	f003 ff8a 	bl	129dc <__aeabi_f2d>
    eac8:	4602      	mov	r2, r0
    eaca:	460b      	mov	r3, r1
    eacc:	4620      	mov	r0, r4
    eace:	4629      	mov	r1, r5
    ead0:	f002 f802 	bl	10ad8 <pp_atan2>
    ead4:	4602      	mov	r2, r0
    ead6:	460b      	mov	r3, r1
    ead8:	4610      	mov	r0, r2
    eada:	4619      	mov	r1, r3
    eadc:	f004 fab4 	bl	13048 <__aeabi_d2f>
    eae0:	4603      	mov	r3, r0
    eae2:	617b      	str	r3, [r7, #20]
    eae4:	6978      	ldr	r0, [r7, #20]
    eae6:	f003 ff79 	bl	129dc <__aeabi_f2d>
    eaea:	4604      	mov	r4, r0
    eaec:	460d      	mov	r5, r1
    eaee:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    eaf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf6:	681b      	ldr	r3, [r3, #0]
    eaf8:	4618      	mov	r0, r3
    eafa:	f04f 0100 	mov.w	r1, #0
    eafe:	f2cc 3116 	movt	r1, #49942	; 0xc316
    eb02:	f004 fbff 	bl	13304 <__aeabi_fmul>
    eb06:	4603      	mov	r3, r0
    eb08:	4618      	mov	r0, r3
    eb0a:	f003 ff67 	bl	129dc <__aeabi_f2d>
    eb0e:	4602      	mov	r2, r0
    eb10:	460b      	mov	r3, r1
    eb12:	f04f 0000 	mov.w	r0, #0
    eb16:	f04f 0100 	mov.w	r1, #0
    eb1a:	f2c4 0114 	movt	r1, #16404	; 0x4014
    eb1e:	f004 f8db 	bl	12cd8 <__aeabi_ddiv>
    eb22:	4602      	mov	r2, r0
    eb24:	460b      	mov	r3, r1
    eb26:	4620      	mov	r0, r4
    eb28:	4629      	mov	r1, r5
    eb2a:	f003 fdf9 	bl	12720 <__adddf3>
    eb2e:	4602      	mov	r2, r0
    eb30:	460b      	mov	r3, r1
    eb32:	4610      	mov	r0, r2
    eb34:	4619      	mov	r1, r3
    eb36:	f004 fa87 	bl	13048 <__aeabi_d2f>
    eb3a:	4603      	mov	r3, r0
    eb3c:	613b      	str	r3, [r7, #16]
    eb3e:	f240 1340 	movw	r3, #320	; 0x140
    eb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	4618      	mov	r0, r3
    eb4a:	f003 ff47 	bl	129dc <__aeabi_f2d>
    eb4e:	4604      	mov	r4, r0
    eb50:	460d      	mov	r5, r1
    eb52:	6938      	ldr	r0, [r7, #16]
    eb54:	f003 ff42 	bl	129dc <__aeabi_f2d>
    eb58:	4602      	mov	r2, r0
    eb5a:	460b      	mov	r3, r1
    eb5c:	4610      	mov	r0, r2
    eb5e:	4619      	mov	r1, r3
    eb60:	a3af      	add	r3, pc, #700	; (adr r3, ee20 <auto_nav+0x1988>)
    eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb66:	f003 fddb 	bl	12720 <__adddf3>
    eb6a:	4602      	mov	r2, r0
    eb6c:	460b      	mov	r3, r1
    eb6e:	4610      	mov	r0, r2
    eb70:	4619      	mov	r1, r3
    eb72:	f002 f871 	bl	10c58 <pp_sin>
    eb76:	4602      	mov	r2, r0
    eb78:	460b      	mov	r3, r1
    eb7a:	4610      	mov	r0, r2
    eb7c:	4619      	mov	r1, r3
    eb7e:	a3aa      	add	r3, pc, #680	; (adr r3, ee28 <auto_nav+0x1990>)
    eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb84:	f003 ff7e 	bl	12a84 <__aeabi_dmul>
    eb88:	4602      	mov	r2, r0
    eb8a:	460b      	mov	r3, r1
    eb8c:	4620      	mov	r0, r4
    eb8e:	4629      	mov	r1, r5
    eb90:	f003 fdc6 	bl	12720 <__adddf3>
    eb94:	4602      	mov	r2, r0
    eb96:	460b      	mov	r3, r1
    eb98:	4610      	mov	r0, r2
    eb9a:	4619      	mov	r1, r3
    eb9c:	f004 fa54 	bl	13048 <__aeabi_d2f>
    eba0:	4606      	mov	r6, r0
    eba2:	f240 1340 	movw	r3, #320	; 0x140
    eba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebaa:	685b      	ldr	r3, [r3, #4]
    ebac:	4618      	mov	r0, r3
    ebae:	f003 ff15 	bl	129dc <__aeabi_f2d>
    ebb2:	4604      	mov	r4, r0
    ebb4:	460d      	mov	r5, r1
    ebb6:	6938      	ldr	r0, [r7, #16]
    ebb8:	f003 ff10 	bl	129dc <__aeabi_f2d>
    ebbc:	4602      	mov	r2, r0
    ebbe:	460b      	mov	r3, r1
    ebc0:	4610      	mov	r0, r2
    ebc2:	4619      	mov	r1, r3
    ebc4:	f002 f848 	bl	10c58 <pp_sin>
    ebc8:	4602      	mov	r2, r0
    ebca:	460b      	mov	r3, r1
    ebcc:	4610      	mov	r0, r2
    ebce:	4619      	mov	r1, r3
    ebd0:	a395      	add	r3, pc, #596	; (adr r3, ee28 <auto_nav+0x1990>)
    ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ebd6:	f003 ff55 	bl	12a84 <__aeabi_dmul>
    ebda:	4602      	mov	r2, r0
    ebdc:	460b      	mov	r3, r1
    ebde:	4620      	mov	r0, r4
    ebe0:	4629      	mov	r1, r5
    ebe2:	f003 fd9d 	bl	12720 <__adddf3>
    ebe6:	4602      	mov	r2, r0
    ebe8:	460b      	mov	r3, r1
    ebea:	4610      	mov	r0, r2
    ebec:	4619      	mov	r1, r3
    ebee:	f004 fa2b 	bl	13048 <__aeabi_d2f>
    ebf2:	4603      	mov	r3, r0
    ebf4:	4630      	mov	r0, r6
    ebf6:	4619      	mov	r1, r3
    ebf8:	f000 fe12 	bl	f820 <fly_to_xy>
    ebfc:	6938      	ldr	r0, [r7, #16]
    ebfe:	f003 feed 	bl	129dc <__aeabi_f2d>
    ec02:	4602      	mov	r2, r0
    ec04:	460b      	mov	r3, r1
    ec06:	a186      	add	r1, pc, #536	; (adr r1, ee20 <auto_nav+0x1988>)
    ec08:	e9d1 0100 	ldrd	r0, r1, [r1]
    ec0c:	f003 fd86 	bl	1271c <__aeabi_dsub>
    ec10:	4602      	mov	r2, r0
    ec12:	460b      	mov	r3, r1
    ec14:	4610      	mov	r0, r2
    ec16:	4619      	mov	r1, r3
    ec18:	a385      	add	r3, pc, #532	; (adr r3, ee30 <auto_nav+0x1998>)
    ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec1e:	f004 f85b 	bl	12cd8 <__aeabi_ddiv>
    ec22:	4602      	mov	r2, r0
    ec24:	460b      	mov	r3, r1
    ec26:	4610      	mov	r0, r2
    ec28:	4619      	mov	r1, r3
    ec2a:	f04f 0200 	mov.w	r2, #0
    ec2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ec32:	f2c4 0366 	movt	r3, #16486	; 0x4066
    ec36:	f003 ff25 	bl	12a84 <__aeabi_dmul>
    ec3a:	4602      	mov	r2, r0
    ec3c:	460b      	mov	r3, r1
    ec3e:	4610      	mov	r0, r2
    ec40:	4619      	mov	r1, r3
    ec42:	f004 fa01 	bl	13048 <__aeabi_d2f>
    ec46:	4602      	mov	r2, r0
    ec48:	f64b 0334 	movw	r3, #47156	; 0xb834
    ec4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec50:	601a      	str	r2, [r3, #0]
    ec52:	e012      	b.n	ec7a <auto_nav+0x17e2>
    ec54:	f64b 0334 	movw	r3, #47156	; 0xb834
    ec58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5c:	681b      	ldr	r3, [r3, #0]
    ec5e:	4618      	mov	r0, r3
    ec60:	f04f 0100 	mov.w	r1, #0
    ec64:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ec68:	f004 fa44 	bl	130f4 <__addsf3>
    ec6c:	4603      	mov	r3, r0
    ec6e:	461a      	mov	r2, r3
    ec70:	f64b 0334 	movw	r3, #47156	; 0xb834
    ec74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec78:	601a      	str	r2, [r3, #0]
    ec7a:	f64b 0334 	movw	r3, #47156	; 0xb834
    ec7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec82:	681b      	ldr	r3, [r3, #0]
    ec84:	4618      	mov	r0, r3
    ec86:	f04f 0100 	mov.w	r1, #0
    ec8a:	f004 fcd9 	bl	13640 <__aeabi_fcmplt>
    ec8e:	4603      	mov	r3, r0
    ec90:	2b00      	cmp	r3, #0
    ec92:	d1df      	bne.n	ec54 <auto_nav+0x17bc>
    ec94:	e012      	b.n	ecbc <auto_nav+0x1824>
    ec96:	f64b 0334 	movw	r3, #47156	; 0xb834
    ec9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9e:	681b      	ldr	r3, [r3, #0]
    eca0:	4618      	mov	r0, r3
    eca2:	f04f 0100 	mov.w	r1, #0
    eca6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ecaa:	f004 fa21 	bl	130f0 <__aeabi_fsub>
    ecae:	4603      	mov	r3, r0
    ecb0:	461a      	mov	r2, r3
    ecb2:	f64b 0334 	movw	r3, #47156	; 0xb834
    ecb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecba:	601a      	str	r2, [r3, #0]
    ecbc:	f64b 0334 	movw	r3, #47156	; 0xb834
    ecc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc4:	681b      	ldr	r3, [r3, #0]
    ecc6:	4618      	mov	r0, r3
    ecc8:	f04f 0100 	mov.w	r1, #0
    eccc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    ecd0:	f004 fcca 	bl	13668 <__aeabi_fcmpge>
    ecd4:	4603      	mov	r3, r0
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d1dd      	bne.n	ec96 <auto_nav+0x17fe>
        return;
    ecda:	f000 bcaf 	b.w	f63c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
    ecde:	f64b 0318 	movw	r3, #47128	; 0xb818
    ece2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece6:	781b      	ldrb	r3, [r3, #0]
    ece8:	2b01      	cmp	r3, #1
    ecea:	f040 84a7 	bne.w	f63c <auto_nav+0x21a4>
    {
        nav_stage =1;
    ecee:	f64b 0318 	movw	r3, #47128	; 0xb818
    ecf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf6:	2201      	movs	r2, #1
    ecf8:	701a      	strb	r2, [r3, #0]
        NextBlock()
    ecfa:	f64b 0319 	movw	r3, #47129	; 0xb819
    ecfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed02:	781b      	ldrb	r3, [r3, #0]
    ed04:	3301      	adds	r3, #1
    ed06:	b2da      	uxtb	r2, r3
    ed08:	f64b 0319 	movw	r3, #47129	; 0xb819
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	701a      	strb	r2, [r3, #0]
    ed12:	f64b 0318 	movw	r3, #47128	; 0xb818
    ed16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1a:	2200      	movs	r2, #0
    ed1c:	701a      	strb	r2, [r3, #0]
    ed1e:	f64b 032e 	movw	r3, #47150	; 0xb82e
    ed22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed26:	2200      	movs	r2, #0
    ed28:	801a      	strh	r2, [r3, #0]
    ed2a:	f64b 2374 	movw	r3, #47732	; 0xba74
    ed2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed32:	681a      	ldr	r2, [r3, #0]
    ed34:	f64b 031c 	movw	r3, #47132	; 0xb81c
    ed38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3c:	601a      	str	r2, [r3, #0]
    ed3e:	f64b 2378 	movw	r3, #47736	; 0xba78
    ed42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed46:	681a      	ldr	r2, [r3, #0]
    ed48:	f64b 0320 	movw	r3, #47136	; 0xb820
    ed4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed50:	601a      	str	r2, [r3, #0]
    ed52:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ed56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5a:	2200      	movs	r2, #0
    ed5c:	801a      	strh	r2, [r3, #0]
    ed5e:	f64b 0330 	movw	r3, #47152	; 0xb830
    ed62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed66:	f04f 0200 	mov.w	r2, #0
    ed6a:	601a      	str	r2, [r3, #0]
    ed6c:	f000 bc66 	b.w	f63c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
    ed70:	f64b 0319 	movw	r3, #47129	; 0xb819
    ed74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed78:	781b      	ldrb	r3, [r3, #0]
    ed7a:	2b05      	cmp	r3, #5
    ed7c:	f040 845e 	bne.w	f63c <auto_nav+0x21a4>
{
    nav_block = 5;
    ed80:	f64b 0319 	movw	r3, #47129	; 0xb819
    ed84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed88:	2205      	movs	r2, #5
    ed8a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
    ed8c:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    ed90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed94:	781b      	ldrb	r3, [r3, #0]
    ed96:	2b00      	cmp	r3, #0
    ed98:	d007      	beq.n	edaa <auto_nav+0x1912>
    ed9a:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	2200      	movs	r2, #0
    eda4:	701a      	strb	r2, [r3, #0]
    eda6:	2301      	movs	r3, #1
    eda8:	e000      	b.n	edac <auto_nav+0x1914>
    edaa:	2300      	movs	r3, #0
    edac:	2b00      	cmp	r3, #0
    edae:	d043      	beq.n	ee38 <auto_nav+0x19a0>
    edb0:	f64b 0319 	movw	r3, #47129	; 0xb819
    edb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb8:	2201      	movs	r2, #1
    edba:	701a      	strb	r2, [r3, #0]
    edbc:	f64b 0318 	movw	r3, #47128	; 0xb818
    edc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc4:	2200      	movs	r2, #0
    edc6:	701a      	strb	r2, [r3, #0]
    edc8:	f64b 032e 	movw	r3, #47150	; 0xb82e
    edcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd0:	2200      	movs	r2, #0
    edd2:	801a      	strh	r2, [r3, #0]
    edd4:	f64b 2374 	movw	r3, #47732	; 0xba74
    edd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eddc:	681a      	ldr	r2, [r3, #0]
    edde:	f64b 031c 	movw	r3, #47132	; 0xb81c
    ede2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede6:	601a      	str	r2, [r3, #0]
    ede8:	f64b 2378 	movw	r3, #47736	; 0xba78
    edec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf0:	681a      	ldr	r2, [r3, #0]
    edf2:	f64b 0320 	movw	r3, #47136	; 0xb820
    edf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfa:	601a      	str	r2, [r3, #0]
    edfc:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ee00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee04:	2200      	movs	r2, #0
    ee06:	801a      	strh	r2, [r3, #0]
    ee08:	f64b 0330 	movw	r3, #47152	; 0xb830
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	f04f 0200 	mov.w	r2, #0
    ee14:	601a      	str	r2, [r3, #0]
    ee16:	f000 bc11 	b.w	f63c <auto_nav+0x21a4>
    ee1a:	bf00      	nop
    ee1c:	f3af 8000 	nop.w
    ee20:	54442d18 	.word	0x54442d18
    ee24:	3ff921fb 	.word	0x3ff921fb
    ee28:	00000000 	.word	0x00000000
    ee2c:	4062c000 	.word	0x4062c000
    ee30:	54442d18 	.word	0x54442d18
    ee34:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
    ee38:	f64b 0318 	movw	r3, #47128	; 0xb818
    ee3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee40:	781b      	ldrb	r3, [r3, #0]
    ee42:	2b00      	cmp	r3, #0
    ee44:	d133      	bne.n	eeae <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
    ee46:	f64b 0318 	movw	r3, #47128	; 0xb818
    ee4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4e:	2200      	movs	r2, #0
    ee50:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
    ee52:	f64b 0318 	movw	r3, #47128	; 0xb818
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	781b      	ldrb	r3, [r3, #0]
    ee5c:	3301      	adds	r3, #1
    ee5e:	b2da      	uxtb	r2, r3
    ee60:	f64b 0318 	movw	r3, #47128	; 0xb818
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	701a      	strb	r2, [r3, #0]
    ee6a:	f64b 2374 	movw	r3, #47732	; 0xba74
    ee6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee72:	681a      	ldr	r2, [r3, #0]
    ee74:	f64b 031c 	movw	r3, #47132	; 0xb81c
    ee78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7c:	601a      	str	r2, [r3, #0]
    ee7e:	f64b 2378 	movw	r3, #47736	; 0xba78
    ee82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee86:	681a      	ldr	r2, [r3, #0]
    ee88:	f64b 0320 	movw	r3, #47136	; 0xb820
    ee8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee90:	601a      	str	r2, [r3, #0]
    ee92:	f64b 032c 	movw	r3, #47148	; 0xb82c
    ee96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee9a:	2200      	movs	r2, #0
    ee9c:	801a      	strh	r2, [r3, #0]
    ee9e:	f64b 0330 	movw	r3, #47152	; 0xb830
    eea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea6:	f04f 0200 	mov.w	r2, #0
    eeaa:	601a      	str	r2, [r3, #0]
    eeac:	e3c6      	b.n	f63c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
    eeae:	f64b 0318 	movw	r3, #47128	; 0xb818
    eeb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb6:	781b      	ldrb	r3, [r3, #0]
    eeb8:	2b01      	cmp	r3, #1
    eeba:	f040 81b5 	bne.w	f228 <auto_nav+0x1d90>
    {
        nav_stage =1;
    eebe:	f64b 0318 	movw	r3, #47128	; 0xb818
    eec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec6:	2201      	movs	r2, #1
    eec8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
    eeca:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    eece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed2:	2200      	movs	r2, #0
    eed4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
    eed6:	f64b 0344 	movw	r3, #47172	; 0xb844
    eeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eede:	f04f 0200 	mov.w	r2, #0
    eee2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
    eee4:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    eee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeec:	2203      	movs	r2, #3
    eeee:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
    eef0:	f240 1340 	movw	r3, #320	; 0x140
    eef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef8:	695a      	ldr	r2, [r3, #20]
    eefa:	f240 133c 	movw	r3, #316	; 0x13c
    eefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef02:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
    ef04:	f64b 030c 	movw	r3, #47116	; 0xb80c
    ef08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0c:	f04f 0200 	mov.w	r2, #0
    ef10:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
    ef12:	f64b 2378 	movw	r3, #47736	; 0xba78
    ef16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1a:	681a      	ldr	r2, [r3, #0]
    ef1c:	f240 1340 	movw	r3, #320	; 0x140
    ef20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef24:	691b      	ldr	r3, [r3, #16]
    ef26:	4610      	mov	r0, r2
    ef28:	4619      	mov	r1, r3
    ef2a:	f004 f8e1 	bl	130f0 <__aeabi_fsub>
    ef2e:	4603      	mov	r3, r0
    ef30:	4618      	mov	r0, r3
    ef32:	f003 fd53 	bl	129dc <__aeabi_f2d>
    ef36:	4604      	mov	r4, r0
    ef38:	460d      	mov	r5, r1
    ef3a:	f64b 2374 	movw	r3, #47732	; 0xba74
    ef3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef42:	681a      	ldr	r2, [r3, #0]
    ef44:	f240 1340 	movw	r3, #320	; 0x140
    ef48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4c:	68db      	ldr	r3, [r3, #12]
    ef4e:	4610      	mov	r0, r2
    ef50:	4619      	mov	r1, r3
    ef52:	f004 f8cd 	bl	130f0 <__aeabi_fsub>
    ef56:	4603      	mov	r3, r0
    ef58:	4618      	mov	r0, r3
    ef5a:	f003 fd3f 	bl	129dc <__aeabi_f2d>
    ef5e:	4602      	mov	r2, r0
    ef60:	460b      	mov	r3, r1
    ef62:	4620      	mov	r0, r4
    ef64:	4629      	mov	r1, r5
    ef66:	f001 fdb7 	bl	10ad8 <pp_atan2>
    ef6a:	4602      	mov	r2, r0
    ef6c:	460b      	mov	r3, r1
    ef6e:	4610      	mov	r0, r2
    ef70:	4619      	mov	r1, r3
    ef72:	f004 f869 	bl	13048 <__aeabi_d2f>
    ef76:	4603      	mov	r3, r0
    ef78:	60fb      	str	r3, [r7, #12]
    ef7a:	68f8      	ldr	r0, [r7, #12]
    ef7c:	f003 fd2e 	bl	129dc <__aeabi_f2d>
    ef80:	4604      	mov	r4, r0
    ef82:	460d      	mov	r5, r1
    ef84:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    ef88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef8c:	681b      	ldr	r3, [r3, #0]
    ef8e:	4618      	mov	r0, r3
    ef90:	f04f 0100 	mov.w	r1, #0
    ef94:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    ef98:	f004 f9b4 	bl	13304 <__aeabi_fmul>
    ef9c:	4603      	mov	r3, r0
    ef9e:	4618      	mov	r0, r3
    efa0:	f003 fd1c 	bl	129dc <__aeabi_f2d>
    efa4:	4602      	mov	r2, r0
    efa6:	460b      	mov	r3, r1
    efa8:	f04f 0000 	mov.w	r0, #0
    efac:	f04f 0100 	mov.w	r1, #0
    efb0:	f2c4 0114 	movt	r1, #16404	; 0x4014
    efb4:	f003 fe90 	bl	12cd8 <__aeabi_ddiv>
    efb8:	4602      	mov	r2, r0
    efba:	460b      	mov	r3, r1
    efbc:	4620      	mov	r0, r4
    efbe:	4629      	mov	r1, r5
    efc0:	f003 fbae 	bl	12720 <__adddf3>
    efc4:	4602      	mov	r2, r0
    efc6:	460b      	mov	r3, r1
    efc8:	4610      	mov	r0, r2
    efca:	4619      	mov	r1, r3
    efcc:	f004 f83c 	bl	13048 <__aeabi_d2f>
    efd0:	4603      	mov	r3, r0
    efd2:	60bb      	str	r3, [r7, #8]
    efd4:	f240 1340 	movw	r3, #320	; 0x140
    efd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efdc:	68db      	ldr	r3, [r3, #12]
    efde:	4618      	mov	r0, r3
    efe0:	f003 fcfc 	bl	129dc <__aeabi_f2d>
    efe4:	4604      	mov	r4, r0
    efe6:	460d      	mov	r5, r1
    efe8:	68b8      	ldr	r0, [r7, #8]
    efea:	f003 fcf7 	bl	129dc <__aeabi_f2d>
    efee:	4602      	mov	r2, r0
    eff0:	460b      	mov	r3, r1
    eff2:	4610      	mov	r0, r2
    eff4:	4619      	mov	r1, r3
    eff6:	a388      	add	r3, pc, #544	; (adr r3, f218 <auto_nav+0x1d80>)
    eff8:	e9d3 2300 	ldrd	r2, r3, [r3]
    effc:	f003 fb90 	bl	12720 <__adddf3>
    f000:	4602      	mov	r2, r0
    f002:	460b      	mov	r3, r1
    f004:	4610      	mov	r0, r2
    f006:	4619      	mov	r1, r3
    f008:	f001 fe26 	bl	10c58 <pp_sin>
    f00c:	4602      	mov	r2, r0
    f00e:	460b      	mov	r3, r1
    f010:	4610      	mov	r0, r2
    f012:	4619      	mov	r1, r3
    f014:	f04f 0200 	mov.w	r2, #0
    f018:	f04f 0300 	mov.w	r3, #0
    f01c:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f020:	f003 fd30 	bl	12a84 <__aeabi_dmul>
    f024:	4602      	mov	r2, r0
    f026:	460b      	mov	r3, r1
    f028:	4620      	mov	r0, r4
    f02a:	4629      	mov	r1, r5
    f02c:	f003 fb78 	bl	12720 <__adddf3>
    f030:	4602      	mov	r2, r0
    f032:	460b      	mov	r3, r1
    f034:	4610      	mov	r0, r2
    f036:	4619      	mov	r1, r3
    f038:	f004 f806 	bl	13048 <__aeabi_d2f>
    f03c:	4606      	mov	r6, r0
    f03e:	f240 1340 	movw	r3, #320	; 0x140
    f042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f046:	691b      	ldr	r3, [r3, #16]
    f048:	4618      	mov	r0, r3
    f04a:	f003 fcc7 	bl	129dc <__aeabi_f2d>
    f04e:	4604      	mov	r4, r0
    f050:	460d      	mov	r5, r1
    f052:	68b8      	ldr	r0, [r7, #8]
    f054:	f003 fcc2 	bl	129dc <__aeabi_f2d>
    f058:	4602      	mov	r2, r0
    f05a:	460b      	mov	r3, r1
    f05c:	4610      	mov	r0, r2
    f05e:	4619      	mov	r1, r3
    f060:	f001 fdfa 	bl	10c58 <pp_sin>
    f064:	4602      	mov	r2, r0
    f066:	460b      	mov	r3, r1
    f068:	4610      	mov	r0, r2
    f06a:	4619      	mov	r1, r3
    f06c:	f04f 0200 	mov.w	r2, #0
    f070:	f04f 0300 	mov.w	r3, #0
    f074:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f078:	f003 fd04 	bl	12a84 <__aeabi_dmul>
    f07c:	4602      	mov	r2, r0
    f07e:	460b      	mov	r3, r1
    f080:	4620      	mov	r0, r4
    f082:	4629      	mov	r1, r5
    f084:	f003 fb4c 	bl	12720 <__adddf3>
    f088:	4602      	mov	r2, r0
    f08a:	460b      	mov	r3, r1
    f08c:	4610      	mov	r0, r2
    f08e:	4619      	mov	r1, r3
    f090:	f003 ffda 	bl	13048 <__aeabi_d2f>
    f094:	4603      	mov	r3, r0
    f096:	4630      	mov	r0, r6
    f098:	4619      	mov	r1, r3
    f09a:	f000 fbc1 	bl	f820 <fly_to_xy>
    f09e:	68b8      	ldr	r0, [r7, #8]
    f0a0:	f003 fc9c 	bl	129dc <__aeabi_f2d>
    f0a4:	4602      	mov	r2, r0
    f0a6:	460b      	mov	r3, r1
    f0a8:	a15b      	add	r1, pc, #364	; (adr r1, f218 <auto_nav+0x1d80>)
    f0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    f0ae:	f003 fb35 	bl	1271c <__aeabi_dsub>
    f0b2:	4602      	mov	r2, r0
    f0b4:	460b      	mov	r3, r1
    f0b6:	4610      	mov	r0, r2
    f0b8:	4619      	mov	r1, r3
    f0ba:	a359      	add	r3, pc, #356	; (adr r3, f220 <auto_nav+0x1d88>)
    f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0c0:	f003 fe0a 	bl	12cd8 <__aeabi_ddiv>
    f0c4:	4602      	mov	r2, r0
    f0c6:	460b      	mov	r3, r1
    f0c8:	4610      	mov	r0, r2
    f0ca:	4619      	mov	r1, r3
    f0cc:	f04f 0200 	mov.w	r2, #0
    f0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f0d4:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f0d8:	f003 fcd4 	bl	12a84 <__aeabi_dmul>
    f0dc:	4602      	mov	r2, r0
    f0de:	460b      	mov	r3, r1
    f0e0:	4610      	mov	r0, r2
    f0e2:	4619      	mov	r1, r3
    f0e4:	f003 ffb0 	bl	13048 <__aeabi_d2f>
    f0e8:	4602      	mov	r2, r0
    f0ea:	f64b 0334 	movw	r3, #47156	; 0xb834
    f0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f2:	601a      	str	r2, [r3, #0]
    f0f4:	e012      	b.n	f11c <auto_nav+0x1c84>
    f0f6:	f64b 0334 	movw	r3, #47156	; 0xb834
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	681b      	ldr	r3, [r3, #0]
    f100:	4618      	mov	r0, r3
    f102:	f04f 0100 	mov.w	r1, #0
    f106:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f10a:	f003 fff3 	bl	130f4 <__addsf3>
    f10e:	4603      	mov	r3, r0
    f110:	461a      	mov	r2, r3
    f112:	f64b 0334 	movw	r3, #47156	; 0xb834
    f116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11a:	601a      	str	r2, [r3, #0]
    f11c:	f64b 0334 	movw	r3, #47156	; 0xb834
    f120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f124:	681b      	ldr	r3, [r3, #0]
    f126:	4618      	mov	r0, r3
    f128:	f04f 0100 	mov.w	r1, #0
    f12c:	f004 fa88 	bl	13640 <__aeabi_fcmplt>
    f130:	4603      	mov	r3, r0
    f132:	2b00      	cmp	r3, #0
    f134:	d1df      	bne.n	f0f6 <auto_nav+0x1c5e>
    f136:	e012      	b.n	f15e <auto_nav+0x1cc6>
    f138:	f64b 0334 	movw	r3, #47156	; 0xb834
    f13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f140:	681b      	ldr	r3, [r3, #0]
    f142:	4618      	mov	r0, r3
    f144:	f04f 0100 	mov.w	r1, #0
    f148:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f14c:	f003 ffd0 	bl	130f0 <__aeabi_fsub>
    f150:	4603      	mov	r3, r0
    f152:	461a      	mov	r2, r3
    f154:	f64b 0334 	movw	r3, #47156	; 0xb834
    f158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15c:	601a      	str	r2, [r3, #0]
    f15e:	f64b 0334 	movw	r3, #47156	; 0xb834
    f162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f166:	681b      	ldr	r3, [r3, #0]
    f168:	4618      	mov	r0, r3
    f16a:	f04f 0100 	mov.w	r1, #0
    f16e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f172:	f004 fa79 	bl	13668 <__aeabi_fcmpge>
    f176:	4603      	mov	r3, r0
    f178:	2b00      	cmp	r3, #0
    f17a:	d1dd      	bne.n	f138 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
    f17c:	f64b 0334 	movw	r3, #47156	; 0xb834
    f180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f184:	681b      	ldr	r3, [r3, #0]
    f186:	4618      	mov	r0, r3
    f188:	f04f 0100 	mov.w	r1, #0
    f18c:	f004 fa76 	bl	1367c <__aeabi_fcmpgt>
    f190:	4603      	mov	r3, r0
    f192:	2b00      	cmp	r3, #0
    f194:	d100      	bne.n	f198 <auto_nav+0x1d00>
        return;
    f196:	e251      	b.n	f63c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f198:	f64b 0334 	movw	r3, #47156	; 0xb834
    f19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a0:	681b      	ldr	r3, [r3, #0]
    f1a2:	4618      	mov	r0, r3
    f1a4:	f04f 0100 	mov.w	r1, #0
    f1a8:	f2c4 1120 	movt	r1, #16672	; 0x4120
    f1ac:	f004 fa48 	bl	13640 <__aeabi_fcmplt>
    f1b0:	4603      	mov	r3, r0
    f1b2:	2b00      	cmp	r3, #0
    f1b4:	d100      	bne.n	f1b8 <auto_nav+0x1d20>
        return;
    f1b6:	e241      	b.n	f63c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
    f1b8:	f64b 0318 	movw	r3, #47128	; 0xb818
    f1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	3301      	adds	r3, #1
    f1c4:	b2da      	uxtb	r2, r3
    f1c6:	f64b 0318 	movw	r3, #47128	; 0xb818
    f1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ce:	701a      	strb	r2, [r3, #0]
    f1d0:	f64b 2374 	movw	r3, #47732	; 0xba74
    f1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d8:	681a      	ldr	r2, [r3, #0]
    f1da:	f64b 031c 	movw	r3, #47132	; 0xb81c
    f1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e2:	601a      	str	r2, [r3, #0]
    f1e4:	f64b 2378 	movw	r3, #47736	; 0xba78
    f1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ec:	681a      	ldr	r2, [r3, #0]
    f1ee:	f64b 0320 	movw	r3, #47136	; 0xb820
    f1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f6:	601a      	str	r2, [r3, #0]
    f1f8:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f200:	2200      	movs	r2, #0
    f202:	801a      	strh	r2, [r3, #0]
    f204:	f64b 0330 	movw	r3, #47152	; 0xb830
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	f04f 0200 	mov.w	r2, #0
    f210:	601a      	str	r2, [r3, #0]
    f212:	e213      	b.n	f63c <auto_nav+0x21a4>
    f214:	f3af 8000 	nop.w
    f218:	54442d18 	.word	0x54442d18
    f21c:	3ff921fb 	.word	0x3ff921fb
    f220:	54442d18 	.word	0x54442d18
    f224:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
    f228:	f64b 0318 	movw	r3, #47128	; 0xb818
    f22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f230:	781b      	ldrb	r3, [r3, #0]
    f232:	2b02      	cmp	r3, #2
    f234:	f040 81ad 	bne.w	f592 <auto_nav+0x20fa>
    {
         nav_stage = 2;
    f238:	f64b 0318 	movw	r3, #47128	; 0xb818
    f23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f240:	2202      	movs	r2, #2
    f242:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
    f244:	f24b 43a7 	movw	r3, #46247	; 0xb4a7
    f248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24c:	2200      	movs	r2, #0
    f24e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
    f250:	f64b 0344 	movw	r3, #47172	; 0xb844
    f254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f258:	f04f 0200 	mov.w	r2, #0
    f25c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
    f25e:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    f262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f266:	2203      	movs	r2, #3
    f268:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
    f26a:	f240 1340 	movw	r3, #320	; 0x140
    f26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f274:	f240 133c 	movw	r3, #316	; 0x13c
    f278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
    f27e:	f64b 030c 	movw	r3, #47116	; 0xb80c
    f282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f286:	f04f 0200 	mov.w	r2, #0
    f28a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
    f28c:	f64b 2378 	movw	r3, #47736	; 0xba78
    f290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f294:	681a      	ldr	r2, [r3, #0]
    f296:	f240 1340 	movw	r3, #320	; 0x140
    f29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f2a0:	4610      	mov	r0, r2
    f2a2:	4619      	mov	r1, r3
    f2a4:	f003 ff24 	bl	130f0 <__aeabi_fsub>
    f2a8:	4603      	mov	r3, r0
    f2aa:	4618      	mov	r0, r3
    f2ac:	f003 fb96 	bl	129dc <__aeabi_f2d>
    f2b0:	4604      	mov	r4, r0
    f2b2:	460d      	mov	r5, r1
    f2b4:	f64b 2374 	movw	r3, #47732	; 0xba74
    f2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2bc:	681a      	ldr	r2, [r3, #0]
    f2be:	f240 1340 	movw	r3, #320	; 0x140
    f2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f2c8:	4610      	mov	r0, r2
    f2ca:	4619      	mov	r1, r3
    f2cc:	f003 ff10 	bl	130f0 <__aeabi_fsub>
    f2d0:	4603      	mov	r3, r0
    f2d2:	4618      	mov	r0, r3
    f2d4:	f003 fb82 	bl	129dc <__aeabi_f2d>
    f2d8:	4602      	mov	r2, r0
    f2da:	460b      	mov	r3, r1
    f2dc:	4620      	mov	r0, r4
    f2de:	4629      	mov	r1, r5
    f2e0:	f001 fbfa 	bl	10ad8 <pp_atan2>
    f2e4:	4602      	mov	r2, r0
    f2e6:	460b      	mov	r3, r1
    f2e8:	4610      	mov	r0, r2
    f2ea:	4619      	mov	r1, r3
    f2ec:	f003 feac 	bl	13048 <__aeabi_d2f>
    f2f0:	4603      	mov	r3, r0
    f2f2:	607b      	str	r3, [r7, #4]
    f2f4:	6878      	ldr	r0, [r7, #4]
    f2f6:	f003 fb71 	bl	129dc <__aeabi_f2d>
    f2fa:	4604      	mov	r4, r0
    f2fc:	460d      	mov	r5, r1
    f2fe:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    f302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f306:	681b      	ldr	r3, [r3, #0]
    f308:	4618      	mov	r0, r3
    f30a:	f04f 0100 	mov.w	r1, #0
    f30e:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
    f312:	f003 fff7 	bl	13304 <__aeabi_fmul>
    f316:	4603      	mov	r3, r0
    f318:	4618      	mov	r0, r3
    f31a:	f003 fb5f 	bl	129dc <__aeabi_f2d>
    f31e:	4602      	mov	r2, r0
    f320:	460b      	mov	r3, r1
    f322:	f04f 0000 	mov.w	r0, #0
    f326:	f04f 0100 	mov.w	r1, #0
    f32a:	f2c4 0114 	movt	r1, #16404	; 0x4014
    f32e:	f003 fcd3 	bl	12cd8 <__aeabi_ddiv>
    f332:	4602      	mov	r2, r0
    f334:	460b      	mov	r3, r1
    f336:	4620      	mov	r0, r4
    f338:	4629      	mov	r1, r5
    f33a:	f003 f9f1 	bl	12720 <__adddf3>
    f33e:	4602      	mov	r2, r0
    f340:	460b      	mov	r3, r1
    f342:	4610      	mov	r0, r2
    f344:	4619      	mov	r1, r3
    f346:	f003 fe7f 	bl	13048 <__aeabi_d2f>
    f34a:	4603      	mov	r3, r0
    f34c:	603b      	str	r3, [r7, #0]
    f34e:	f240 1340 	movw	r3, #320	; 0x140
    f352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f358:	4618      	mov	r0, r3
    f35a:	f003 fb3f 	bl	129dc <__aeabi_f2d>
    f35e:	4604      	mov	r4, r0
    f360:	460d      	mov	r5, r1
    f362:	6838      	ldr	r0, [r7, #0]
    f364:	f003 fb3a 	bl	129dc <__aeabi_f2d>
    f368:	4602      	mov	r2, r0
    f36a:	460b      	mov	r3, r1
    f36c:	4610      	mov	r0, r2
    f36e:	4619      	mov	r1, r3
    f370:	a3b5      	add	r3, pc, #724	; (adr r3, f648 <auto_nav+0x21b0>)
    f372:	e9d3 2300 	ldrd	r2, r3, [r3]
    f376:	f003 f9d3 	bl	12720 <__adddf3>
    f37a:	4602      	mov	r2, r0
    f37c:	460b      	mov	r3, r1
    f37e:	4610      	mov	r0, r2
    f380:	4619      	mov	r1, r3
    f382:	f001 fc69 	bl	10c58 <pp_sin>
    f386:	4602      	mov	r2, r0
    f388:	460b      	mov	r3, r1
    f38a:	4610      	mov	r0, r2
    f38c:	4619      	mov	r1, r3
    f38e:	f04f 0200 	mov.w	r2, #0
    f392:	f04f 0300 	mov.w	r3, #0
    f396:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f39a:	f003 fb73 	bl	12a84 <__aeabi_dmul>
    f39e:	4602      	mov	r2, r0
    f3a0:	460b      	mov	r3, r1
    f3a2:	4620      	mov	r0, r4
    f3a4:	4629      	mov	r1, r5
    f3a6:	f003 f9bb 	bl	12720 <__adddf3>
    f3aa:	4602      	mov	r2, r0
    f3ac:	460b      	mov	r3, r1
    f3ae:	4610      	mov	r0, r2
    f3b0:	4619      	mov	r1, r3
    f3b2:	f003 fe49 	bl	13048 <__aeabi_d2f>
    f3b6:	4606      	mov	r6, r0
    f3b8:	f240 1340 	movw	r3, #320	; 0x140
    f3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f3c2:	4618      	mov	r0, r3
    f3c4:	f003 fb0a 	bl	129dc <__aeabi_f2d>
    f3c8:	4604      	mov	r4, r0
    f3ca:	460d      	mov	r5, r1
    f3cc:	6838      	ldr	r0, [r7, #0]
    f3ce:	f003 fb05 	bl	129dc <__aeabi_f2d>
    f3d2:	4602      	mov	r2, r0
    f3d4:	460b      	mov	r3, r1
    f3d6:	4610      	mov	r0, r2
    f3d8:	4619      	mov	r1, r3
    f3da:	f001 fc3d 	bl	10c58 <pp_sin>
    f3de:	4602      	mov	r2, r0
    f3e0:	460b      	mov	r3, r1
    f3e2:	4610      	mov	r0, r2
    f3e4:	4619      	mov	r1, r3
    f3e6:	f04f 0200 	mov.w	r2, #0
    f3ea:	f04f 0300 	mov.w	r3, #0
    f3ee:	f2c4 0359 	movt	r3, #16473	; 0x4059
    f3f2:	f003 fb47 	bl	12a84 <__aeabi_dmul>
    f3f6:	4602      	mov	r2, r0
    f3f8:	460b      	mov	r3, r1
    f3fa:	4620      	mov	r0, r4
    f3fc:	4629      	mov	r1, r5
    f3fe:	f003 f98f 	bl	12720 <__adddf3>
    f402:	4602      	mov	r2, r0
    f404:	460b      	mov	r3, r1
    f406:	4610      	mov	r0, r2
    f408:	4619      	mov	r1, r3
    f40a:	f003 fe1d 	bl	13048 <__aeabi_d2f>
    f40e:	4603      	mov	r3, r0
    f410:	4630      	mov	r0, r6
    f412:	4619      	mov	r1, r3
    f414:	f000 fa04 	bl	f820 <fly_to_xy>
    f418:	6838      	ldr	r0, [r7, #0]
    f41a:	f003 fadf 	bl	129dc <__aeabi_f2d>
    f41e:	4602      	mov	r2, r0
    f420:	460b      	mov	r3, r1
    f422:	a189      	add	r1, pc, #548	; (adr r1, f648 <auto_nav+0x21b0>)
    f424:	e9d1 0100 	ldrd	r0, r1, [r1]
    f428:	f003 f978 	bl	1271c <__aeabi_dsub>
    f42c:	4602      	mov	r2, r0
    f42e:	460b      	mov	r3, r1
    f430:	4610      	mov	r0, r2
    f432:	4619      	mov	r1, r3
    f434:	a386      	add	r3, pc, #536	; (adr r3, f650 <auto_nav+0x21b8>)
    f436:	e9d3 2300 	ldrd	r2, r3, [r3]
    f43a:	f003 fc4d 	bl	12cd8 <__aeabi_ddiv>
    f43e:	4602      	mov	r2, r0
    f440:	460b      	mov	r3, r1
    f442:	4610      	mov	r0, r2
    f444:	4619      	mov	r1, r3
    f446:	f04f 0200 	mov.w	r2, #0
    f44a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f44e:	f2c4 0366 	movt	r3, #16486	; 0x4066
    f452:	f003 fb17 	bl	12a84 <__aeabi_dmul>
    f456:	4602      	mov	r2, r0
    f458:	460b      	mov	r3, r1
    f45a:	4610      	mov	r0, r2
    f45c:	4619      	mov	r1, r3
    f45e:	f003 fdf3 	bl	13048 <__aeabi_d2f>
    f462:	4602      	mov	r2, r0
    f464:	f64b 0334 	movw	r3, #47156	; 0xb834
    f468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46c:	601a      	str	r2, [r3, #0]
    f46e:	e012      	b.n	f496 <auto_nav+0x1ffe>
    f470:	f64b 0334 	movw	r3, #47156	; 0xb834
    f474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f478:	681b      	ldr	r3, [r3, #0]
    f47a:	4618      	mov	r0, r3
    f47c:	f04f 0100 	mov.w	r1, #0
    f480:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f484:	f003 fe36 	bl	130f4 <__addsf3>
    f488:	4603      	mov	r3, r0
    f48a:	461a      	mov	r2, r3
    f48c:	f64b 0334 	movw	r3, #47156	; 0xb834
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	601a      	str	r2, [r3, #0]
    f496:	f64b 0334 	movw	r3, #47156	; 0xb834
    f49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49e:	681b      	ldr	r3, [r3, #0]
    f4a0:	4618      	mov	r0, r3
    f4a2:	f04f 0100 	mov.w	r1, #0
    f4a6:	f004 f8cb 	bl	13640 <__aeabi_fcmplt>
    f4aa:	4603      	mov	r3, r0
    f4ac:	2b00      	cmp	r3, #0
    f4ae:	d1df      	bne.n	f470 <auto_nav+0x1fd8>
    f4b0:	e012      	b.n	f4d8 <auto_nav+0x2040>
    f4b2:	f64b 0334 	movw	r3, #47156	; 0xb834
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	681b      	ldr	r3, [r3, #0]
    f4bc:	4618      	mov	r0, r3
    f4be:	f04f 0100 	mov.w	r1, #0
    f4c2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f4c6:	f003 fe13 	bl	130f0 <__aeabi_fsub>
    f4ca:	4603      	mov	r3, r0
    f4cc:	461a      	mov	r2, r3
    f4ce:	f64b 0334 	movw	r3, #47156	; 0xb834
    f4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d6:	601a      	str	r2, [r3, #0]
    f4d8:	f64b 0334 	movw	r3, #47156	; 0xb834
    f4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e0:	681b      	ldr	r3, [r3, #0]
    f4e2:	4618      	mov	r0, r3
    f4e4:	f04f 0100 	mov.w	r1, #0
    f4e8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
    f4ec:	f004 f8bc 	bl	13668 <__aeabi_fcmpge>
    f4f0:	4603      	mov	r3, r0
    f4f2:	2b00      	cmp	r3, #0
    f4f4:	d1dd      	bne.n	f4b2 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
    f4f6:	f64b 0334 	movw	r3, #47156	; 0xb834
    f4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fe:	681b      	ldr	r3, [r3, #0]
    f500:	4618      	mov	r0, r3
    f502:	f04f 0100 	mov.w	r1, #0
    f506:	f2c4 3134 	movt	r1, #17204	; 0x4334
    f50a:	f004 f8b7 	bl	1367c <__aeabi_fcmpgt>
    f50e:	4603      	mov	r3, r0
    f510:	2b00      	cmp	r3, #0
    f512:	d100      	bne.n	f516 <auto_nav+0x207e>
          return;
    f514:	e092      	b.n	f63c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f516:	f64b 0334 	movw	r3, #47156	; 0xb834
    f51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51e:	681b      	ldr	r3, [r3, #0]
    f520:	4618      	mov	r0, r3
    f522:	f04f 0100 	mov.w	r1, #0
    f526:	f2c4 313e 	movt	r1, #17214	; 0x433e
    f52a:	f004 f889 	bl	13640 <__aeabi_fcmplt>
    f52e:	4603      	mov	r3, r0
    f530:	2b00      	cmp	r3, #0
    f532:	d100      	bne.n	f536 <auto_nav+0x209e>
          return;
    f534:	e082      	b.n	f63c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
    f536:	f64b 0318 	movw	r3, #47128	; 0xb818
    f53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53e:	781b      	ldrb	r3, [r3, #0]
    f540:	3301      	adds	r3, #1
    f542:	b2da      	uxtb	r2, r3
    f544:	f64b 0318 	movw	r3, #47128	; 0xb818
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	701a      	strb	r2, [r3, #0]
    f54e:	f64b 2374 	movw	r3, #47732	; 0xba74
    f552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f556:	681a      	ldr	r2, [r3, #0]
    f558:	f64b 031c 	movw	r3, #47132	; 0xb81c
    f55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f560:	601a      	str	r2, [r3, #0]
    f562:	f64b 2378 	movw	r3, #47736	; 0xba78
    f566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56a:	681a      	ldr	r2, [r3, #0]
    f56c:	f64b 0320 	movw	r3, #47136	; 0xb820
    f570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f574:	601a      	str	r2, [r3, #0]
    f576:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57e:	2200      	movs	r2, #0
    f580:	801a      	strh	r2, [r3, #0]
    f582:	f64b 0330 	movw	r3, #47152	; 0xb830
    f586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58a:	f04f 0200 	mov.w	r2, #0
    f58e:	601a      	str	r2, [r3, #0]
    f590:	e054      	b.n	f63c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
    f592:	f64b 0318 	movw	r3, #47128	; 0xb818
    f596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59a:	781b      	ldrb	r3, [r3, #0]
    f59c:	2b03      	cmp	r3, #3
    f59e:	d106      	bne.n	f5ae <auto_nav+0x2116>
    {
	  nav_stage = 3;
    f5a0:	f64b 0318 	movw	r3, #47128	; 0xb818
    f5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a8:	2203      	movs	r2, #3
    f5aa:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
    f5ac:	e44b      	b.n	ee46 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
    f5ae:	f64b 0318 	movw	r3, #47128	; 0xb818
    f5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	2b04      	cmp	r3, #4
    f5ba:	d13f      	bne.n	f63c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
    f5bc:	f64b 0318 	movw	r3, #47128	; 0xb818
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	2204      	movs	r2, #4
    f5c6:	701a      	strb	r2, [r3, #0]
        NextBlock()
    f5c8:	f64b 0319 	movw	r3, #47129	; 0xb819
    f5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d0:	781b      	ldrb	r3, [r3, #0]
    f5d2:	3301      	adds	r3, #1
    f5d4:	b2da      	uxtb	r2, r3
    f5d6:	f64b 0319 	movw	r3, #47129	; 0xb819
    f5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5de:	701a      	strb	r2, [r3, #0]
    f5e0:	f64b 0318 	movw	r3, #47128	; 0xb818
    f5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e8:	2200      	movs	r2, #0
    f5ea:	701a      	strb	r2, [r3, #0]
    f5ec:	f64b 032e 	movw	r3, #47150	; 0xb82e
    f5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f4:	2200      	movs	r2, #0
    f5f6:	801a      	strh	r2, [r3, #0]
    f5f8:	f64b 2374 	movw	r3, #47732	; 0xba74
    f5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f600:	681a      	ldr	r2, [r3, #0]
    f602:	f64b 031c 	movw	r3, #47132	; 0xb81c
    f606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60a:	601a      	str	r2, [r3, #0]
    f60c:	f64b 2378 	movw	r3, #47736	; 0xba78
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	681a      	ldr	r2, [r3, #0]
    f616:	f64b 0320 	movw	r3, #47136	; 0xb820
    f61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61e:	601a      	str	r2, [r3, #0]
    f620:	f64b 032c 	movw	r3, #47148	; 0xb82c
    f624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f628:	2200      	movs	r2, #0
    f62a:	801a      	strh	r2, [r3, #0]
    f62c:	f64b 0330 	movw	r3, #47152	; 0xb830
    f630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f634:	f04f 0200 	mov.w	r2, #0
    f638:	601a      	str	r2, [r3, #0]
    f63a:	bf00      	nop
    else { }
}
else { }

//#endif
}
    f63c:	372c      	adds	r7, #44	; 0x2c
    f63e:	46bd      	mov	sp, r7
    f640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f642:	bf00      	nop
    f644:	f3af 8000 	nop.w
    f648:	54442d18 	.word	0x54442d18
    f64c:	3ff921fb 	.word	0x3ff921fb
    f650:	54442d18 	.word	0x54442d18
    f654:	400921fb 	.word	0x400921fb

0000f658 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
    f658:	b590      	push	{r4, r7, lr}
    f65a:	b087      	sub	sp, #28
    f65c:	af00      	add	r7, sp, #0
    f65e:	4603      	mov	r3, r0
    f660:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
    f662:	79f9      	ldrb	r1, [r7, #7]
    f664:	f240 1240 	movw	r2, #320	; 0x140
    f668:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f66c:	460b      	mov	r3, r1
    f66e:	005b      	lsls	r3, r3, #1
    f670:	440b      	add	r3, r1
    f672:	009b      	lsls	r3, r3, #2
    f674:	4413      	add	r3, r2
    f676:	681a      	ldr	r2, [r3, #0]
    f678:	f64b 2374 	movw	r3, #47732	; 0xba74
    f67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f680:	681b      	ldr	r3, [r3, #0]
    f682:	4610      	mov	r0, r2
    f684:	4619      	mov	r1, r3
    f686:	f003 fd33 	bl	130f0 <__aeabi_fsub>
    f68a:	4603      	mov	r3, r0
    f68c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
    f68e:	79f9      	ldrb	r1, [r7, #7]
    f690:	f240 1240 	movw	r2, #320	; 0x140
    f694:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f698:	460b      	mov	r3, r1
    f69a:	005b      	lsls	r3, r3, #1
    f69c:	440b      	add	r3, r1
    f69e:	009b      	lsls	r3, r3, #2
    f6a0:	4413      	add	r3, r2
    f6a2:	3304      	adds	r3, #4
    f6a4:	681a      	ldr	r2, [r3, #0]
    f6a6:	f64b 2378 	movw	r3, #47736	; 0xba78
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	681b      	ldr	r3, [r3, #0]
    f6b0:	4610      	mov	r0, r2
    f6b2:	4619      	mov	r1, r3
    f6b4:	f003 fd1c 	bl	130f0 <__aeabi_fsub>
    f6b8:	4603      	mov	r3, r0
    f6ba:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
    f6bc:	6978      	ldr	r0, [r7, #20]
    f6be:	6979      	ldr	r1, [r7, #20]
    f6c0:	f003 fe20 	bl	13304 <__aeabi_fmul>
    f6c4:	4603      	mov	r3, r0
    f6c6:	461c      	mov	r4, r3
    f6c8:	6938      	ldr	r0, [r7, #16]
    f6ca:	6939      	ldr	r1, [r7, #16]
    f6cc:	f003 fe1a 	bl	13304 <__aeabi_fmul>
    f6d0:	4603      	mov	r3, r0
    f6d2:	4620      	mov	r0, r4
    f6d4:	4619      	mov	r1, r3
    f6d6:	f003 fd0d 	bl	130f4 <__addsf3>
    f6da:	4603      	mov	r3, r0
    f6dc:	461a      	mov	r2, r3
    f6de:	f64b 034c 	movw	r3, #47180	; 0xb84c
    f6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
    f6e8:	f64b 23ac 	movw	r3, #47788	; 0xbaac
    f6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f0:	681b      	ldr	r3, [r3, #0]
    f6f2:	4618      	mov	r0, r3
    f6f4:	f04f 0100 	mov.w	r1, #0
    f6f8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
    f6fc:	f003 fe02 	bl	13304 <__aeabi_fmul>
    f700:	4603      	mov	r3, r0
    f702:	461a      	mov	r2, r3
    f704:	f64b 0358 	movw	r3, #47192	; 0xb858
    f708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70c:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
    f70e:	f64b 0358 	movw	r3, #47192	; 0xb858
    f712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f716:	681b      	ldr	r3, [r3, #0]
    f718:	4618      	mov	r0, r3
    f71a:	f04f 0100 	mov.w	r1, #0
    f71e:	f2c4 2120 	movt	r1, #16928	; 0x4220
    f722:	f003 ff8d 	bl	13640 <__aeabi_fcmplt>
    f726:	4603      	mov	r3, r0
    f728:	2b00      	cmp	r3, #0
    f72a:	d004      	beq.n	f736 <approaching+0xde>
    f72c:	f04f 0200 	mov.w	r2, #0
    f730:	f2c4 2220 	movt	r2, #16928	; 0x4220
    f734:	e004      	b.n	f740 <approaching+0xe8>
    f736:	f64b 0358 	movw	r3, #47192	; 0xb858
    f73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73e:	681a      	ldr	r2, [r3, #0]
    f740:	f64b 0358 	movw	r3, #47192	; 0xb858
    f744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f748:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
    f74a:	f64b 0358 	movw	r3, #47192	; 0xb858
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	681a      	ldr	r2, [r3, #0]
    f754:	f64b 0358 	movw	r3, #47192	; 0xb858
    f758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75c:	681b      	ldr	r3, [r3, #0]
    f75e:	4610      	mov	r0, r2
    f760:	4619      	mov	r1, r3
    f762:	f003 fdcf 	bl	13304 <__aeabi_fmul>
    f766:	4603      	mov	r3, r0
    f768:	461a      	mov	r2, r3
    f76a:	f64b 034c 	movw	r3, #47180	; 0xb84c
    f76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f772:	681b      	ldr	r3, [r3, #0]
    f774:	4610      	mov	r0, r2
    f776:	4619      	mov	r1, r3
    f778:	f003 ff80 	bl	1367c <__aeabi_fcmpgt>
    f77c:	4603      	mov	r3, r0
    f77e:	2b00      	cmp	r3, #0
    f780:	d001      	beq.n	f786 <approaching+0x12e>
    return TRUE;
    f782:	2301      	movs	r3, #1
    f784:	e048      	b.n	f818 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
    f786:	79f9      	ldrb	r1, [r7, #7]
    f788:	f240 1240 	movw	r2, #320	; 0x140
    f78c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f790:	460b      	mov	r3, r1
    f792:	005b      	lsls	r3, r3, #1
    f794:	440b      	add	r3, r1
    f796:	009b      	lsls	r3, r3, #2
    f798:	4413      	add	r3, r2
    f79a:	681a      	ldr	r2, [r3, #0]
    f79c:	f64b 031c 	movw	r3, #47132	; 0xb81c
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	681b      	ldr	r3, [r3, #0]
    f7a6:	4610      	mov	r0, r2
    f7a8:	4619      	mov	r1, r3
    f7aa:	f003 fca1 	bl	130f0 <__aeabi_fsub>
    f7ae:	4603      	mov	r3, r0
    f7b0:	4618      	mov	r0, r3
    f7b2:	6979      	ldr	r1, [r7, #20]
    f7b4:	f003 fda6 	bl	13304 <__aeabi_fmul>
    f7b8:	4603      	mov	r3, r0
    f7ba:	461c      	mov	r4, r3
    f7bc:	79f9      	ldrb	r1, [r7, #7]
    f7be:	f240 1240 	movw	r2, #320	; 0x140
    f7c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f7c6:	460b      	mov	r3, r1
    f7c8:	005b      	lsls	r3, r3, #1
    f7ca:	440b      	add	r3, r1
    f7cc:	009b      	lsls	r3, r3, #2
    f7ce:	4413      	add	r3, r2
    f7d0:	3304      	adds	r3, #4
    f7d2:	681a      	ldr	r2, [r3, #0]
    f7d4:	f64b 0320 	movw	r3, #47136	; 0xb820
    f7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7dc:	681b      	ldr	r3, [r3, #0]
    f7de:	4610      	mov	r0, r2
    f7e0:	4619      	mov	r1, r3
    f7e2:	f003 fc85 	bl	130f0 <__aeabi_fsub>
    f7e6:	4603      	mov	r3, r0
    f7e8:	4618      	mov	r0, r3
    f7ea:	6939      	ldr	r1, [r7, #16]
    f7ec:	f003 fd8a 	bl	13304 <__aeabi_fmul>
    f7f0:	4603      	mov	r3, r0
    f7f2:	4620      	mov	r0, r4
    f7f4:	4619      	mov	r1, r3
    f7f6:	f003 fc7d 	bl	130f4 <__addsf3>
    f7fa:	4603      	mov	r3, r0
    f7fc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
    f7fe:	2301      	movs	r3, #1
    f800:	461c      	mov	r4, r3
    f802:	68f8      	ldr	r0, [r7, #12]
    f804:	f04f 0100 	mov.w	r1, #0
    f808:	f003 ff1a 	bl	13640 <__aeabi_fcmplt>
    f80c:	4603      	mov	r3, r0
    f80e:	2b00      	cmp	r3, #0
    f810:	d101      	bne.n	f816 <approaching+0x1be>
    f812:	2300      	movs	r3, #0
    f814:	461c      	mov	r4, r3
    f816:	b2e3      	uxtb	r3, r4
}
    f818:	4618      	mov	r0, r3
    f81a:	371c      	adds	r7, #28
    f81c:	46bd      	mov	sp, r7
    f81e:	bd90      	pop	{r4, r7, pc}

0000f820 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
    f820:	b5b0      	push	{r4, r5, r7, lr}
    f822:	b082      	sub	sp, #8
    f824:	af00      	add	r7, sp, #0
    f826:	6078      	str	r0, [r7, #4]
    f828:	6039      	str	r1, [r7, #0]
  desired_x = x;
    f82a:	f64b 0338 	movw	r3, #47160	; 0xb838
    f82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f832:	687a      	ldr	r2, [r7, #4]
    f834:	601a      	str	r2, [r3, #0]
  desired_y = y;
    f836:	f64b 033c 	movw	r3, #47164	; 0xb83c
    f83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83e:	683a      	ldr	r2, [r7, #0]
    f840:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
    f842:	f64b 2378 	movw	r3, #47736	; 0xba78
    f846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84a:	681b      	ldr	r3, [r3, #0]
    f84c:	6838      	ldr	r0, [r7, #0]
    f84e:	4619      	mov	r1, r3
    f850:	f003 fc4e 	bl	130f0 <__aeabi_fsub>
    f854:	4603      	mov	r3, r0
    f856:	4618      	mov	r0, r3
    f858:	f003 f8c0 	bl	129dc <__aeabi_f2d>
    f85c:	4604      	mov	r4, r0
    f85e:	460d      	mov	r5, r1
    f860:	f64b 2374 	movw	r3, #47732	; 0xba74
    f864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f868:	681b      	ldr	r3, [r3, #0]
    f86a:	6878      	ldr	r0, [r7, #4]
    f86c:	4619      	mov	r1, r3
    f86e:	f003 fc3f 	bl	130f0 <__aeabi_fsub>
    f872:	4603      	mov	r3, r0
    f874:	4618      	mov	r0, r3
    f876:	f003 f8b1 	bl	129dc <__aeabi_f2d>
    f87a:	4602      	mov	r2, r0
    f87c:	460b      	mov	r3, r1
    f87e:	4620      	mov	r0, r4
    f880:	4629      	mov	r1, r5
    f882:	f001 f929 	bl	10ad8 <pp_atan2>
    f886:	4602      	mov	r2, r0
    f888:	460b      	mov	r3, r1
    f88a:	a10b      	add	r1, pc, #44	; (adr r1, f8b8 <fly_to_xy+0x98>)
    f88c:	e9d1 0100 	ldrd	r0, r1, [r1]
    f890:	f002 ff44 	bl	1271c <__aeabi_dsub>
    f894:	4602      	mov	r2, r0
    f896:	460b      	mov	r3, r1
    f898:	4610      	mov	r0, r2
    f89a:	4619      	mov	r1, r3
    f89c:	f003 fbd4 	bl	13048 <__aeabi_d2f>
    f8a0:	4602      	mov	r2, r0
    f8a2:	f64b 0304 	movw	r3, #47108	; 0xb804
    f8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8aa:	601a      	str	r2, [r3, #0]
}
    f8ac:	3708      	adds	r7, #8
    f8ae:	46bd      	mov	sp, r7
    f8b0:	bdb0      	pop	{r4, r5, r7, pc}
    f8b2:	bf00      	nop
    f8b4:	f3af 8000 	nop.w
    f8b8:	54442d18 	.word	0x54442d18
    f8bc:	3ff921fb 	.word	0x3ff921fb

0000f8c0 <fly_to>:

static void fly_to(uint8_t wp) { 
    f8c0:	b580      	push	{r7, lr}
    f8c2:	b082      	sub	sp, #8
    f8c4:	af00      	add	r7, sp, #0
    f8c6:	4603      	mov	r3, r0
    f8c8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
    f8ca:	79f9      	ldrb	r1, [r7, #7]
    f8cc:	f240 1240 	movw	r2, #320	; 0x140
    f8d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8d4:	460b      	mov	r3, r1
    f8d6:	005b      	lsls	r3, r3, #1
    f8d8:	440b      	add	r3, r1
    f8da:	009b      	lsls	r3, r3, #2
    f8dc:	4413      	add	r3, r2
    f8de:	6818      	ldr	r0, [r3, #0]
    f8e0:	79f9      	ldrb	r1, [r7, #7]
    f8e2:	f240 1240 	movw	r2, #320	; 0x140
    f8e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f8ea:	460b      	mov	r3, r1
    f8ec:	005b      	lsls	r3, r3, #1
    f8ee:	440b      	add	r3, r1
    f8f0:	009b      	lsls	r3, r3, #2
    f8f2:	4413      	add	r3, r2
    f8f4:	3304      	adds	r3, #4
    f8f6:	681b      	ldr	r3, [r3, #0]
    f8f8:	4619      	mov	r1, r3
    f8fa:	f7ff ff91 	bl	f820 <fly_to_xy>
}
    f8fe:	3708      	adds	r7, #8
    f900:	46bd      	mov	sp, r7
    f902:	bd80      	pop	{r7, pc}

0000f904 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
    f904:	b5b0      	push	{r4, r5, r7, lr}
    f906:	b088      	sub	sp, #32
    f908:	af00      	add	r7, sp, #0
    f90a:	4602      	mov	r2, r0
    f90c:	460b      	mov	r3, r1
    f90e:	71fa      	strb	r2, [r7, #7]
    f910:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
    f912:	79f9      	ldrb	r1, [r7, #7]
    f914:	f240 1240 	movw	r2, #320	; 0x140
    f918:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f91c:	460b      	mov	r3, r1
    f91e:	005b      	lsls	r3, r3, #1
    f920:	440b      	add	r3, r1
    f922:	009b      	lsls	r3, r3, #2
    f924:	4413      	add	r3, r2
    f926:	681b      	ldr	r3, [r3, #0]
    f928:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
    f92a:	79f9      	ldrb	r1, [r7, #7]
    f92c:	f240 1240 	movw	r2, #320	; 0x140
    f930:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f934:	460b      	mov	r3, r1
    f936:	005b      	lsls	r3, r3, #1
    f938:	440b      	add	r3, r1
    f93a:	009b      	lsls	r3, r3, #2
    f93c:	4413      	add	r3, r2
    f93e:	3304      	adds	r3, #4
    f940:	681b      	ldr	r3, [r3, #0]
    f942:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
    f944:	79b9      	ldrb	r1, [r7, #6]
    f946:	f240 1240 	movw	r2, #320	; 0x140
    f94a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f94e:	460b      	mov	r3, r1
    f950:	005b      	lsls	r3, r3, #1
    f952:	440b      	add	r3, r1
    f954:	009b      	lsls	r3, r3, #2
    f956:	4413      	add	r3, r2
    f958:	681b      	ldr	r3, [r3, #0]
    f95a:	4618      	mov	r0, r3
    f95c:	69f9      	ldr	r1, [r7, #28]
    f95e:	f003 fbc7 	bl	130f0 <__aeabi_fsub>
    f962:	4603      	mov	r3, r0
    f964:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
    f966:	79b9      	ldrb	r1, [r7, #6]
    f968:	f240 1240 	movw	r2, #320	; 0x140
    f96c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f970:	460b      	mov	r3, r1
    f972:	005b      	lsls	r3, r3, #1
    f974:	440b      	add	r3, r1
    f976:	009b      	lsls	r3, r3, #2
    f978:	4413      	add	r3, r2
    f97a:	3304      	adds	r3, #4
    f97c:	681b      	ldr	r3, [r3, #0]
    f97e:	4618      	mov	r0, r3
    f980:	69b9      	ldr	r1, [r7, #24]
    f982:	f003 fbb5 	bl	130f0 <__aeabi_fsub>
    f986:	4603      	mov	r3, r0
    f988:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
    f98a:	6978      	ldr	r0, [r7, #20]
    f98c:	6979      	ldr	r1, [r7, #20]
    f98e:	f003 fcb9 	bl	13304 <__aeabi_fmul>
    f992:	4603      	mov	r3, r0
    f994:	461c      	mov	r4, r3
    f996:	6938      	ldr	r0, [r7, #16]
    f998:	6939      	ldr	r1, [r7, #16]
    f99a:	f003 fcb3 	bl	13304 <__aeabi_fmul>
    f99e:	4603      	mov	r3, r0
    f9a0:	4620      	mov	r0, r4
    f9a2:	4619      	mov	r1, r3
    f9a4:	f003 fba6 	bl	130f4 <__addsf3>
    f9a8:	4603      	mov	r3, r0
    f9aa:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
    f9ac:	f64b 2374 	movw	r3, #47732	; 0xba74
    f9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b4:	681b      	ldr	r3, [r3, #0]
    f9b6:	4618      	mov	r0, r3
    f9b8:	69f9      	ldr	r1, [r7, #28]
    f9ba:	f003 fb99 	bl	130f0 <__aeabi_fsub>
    f9be:	4603      	mov	r3, r0
    f9c0:	4618      	mov	r0, r3
    f9c2:	6979      	ldr	r1, [r7, #20]
    f9c4:	f003 fc9e 	bl	13304 <__aeabi_fmul>
    f9c8:	4603      	mov	r3, r0
    f9ca:	461c      	mov	r4, r3
    f9cc:	f64b 2378 	movw	r3, #47736	; 0xba78
    f9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d4:	681b      	ldr	r3, [r3, #0]
    f9d6:	4618      	mov	r0, r3
    f9d8:	69b9      	ldr	r1, [r7, #24]
    f9da:	f003 fb89 	bl	130f0 <__aeabi_fsub>
    f9de:	4603      	mov	r3, r0
    f9e0:	4618      	mov	r0, r3
    f9e2:	6939      	ldr	r1, [r7, #16]
    f9e4:	f003 fc8e 	bl	13304 <__aeabi_fmul>
    f9e8:	4603      	mov	r3, r0
    f9ea:	4620      	mov	r0, r4
    f9ec:	4619      	mov	r1, r3
    f9ee:	f003 fb81 	bl	130f4 <__addsf3>
    f9f2:	4603      	mov	r3, r0
    f9f4:	4618      	mov	r0, r3
    f9f6:	68f9      	ldr	r1, [r7, #12]
    f9f8:	f003 fd38 	bl	1346c <__aeabi_fdiv>
    f9fc:	4603      	mov	r3, r0
    f9fe:	461a      	mov	r2, r3
    fa00:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa08:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
    fa0a:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fa0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa12:	681b      	ldr	r3, [r3, #0]
    fa14:	4618      	mov	r0, r3
    fa16:	f04f 0100 	mov.w	r1, #0
    fa1a:	f003 fe25 	bl	13668 <__aeabi_fcmpge>
    fa1e:	4603      	mov	r3, r0
    fa20:	2b00      	cmp	r3, #0
    fa22:	d005      	beq.n	fa30 <route_to+0x12c>
    fa24:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2c:	681a      	ldr	r2, [r3, #0]
    fa2e:	e001      	b.n	fa34 <route_to+0x130>
    fa30:	f04f 0200 	mov.w	r2, #0
    fa34:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fa38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa3c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
    fa3e:	68f8      	ldr	r0, [r7, #12]
    fa40:	f002 ffcc 	bl	129dc <__aeabi_f2d>
    fa44:	4602      	mov	r2, r0
    fa46:	460b      	mov	r3, r1
    fa48:	4610      	mov	r0, r2
    fa4a:	4619      	mov	r1, r3
    fa4c:	f001 f9f4 	bl	10e38 <pp_sqrt>
    fa50:	4602      	mov	r2, r0
    fa52:	460b      	mov	r3, r1
    fa54:	4610      	mov	r0, r2
    fa56:	4619      	mov	r1, r3
    fa58:	f003 faf6 	bl	13048 <__aeabi_d2f>
    fa5c:	4602      	mov	r2, r0
    fa5e:	f64b 0360 	movw	r3, #47200	; 0xb860
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
    fa68:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	681b      	ldr	r3, [r3, #0]
    fa72:	4618      	mov	r0, r3
    fa74:	f002 ffb2 	bl	129dc <__aeabi_f2d>
    fa78:	4604      	mov	r4, r0
    fa7a:	460d      	mov	r5, r1
    fa7c:	f64b 0358 	movw	r3, #47192	; 0xb858
    fa80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa84:	681a      	ldr	r2, [r3, #0]
    fa86:	f64b 0360 	movw	r3, #47200	; 0xb860
    fa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa8e:	681b      	ldr	r3, [r3, #0]
    fa90:	4610      	mov	r0, r2
    fa92:	4619      	mov	r1, r3
    fa94:	f003 fcea 	bl	1346c <__aeabi_fdiv>
    fa98:	4603      	mov	r3, r0
    fa9a:	4618      	mov	r0, r3
    fa9c:	f04f 0100 	mov.w	r1, #0
    faa0:	f003 fde2 	bl	13668 <__aeabi_fcmpge>
    faa4:	4603      	mov	r3, r0
    faa6:	2b00      	cmp	r3, #0
    faa8:	d014      	beq.n	fad4 <route_to+0x1d0>
    faaa:	f64b 0358 	movw	r3, #47192	; 0xb858
    faae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab2:	681a      	ldr	r2, [r3, #0]
    fab4:	f64b 0360 	movw	r3, #47200	; 0xb860
    fab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabc:	681b      	ldr	r3, [r3, #0]
    fabe:	4610      	mov	r0, r2
    fac0:	4619      	mov	r1, r3
    fac2:	f003 fcd3 	bl	1346c <__aeabi_fdiv>
    fac6:	4603      	mov	r3, r0
    fac8:	4618      	mov	r0, r3
    faca:	f002 ff87 	bl	129dc <__aeabi_f2d>
    face:	4602      	mov	r2, r0
    fad0:	460b      	mov	r3, r1
    fad2:	e003      	b.n	fadc <route_to+0x1d8>
    fad4:	f04f 0200 	mov.w	r2, #0
    fad8:	f04f 0300 	mov.w	r3, #0
    fadc:	4620      	mov	r0, r4
    fade:	4629      	mov	r1, r5
    fae0:	f002 fe1e 	bl	12720 <__adddf3>
    fae4:	4602      	mov	r2, r0
    fae6:	460b      	mov	r3, r1
    fae8:	4610      	mov	r0, r2
    faea:	4619      	mov	r1, r3
    faec:	f003 faac 	bl	13048 <__aeabi_d2f>
    faf0:	4602      	mov	r2, r0
    faf2:	f64b 035c 	movw	r3, #47196	; 0xb85c
    faf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafa:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
    fafc:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb04:	681b      	ldr	r3, [r3, #0]
    fb06:	4618      	mov	r0, r3
    fb08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    fb0c:	f003 fdac 	bl	13668 <__aeabi_fcmpge>
    fb10:	4603      	mov	r3, r0
    fb12:	2b00      	cmp	r3, #0
    fb14:	d002      	beq.n	fb1c <route_to+0x218>
    fb16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    fb1a:	e004      	b.n	fb26 <route_to+0x222>
    fb1c:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb24:	681a      	ldr	r2, [r3, #0]
    fb26:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
    fb30:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb38:	681b      	ldr	r3, [r3, #0]
    fb3a:	4618      	mov	r0, r3
    fb3c:	6979      	ldr	r1, [r7, #20]
    fb3e:	f003 fbe1 	bl	13304 <__aeabi_fmul>
    fb42:	4603      	mov	r3, r0
    fb44:	4618      	mov	r0, r3
    fb46:	69f9      	ldr	r1, [r7, #28]
    fb48:	f003 fad4 	bl	130f4 <__addsf3>
    fb4c:	4603      	mov	r3, r0
    fb4e:	461c      	mov	r4, r3
    fb50:	f64b 035c 	movw	r3, #47196	; 0xb85c
    fb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb58:	681b      	ldr	r3, [r3, #0]
    fb5a:	4618      	mov	r0, r3
    fb5c:	6939      	ldr	r1, [r7, #16]
    fb5e:	f003 fbd1 	bl	13304 <__aeabi_fmul>
    fb62:	4603      	mov	r3, r0
    fb64:	4618      	mov	r0, r3
    fb66:	69b9      	ldr	r1, [r7, #24]
    fb68:	f003 fac4 	bl	130f4 <__addsf3>
    fb6c:	4603      	mov	r3, r0
    fb6e:	4620      	mov	r0, r4
    fb70:	4619      	mov	r1, r3
    fb72:	f7ff fe55 	bl	f820 <fly_to_xy>
}
    fb76:	3720      	adds	r7, #32
    fb78:	46bd      	mov	sp, r7
    fb7a:	bdb0      	pop	{r4, r5, r7, pc}

0000fb7c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
    fb7c:	b590      	push	{r4, r7, lr}
    fb7e:	b083      	sub	sp, #12
    fb80:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
    fb82:	f240 1340 	movw	r3, #320	; 0x140
    fb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8a:	681a      	ldr	r2, [r3, #0]
    fb8c:	f64b 2374 	movw	r3, #47732	; 0xba74
    fb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb94:	681b      	ldr	r3, [r3, #0]
    fb96:	4610      	mov	r0, r2
    fb98:	4619      	mov	r1, r3
    fb9a:	f003 faa9 	bl	130f0 <__aeabi_fsub>
    fb9e:	4603      	mov	r3, r0
    fba0:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
    fba2:	f240 1340 	movw	r3, #320	; 0x140
    fba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbaa:	685a      	ldr	r2, [r3, #4]
    fbac:	f64b 2378 	movw	r3, #47736	; 0xba78
    fbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb4:	681b      	ldr	r3, [r3, #0]
    fbb6:	4610      	mov	r0, r2
    fbb8:	4619      	mov	r1, r3
    fbba:	f003 fa99 	bl	130f0 <__aeabi_fsub>
    fbbe:	4603      	mov	r3, r0
    fbc0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
    fbc2:	6878      	ldr	r0, [r7, #4]
    fbc4:	6879      	ldr	r1, [r7, #4]
    fbc6:	f003 fb9d 	bl	13304 <__aeabi_fmul>
    fbca:	4603      	mov	r3, r0
    fbcc:	461c      	mov	r4, r3
    fbce:	6838      	ldr	r0, [r7, #0]
    fbd0:	6839      	ldr	r1, [r7, #0]
    fbd2:	f003 fb97 	bl	13304 <__aeabi_fmul>
    fbd6:	4603      	mov	r3, r0
    fbd8:	4620      	mov	r0, r4
    fbda:	4619      	mov	r1, r3
    fbdc:	f003 fa8a 	bl	130f4 <__addsf3>
    fbe0:	4603      	mov	r3, r0
    fbe2:	461a      	mov	r2, r3
    fbe4:	f64b 0350 	movw	r3, #47184	; 0xb850
    fbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbec:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
    fbee:	f64b 0350 	movw	r3, #47184	; 0xb850
    fbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf6:	681b      	ldr	r3, [r3, #0]
    fbf8:	2201      	movs	r2, #1
    fbfa:	4614      	mov	r4, r2
    fbfc:	4618      	mov	r0, r3
    fbfe:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    fc02:	f6c4 0174 	movt	r1, #18548	; 0x4874
    fc06:	f003 fd39 	bl	1367c <__aeabi_fcmpgt>
    fc0a:	4603      	mov	r3, r0
    fc0c:	2b00      	cmp	r3, #0
    fc0e:	d101      	bne.n	fc14 <compute_dist2_to_home+0x98>
    fc10:	2300      	movs	r3, #0
    fc12:	461c      	mov	r4, r3
    fc14:	b2e3      	uxtb	r3, r4
    fc16:	461a      	mov	r2, r3
    fc18:	f64b 0354 	movw	r3, #47188	; 0xb854
    fc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc20:	701a      	strb	r2, [r3, #0]
}
    fc22:	370c      	adds	r7, #12
    fc24:	46bd      	mov	sp, r7
    fc26:	bd90      	pop	{r4, r7, pc}

0000fc28 <nav_home>:

void nav_home(void) {
    fc28:	b580      	push	{r7, lr}
    fc2a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
    fc2c:	f64b 0344 	movw	r3, #47172	; 0xb844
    fc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc34:	f04f 0200 	mov.w	r2, #0
    fc38:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
    fc3a:	f24b 43a5 	movw	r3, #46245	; 0xb4a5
    fc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc42:	2203      	movs	r2, #3
    fc44:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
    fc46:	f240 133c 	movw	r3, #316	; 0x13c
    fc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4e:	f04f 0200 	mov.w	r2, #0
    fc52:	f2c4 322f 	movt	r2, #17199	; 0x432f
    fc56:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
    fc58:	f7ff ff90 	bl	fb7c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
    fc5c:	f64b 0350 	movw	r3, #47184	; 0xb850
    fc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc64:	681a      	ldr	r2, [r3, #0]
    fc66:	f64b 034c 	movw	r3, #47180	; 0xb84c
    fc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6e:	601a      	str	r2, [r3, #0]
}
    fc70:	bd80      	pop	{r7, pc}
    fc72:	bf00      	nop

0000fc74 <nav_update>:

void nav_update(void) {
    fc74:	b580      	push	{r7, lr}
    fc76:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
    fc78:	f7ff ff80 	bl	fb7c <compute_dist2_to_home>

  auto_nav();
    fc7c:	f7fd fc0c 	bl	d498 <auto_nav>
}
    fc80:	bd80      	pop	{r7, pc}
    fc82:	bf00      	nop

0000fc84 <nav_init>:


void nav_init(void) {
    fc84:	b480      	push	{r7}
    fc86:	af00      	add	r7, sp, #0
  nav_block = 0;
    fc88:	f64b 0319 	movw	r3, #47129	; 0xb819
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	2200      	movs	r2, #0
    fc92:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
    fc94:	f64b 0318 	movw	r3, #47128	; 0xb818
    fc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9c:	2200      	movs	r2, #0
    fc9e:	701a      	strb	r2, [r3, #0]
}
    fca0:	46bd      	mov	sp, r7
    fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    fca6:	4770      	bx	lr

0000fca8 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
    fca8:	b480      	push	{r7}
    fcaa:	b083      	sub	sp, #12
    fcac:	af00      	add	r7, sp, #0
    fcae:	4603      	mov	r3, r0
    fcb0:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
    fcb2:	f248 030a 	movw	r3, #32778	; 0x800a
    fcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcba:	781b      	ldrb	r3, [r3, #0]
    fcbc:	b2db      	uxtb	r3, r3
    fcbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d028      	beq.n	fd18 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
    fcc6:	f64b 036d 	movw	r3, #47213	; 0xb86d
    fcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcce:	781b      	ldrb	r3, [r3, #0]
    fcd0:	b2db      	uxtb	r3, r3
    fcd2:	461a      	mov	r2, r3
    fcd4:	f64b 036c 	movw	r3, #47212	; 0xb86c
    fcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcdc:	781b      	ldrb	r3, [r3, #0]
    fcde:	3301      	adds	r3, #1
    fce0:	429a      	cmp	r2, r3
    fce2:	d100      	bne.n	fce6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fce4:	e02c      	b.n	fd40 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
    fce6:	f64b 036c 	movw	r3, #47212	; 0xb86c
    fcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcee:	781b      	ldrb	r3, [r3, #0]
    fcf0:	461a      	mov	r2, r3
    fcf2:	f64b 0370 	movw	r3, #47216	; 0xb870
    fcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfa:	79f9      	ldrb	r1, [r7, #7]
    fcfc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
    fcfe:	f64b 036c 	movw	r3, #47212	; 0xb86c
    fd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd06:	781b      	ldrb	r3, [r3, #0]
    fd08:	3301      	adds	r3, #1
    fd0a:	b2da      	uxtb	r2, r3
    fd0c:	f64b 036c 	movw	r3, #47212	; 0xb86c
    fd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd14:	701a      	strb	r2, [r3, #0]
    fd16:	e013      	b.n	fd40 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
    fd18:	f248 030c 	movw	r3, #32780	; 0x800c
    fd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd20:	79fa      	ldrb	r2, [r7, #7]
    fd22:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
    fd24:	f248 030a 	movw	r3, #32778	; 0x800a
    fd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd2c:	f248 020a 	movw	r2, #32778	; 0x800a
    fd30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd34:	7812      	ldrb	r2, [r2, #0]
    fd36:	b2d2      	uxtb	r2, r2
    fd38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fd3c:	b2d2      	uxtb	r2, r2
    fd3e:	701a      	strb	r2, [r3, #0]
  }
}
    fd40:	370c      	adds	r7, #12
    fd42:	46bd      	mov	sp, r7
    fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd48:	4770      	bx	lr
    fd4a:	bf00      	nop

0000fd4c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
    fd4c:	b480      	push	{r7}
    fd4e:	b083      	sub	sp, #12
    fd50:	af00      	add	r7, sp, #0
    fd52:	4603      	mov	r3, r0
    fd54:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
    fd56:	f248 039a 	movw	r3, #32922	; 0x809a
    fd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd5e:	781b      	ldrb	r3, [r3, #0]
    fd60:	b2db      	uxtb	r3, r3
    fd62:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fd66:	2b00      	cmp	r3, #0
    fd68:	d028      	beq.n	fdbc <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
    fd6a:	f64b 1371 	movw	r3, #47473	; 0xb971
    fd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd72:	781b      	ldrb	r3, [r3, #0]
    fd74:	b2db      	uxtb	r3, r3
    fd76:	461a      	mov	r2, r3
    fd78:	f64b 1370 	movw	r3, #47472	; 0xb970
    fd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd80:	781b      	ldrb	r3, [r3, #0]
    fd82:	3301      	adds	r3, #1
    fd84:	429a      	cmp	r2, r3
    fd86:	d100      	bne.n	fd8a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
    fd88:	e02c      	b.n	fde4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
    fd8a:	f64b 1370 	movw	r3, #47472	; 0xb970
    fd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	461a      	mov	r2, r3
    fd96:	f64b 1374 	movw	r3, #47476	; 0xb974
    fd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9e:	79f9      	ldrb	r1, [r7, #7]
    fda0:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
    fda2:	f64b 1370 	movw	r3, #47472	; 0xb970
    fda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdaa:	781b      	ldrb	r3, [r3, #0]
    fdac:	3301      	adds	r3, #1
    fdae:	b2da      	uxtb	r2, r3
    fdb0:	f64b 1370 	movw	r3, #47472	; 0xb970
    fdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	e013      	b.n	fde4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
    fdbc:	f248 039c 	movw	r3, #32924	; 0x809c
    fdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc4:	79fa      	ldrb	r2, [r7, #7]
    fdc6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
    fdc8:	f248 039a 	movw	r3, #32922	; 0x809a
    fdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd0:	f248 029a 	movw	r2, #32922	; 0x809a
    fdd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdd8:	7812      	ldrb	r2, [r2, #0]
    fdda:	b2d2      	uxtb	r2, r2
    fddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fde0:	b2d2      	uxtb	r2, r2
    fde2:	701a      	strb	r2, [r3, #0]
  }
}
    fde4:	370c      	adds	r7, #12
    fde6:	46bd      	mov	sp, r7
    fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdec:	4770      	bx	lr
    fdee:	bf00      	nop

0000fdf0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
    fdf0:	b580      	push	{r7, lr}
    fdf2:	b084      	sub	sp, #16
    fdf4:	af00      	add	r7, sp, #0
    fdf6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
    fdf8:	2300      	movs	r3, #0
    fdfa:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
    fdfc:	e009      	b.n	fe12 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
    fdfe:	7bfb      	ldrb	r3, [r7, #15]
    fe00:	687a      	ldr	r2, [r7, #4]
    fe02:	4413      	add	r3, r2
    fe04:	781b      	ldrb	r3, [r3, #0]
    fe06:	4618      	mov	r0, r3
    fe08:	f7ff ff4e 	bl	fca8 <uart0_transmit>
    i++;
    fe0c:	7bfb      	ldrb	r3, [r7, #15]
    fe0e:	3301      	adds	r3, #1
    fe10:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
    fe12:	7bfb      	ldrb	r3, [r7, #15]
    fe14:	687a      	ldr	r2, [r7, #4]
    fe16:	4413      	add	r3, r2
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d1ef      	bne.n	fdfe <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
    fe1e:	3710      	adds	r7, #16
    fe20:	46bd      	mov	sp, r7
    fe22:	bd80      	pop	{r7, pc}

0000fe24 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
    fe24:	b590      	push	{r4, r7, lr}
    fe26:	b089      	sub	sp, #36	; 0x24
    fe28:	af00      	add	r7, sp, #0
    fe2a:	4603      	mov	r3, r0
    fe2c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
    fe2e:	f643 1338 	movw	r3, #14648	; 0x3938
    fe32:	f2c0 0301 	movt	r3, #1
    fe36:	f107 040c 	add.w	r4, r7, #12
    fe3a:	6818      	ldr	r0, [r3, #0]
    fe3c:	6859      	ldr	r1, [r3, #4]
    fe3e:	689a      	ldr	r2, [r3, #8]
    fe40:	68db      	ldr	r3, [r3, #12]
    fe42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
    fe44:	79fb      	ldrb	r3, [r7, #7]
    fe46:	091b      	lsrs	r3, r3, #4
    fe48:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
    fe4a:	79fb      	ldrb	r3, [r7, #7]
    fe4c:	f003 030f 	and.w	r3, r3, #15
    fe50:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
    fe52:	230f      	movs	r3, #15
    fe54:	77fb      	strb	r3, [r7, #31]
    low = 15;
    fe56:	230f      	movs	r3, #15
    fe58:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
    fe5a:	7ffb      	ldrb	r3, [r7, #31]
    fe5c:	f107 0220 	add.w	r2, r7, #32
    fe60:	4413      	add	r3, r2
    fe62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fe66:	4618      	mov	r0, r3
    fe68:	f7ff ff1e 	bl	fca8 <uart0_transmit>
  uart0_transmit(hex[low]);
    fe6c:	7fbb      	ldrb	r3, [r7, #30]
    fe6e:	f107 0220 	add.w	r2, r7, #32
    fe72:	4413      	add	r3, r2
    fe74:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    fe78:	4618      	mov	r0, r3
    fe7a:	f7ff ff15 	bl	fca8 <uart0_transmit>
}
    fe7e:	3724      	adds	r7, #36	; 0x24
    fe80:	46bd      	mov	sp, r7
    fe82:	bd90      	pop	{r4, r7, pc}

0000fe84 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
    fe84:	b480      	push	{r7}
    fe86:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
    fe88:	f64b 036c 	movw	r3, #47212	; 0xb86c
    fe8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe90:	781a      	ldrb	r2, [r3, #0]
    fe92:	f64b 036d 	movw	r3, #47213	; 0xb86d
    fe96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	b2db      	uxtb	r3, r3
    fe9e:	429a      	cmp	r2, r3
    fea0:	d10e      	bne.n	fec0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
    fea2:	f248 030a 	movw	r3, #32778	; 0x800a
    fea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feaa:	f248 020a 	movw	r2, #32778	; 0x800a
    feae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    feb2:	7812      	ldrb	r2, [r2, #0]
    feb4:	b2d2      	uxtb	r2, r2
    feb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    feba:	b2d2      	uxtb	r2, r2
    febc:	701a      	strb	r2, [r3, #0]
    febe:	e01d      	b.n	fefc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
    fec0:	f248 030c 	movw	r3, #32780	; 0x800c
    fec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec8:	f64b 026d 	movw	r2, #47213	; 0xb86d
    fecc:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fed0:	7812      	ldrb	r2, [r2, #0]
    fed2:	b2d2      	uxtb	r2, r2
    fed4:	4611      	mov	r1, r2
    fed6:	f64b 0270 	movw	r2, #47216	; 0xb870
    feda:	f2c2 0204 	movt	r2, #8196	; 0x2004
    fede:	5c52      	ldrb	r2, [r2, r1]
    fee0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
    fee2:	f64b 036d 	movw	r3, #47213	; 0xb86d
    fee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feea:	781b      	ldrb	r3, [r3, #0]
    feec:	b2db      	uxtb	r3, r3
    feee:	3301      	adds	r3, #1
    fef0:	b2da      	uxtb	r2, r3
    fef2:	f64b 036d 	movw	r3, #47213	; 0xb86d
    fef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefa:	701a      	strb	r2, [r3, #0]
  }
}
    fefc:	46bd      	mov	sp, r7
    fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff02:	4770      	bx	lr

0000ff04 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
    ff04:	b480      	push	{r7}
    ff06:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
    ff08:	f64b 1370 	movw	r3, #47472	; 0xb970
    ff0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff10:	781a      	ldrb	r2, [r3, #0]
    ff12:	f64b 1371 	movw	r3, #47473	; 0xb971
    ff16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1a:	781b      	ldrb	r3, [r3, #0]
    ff1c:	b2db      	uxtb	r3, r3
    ff1e:	429a      	cmp	r2, r3
    ff20:	d10e      	bne.n	ff40 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
    ff22:	f248 039a 	movw	r3, #32922	; 0x809a
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	f248 029a 	movw	r2, #32922	; 0x809a
    ff2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff32:	7812      	ldrb	r2, [r2, #0]
    ff34:	b2d2      	uxtb	r2, r2
    ff36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    ff3a:	b2d2      	uxtb	r2, r2
    ff3c:	701a      	strb	r2, [r3, #0]
    ff3e:	e01d      	b.n	ff7c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
    ff40:	f248 039c 	movw	r3, #32924	; 0x809c
    ff44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff48:	f64b 1271 	movw	r2, #47473	; 0xb971
    ff4c:	f2c2 0204 	movt	r2, #8196	; 0x2004
    ff50:	7812      	ldrb	r2, [r2, #0]
    ff52:	b2d2      	uxtb	r2, r2
    ff54:	4611      	mov	r1, r2
    ff56:	f64b 1274 	movw	r2, #47476	; 0xb974
    ff5a:	f2c2 0204 	movt	r2, #8196	; 0x2004
    ff5e:	5c52      	ldrb	r2, [r2, r1]
    ff60:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
    ff62:	f64b 1371 	movw	r3, #47473	; 0xb971
    ff66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6a:	781b      	ldrb	r3, [r3, #0]
    ff6c:	b2db      	uxtb	r3, r3
    ff6e:	3301      	adds	r3, #1
    ff70:	b2da      	uxtb	r2, r3
    ff72:	f64b 1371 	movw	r3, #47473	; 0xb971
    ff76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7a:	701a      	strb	r2, [r3, #0]
  }
}
    ff7c:	46bd      	mov	sp, r7
    ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff82:	4770      	bx	lr

0000ff84 <uart0_init>:

void uart0_init( void ) {
    ff84:	b480      	push	{r7}
    ff86:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
    ff88:	f248 0390 	movw	r3, #32912	; 0x8090
    ff8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff90:	2200      	movs	r2, #0
    ff92:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
    ff94:	f248 0309 	movw	r3, #32777	; 0x8009
    ff98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff9c:	2219      	movs	r2, #25
    ff9e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
    ffa0:	f248 030b 	movw	r3, #32779	; 0x800b
    ffa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa8:	2200      	movs	r2, #0
    ffaa:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
    ffac:	f248 030a 	movw	r3, #32778	; 0x800a
    ffb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb4:	2218      	movs	r2, #24
    ffb6:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
    ffb8:	f248 0395 	movw	r3, #32917	; 0x8095
    ffbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc0:	2206      	movs	r2, #6
    ffc2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
    ffc4:	f248 030a 	movw	r3, #32778	; 0x800a
    ffc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffcc:	f248 020a 	movw	r2, #32778	; 0x800a
    ffd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffd4:	7812      	ldrb	r2, [r2, #0]
    ffd6:	b2d2      	uxtb	r2, r2
    ffd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ffdc:	b2d2      	uxtb	r2, r2
    ffde:	701a      	strb	r2, [r3, #0]
}
    ffe0:	46bd      	mov	sp, r7
    ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffe6:	4770      	bx	lr

0000ffe8 <uart1_init>:

void uart1_init( void ) {
    ffe8:	b480      	push	{r7}
    ffea:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
    ffec:	f248 0398 	movw	r3, #32920	; 0x8098
    fff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff4:	2200      	movs	r2, #0
    fff6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
    fff8:	f248 0399 	movw	r3, #32921	; 0x8099
    fffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10000:	2219      	movs	r2, #25
   10002:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   10004:	f248 039b 	movw	r3, #32923	; 0x809b
   10008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1000c:	2200      	movs	r2, #0
   1000e:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   10010:	f248 039a 	movw	r3, #32922	; 0x809a
   10014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10018:	2218      	movs	r2, #24
   1001a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   1001c:	f248 039d 	movw	r3, #32925	; 0x809d
   10020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10024:	2206      	movs	r2, #6
   10026:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   10028:	f248 039a 	movw	r3, #32922	; 0x809a
   1002c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10030:	f248 029a 	movw	r2, #32922	; 0x809a
   10034:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10038:	7812      	ldrb	r2, [r2, #0]
   1003a:	b2d2      	uxtb	r2, r2
   1003c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10040:	b2d2      	uxtb	r2, r2
   10042:	701a      	strb	r2, [r3, #0]
}
   10044:	46bd      	mov	sp, r7
   10046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1004a:	4770      	bx	lr
   1004c:	0000      	movs	r0, r0
	...

00010050 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   10050:	b480      	push	{r7}
   10052:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   10054:	f64b 2374 	movw	r3, #47732	; 0xba74
   10058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005c:	f04f 0200 	mov.w	r2, #0
   10060:	601a      	str	r2, [r3, #0]
   10062:	f64b 2378 	movw	r3, #47736	; 0xba78
   10066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006a:	f04f 0200 	mov.w	r2, #0
   1006e:	601a      	str	r2, [r3, #0]
   10070:	f64b 237c 	movw	r3, #47740	; 0xba7c
   10074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10078:	f04f 0200 	mov.w	r2, #0
   1007c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1007e:	f64b 2380 	movw	r3, #47744	; 0xba80
   10082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10086:	f04f 0200 	mov.w	r2, #0
   1008a:	601a      	str	r2, [r3, #0]
   1008c:	f64b 2384 	movw	r3, #47748	; 0xba84
   10090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10094:	f04f 0200 	mov.w	r2, #0
   10098:	601a      	str	r2, [r3, #0]
   1009a:	f64b 2388 	movw	r3, #47752	; 0xba88
   1009e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a2:	f04f 0200 	mov.w	r2, #0
   100a6:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   100a8:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   100ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b0:	f04f 0200 	mov.w	r2, #0
   100b4:	601a      	str	r2, [r3, #0]
   100b6:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   100ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100be:	f04f 0200 	mov.w	r2, #0
   100c2:	601a      	str	r2, [r3, #0]
   100c4:	f64b 2394 	movw	r3, #47764	; 0xba94
   100c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100cc:	f04f 0200 	mov.w	r2, #0
   100d0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   100d2:	f64b 2398 	movw	r3, #47768	; 0xba98
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	f04f 0200 	mov.w	r2, #0
   100de:	601a      	str	r2, [r3, #0]
   100e0:	f64b 239c 	movw	r3, #47772	; 0xba9c
   100e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e8:	f04f 0200 	mov.w	r2, #0
   100ec:	601a      	str	r2, [r3, #0]
   100ee:	f64b 23a0 	movw	r3, #47776	; 0xbaa0
   100f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f6:	f04f 0200 	mov.w	r2, #0
   100fa:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   100fc:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
   10100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10104:	2200      	movs	r2, #0
   10106:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   10108:	f240 1310 	movw	r3, #272	; 0x110
   1010c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10110:	681a      	ldr	r2, [r3, #0]
   10112:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   10116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011a:	601a      	str	r2, [r3, #0]
}
   1011c:	46bd      	mov	sp, r7
   1011e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10122:	4770      	bx	lr

00010124 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   10124:	b580      	push	{r7, lr}
   10126:	b082      	sub	sp, #8
   10128:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1012a:	f240 1304 	movw	r3, #260	; 0x104
   1012e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10132:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   10134:	2b01      	cmp	r3, #1
   10136:	d105      	bne.n	10144 <estimator_update_state_infrared+0x20>
   10138:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   1013c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10140:	681b      	ldr	r3, [r3, #0]
   10142:	e004      	b.n	1014e <estimator_update_state_infrared+0x2a>
   10144:	f240 1310 	movw	r3, #272	; 0x110
   10148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1014e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   10150:	f24b 7360 	movw	r3, #46944	; 0xb760
   10154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10158:	881b      	ldrh	r3, [r3, #0]
   1015a:	b21b      	sxth	r3, r3
   1015c:	4618      	mov	r0, r3
   1015e:	f003 f87d 	bl	1325c <__aeabi_i2f>
   10162:	4603      	mov	r3, r0
   10164:	4618      	mov	r0, r3
   10166:	6879      	ldr	r1, [r7, #4]
   10168:	f003 f8cc 	bl	13304 <__aeabi_fmul>
   1016c:	4603      	mov	r3, r0
   1016e:	461a      	mov	r2, r3
   10170:	f64b 2380 	movw	r3, #47744	; 0xba80
   10174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10178:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1017a:	f24b 7362 	movw	r3, #46946	; 0xb762
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	881b      	ldrh	r3, [r3, #0]
   10184:	b21b      	sxth	r3, r3
   10186:	4618      	mov	r0, r3
   10188:	f003 f868 	bl	1325c <__aeabi_i2f>
   1018c:	4603      	mov	r3, r0
   1018e:	4618      	mov	r0, r3
   10190:	6879      	ldr	r1, [r7, #4]
   10192:	f003 f8b7 	bl	13304 <__aeabi_fmul>
   10196:	4603      	mov	r3, r0
   10198:	461a      	mov	r2, r3
   1019a:	f64b 2388 	movw	r3, #47752	; 0xba88
   1019e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a2:	601a      	str	r2, [r3, #0]
}
   101a4:	3708      	adds	r7, #8
   101a6:	46bd      	mov	sp, r7
   101a8:	bd80      	pop	{r7, pc}
   101aa:	bf00      	nop

000101ac <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   101ac:	b5b0      	push	{r4, r5, r7, lr}
   101ae:	b084      	sub	sp, #16
   101b0:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   101b2:	f64b 23c0 	movw	r3, #47808	; 0xbac0
   101b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ba:	781b      	ldrb	r3, [r3, #0]
   101bc:	2b00      	cmp	r3, #0
   101be:	f000 81e8 	beq.w	10592 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   101c2:	f24b 6330 	movw	r3, #46640	; 0xb630
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	681a      	ldr	r2, [r3, #0]
   101cc:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	681b      	ldr	r3, [r3, #0]
   101d6:	4610      	mov	r0, r2
   101d8:	4619      	mov	r1, r3
   101da:	f002 ff89 	bl	130f0 <__aeabi_fsub>
   101de:	4603      	mov	r3, r0
   101e0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   101e2:	68b8      	ldr	r0, [r7, #8]
   101e4:	f002 fbfa 	bl	129dc <__aeabi_f2d>
   101e8:	4602      	mov	r2, r0
   101ea:	460b      	mov	r3, r1
   101ec:	4610      	mov	r0, r2
   101ee:	4619      	mov	r1, r3
   101f0:	a385      	add	r3, pc, #532	; (adr r3, 10408 <estimator_update_ir_estim+0x25c>)
   101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   101f6:	f002 fed5 	bl	12fa4 <__aeabi_dcmpgt>
   101fa:	4603      	mov	r3, r0
   101fc:	2b00      	cmp	r3, #0
   101fe:	d100      	bne.n	10202 <estimator_update_ir_estim+0x56>
   10200:	e219      	b.n	10636 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   10202:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   10206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020a:	681a      	ldr	r2, [r3, #0]
   1020c:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   10210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10214:	681b      	ldr	r3, [r3, #0]
   10216:	4610      	mov	r0, r2
   10218:	4619      	mov	r1, r3
   1021a:	f002 ff69 	bl	130f0 <__aeabi_fsub>
   1021e:	4603      	mov	r3, r0
   10220:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   10222:	e013      	b.n	1024c <estimator_update_ir_estim+0xa0>
   10224:	68f8      	ldr	r0, [r7, #12]
   10226:	f002 fbd9 	bl	129dc <__aeabi_f2d>
   1022a:	4602      	mov	r2, r0
   1022c:	460b      	mov	r3, r1
   1022e:	4610      	mov	r0, r2
   10230:	4619      	mov	r1, r3
   10232:	a377      	add	r3, pc, #476	; (adr r3, 10410 <estimator_update_ir_estim+0x264>)
   10234:	e9d3 2300 	ldrd	r2, r3, [r3]
   10238:	f002 fa70 	bl	1271c <__aeabi_dsub>
   1023c:	4602      	mov	r2, r0
   1023e:	460b      	mov	r3, r1
   10240:	4610      	mov	r0, r2
   10242:	4619      	mov	r1, r3
   10244:	f002 ff00 	bl	13048 <__aeabi_d2f>
   10248:	4603      	mov	r3, r0
   1024a:	60fb      	str	r3, [r7, #12]
   1024c:	68f8      	ldr	r0, [r7, #12]
   1024e:	f002 fbc5 	bl	129dc <__aeabi_f2d>
   10252:	4602      	mov	r2, r0
   10254:	460b      	mov	r3, r1
   10256:	4610      	mov	r0, r2
   10258:	4619      	mov	r1, r3
   1025a:	a36f      	add	r3, pc, #444	; (adr r3, 10418 <estimator_update_ir_estim+0x26c>)
   1025c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10260:	f002 fea0 	bl	12fa4 <__aeabi_dcmpgt>
   10264:	4603      	mov	r3, r0
   10266:	2b00      	cmp	r3, #0
   10268:	d1dc      	bne.n	10224 <estimator_update_ir_estim+0x78>
   1026a:	e013      	b.n	10294 <estimator_update_ir_estim+0xe8>
   1026c:	68f8      	ldr	r0, [r7, #12]
   1026e:	f002 fbb5 	bl	129dc <__aeabi_f2d>
   10272:	4602      	mov	r2, r0
   10274:	460b      	mov	r3, r1
   10276:	4610      	mov	r0, r2
   10278:	4619      	mov	r1, r3
   1027a:	a365      	add	r3, pc, #404	; (adr r3, 10410 <estimator_update_ir_estim+0x264>)
   1027c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10280:	f002 fa4e 	bl	12720 <__adddf3>
   10284:	4602      	mov	r2, r0
   10286:	460b      	mov	r3, r1
   10288:	4610      	mov	r0, r2
   1028a:	4619      	mov	r1, r3
   1028c:	f002 fedc 	bl	13048 <__aeabi_d2f>
   10290:	4603      	mov	r3, r0
   10292:	60fb      	str	r3, [r7, #12]
   10294:	68f8      	ldr	r0, [r7, #12]
   10296:	f002 fba1 	bl	129dc <__aeabi_f2d>
   1029a:	4602      	mov	r2, r0
   1029c:	460b      	mov	r3, r1
   1029e:	4610      	mov	r0, r2
   102a0:	4619      	mov	r1, r3
   102a2:	a35f      	add	r3, pc, #380	; (adr r3, 10420 <estimator_update_ir_estim+0x274>)
   102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   102a8:	f002 fe5e 	bl	12f68 <__aeabi_dcmplt>
   102ac:	4603      	mov	r3, r0
   102ae:	2b00      	cmp	r3, #0
   102b0:	d1dc      	bne.n	1026c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   102b2:	68f8      	ldr	r0, [r7, #12]
   102b4:	68b9      	ldr	r1, [r7, #8]
   102b6:	f003 f8d9 	bl	1346c <__aeabi_fdiv>
   102ba:	4603      	mov	r3, r0
   102bc:	4618      	mov	r0, r3
   102be:	f002 fb8d 	bl	129dc <__aeabi_f2d>
   102c2:	4602      	mov	r2, r0
   102c4:	460b      	mov	r3, r1
   102c6:	4610      	mov	r0, r2
   102c8:	4619      	mov	r1, r3
   102ca:	f04f 0200 	mov.w	r2, #0
   102ce:	f04f 0300 	mov.w	r3, #0
   102d2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   102d6:	f002 fbd5 	bl	12a84 <__aeabi_dmul>
   102da:	4602      	mov	r2, r0
   102dc:	460b      	mov	r3, r1
   102de:	4610      	mov	r0, r2
   102e0:	4619      	mov	r1, r3
   102e2:	a351      	add	r3, pc, #324	; (adr r3, 10428 <estimator_update_ir_estim+0x27c>)
   102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   102e8:	f002 fcf6 	bl	12cd8 <__aeabi_ddiv>
   102ec:	4602      	mov	r2, r0
   102ee:	460b      	mov	r3, r1
   102f0:	4610      	mov	r0, r2
   102f2:	4619      	mov	r1, r3
   102f4:	f002 fea8 	bl	13048 <__aeabi_d2f>
   102f8:	4603      	mov	r3, r0
   102fa:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   102fc:	e013      	b.n	10326 <estimator_update_ir_estim+0x17a>
   102fe:	68f8      	ldr	r0, [r7, #12]
   10300:	f002 fb6c 	bl	129dc <__aeabi_f2d>
   10304:	4602      	mov	r2, r0
   10306:	460b      	mov	r3, r1
   10308:	4610      	mov	r0, r2
   1030a:	4619      	mov	r1, r3
   1030c:	a340      	add	r3, pc, #256	; (adr r3, 10410 <estimator_update_ir_estim+0x264>)
   1030e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10312:	f002 fa03 	bl	1271c <__aeabi_dsub>
   10316:	4602      	mov	r2, r0
   10318:	460b      	mov	r3, r1
   1031a:	4610      	mov	r0, r2
   1031c:	4619      	mov	r1, r3
   1031e:	f002 fe93 	bl	13048 <__aeabi_d2f>
   10322:	4603      	mov	r3, r0
   10324:	60fb      	str	r3, [r7, #12]
   10326:	68f8      	ldr	r0, [r7, #12]
   10328:	f002 fb58 	bl	129dc <__aeabi_f2d>
   1032c:	4602      	mov	r2, r0
   1032e:	460b      	mov	r3, r1
   10330:	4610      	mov	r0, r2
   10332:	4619      	mov	r1, r3
   10334:	a338      	add	r3, pc, #224	; (adr r3, 10418 <estimator_update_ir_estim+0x26c>)
   10336:	e9d3 2300 	ldrd	r2, r3, [r3]
   1033a:	f002 fe33 	bl	12fa4 <__aeabi_dcmpgt>
   1033e:	4603      	mov	r3, r0
   10340:	2b00      	cmp	r3, #0
   10342:	d1dc      	bne.n	102fe <estimator_update_ir_estim+0x152>
   10344:	e013      	b.n	1036e <estimator_update_ir_estim+0x1c2>
   10346:	68f8      	ldr	r0, [r7, #12]
   10348:	f002 fb48 	bl	129dc <__aeabi_f2d>
   1034c:	4602      	mov	r2, r0
   1034e:	460b      	mov	r3, r1
   10350:	4610      	mov	r0, r2
   10352:	4619      	mov	r1, r3
   10354:	a32e      	add	r3, pc, #184	; (adr r3, 10410 <estimator_update_ir_estim+0x264>)
   10356:	e9d3 2300 	ldrd	r2, r3, [r3]
   1035a:	f002 f9e1 	bl	12720 <__adddf3>
   1035e:	4602      	mov	r2, r0
   10360:	460b      	mov	r3, r1
   10362:	4610      	mov	r0, r2
   10364:	4619      	mov	r1, r3
   10366:	f002 fe6f 	bl	13048 <__aeabi_d2f>
   1036a:	4603      	mov	r3, r0
   1036c:	60fb      	str	r3, [r7, #12]
   1036e:	68f8      	ldr	r0, [r7, #12]
   10370:	f002 fb34 	bl	129dc <__aeabi_f2d>
   10374:	4602      	mov	r2, r0
   10376:	460b      	mov	r3, r1
   10378:	4610      	mov	r0, r2
   1037a:	4619      	mov	r1, r3
   1037c:	a328      	add	r3, pc, #160	; (adr r3, 10420 <estimator_update_ir_estim+0x274>)
   1037e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10382:	f002 fdf1 	bl	12f68 <__aeabi_dcmplt>
   10386:	4603      	mov	r3, r0
   10388:	2b00      	cmp	r3, #0
   1038a:	d1dc      	bne.n	10346 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1038c:	f24b 7360 	movw	r3, #46944	; 0xb760
   10390:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10394:	881b      	ldrh	r3, [r3, #0]
   10396:	b21b      	sxth	r3, r3
   10398:	4618      	mov	r0, r3
   1039a:	f002 ff5f 	bl	1325c <__aeabi_i2f>
   1039e:	4602      	mov	r2, r0
   103a0:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   103a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a8:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   103aa:	f64b 23bc 	movw	r3, #47804	; 0xbabc
   103ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b2:	68fa      	ldr	r2, [r7, #12]
   103b4:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   103b6:	68f8      	ldr	r0, [r7, #12]
   103b8:	f04f 0100 	mov.w	r1, #0
   103bc:	f003 f940 	bl	13640 <__aeabi_fcmplt>
   103c0:	4603      	mov	r3, r0
   103c2:	2b00      	cmp	r3, #0
   103c4:	d003      	beq.n	103ce <estimator_update_ir_estim+0x222>
   103c6:	68fb      	ldr	r3, [r7, #12]
   103c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   103cc:	e000      	b.n	103d0 <estimator_update_ir_estim+0x224>
   103ce:	68fb      	ldr	r3, [r7, #12]
   103d0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   103d2:	6878      	ldr	r0, [r7, #4]
   103d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   103d8:	f003 f932 	bl	13640 <__aeabi_fcmplt>
   103dc:	4603      	mov	r3, r0
   103de:	2b00      	cmp	r3, #0
   103e0:	d100      	bne.n	103e4 <estimator_update_ir_estim+0x238>
   103e2:	e128      	b.n	10636 <estimator_update_ir_estim+0x48a>
   103e4:	6878      	ldr	r0, [r7, #4]
   103e6:	f002 faf9 	bl	129dc <__aeabi_f2d>
   103ea:	4602      	mov	r2, r0
   103ec:	460b      	mov	r3, r1
   103ee:	4610      	mov	r0, r2
   103f0:	4619      	mov	r1, r3
   103f2:	a30f      	add	r3, pc, #60	; (adr r3, 10430 <estimator_update_ir_estim+0x284>)
   103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   103f8:	f002 fdd4 	bl	12fa4 <__aeabi_dcmpgt>
   103fc:	4603      	mov	r3, r0
   103fe:	2b00      	cmp	r3, #0
   10400:	d11a      	bne.n	10438 <estimator_update_ir_estim+0x28c>
   10402:	e118      	b.n	10636 <estimator_update_ir_estim+0x48a>
   10404:	f3af 8000 	nop.w
   10408:	9999999a 	.word	0x9999999a
   1040c:	3fb99999 	.word	0x3fb99999
   10410:	54442d18 	.word	0x54442d18
   10414:	401921fb 	.word	0x401921fb
   10418:	54442d18 	.word	0x54442d18
   1041c:	400921fb 	.word	0x400921fb
   10420:	54442d18 	.word	0x54442d18
   10424:	c00921fb 	.word	0xc00921fb
   10428:	51eb851f 	.word	0x51eb851f
   1042c:	40239eb8 	.word	0x40239eb8
   10430:	9999999a 	.word	0x9999999a
   10434:	3fa99999 	.word	0x3fa99999
   10438:	f240 1308 	movw	r3, #264	; 0x108
   1043c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10440:	881b      	ldrh	r3, [r3, #0]
   10442:	b21b      	sxth	r3, r3
   10444:	425b      	negs	r3, r3
   10446:	0fda      	lsrs	r2, r3, #31
   10448:	4413      	add	r3, r2
   1044a:	105b      	asrs	r3, r3, #1
   1044c:	461a      	mov	r2, r3
   1044e:	f24b 7360 	movw	r3, #46944	; 0xb760
   10452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10456:	881b      	ldrh	r3, [r3, #0]
   10458:	b21b      	sxth	r3, r3
   1045a:	429a      	cmp	r2, r3
   1045c:	f280 8098 	bge.w	10590 <estimator_update_ir_estim+0x3e4>
   10460:	f240 1308 	movw	r3, #264	; 0x108
   10464:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10468:	881b      	ldrh	r3, [r3, #0]
   1046a:	b21b      	sxth	r3, r3
   1046c:	0fda      	lsrs	r2, r3, #31
   1046e:	4413      	add	r3, r2
   10470:	105b      	asrs	r3, r3, #1
   10472:	b29a      	uxth	r2, r3
   10474:	f24b 7360 	movw	r3, #46944	; 0xb760
   10478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047c:	881b      	ldrh	r3, [r3, #0]
   1047e:	b212      	sxth	r2, r2
   10480:	b21b      	sxth	r3, r3
   10482:	429a      	cmp	r2, r3
   10484:	f340 8084 	ble.w	10590 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   10488:	f64b 23bc 	movw	r3, #47804	; 0xbabc
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	681a      	ldr	r2, [r3, #0]
   10492:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   10496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049a:	681b      	ldr	r3, [r3, #0]
   1049c:	4610      	mov	r0, r2
   1049e:	4619      	mov	r1, r3
   104a0:	f002 ff30 	bl	13304 <__aeabi_fmul>
   104a4:	4603      	mov	r3, r0
   104a6:	4618      	mov	r0, r3
   104a8:	f002 fa98 	bl	129dc <__aeabi_f2d>
   104ac:	4604      	mov	r4, r0
   104ae:	460d      	mov	r5, r1
   104b0:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	681b      	ldr	r3, [r3, #0]
   104ba:	4618      	mov	r0, r3
   104bc:	f002 fa8e 	bl	129dc <__aeabi_f2d>
   104c0:	4602      	mov	r2, r0
   104c2:	460b      	mov	r3, r1
   104c4:	4610      	mov	r0, r2
   104c6:	4619      	mov	r1, r3
   104c8:	a367      	add	r3, pc, #412	; (adr r3, 10668 <estimator_update_ir_estim+0x4bc>)
   104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   104ce:	f002 fad9 	bl	12a84 <__aeabi_dmul>
   104d2:	4602      	mov	r2, r0
   104d4:	460b      	mov	r3, r1
   104d6:	4620      	mov	r0, r4
   104d8:	4629      	mov	r1, r5
   104da:	f002 f921 	bl	12720 <__adddf3>
   104de:	4602      	mov	r2, r0
   104e0:	460b      	mov	r3, r1
   104e2:	4610      	mov	r0, r2
   104e4:	4619      	mov	r1, r3
   104e6:	f002 fdaf 	bl	13048 <__aeabi_d2f>
   104ea:	4602      	mov	r2, r0
   104ec:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   104f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   104f6:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   104fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fe:	681a      	ldr	r2, [r3, #0]
   10500:	f64b 23b8 	movw	r3, #47800	; 0xbab8
   10504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10508:	681b      	ldr	r3, [r3, #0]
   1050a:	4610      	mov	r0, r2
   1050c:	4619      	mov	r1, r3
   1050e:	f002 fef9 	bl	13304 <__aeabi_fmul>
   10512:	4603      	mov	r3, r0
   10514:	4618      	mov	r0, r3
   10516:	f002 fa61 	bl	129dc <__aeabi_f2d>
   1051a:	4604      	mov	r4, r0
   1051c:	460d      	mov	r5, r1
   1051e:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10526:	681b      	ldr	r3, [r3, #0]
   10528:	4618      	mov	r0, r3
   1052a:	f002 fa57 	bl	129dc <__aeabi_f2d>
   1052e:	4602      	mov	r2, r0
   10530:	460b      	mov	r3, r1
   10532:	4610      	mov	r0, r2
   10534:	4619      	mov	r1, r3
   10536:	a34c      	add	r3, pc, #304	; (adr r3, 10668 <estimator_update_ir_estim+0x4bc>)
   10538:	e9d3 2300 	ldrd	r2, r3, [r3]
   1053c:	f002 faa2 	bl	12a84 <__aeabi_dmul>
   10540:	4602      	mov	r2, r0
   10542:	460b      	mov	r3, r1
   10544:	4620      	mov	r0, r4
   10546:	4629      	mov	r1, r5
   10548:	f002 f8ea 	bl	12720 <__adddf3>
   1054c:	4602      	mov	r2, r0
   1054e:	460b      	mov	r3, r1
   10550:	4610      	mov	r0, r2
   10552:	4619      	mov	r1, r3
   10554:	f002 fd78 	bl	13048 <__aeabi_d2f>
   10558:	4602      	mov	r2, r0
   1055a:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   1055e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10562:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   10564:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   10568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056c:	681a      	ldr	r2, [r3, #0]
   1056e:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10576:	681b      	ldr	r3, [r3, #0]
   10578:	4610      	mov	r0, r2
   1057a:	4619      	mov	r1, r3
   1057c:	f002 ff76 	bl	1346c <__aeabi_fdiv>
   10580:	4603      	mov	r3, r0
   10582:	461a      	mov	r2, r3
   10584:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   10588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1058c:	601a      	str	r2, [r3, #0]
   1058e:	e052      	b.n	10636 <estimator_update_ir_estim+0x48a>
   10590:	e051      	b.n	10636 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   10592:	f64b 23c0 	movw	r3, #47808	; 0xbac0
   10596:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059a:	2201      	movs	r2, #1
   1059c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1059e:	f240 1308 	movw	r3, #264	; 0x108
   105a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a6:	881b      	ldrh	r3, [r3, #0]
   105a8:	b21b      	sxth	r3, r3
   105aa:	4618      	mov	r0, r3
   105ac:	f002 fe56 	bl	1325c <__aeabi_i2f>
   105b0:	4603      	mov	r3, r0
   105b2:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   105b4:	6838      	ldr	r0, [r7, #0]
   105b6:	6839      	ldr	r1, [r7, #0]
   105b8:	f002 fea4 	bl	13304 <__aeabi_fmul>
   105bc:	4603      	mov	r3, r0
   105be:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   105c0:	f64b 23b4 	movw	r3, #47796	; 0xbab4
   105c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c8:	681b      	ldr	r3, [r3, #0]
   105ca:	4618      	mov	r0, r3
   105cc:	f002 fa06 	bl	129dc <__aeabi_f2d>
   105d0:	4602      	mov	r2, r0
   105d2:	460b      	mov	r3, r1
   105d4:	4610      	mov	r0, r2
   105d6:	4619      	mov	r1, r3
   105d8:	f04f 0200 	mov.w	r2, #0
   105dc:	f04f 0300 	mov.w	r3, #0
   105e0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   105e4:	f002 fa4e 	bl	12a84 <__aeabi_dmul>
   105e8:	4602      	mov	r2, r0
   105ea:	460b      	mov	r3, r1
   105ec:	4614      	mov	r4, r2
   105ee:	461d      	mov	r5, r3
   105f0:	6838      	ldr	r0, [r7, #0]
   105f2:	f002 f9f3 	bl	129dc <__aeabi_f2d>
   105f6:	4602      	mov	r2, r0
   105f8:	460b      	mov	r3, r1
   105fa:	4620      	mov	r0, r4
   105fc:	4629      	mov	r1, r5
   105fe:	f002 fa41 	bl	12a84 <__aeabi_dmul>
   10602:	4602      	mov	r2, r0
   10604:	460b      	mov	r3, r1
   10606:	4610      	mov	r0, r2
   10608:	4619      	mov	r1, r3
   1060a:	f002 fd1d 	bl	13048 <__aeabi_d2f>
   1060e:	4602      	mov	r2, r0
   10610:	f64b 23cc 	movw	r3, #47820	; 0xbacc
   10614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10618:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1061a:	6838      	ldr	r0, [r7, #0]
   1061c:	f04f 0100 	mov.w	r1, #0
   10620:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10624:	f002 fe6e 	bl	13304 <__aeabi_fmul>
   10628:	4603      	mov	r3, r0
   1062a:	461a      	mov	r2, r3
   1062c:	f64b 23d0 	movw	r3, #47824	; 0xbad0
   10630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10634:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   10636:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	681a      	ldr	r2, [r3, #0]
   10640:	f64b 23c8 	movw	r3, #47816	; 0xbac8
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1064a:	f24b 6330 	movw	r3, #46640	; 0xb630
   1064e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10652:	681a      	ldr	r2, [r3, #0]
   10654:	f64b 23c4 	movw	r3, #47812	; 0xbac4
   10658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065c:	601a      	str	r2, [r3, #0]
}
   1065e:	3710      	adds	r7, #16
   10660:	46bd      	mov	sp, r7
   10662:	bdb0      	pop	{r4, r5, r7, pc}
   10664:	f3af 8000 	nop.w
   10668:	d916872b 	.word	0xd916872b
   1066c:	3feff7ce 	.word	0x3feff7ce

00010670 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   10670:	b580      	push	{r7, lr}
   10672:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   10674:	f24b 6354 	movw	r3, #46676	; 0xb654
   10678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067c:	781b      	ldrb	r3, [r3, #0]
   1067e:	f003 0320 	and.w	r3, r3, #32
   10682:	2b00      	cmp	r3, #0
   10684:	d044      	beq.n	10710 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   10686:	f24b 634c 	movw	r3, #46668	; 0xb64c
   1068a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068e:	681a      	ldr	r2, [r3, #0]
   10690:	f64b 2374 	movw	r3, #47732	; 0xba74
   10694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10698:	601a      	str	r2, [r3, #0]
   1069a:	f24b 6350 	movw	r3, #46672	; 0xb650
   1069e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a2:	681a      	ldr	r2, [r3, #0]
   106a4:	f64b 2378 	movw	r3, #47736	; 0xba78
   106a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ac:	601a      	str	r2, [r3, #0]
   106ae:	f24b 6334 	movw	r3, #46644	; 0xb634
   106b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b6:	681a      	ldr	r2, [r3, #0]
   106b8:	f64b 237c 	movw	r3, #47740	; 0xba7c
   106bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   106c2:	f24b 6338 	movw	r3, #46648	; 0xb638
   106c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ca:	681a      	ldr	r2, [r3, #0]
   106cc:	f64b 23ac 	movw	r3, #47788	; 0xbaac
   106d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d4:	601a      	str	r2, [r3, #0]
   106d6:	f24b 6340 	movw	r3, #46656	; 0xb640
   106da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106de:	681a      	ldr	r2, [r3, #0]
   106e0:	f64b 23b0 	movw	r3, #47792	; 0xbab0
   106e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e8:	601a      	str	r2, [r3, #0]
   106ea:	f24b 633c 	movw	r3, #46652	; 0xb63c
   106ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f2:	681a      	ldr	r2, [r3, #0]
   106f4:	f64b 2394 	movw	r3, #47764	; 0xba94
   106f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   106fe:	f64b 23a4 	movw	r3, #47780	; 0xbaa4
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	881b      	ldrh	r3, [r3, #0]
   10708:	2b00      	cmp	r3, #0
   1070a:	d001      	beq.n	10710 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   1070c:	f7ff fd4e 	bl	101ac <estimator_update_ir_estim>
  }
}
   10710:	bd80      	pop	{r7, pc}
   10712:	bf00      	nop

00010714 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   10714:	b480      	push	{r7}
   10716:	af00      	add	r7, sp, #0
  
}
   10718:	46bd      	mov	sp, r7
   1071a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1071e:	4770      	bx	lr

00010720 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   10720:	b5b0      	push	{r4, r5, r7, lr}
   10722:	b082      	sub	sp, #8
   10724:	af00      	add	r7, sp, #0
   10726:	4603      	mov	r3, r0
   10728:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1072a:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   1072e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10732:	781b      	ldrb	r3, [r3, #0]
   10734:	2b01      	cmp	r3, #1
   10736:	f040 80e0 	bne.w	108fa <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1073a:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   1073e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10742:	781b      	ldrb	r3, [r3, #0]
   10744:	2b02      	cmp	r3, #2
   10746:	d168      	bne.n	1081a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   10748:	79fb      	ldrb	r3, [r7, #7]
   1074a:	2b00      	cmp	r3, #0
   1074c:	d013      	beq.n	10776 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1074e:	f240 130c 	movw	r3, #268	; 0x10c
   10752:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10756:	881a      	ldrh	r2, [r3, #0]
   10758:	f64b 23da 	movw	r3, #47834	; 0xbada
   1075c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10760:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   10762:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   10766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076a:	895a      	ldrh	r2, [r3, #10]
   1076c:	f64b 23d6 	movw	r3, #47830	; 0xbad6
   10770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10774:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   10776:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   1077a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077e:	895b      	ldrh	r3, [r3, #10]
   10780:	b21a      	sxth	r2, r3
   10782:	f64b 23d6 	movw	r3, #47830	; 0xbad6
   10786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078a:	881b      	ldrh	r3, [r3, #0]
   1078c:	b21b      	sxth	r3, r3
   1078e:	1ad3      	subs	r3, r2, r3
   10790:	4618      	mov	r0, r3
   10792:	f002 fd63 	bl	1325c <__aeabi_i2f>
   10796:	4603      	mov	r3, r0
   10798:	4618      	mov	r0, r3
   1079a:	f002 f91f 	bl	129dc <__aeabi_f2d>
   1079e:	4602      	mov	r2, r0
   107a0:	460b      	mov	r3, r1
   107a2:	4610      	mov	r0, r2
   107a4:	4619      	mov	r1, r3
   107a6:	f04f 0200 	mov.w	r2, #0
   107aa:	f04f 0300 	mov.w	r3, #0
   107ae:	f2c4 034e 	movt	r3, #16462	; 0x404e
   107b2:	f002 f967 	bl	12a84 <__aeabi_dmul>
   107b6:	4602      	mov	r2, r0
   107b8:	460b      	mov	r3, r1
   107ba:	4610      	mov	r0, r2
   107bc:	4619      	mov	r1, r3
   107be:	f04f 0200 	mov.w	r2, #0
   107c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   107c6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   107ca:	f002 fa85 	bl	12cd8 <__aeabi_ddiv>
   107ce:	4602      	mov	r2, r0
   107d0:	460b      	mov	r3, r1
   107d2:	4610      	mov	r0, r2
   107d4:	4619      	mov	r1, r3
   107d6:	f002 fbef 	bl	12fb8 <__aeabi_d2iz>
   107da:	4603      	mov	r3, r0
   107dc:	b29b      	uxth	r3, r3
   107de:	b29a      	uxth	r2, r3
   107e0:	f64b 23da 	movw	r3, #47834	; 0xbada
   107e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e8:	881b      	ldrh	r3, [r3, #0]
   107ea:	b29b      	uxth	r3, r3
   107ec:	4413      	add	r3, r2
   107ee:	b29b      	uxth	r3, r3
   107f0:	b29a      	uxth	r2, r3
   107f2:	f240 130c 	movw	r3, #268	; 0x10c
   107f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107fa:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   107fc:	f240 130c 	movw	r3, #268	; 0x10c
   10800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10804:	881b      	ldrh	r3, [r3, #0]
   10806:	b21b      	sxth	r3, r3
   10808:	4618      	mov	r0, r3
   1080a:	f002 fd27 	bl	1325c <__aeabi_i2f>
   1080e:	4602      	mov	r2, r0
   10810:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   10814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10818:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1081a:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   1081e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10822:	781b      	ldrb	r3, [r3, #0]
   10824:	2b02      	cmp	r3, #2
   10826:	d168      	bne.n	108fa <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   10828:	79fb      	ldrb	r3, [r7, #7]
   1082a:	2b00      	cmp	r3, #0
   1082c:	d013      	beq.n	10856 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1082e:	f240 130a 	movw	r3, #266	; 0x10a
   10832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10836:	881a      	ldrh	r2, [r3, #0]
   10838:	f64b 23dc 	movw	r3, #47836	; 0xbadc
   1083c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10840:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   10842:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   10846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084a:	899a      	ldrh	r2, [r3, #12]
   1084c:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   10850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10854:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10856:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   1085a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085e:	899b      	ldrh	r3, [r3, #12]
   10860:	b21a      	sxth	r2, r3
   10862:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   10866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086a:	881b      	ldrh	r3, [r3, #0]
   1086c:	b21b      	sxth	r3, r3
   1086e:	1ad3      	subs	r3, r2, r3
   10870:	4618      	mov	r0, r3
   10872:	f002 fcf3 	bl	1325c <__aeabi_i2f>
   10876:	4603      	mov	r3, r0
   10878:	4618      	mov	r0, r3
   1087a:	f002 f8af 	bl	129dc <__aeabi_f2d>
   1087e:	4602      	mov	r2, r0
   10880:	460b      	mov	r3, r1
   10882:	4610      	mov	r0, r2
   10884:	4619      	mov	r1, r3
   10886:	f04f 0200 	mov.w	r2, #0
   1088a:	f04f 0300 	mov.w	r3, #0
   1088e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   10892:	f002 f8f7 	bl	12a84 <__aeabi_dmul>
   10896:	4602      	mov	r2, r0
   10898:	460b      	mov	r3, r1
   1089a:	4610      	mov	r0, r2
   1089c:	4619      	mov	r1, r3
   1089e:	f04f 0200 	mov.w	r2, #0
   108a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   108a6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   108aa:	f002 fa15 	bl	12cd8 <__aeabi_ddiv>
   108ae:	4602      	mov	r2, r0
   108b0:	460b      	mov	r3, r1
   108b2:	4610      	mov	r0, r2
   108b4:	4619      	mov	r1, r3
   108b6:	f002 fb7f 	bl	12fb8 <__aeabi_d2iz>
   108ba:	4603      	mov	r3, r0
   108bc:	b29b      	uxth	r3, r3
   108be:	b29a      	uxth	r2, r3
   108c0:	f64b 23dc 	movw	r3, #47836	; 0xbadc
   108c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c8:	881b      	ldrh	r3, [r3, #0]
   108ca:	b29b      	uxth	r3, r3
   108cc:	4413      	add	r3, r2
   108ce:	b29b      	uxth	r3, r3
   108d0:	b29a      	uxth	r2, r3
   108d2:	f240 130a 	movw	r3, #266	; 0x10a
   108d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108da:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   108dc:	f240 130a 	movw	r3, #266	; 0x10a
   108e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e4:	881b      	ldrh	r3, [r3, #0]
   108e6:	b21b      	sxth	r3, r3
   108e8:	4618      	mov	r0, r3
   108ea:	f002 fcb7 	bl	1325c <__aeabi_i2f>
   108ee:	4602      	mov	r2, r0
   108f0:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   108f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   108fa:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   108fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10902:	781b      	ldrb	r3, [r3, #0]
   10904:	2b02      	cmp	r3, #2
   10906:	f040 80da 	bne.w	10abe <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1090a:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   1090e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10912:	781b      	ldrb	r3, [r3, #0]
   10914:	2b02      	cmp	r3, #2
   10916:	d165      	bne.n	109e4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   10918:	79fb      	ldrb	r3, [r7, #7]
   1091a:	2b00      	cmp	r3, #0
   1091c:	d013      	beq.n	10946 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   1091e:	f240 1320 	movw	r3, #288	; 0x120
   10922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10926:	681a      	ldr	r2, [r3, #0]
   10928:	f64b 23e0 	movw	r3, #47840	; 0xbae0
   1092c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10930:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   10932:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   10936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093a:	895a      	ldrh	r2, [r3, #10]
   1093c:	f64b 23d6 	movw	r3, #47830	; 0xbad6
   10940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10944:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   10946:	f64b 23e0 	movw	r3, #47840	; 0xbae0
   1094a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094e:	681b      	ldr	r3, [r3, #0]
   10950:	4618      	mov	r0, r3
   10952:	f002 f843 	bl	129dc <__aeabi_f2d>
   10956:	4604      	mov	r4, r0
   10958:	460d      	mov	r5, r1
   1095a:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   1095e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10962:	895b      	ldrh	r3, [r3, #10]
   10964:	b21a      	sxth	r2, r3
   10966:	f64b 23d6 	movw	r3, #47830	; 0xbad6
   1096a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1096e:	881b      	ldrh	r3, [r3, #0]
   10970:	b21b      	sxth	r3, r3
   10972:	1ad3      	subs	r3, r2, r3
   10974:	4618      	mov	r0, r3
   10976:	f002 fc71 	bl	1325c <__aeabi_i2f>
   1097a:	4603      	mov	r3, r0
   1097c:	4618      	mov	r0, r3
   1097e:	f002 f82d 	bl	129dc <__aeabi_f2d>
   10982:	4602      	mov	r2, r0
   10984:	460b      	mov	r3, r1
   10986:	4610      	mov	r0, r2
   10988:	4619      	mov	r1, r3
   1098a:	a34f      	add	r3, pc, #316	; (adr r3, 10ac8 <inflight_calib+0x3a8>)
   1098c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10990:	f002 f878 	bl	12a84 <__aeabi_dmul>
   10994:	4602      	mov	r2, r0
   10996:	460b      	mov	r3, r1
   10998:	4610      	mov	r0, r2
   1099a:	4619      	mov	r1, r3
   1099c:	f04f 0200 	mov.w	r2, #0
   109a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   109a4:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   109a8:	f002 f996 	bl	12cd8 <__aeabi_ddiv>
   109ac:	4602      	mov	r2, r0
   109ae:	460b      	mov	r3, r1
   109b0:	4620      	mov	r0, r4
   109b2:	4629      	mov	r1, r5
   109b4:	f001 feb4 	bl	12720 <__adddf3>
   109b8:	4602      	mov	r2, r0
   109ba:	460b      	mov	r3, r1
   109bc:	4610      	mov	r0, r2
   109be:	4619      	mov	r1, r3
   109c0:	f002 fb42 	bl	13048 <__aeabi_d2f>
   109c4:	4602      	mov	r2, r0
   109c6:	f240 1320 	movw	r3, #288	; 0x120
   109ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ce:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   109d0:	f240 1320 	movw	r3, #288	; 0x120
   109d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d8:	681a      	ldr	r2, [r3, #0]
   109da:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   109de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   109e4:	f64b 23d4 	movw	r3, #47828	; 0xbad4
   109e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ec:	781b      	ldrb	r3, [r3, #0]
   109ee:	2b02      	cmp	r3, #2
   109f0:	d165      	bne.n	10abe <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   109f2:	79fb      	ldrb	r3, [r7, #7]
   109f4:	2b00      	cmp	r3, #0
   109f6:	d013      	beq.n	10a20 <inflight_calib+0x300>
        max_roll_init = max_roll;
   109f8:	f240 1324 	movw	r3, #292	; 0x124
   109fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a00:	681a      	ldr	r2, [r3, #0]
   10a02:	f64b 23e4 	movw	r3, #47844	; 0xbae4
   10a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0a:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   10a0c:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   10a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a14:	899a      	ldrh	r2, [r3, #12]
   10a16:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   10a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a1e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   10a20:	f64b 23e4 	movw	r3, #47844	; 0xbae4
   10a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a28:	681b      	ldr	r3, [r3, #0]
   10a2a:	4618      	mov	r0, r3
   10a2c:	f001 ffd6 	bl	129dc <__aeabi_f2d>
   10a30:	4604      	mov	r4, r0
   10a32:	460d      	mov	r5, r1
   10a34:	f24b 53c8 	movw	r3, #46536	; 0xb5c8
   10a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3c:	899b      	ldrh	r3, [r3, #12]
   10a3e:	b21a      	sxth	r2, r3
   10a40:	f64b 23d8 	movw	r3, #47832	; 0xbad8
   10a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a48:	881b      	ldrh	r3, [r3, #0]
   10a4a:	b21b      	sxth	r3, r3
   10a4c:	1ad3      	subs	r3, r2, r3
   10a4e:	4618      	mov	r0, r3
   10a50:	f002 fc04 	bl	1325c <__aeabi_i2f>
   10a54:	4603      	mov	r3, r0
   10a56:	4618      	mov	r0, r3
   10a58:	f001 ffc0 	bl	129dc <__aeabi_f2d>
   10a5c:	4602      	mov	r2, r0
   10a5e:	460b      	mov	r3, r1
   10a60:	4610      	mov	r0, r2
   10a62:	4619      	mov	r1, r3
   10a64:	a31a      	add	r3, pc, #104	; (adr r3, 10ad0 <inflight_calib+0x3b0>)
   10a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a6a:	f002 f80b 	bl	12a84 <__aeabi_dmul>
   10a6e:	4602      	mov	r2, r0
   10a70:	460b      	mov	r3, r1
   10a72:	4610      	mov	r0, r2
   10a74:	4619      	mov	r1, r3
   10a76:	f04f 0200 	mov.w	r2, #0
   10a7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   10a7e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   10a82:	f002 f929 	bl	12cd8 <__aeabi_ddiv>
   10a86:	4602      	mov	r2, r0
   10a88:	460b      	mov	r3, r1
   10a8a:	4620      	mov	r0, r4
   10a8c:	4629      	mov	r1, r5
   10a8e:	f001 fe47 	bl	12720 <__adddf3>
   10a92:	4602      	mov	r2, r0
   10a94:	460b      	mov	r3, r1
   10a96:	4610      	mov	r0, r2
   10a98:	4619      	mov	r1, r3
   10a9a:	f002 fad5 	bl	13048 <__aeabi_d2f>
   10a9e:	4602      	mov	r2, r0
   10aa0:	f240 1324 	movw	r3, #292	; 0x124
   10aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa8:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   10aaa:	f240 1324 	movw	r3, #292	; 0x124
   10aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab2:	681a      	ldr	r2, [r3, #0]
   10ab4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   10ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10abc:	601a      	str	r2, [r3, #0]
    }
  }
}
   10abe:	3708      	adds	r7, #8
   10ac0:	46bd      	mov	sp, r7
   10ac2:	bdb0      	pop	{r4, r5, r7, pc}
   10ac4:	f3af 8000 	nop.w
   10ac8:	9999999a 	.word	0x9999999a
   10acc:	3fb99999 	.word	0x3fb99999
   10ad0:	9999999a 	.word	0x9999999a
   10ad4:	bfc99999 	.word	0xbfc99999

00010ad8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   10ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10adc:	b08e      	sub	sp, #56	; 0x38
   10ade:	af00      	add	r7, sp, #0
   10ae0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10ae4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   10ae8:	a357      	add	r3, pc, #348	; (adr r3, 10c48 <pp_atan2+0x170>)
   10aea:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   10af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10af6:	f04f 0200 	mov.w	r2, #0
   10afa:	f04f 0300 	mov.w	r3, #0
   10afe:	f2c4 0308 	movt	r3, #16392	; 0x4008
   10b02:	f001 ffbf 	bl	12a84 <__aeabi_dmul>
   10b06:	4602      	mov	r2, r0
   10b08:	460b      	mov	r3, r1
   10b0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   10b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
   10b12:	f04f 0200 	mov.w	r2, #0
   10b16:	f04f 0300 	mov.w	r3, #0
   10b1a:	f002 fa25 	bl	12f68 <__aeabi_dcmplt>
   10b1e:	4603      	mov	r3, r0
   10b20:	2b00      	cmp	r3, #0
   10b22:	d009      	beq.n	10b38 <pp_atan2+0x60>
   10b24:	a14a      	add	r1, pc, #296	; (adr r1, 10c50 <pp_atan2+0x178>)
   10b26:	e9d1 0100 	ldrd	r0, r1, [r1]
   10b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
   10b2e:	f001 fdf5 	bl	1271c <__aeabi_dsub>
   10b32:	4602      	mov	r2, r0
   10b34:	460b      	mov	r3, r1
   10b36:	e008      	b.n	10b4a <pp_atan2+0x72>
   10b38:	e9d7 0100 	ldrd	r0, r1, [r7]
   10b3c:	a344      	add	r3, pc, #272	; (adr r3, 10c50 <pp_atan2+0x178>)
   10b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b42:	f001 fded 	bl	12720 <__adddf3>
   10b46:	4602      	mov	r2, r0
   10b48:	460b      	mov	r3, r1
   10b4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   10b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b52:	f04f 0200 	mov.w	r2, #0
   10b56:	f04f 0300 	mov.w	r3, #0
   10b5a:	f002 fa23 	bl	12fa4 <__aeabi_dcmpgt>
   10b5e:	4603      	mov	r3, r0
   10b60:	2b00      	cmp	r3, #0
   10b62:	d02a      	beq.n	10bba <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   10b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10b6c:	f001 fdd6 	bl	1271c <__aeabi_dsub>
   10b70:	4602      	mov	r2, r0
   10b72:	460b      	mov	r3, r1
   10b74:	4690      	mov	r8, r2
   10b76:	4699      	mov	r9, r3
   10b78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10b80:	f001 fdce 	bl	12720 <__adddf3>
   10b84:	4602      	mov	r2, r0
   10b86:	460b      	mov	r3, r1
   10b88:	4640      	mov	r0, r8
   10b8a:	4649      	mov	r1, r9
   10b8c:	f002 f8a4 	bl	12cd8 <__aeabi_ddiv>
   10b90:	4602      	mov	r2, r0
   10b92:	460b      	mov	r3, r1
   10b94:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   10b98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10b9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10ba0:	f001 ff70 	bl	12a84 <__aeabi_dmul>
   10ba4:	4602      	mov	r2, r0
   10ba6:	460b      	mov	r3, r1
   10ba8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bac:	f001 fdb6 	bl	1271c <__aeabi_dsub>
   10bb0:	4602      	mov	r2, r0
   10bb2:	460b      	mov	r3, r1
   10bb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   10bb8:	e029      	b.n	10c0e <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   10bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10bc2:	f001 fdad 	bl	12720 <__adddf3>
   10bc6:	4602      	mov	r2, r0
   10bc8:	460b      	mov	r3, r1
   10bca:	4690      	mov	r8, r2
   10bcc:	4699      	mov	r9, r3
   10bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10bd6:	f001 fda1 	bl	1271c <__aeabi_dsub>
   10bda:	4602      	mov	r2, r0
   10bdc:	460b      	mov	r3, r1
   10bde:	4640      	mov	r0, r8
   10be0:	4649      	mov	r1, r9
   10be2:	f002 f879 	bl	12cd8 <__aeabi_ddiv>
   10be6:	4602      	mov	r2, r0
   10be8:	460b      	mov	r3, r1
   10bea:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   10bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10bf6:	f001 ff45 	bl	12a84 <__aeabi_dmul>
   10bfa:	4602      	mov	r2, r0
   10bfc:	460b      	mov	r3, r1
   10bfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   10c02:	f001 fd8b 	bl	1271c <__aeabi_dsub>
   10c06:	4602      	mov	r2, r0
   10c08:	460b      	mov	r3, r1
   10c0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   10c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
   10c12:	f04f 0200 	mov.w	r2, #0
   10c16:	f04f 0300 	mov.w	r3, #0
   10c1a:	f002 f9a5 	bl	12f68 <__aeabi_dcmplt>
   10c1e:	4603      	mov	r3, r0
   10c20:	2b00      	cmp	r3, #0
   10c22:	d004      	beq.n	10c2e <pp_atan2+0x156>
		return (-angle);
   10c24:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10c28:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10c2c:	e001      	b.n	10c32 <pp_atan2+0x15a>
	else
		return angle;
   10c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   10c32:	4622      	mov	r2, r4
   10c34:	462b      	mov	r3, r5
}
   10c36:	4610      	mov	r0, r2
   10c38:	4619      	mov	r1, r3
   10c3a:	3738      	adds	r7, #56	; 0x38
   10c3c:	46bd      	mov	sp, r7
   10c3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   10c42:	bf00      	nop
   10c44:	f3af 8000 	nop.w
   10c48:	54442d18 	.word	0x54442d18
   10c4c:	3fe921fb 	.word	0x3fe921fb
   10c50:	d9d7bdbb 	.word	0xd9d7bdbb
   10c54:	3ddb7cdf 	.word	0x3ddb7cdf

00010c58 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   10c58:	b5b0      	push	{r4, r5, r7, lr}
   10c5a:	b08c      	sub	sp, #48	; 0x30
   10c5c:	af00      	add	r7, sp, #0
   10c5e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   10c62:	e9d7 2300 	ldrd	r2, r3, [r7]
   10c66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10c6a:	2301      	movs	r3, #1
   10c6c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   10c6e:	e00a      	b.n	10c86 <pp_sin+0x2e>
   10c70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c74:	a35a      	add	r3, pc, #360	; (adr r3, 10de0 <pp_sin+0x188>)
   10c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c7a:	f001 fd51 	bl	12720 <__adddf3>
   10c7e:	4602      	mov	r2, r0
   10c80:	460b      	mov	r3, r1
   10c82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c8a:	a357      	add	r3, pc, #348	; (adr r3, 10de8 <pp_sin+0x190>)
   10c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c90:	f002 f96a 	bl	12f68 <__aeabi_dcmplt>
   10c94:	4603      	mov	r3, r0
   10c96:	2b00      	cmp	r3, #0
   10c98:	d1ea      	bne.n	10c70 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   10c9a:	e00a      	b.n	10cb2 <pp_sin+0x5a>
   10c9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10ca0:	a34f      	add	r3, pc, #316	; (adr r3, 10de0 <pp_sin+0x188>)
   10ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ca6:	f001 fd39 	bl	1271c <__aeabi_dsub>
   10caa:	4602      	mov	r2, r0
   10cac:	460b      	mov	r3, r1
   10cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10cb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10cb6:	a34e      	add	r3, pc, #312	; (adr r3, 10df0 <pp_sin+0x198>)
   10cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cbc:	f002 f972 	bl	12fa4 <__aeabi_dcmpgt>
   10cc0:	4603      	mov	r3, r0
   10cc2:	2b00      	cmp	r3, #0
   10cc4:	d1ea      	bne.n	10c9c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   10cc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10cca:	a34b      	add	r3, pc, #300	; (adr r3, 10df8 <pp_sin+0x1a0>)
   10ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cd0:	f002 f968 	bl	12fa4 <__aeabi_dcmpgt>
   10cd4:	4603      	mov	r3, r0
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	d00d      	beq.n	10cf6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   10cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10cde:	a348      	add	r3, pc, #288	; (adr r3, 10e00 <pp_sin+0x1a8>)
   10ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ce4:	f001 fd1a 	bl	1271c <__aeabi_dsub>
   10ce8:	4602      	mov	r2, r0
   10cea:	460b      	mov	r3, r1
   10cec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   10cf0:	f04f 33ff 	mov.w	r3, #4294967295
   10cf4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   10cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10cfa:	a343      	add	r3, pc, #268	; (adr r3, 10e08 <pp_sin+0x1b0>)
   10cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d00:	f001 ffea 	bl	12cd8 <__aeabi_ddiv>
   10d04:	4602      	mov	r2, r0
   10d06:	460b      	mov	r3, r1
   10d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10d0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   10d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10d14:	f001 feb6 	bl	12a84 <__aeabi_dmul>
   10d18:	4602      	mov	r2, r0
   10d1a:	460b      	mov	r3, r1
   10d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   10d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10d24:	a33a      	add	r3, pc, #232	; (adr r3, 10e10 <pp_sin+0x1b8>)
   10d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d2a:	f001 feab 	bl	12a84 <__aeabi_dmul>
   10d2e:	4602      	mov	r2, r0
   10d30:	460b      	mov	r3, r1
	      - .00467376557) * q2
   10d32:	4610      	mov	r0, r2
   10d34:	4619      	mov	r1, r3
   10d36:	a338      	add	r3, pc, #224	; (adr r3, 10e18 <pp_sin+0x1c0>)
   10d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d3c:	f001 fcee 	bl	1271c <__aeabi_dsub>
   10d40:	4602      	mov	r2, r0
   10d42:	460b      	mov	r3, r1
   10d44:	4610      	mov	r0, r2
   10d46:	4619      	mov	r1, r3
   10d48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d4c:	f001 fe9a 	bl	12a84 <__aeabi_dmul>
   10d50:	4602      	mov	r2, r0
   10d52:	460b      	mov	r3, r1
	      + .07968967928) * q2
   10d54:	4610      	mov	r0, r2
   10d56:	4619      	mov	r1, r3
   10d58:	a331      	add	r3, pc, #196	; (adr r3, 10e20 <pp_sin+0x1c8>)
   10d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d5e:	f001 fcdf 	bl	12720 <__adddf3>
   10d62:	4602      	mov	r2, r0
   10d64:	460b      	mov	r3, r1
   10d66:	4610      	mov	r0, r2
   10d68:	4619      	mov	r1, r3
   10d6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d6e:	f001 fe89 	bl	12a84 <__aeabi_dmul>
   10d72:	4602      	mov	r2, r0
   10d74:	460b      	mov	r3, r1
	      - .64596371106) * q2
   10d76:	4610      	mov	r0, r2
   10d78:	4619      	mov	r1, r3
   10d7a:	a32b      	add	r3, pc, #172	; (adr r3, 10e28 <pp_sin+0x1d0>)
   10d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d80:	f001 fccc 	bl	1271c <__aeabi_dsub>
   10d84:	4602      	mov	r2, r0
   10d86:	460b      	mov	r3, r1
   10d88:	4610      	mov	r0, r2
   10d8a:	4619      	mov	r1, r3
   10d8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10d90:	f001 fe78 	bl	12a84 <__aeabi_dmul>
   10d94:	4602      	mov	r2, r0
   10d96:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   10d98:	4610      	mov	r0, r2
   10d9a:	4619      	mov	r1, r3
   10d9c:	a324      	add	r3, pc, #144	; (adr r3, 10e30 <pp_sin+0x1d8>)
   10d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10da2:	f001 fcbd 	bl	12720 <__adddf3>
   10da6:	4602      	mov	r2, r0
   10da8:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   10daa:	4610      	mov	r0, r2
   10dac:	4619      	mov	r1, r3
   10dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10db2:	f001 fe67 	bl	12a84 <__aeabi_dmul>
   10db6:	4602      	mov	r2, r0
   10db8:	460b      	mov	r3, r1
   10dba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   10dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	da04      	bge.n	10dce <pp_sin+0x176>
   10dc4:	68bc      	ldr	r4, [r7, #8]
   10dc6:	68fb      	ldr	r3, [r7, #12]
   10dc8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   10dcc:	e001      	b.n	10dd2 <pp_sin+0x17a>
   10dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   10dd2:	4622      	mov	r2, r4
   10dd4:	462b      	mov	r3, r5
}
   10dd6:	4610      	mov	r0, r2
   10dd8:	4619      	mov	r1, r3
   10dda:	3730      	adds	r7, #48	; 0x30
   10ddc:	46bd      	mov	sp, r7
   10dde:	bdb0      	pop	{r4, r5, r7, pc}
   10de0:	54442d18 	.word	0x54442d18
   10de4:	401921fb 	.word	0x401921fb
   10de8:	54442d18 	.word	0x54442d18
   10dec:	bff921fb 	.word	0xbff921fb
   10df0:	7f3321d2 	.word	0x7f3321d2
   10df4:	4012d97c 	.word	0x4012d97c
   10df8:	54442d18 	.word	0x54442d18
   10dfc:	3ff921fb 	.word	0x3ff921fb
   10e00:	54442d18 	.word	0x54442d18
   10e04:	400921fb 	.word	0x400921fb
   10e08:	5443d6f4 	.word	0x5443d6f4
   10e0c:	3ff921fb 	.word	0x3ff921fb
   10e10:	48a890af 	.word	0x48a890af
   10e14:	3f23daf7 	.word	0x3f23daf7
   10e18:	645b6d0e 	.word	0x645b6d0e
   10e1c:	3f7324cc 	.word	0x3f7324cc
   10e20:	f65619a5 	.word	0xf65619a5
   10e24:	3fb4668a 	.word	0x3fb4668a
   10e28:	16acf9cd 	.word	0x16acf9cd
   10e2c:	3fe4abbc 	.word	0x3fe4abbc
   10e30:	520817f7 	.word	0x520817f7
   10e34:	3ff921fb 	.word	0x3ff921fb

00010e38 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   10e38:	b480      	push	{r7}
   10e3a:	b083      	sub	sp, #12
   10e3c:	af00      	add	r7, sp, #0
   10e3e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   10e42:	4610      	mov	r0, r2
   10e44:	4619      	mov	r1, r3
   10e46:	370c      	adds	r7, #12
   10e48:	46bd      	mov	sp, r7
   10e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e4e:	4770      	bx	lr

00010e50 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   10e50:	b480      	push	{r7}
   10e52:	b083      	sub	sp, #12
   10e54:	af00      	add	r7, sp, #0
   10e56:	4603      	mov	r3, r0
   10e58:	6039      	str	r1, [r7, #0]
   10e5a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10e5c:	79fa      	ldrb	r2, [r7, #7]
   10e5e:	f64b 23f8 	movw	r3, #47864	; 0xbaf8
   10e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e66:	6839      	ldr	r1, [r7, #0]
   10e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10e6c:	370c      	adds	r7, #12
   10e6e:	46bd      	mov	sp, r7
   10e70:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e74:	4770      	bx	lr
   10e76:	bf00      	nop

00010e78 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   10e78:	b480      	push	{r7}
   10e7a:	b083      	sub	sp, #12
   10e7c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10e7e:	f248 0315 	movw	r3, #32789	; 0x8015
   10e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e86:	2200      	movs	r2, #0
   10e88:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10e8a:	f248 0314 	movw	r3, #32788	; 0x8014
   10e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e92:	2200      	movs	r2, #0
   10e94:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   10e96:	f248 0307 	movw	r3, #32775	; 0x8007
   10e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9e:	22c0      	movs	r2, #192	; 0xc0
   10ea0:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   10ea2:	f248 0306 	movw	r3, #32774	; 0x8006
   10ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eaa:	22cf      	movs	r2, #207	; 0xcf
   10eac:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10eae:	2300      	movs	r3, #0
   10eb0:	71fb      	strb	r3, [r7, #7]
   10eb2:	e00a      	b.n	10eca <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   10eb4:	79fa      	ldrb	r2, [r7, #7]
   10eb6:	f64b 23f8 	movw	r3, #47864	; 0xbaf8
   10eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ebe:	2100      	movs	r1, #0
   10ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   10ec4:	79fb      	ldrb	r3, [r7, #7]
   10ec6:	3301      	adds	r3, #1
   10ec8:	71fb      	strb	r3, [r7, #7]
   10eca:	79fb      	ldrb	r3, [r7, #7]
   10ecc:	2b07      	cmp	r3, #7
   10ece:	d9f1      	bls.n	10eb4 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   10ed0:	370c      	adds	r7, #12
   10ed2:	46bd      	mov	sp, r7
   10ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ed8:	4770      	bx	lr
   10eda:	bf00      	nop

00010edc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   10edc:	b480      	push	{r7}
   10ede:	b083      	sub	sp, #12
   10ee0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   10ee2:	f248 0326 	movw	r3, #32806	; 0x8026
   10ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eea:	881b      	ldrh	r3, [r3, #0]
   10eec:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   10eee:	f64b 3354 	movw	r3, #47956	; 0xbb54
   10ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef6:	881b      	ldrh	r3, [r3, #0]
   10ef8:	88fa      	ldrh	r2, [r7, #6]
   10efa:	1ad3      	subs	r3, r2, r3
   10efc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   10efe:	f64b 3354 	movw	r3, #47956	; 0xbb54
   10f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f06:	88fa      	ldrh	r2, [r7, #6]
   10f08:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   10f0a:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f12:	781b      	ldrb	r3, [r3, #0]
   10f14:	2b00      	cmp	r3, #0
   10f16:	d11e      	bne.n	10f56 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   10f18:	f248 0324 	movw	r3, #32804	; 0x8024
   10f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f20:	781b      	ldrb	r3, [r3, #0]
   10f22:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   10f24:	f64b 3357 	movw	r3, #47959	; 0xbb57
   10f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2c:	781b      	ldrb	r3, [r3, #0]
   10f2e:	78fa      	ldrb	r2, [r7, #3]
   10f30:	1ad3      	subs	r3, r2, r3
   10f32:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   10f34:	f64b 3357 	movw	r3, #47959	; 0xbb57
   10f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f3c:	78fa      	ldrb	r2, [r7, #3]
   10f3e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   10f40:	78bb      	ldrb	r3, [r7, #2]
   10f42:	2b6d      	cmp	r3, #109	; 0x6d
   10f44:	d906      	bls.n	10f54 <__vector_34+0x78>
      state = 1;
   10f46:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f4e:	2201      	movs	r2, #1
   10f50:	701a      	strb	r2, [r3, #0]
   10f52:	e053      	b.n	10ffc <__vector_34+0x120>
   10f54:	e052      	b.n	10ffc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   10f56:	88bb      	ldrh	r3, [r7, #4]
   10f58:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   10f5c:	d304      	bcc.n	10f68 <__vector_34+0x8c>
   10f5e:	88ba      	ldrh	r2, [r7, #4]
   10f60:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   10f64:	429a      	cmp	r2, r3
   10f66:	d911      	bls.n	10f8c <__vector_34+0xb0>
      RestartPpmCycle();
   10f68:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f70:	2200      	movs	r2, #0
   10f72:	701a      	strb	r2, [r3, #0]
   10f74:	f248 0324 	movw	r3, #32804	; 0x8024
   10f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7c:	781b      	ldrb	r3, [r3, #0]
   10f7e:	b2da      	uxtb	r2, r3
   10f80:	f64b 3357 	movw	r3, #47959	; 0xbb57
   10f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f88:	701a      	strb	r2, [r3, #0]
   10f8a:	e038      	b.n	10ffe <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   10f8c:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	1e5a      	subs	r2, r3, #1
   10f98:	f64b 3318 	movw	r3, #47896	; 0xbb18
   10f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa0:	88b9      	ldrh	r1, [r7, #4]
   10fa2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   10fa6:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fae:	781b      	ldrb	r3, [r3, #0]
   10fb0:	2b08      	cmp	r3, #8
   10fb2:	d917      	bls.n	10fe4 <__vector_34+0x108>
      ppm_valid	= 1;
   10fb4:	f64b 3353 	movw	r3, #47955	; 0xbb53
   10fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fbc:	2201      	movs	r2, #1
   10fbe:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   10fc0:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc8:	2200      	movs	r2, #0
   10fca:	701a      	strb	r2, [r3, #0]
   10fcc:	f248 0324 	movw	r3, #32804	; 0x8024
   10fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd4:	781b      	ldrb	r3, [r3, #0]
   10fd6:	b2da      	uxtb	r2, r3
   10fd8:	f64b 3357 	movw	r3, #47959	; 0xbb57
   10fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe0:	701a      	strb	r2, [r3, #0]
   10fe2:	e00c      	b.n	10ffe <__vector_34+0x122>
    } else 
      state++;
   10fe4:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fec:	781b      	ldrb	r3, [r3, #0]
   10fee:	3301      	adds	r3, #1
   10ff0:	b2da      	uxtb	r2, r3
   10ff2:	f64b 3356 	movw	r3, #47958	; 0xbb56
   10ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ffa:	701a      	strb	r2, [r3, #0]
  }
  return;
   10ffc:	bf00      	nop
}
   10ffe:	370c      	adds	r7, #12
   11000:	46bd      	mov	sp, r7
   11002:	f85d 7b04 	ldr.w	r7, [sp], #4
   11006:	4770      	bx	lr

00011008 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   11008:	b590      	push	{r4, r7, lr}
   1100a:	b083      	sub	sp, #12
   1100c:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   1100e:	f64b 3318 	movw	r3, #47896	; 0xbb18
   11012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11016:	881b      	ldrh	r3, [r3, #0]
   11018:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   1101c:	b29b      	uxth	r3, r3
   1101e:	80fb      	strh	r3, [r7, #6]
   11020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11024:	4618      	mov	r0, r3
   11026:	f002 f919 	bl	1325c <__aeabi_i2f>
   1102a:	4603      	mov	r3, r0
   1102c:	4618      	mov	r0, r3
   1102e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11032:	f002 f967 	bl	13304 <__aeabi_fmul>
   11036:	4603      	mov	r3, r0
   11038:	4618      	mov	r0, r3
   1103a:	f002 fb29 	bl	13690 <__aeabi_f2iz>
   1103e:	4603      	mov	r3, r0
   11040:	b29a      	uxth	r2, r3
   11042:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1104a:	801a      	strh	r2, [r3, #0]
   1104c:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11054:	881b      	ldrh	r3, [r3, #0]
   11056:	b21b      	sxth	r3, r3
   11058:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1105c:	dd07      	ble.n	1106e <last_radio_from_ppm+0x66>
   1105e:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11066:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1106a:	801a      	strh	r2, [r3, #0]
   1106c:	e00d      	b.n	1108a <last_radio_from_ppm+0x82>
   1106e:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11076:	881b      	ldrh	r3, [r3, #0]
   11078:	b21b      	sxth	r3, r3
   1107a:	2b00      	cmp	r3, #0
   1107c:	da05      	bge.n	1108a <last_radio_from_ppm+0x82>
   1107e:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11086:	2200      	movs	r2, #0
   11088:	801a      	strh	r2, [r3, #0]
   1108a:	f64b 3318 	movw	r3, #47896	; 0xbb18
   1108e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11092:	885b      	ldrh	r3, [r3, #2]
   11094:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11098:	b29b      	uxth	r3, r3
   1109a:	80fb      	strh	r3, [r7, #6]
   1109c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   110a0:	4618      	mov	r0, r3
   110a2:	f002 f8db 	bl	1325c <__aeabi_i2f>
   110a6:	4603      	mov	r3, r0
   110a8:	4618      	mov	r0, r3
   110aa:	f002 faf1 	bl	13690 <__aeabi_f2iz>
   110ae:	4603      	mov	r3, r0
   110b0:	b29a      	uxth	r2, r3
   110b2:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   110b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ba:	805a      	strh	r2, [r3, #2]
   110bc:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   110c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c4:	885b      	ldrh	r3, [r3, #2]
   110c6:	b21b      	sxth	r3, r3
   110c8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   110cc:	dd07      	ble.n	110de <last_radio_from_ppm+0xd6>
   110ce:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   110d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   110da:	805a      	strh	r2, [r3, #2]
   110dc:	e00f      	b.n	110fe <last_radio_from_ppm+0xf6>
   110de:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   110e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e6:	885b      	ldrh	r3, [r3, #2]
   110e8:	b21b      	sxth	r3, r3
   110ea:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   110ee:	da06      	bge.n	110fe <last_radio_from_ppm+0xf6>
   110f0:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   110f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f8:	f64d 2280 	movw	r2, #55936	; 0xda80
   110fc:	805a      	strh	r2, [r3, #2]
   110fe:	f64b 3318 	movw	r3, #47896	; 0xbb18
   11102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11106:	889b      	ldrh	r3, [r3, #4]
   11108:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1110c:	b29b      	uxth	r3, r3
   1110e:	80fb      	strh	r3, [r7, #6]
   11110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11114:	4618      	mov	r0, r3
   11116:	f002 f8a1 	bl	1325c <__aeabi_i2f>
   1111a:	4603      	mov	r3, r0
   1111c:	4618      	mov	r0, r3
   1111e:	f002 fab7 	bl	13690 <__aeabi_f2iz>
   11122:	4603      	mov	r3, r0
   11124:	b29a      	uxth	r2, r3
   11126:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   1112a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1112e:	809a      	strh	r2, [r3, #4]
   11130:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11138:	889b      	ldrh	r3, [r3, #4]
   1113a:	b21b      	sxth	r3, r3
   1113c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11140:	dd07      	ble.n	11152 <last_radio_from_ppm+0x14a>
   11142:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1114e:	809a      	strh	r2, [r3, #4]
   11150:	e00f      	b.n	11172 <last_radio_from_ppm+0x16a>
   11152:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1115a:	889b      	ldrh	r3, [r3, #4]
   1115c:	b21b      	sxth	r3, r3
   1115e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11162:	da06      	bge.n	11172 <last_radio_from_ppm+0x16a>
   11164:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11170:	809a      	strh	r2, [r3, #4]
   11172:	f64b 3318 	movw	r3, #47896	; 0xbb18
   11176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117a:	88db      	ldrh	r3, [r3, #6]
   1117c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11180:	b29b      	uxth	r3, r3
   11182:	80fb      	strh	r3, [r7, #6]
   11184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11188:	4618      	mov	r0, r3
   1118a:	f002 f867 	bl	1325c <__aeabi_i2f>
   1118e:	4603      	mov	r3, r0
   11190:	4618      	mov	r0, r3
   11192:	f002 fa7d 	bl	13690 <__aeabi_f2iz>
   11196:	4603      	mov	r3, r0
   11198:	b29a      	uxth	r2, r3
   1119a:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   1119e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a2:	80da      	strh	r2, [r3, #6]
   111a4:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   111a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ac:	88db      	ldrh	r3, [r3, #6]
   111ae:	b21b      	sxth	r3, r3
   111b0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   111b4:	dd07      	ble.n	111c6 <last_radio_from_ppm+0x1be>
   111b6:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   111ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111be:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   111c2:	80da      	strh	r2, [r3, #6]
   111c4:	e00f      	b.n	111e6 <last_radio_from_ppm+0x1de>
   111c6:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   111ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ce:	88db      	ldrh	r3, [r3, #6]
   111d0:	b21b      	sxth	r3, r3
   111d2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   111d6:	da06      	bge.n	111e6 <last_radio_from_ppm+0x1de>
   111d8:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   111dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111e0:	f64d 2280 	movw	r2, #55936	; 0xda80
   111e4:	80da      	strh	r2, [r3, #6]
   111e6:	f64b 3318 	movw	r3, #47896	; 0xbb18
   111ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ee:	891b      	ldrh	r3, [r3, #8]
   111f0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   111f4:	b29b      	uxth	r3, r3
   111f6:	80fb      	strh	r3, [r7, #6]
   111f8:	f64b 3340 	movw	r3, #47936	; 0xbb40
   111fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11200:	891b      	ldrh	r3, [r3, #8]
   11202:	b21b      	sxth	r3, r3
   11204:	4618      	mov	r0, r3
   11206:	f002 f829 	bl	1325c <__aeabi_i2f>
   1120a:	4604      	mov	r4, r0
   1120c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11210:	4618      	mov	r0, r3
   11212:	f002 f823 	bl	1325c <__aeabi_i2f>
   11216:	4603      	mov	r3, r0
   11218:	4618      	mov	r0, r3
   1121a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1121e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11222:	f002 f86f 	bl	13304 <__aeabi_fmul>
   11226:	4603      	mov	r3, r0
   11228:	4620      	mov	r0, r4
   1122a:	4619      	mov	r1, r3
   1122c:	f001 ff62 	bl	130f4 <__addsf3>
   11230:	4603      	mov	r3, r0
   11232:	4618      	mov	r0, r3
   11234:	f002 fa2c 	bl	13690 <__aeabi_f2iz>
   11238:	4603      	mov	r3, r0
   1123a:	b29a      	uxth	r2, r3
   1123c:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11244:	811a      	strh	r2, [r3, #8]
   11246:	f64b 3318 	movw	r3, #47896	; 0xbb18
   1124a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124e:	895b      	ldrh	r3, [r3, #10]
   11250:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11254:	b29b      	uxth	r3, r3
   11256:	80fb      	strh	r3, [r7, #6]
   11258:	f64b 3340 	movw	r3, #47936	; 0xbb40
   1125c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11260:	895b      	ldrh	r3, [r3, #10]
   11262:	b21b      	sxth	r3, r3
   11264:	4618      	mov	r0, r3
   11266:	f001 fff9 	bl	1325c <__aeabi_i2f>
   1126a:	4604      	mov	r4, r0
   1126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11270:	4618      	mov	r0, r3
   11272:	f001 fff3 	bl	1325c <__aeabi_i2f>
   11276:	4603      	mov	r3, r0
   11278:	4618      	mov	r0, r3
   1127a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1127e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11282:	f002 f83f 	bl	13304 <__aeabi_fmul>
   11286:	4603      	mov	r3, r0
   11288:	4620      	mov	r0, r4
   1128a:	4619      	mov	r1, r3
   1128c:	f001 ff32 	bl	130f4 <__addsf3>
   11290:	4603      	mov	r3, r0
   11292:	4618      	mov	r0, r3
   11294:	f002 f9fc 	bl	13690 <__aeabi_f2iz>
   11298:	4603      	mov	r3, r0
   1129a:	b29a      	uxth	r2, r3
   1129c:	f64b 3340 	movw	r3, #47936	; 0xbb40
   112a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a4:	815a      	strh	r2, [r3, #10]
   112a6:	f64b 3318 	movw	r3, #47896	; 0xbb18
   112aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ae:	899b      	ldrh	r3, [r3, #12]
   112b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   112b4:	b29b      	uxth	r3, r3
   112b6:	80fb      	strh	r3, [r7, #6]
   112b8:	f64b 3340 	movw	r3, #47936	; 0xbb40
   112bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c0:	899b      	ldrh	r3, [r3, #12]
   112c2:	b21b      	sxth	r3, r3
   112c4:	4618      	mov	r0, r3
   112c6:	f001 ffc9 	bl	1325c <__aeabi_i2f>
   112ca:	4604      	mov	r4, r0
   112cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   112d0:	4618      	mov	r0, r3
   112d2:	f001 ffc3 	bl	1325c <__aeabi_i2f>
   112d6:	4603      	mov	r3, r0
   112d8:	4618      	mov	r0, r3
   112da:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   112de:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   112e2:	f002 f80f 	bl	13304 <__aeabi_fmul>
   112e6:	4603      	mov	r3, r0
   112e8:	4620      	mov	r0, r4
   112ea:	4619      	mov	r1, r3
   112ec:	f001 ff02 	bl	130f4 <__addsf3>
   112f0:	4603      	mov	r3, r0
   112f2:	4618      	mov	r0, r3
   112f4:	f002 f9cc 	bl	13690 <__aeabi_f2iz>
   112f8:	4603      	mov	r3, r0
   112fa:	b29a      	uxth	r2, r3
   112fc:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11304:	819a      	strh	r2, [r3, #12]
   11306:	f64b 3318 	movw	r3, #47896	; 0xbb18
   1130a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1130e:	89db      	ldrh	r3, [r3, #14]
   11310:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11314:	b29b      	uxth	r3, r3
   11316:	80fb      	strh	r3, [r7, #6]
   11318:	f64b 3340 	movw	r3, #47936	; 0xbb40
   1131c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11320:	89db      	ldrh	r3, [r3, #14]
   11322:	b21b      	sxth	r3, r3
   11324:	4618      	mov	r0, r3
   11326:	f001 ff99 	bl	1325c <__aeabi_i2f>
   1132a:	4604      	mov	r4, r0
   1132c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11330:	4618      	mov	r0, r3
   11332:	f001 ff93 	bl	1325c <__aeabi_i2f>
   11336:	4603      	mov	r3, r0
   11338:	4618      	mov	r0, r3
   1133a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1133e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   11342:	f001 ffdf 	bl	13304 <__aeabi_fmul>
   11346:	4603      	mov	r3, r0
   11348:	4620      	mov	r0, r4
   1134a:	4619      	mov	r1, r3
   1134c:	f001 fed2 	bl	130f4 <__addsf3>
   11350:	4603      	mov	r3, r0
   11352:	4618      	mov	r0, r3
   11354:	f002 f99c 	bl	13690 <__aeabi_f2iz>
   11358:	4603      	mov	r3, r0
   1135a:	b29a      	uxth	r2, r3
   1135c:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11364:	81da      	strh	r2, [r3, #14]
   11366:	f64b 3318 	movw	r3, #47896	; 0xbb18
   1136a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1136e:	8a1b      	ldrh	r3, [r3, #16]
   11370:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   11374:	b29b      	uxth	r3, r3
   11376:	80fb      	strh	r3, [r7, #6]
   11378:	f64b 3340 	movw	r3, #47936	; 0xbb40
   1137c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11380:	8a1b      	ldrh	r3, [r3, #16]
   11382:	b21b      	sxth	r3, r3
   11384:	4618      	mov	r0, r3
   11386:	f001 ff69 	bl	1325c <__aeabi_i2f>
   1138a:	4604      	mov	r4, r0
   1138c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   11390:	4618      	mov	r0, r3
   11392:	f001 ff63 	bl	1325c <__aeabi_i2f>
   11396:	4603      	mov	r3, r0
   11398:	4618      	mov	r0, r3
   1139a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1139e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   113a2:	f001 ffaf 	bl	13304 <__aeabi_fmul>
   113a6:	4603      	mov	r3, r0
   113a8:	4620      	mov	r0, r4
   113aa:	4619      	mov	r1, r3
   113ac:	f001 fea2 	bl	130f4 <__addsf3>
   113b0:	4603      	mov	r3, r0
   113b2:	4618      	mov	r0, r3
   113b4:	f002 f96c 	bl	13690 <__aeabi_f2iz>
   113b8:	4603      	mov	r3, r0
   113ba:	b29a      	uxth	r2, r3
   113bc:	f64b 3340 	movw	r3, #47936	; 0xbb40
   113c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c4:	821a      	strh	r2, [r3, #16]
   113c6:	f64b 3358 	movw	r3, #47960	; 0xbb58
   113ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ce:	781b      	ldrb	r3, [r3, #0]
   113d0:	3301      	adds	r3, #1
   113d2:	b2da      	uxtb	r2, r3
   113d4:	f64b 3358 	movw	r3, #47960	; 0xbb58
   113d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113dc:	701a      	strb	r2, [r3, #0]
   113de:	f64b 3358 	movw	r3, #47960	; 0xbb58
   113e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113e6:	781b      	ldrb	r3, [r3, #0]
   113e8:	2b0a      	cmp	r3, #10
   113ea:	f040 8101 	bne.w	115f0 <last_radio_from_ppm+0x5e8>
   113ee:	f64b 3358 	movw	r3, #47960	; 0xbb58
   113f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f6:	2200      	movs	r2, #0
   113f8:	701a      	strb	r2, [r3, #0]
   113fa:	f64b 3340 	movw	r3, #47936	; 0xbb40
   113fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11402:	891a      	ldrh	r2, [r3, #8]
   11404:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11408:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1140c:	811a      	strh	r2, [r3, #8]
   1140e:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11416:	2200      	movs	r2, #0
   11418:	811a      	strh	r2, [r3, #8]
   1141a:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   1141e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11422:	891b      	ldrh	r3, [r3, #8]
   11424:	b21b      	sxth	r3, r3
   11426:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1142a:	dd07      	ble.n	1143c <last_radio_from_ppm+0x434>
   1142c:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   11438:	811a      	strh	r2, [r3, #8]
   1143a:	e00f      	b.n	1145c <last_radio_from_ppm+0x454>
   1143c:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11444:	891b      	ldrh	r3, [r3, #8]
   11446:	b21b      	sxth	r3, r3
   11448:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1144c:	da06      	bge.n	1145c <last_radio_from_ppm+0x454>
   1144e:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11456:	f64d 2280 	movw	r2, #55936	; 0xda80
   1145a:	811a      	strh	r2, [r3, #8]
   1145c:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11464:	895a      	ldrh	r2, [r3, #10]
   11466:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   1146a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1146e:	815a      	strh	r2, [r3, #10]
   11470:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11478:	2200      	movs	r2, #0
   1147a:	815a      	strh	r2, [r3, #10]
   1147c:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11484:	895b      	ldrh	r3, [r3, #10]
   11486:	b21b      	sxth	r3, r3
   11488:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1148c:	dd07      	ble.n	1149e <last_radio_from_ppm+0x496>
   1148e:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11496:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1149a:	815a      	strh	r2, [r3, #10]
   1149c:	e00f      	b.n	114be <last_radio_from_ppm+0x4b6>
   1149e:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   114a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a6:	895b      	ldrh	r3, [r3, #10]
   114a8:	b21b      	sxth	r3, r3
   114aa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   114ae:	da06      	bge.n	114be <last_radio_from_ppm+0x4b6>
   114b0:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   114b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b8:	f64d 2280 	movw	r2, #55936	; 0xda80
   114bc:	815a      	strh	r2, [r3, #10]
   114be:	f64b 3340 	movw	r3, #47936	; 0xbb40
   114c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c6:	899a      	ldrh	r2, [r3, #12]
   114c8:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   114cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114d0:	819a      	strh	r2, [r3, #12]
   114d2:	f64b 3340 	movw	r3, #47936	; 0xbb40
   114d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114da:	2200      	movs	r2, #0
   114dc:	819a      	strh	r2, [r3, #12]
   114de:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   114e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114e6:	899b      	ldrh	r3, [r3, #12]
   114e8:	b21b      	sxth	r3, r3
   114ea:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   114ee:	dd07      	ble.n	11500 <last_radio_from_ppm+0x4f8>
   114f0:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   114f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   114fc:	819a      	strh	r2, [r3, #12]
   114fe:	e00f      	b.n	11520 <last_radio_from_ppm+0x518>
   11500:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11508:	899b      	ldrh	r3, [r3, #12]
   1150a:	b21b      	sxth	r3, r3
   1150c:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11510:	da06      	bge.n	11520 <last_radio_from_ppm+0x518>
   11512:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1151a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1151e:	819a      	strh	r2, [r3, #12]
   11520:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11528:	89da      	ldrh	r2, [r3, #14]
   1152a:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   1152e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11532:	81da      	strh	r2, [r3, #14]
   11534:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153c:	2200      	movs	r2, #0
   1153e:	81da      	strh	r2, [r3, #14]
   11540:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11548:	89db      	ldrh	r3, [r3, #14]
   1154a:	b21b      	sxth	r3, r3
   1154c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11550:	dd07      	ble.n	11562 <last_radio_from_ppm+0x55a>
   11552:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1155a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1155e:	81da      	strh	r2, [r3, #14]
   11560:	e00f      	b.n	11582 <last_radio_from_ppm+0x57a>
   11562:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1156a:	89db      	ldrh	r3, [r3, #14]
   1156c:	b21b      	sxth	r3, r3
   1156e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   11572:	da06      	bge.n	11582 <last_radio_from_ppm+0x57a>
   11574:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1157c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11580:	81da      	strh	r2, [r3, #14]
   11582:	f64b 3340 	movw	r3, #47936	; 0xbb40
   11586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158a:	8a1a      	ldrh	r2, [r3, #16]
   1158c:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11594:	821a      	strh	r2, [r3, #16]
   11596:	f64b 3340 	movw	r3, #47936	; 0xbb40
   1159a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159e:	2200      	movs	r2, #0
   115a0:	821a      	strh	r2, [r3, #16]
   115a2:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   115a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115aa:	8a1b      	ldrh	r3, [r3, #16]
   115ac:	b21b      	sxth	r3, r3
   115ae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   115b2:	dd07      	ble.n	115c4 <last_radio_from_ppm+0x5bc>
   115b4:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   115b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   115c0:	821a      	strh	r2, [r3, #16]
   115c2:	e00f      	b.n	115e4 <last_radio_from_ppm+0x5dc>
   115c4:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   115c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115cc:	8a1b      	ldrh	r3, [r3, #16]
   115ce:	b21b      	sxth	r3, r3
   115d0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   115d4:	da06      	bge.n	115e4 <last_radio_from_ppm+0x5dc>
   115d6:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   115da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115de:	f64d 2280 	movw	r2, #55936	; 0xda80
   115e2:	821a      	strh	r2, [r3, #16]
   115e4:	f64b 3352 	movw	r3, #47954	; 0xbb52
   115e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ec:	2201      	movs	r2, #1
   115ee:	701a      	strb	r2, [r3, #0]
}
   115f0:	370c      	adds	r7, #12
   115f2:	46bd      	mov	sp, r7
   115f4:	bd90      	pop	{r4, r7, pc}
   115f6:	bf00      	nop

000115f8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   115f8:	b480      	push	{r7}
   115fa:	af00      	add	r7, sp, #0
  idx_buf = 0;
   115fc:	f64b 338c 	movw	r3, #48012	; 0xbb8c
   11600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11604:	2200      	movs	r2, #0
   11606:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   11608:	f64b 338d 	movw	r3, #48013	; 0xbb8d
   1160c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11610:	2200      	movs	r2, #0
   11612:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   11614:	f64b 338c 	movw	r3, #48012	; 0xbb8c
   11618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1161c:	781b      	ldrb	r3, [r3, #0]
   1161e:	b2db      	uxtb	r3, r3
   11620:	461a      	mov	r2, r3
   11622:	f64b 3374 	movw	r3, #47988	; 0xbb74
   11626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1162a:	4413      	add	r3, r2
   1162c:	781a      	ldrb	r2, [r3, #0]
   1162e:	f64b 338e 	movw	r3, #48014	; 0xbb8e
   11632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11636:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   11638:	f248 030f 	movw	r3, #32783	; 0x800f
   1163c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11640:	f64b 328e 	movw	r2, #48014	; 0xbb8e
   11644:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11648:	7812      	ldrb	r2, [r2, #0]
   1164a:	b2d2      	uxtb	r2, r2
   1164c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1164e:	f64b 338a 	movw	r3, #48010	; 0xbb8a
   11652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11656:	2200      	movs	r2, #0
   11658:	701a      	strb	r2, [r3, #0]
}
   1165a:	46bd      	mov	sp, r7
   1165c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11660:	4770      	bx	lr
   11662:	bf00      	nop

00011664 <fbw_spi_init>:

void fbw_spi_init(void) {
   11664:	b480      	push	{r7}
   11666:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   11668:	f64b 3374 	movw	r3, #47988	; 0xbb74
   1166c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11670:	2200      	movs	r2, #0
   11672:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   11674:	f64b 3374 	movw	r3, #47988	; 0xbb74
   11678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1167c:	2200      	movs	r2, #0
   1167e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   11680:	f248 0317 	movw	r3, #32791	; 0x8017
   11684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11688:	f248 0217 	movw	r2, #32791	; 0x8017
   1168c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11690:	7812      	ldrb	r2, [r2, #0]
   11692:	b2d2      	uxtb	r2, r2
   11694:	f042 0210 	orr.w	r2, r2, #16
   11698:	b2d2      	uxtb	r2, r2
   1169a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1169c:	f248 030d 	movw	r3, #32781	; 0x800d
   116a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a4:	2240      	movs	r2, #64	; 0x40
   116a6:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   116a8:	f248 030d 	movw	r3, #32781	; 0x800d
   116ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b0:	f248 020d 	movw	r2, #32781	; 0x800d
   116b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116b8:	7812      	ldrb	r2, [r2, #0]
   116ba:	b2d2      	uxtb	r2, r2
   116bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   116c0:	b2d2      	uxtb	r2, r2
   116c2:	701a      	strb	r2, [r3, #0]
}
   116c4:	46bd      	mov	sp, r7
   116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   116ca:	4770      	bx	lr
   116cc:	0000      	movs	r0, r0
	...

000116d0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   116d0:	b480      	push	{r7}
   116d2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   116d4:	f248 032f 	movw	r3, #32815	; 0x802f
   116d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116dc:	2200      	movs	r2, #0
   116de:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   116e0:	f248 032e 	movw	r3, #32814	; 0x802e
   116e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e8:	2201      	movs	r2, #1
   116ea:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   116ec:	f248 0325 	movw	r3, #32805	; 0x8025
   116f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f4:	2207      	movs	r2, #7
   116f6:	701a      	strb	r2, [r3, #0]
}
   116f8:	46bd      	mov	sp, r7
   116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   116fe:	4770      	bx	lr

00011700 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   11700:	b480      	push	{r7}
   11702:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   11704:	f248 032e 	movw	r3, #32814	; 0x802e
   11708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1170c:	f248 022e 	movw	r2, #32814	; 0x802e
   11710:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11714:	7812      	ldrb	r2, [r2, #0]
   11716:	b2d2      	uxtb	r2, r2
   11718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1171c:	b2d2      	uxtb	r2, r2
   1171e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   11720:	f248 032e 	movw	r3, #32814	; 0x802e
   11724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11728:	f248 022e 	movw	r2, #32814	; 0x802e
   1172c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11730:	7812      	ldrb	r2, [r2, #0]
   11732:	b2d2      	uxtb	r2, r2
   11734:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11738:	b2d2      	uxtb	r2, r2
   1173a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1173c:	f248 0317 	movw	r3, #32791	; 0x8017
   11740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11744:	f248 0217 	movw	r2, #32791	; 0x8017
   11748:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1174c:	7812      	ldrb	r2, [r2, #0]
   1174e:	b2d2      	uxtb	r2, r2
   11750:	f022 0201 	bic.w	r2, r2, #1
   11754:	b2d2      	uxtb	r2, r2
   11756:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   11758:	f248 0337 	movw	r3, #32823	; 0x8037
   1175c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11760:	f248 0237 	movw	r2, #32823	; 0x8037
   11764:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11768:	7812      	ldrb	r2, [r2, #0]
   1176a:	b2d2      	uxtb	r2, r2
   1176c:	f042 0220 	orr.w	r2, r2, #32
   11770:	b2d2      	uxtb	r2, r2
   11772:	701a      	strb	r2, [r3, #0]
}
   11774:	46bd      	mov	sp, r7
   11776:	f85d 7b04 	ldr.w	r7, [sp], #4
   1177a:	4770      	bx	lr

0001177c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1177c:	b580      	push	{r7, lr}
   1177e:	b082      	sub	sp, #8
   11780:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   11782:	2300      	movs	r3, #0
   11784:	71fb      	strb	r3, [r7, #7]
   11786:	e010      	b.n	117aa <to_autopilot_from_last_radio+0x2e>
      to_mega128.channels[i] = last_radio[i];
   11788:	79fa      	ldrb	r2, [r7, #7]
   1178a:	79f9      	ldrb	r1, [r7, #7]
   1178c:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11794:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   11798:	f64b 3374 	movw	r3, #47988	; 0xbb74
   1179c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   117a4:	79fb      	ldrb	r3, [r7, #7]
   117a6:	3301      	adds	r3, #1
   117a8:	71fb      	strb	r3, [r7, #7]
   117aa:	79fb      	ldrb	r3, [r7, #7]
   117ac:	2b08      	cmp	r3, #8
   117ae:	d9eb      	bls.n	11788 <to_autopilot_from_last_radio+0xc>
      to_mega128.channels[i] = last_radio[i];

  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   117b0:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   117b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b8:	781b      	ldrb	r3, [r3, #0]
   117ba:	2b00      	cmp	r3, #0
   117bc:	bf0c      	ite	eq
   117be:	2300      	moveq	r3, #0
   117c0:	2301      	movne	r3, #1
   117c2:	b2db      	uxtb	r3, r3
   117c4:	461a      	mov	r2, r3
   117c6:	f64b 3374 	movw	r3, #47988	; 0xbb74
   117ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ce:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   117d0:	f64b 3374 	movw	r3, #47988	; 0xbb74
   117d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d8:	7cdb      	ldrb	r3, [r3, #19]
   117da:	b2da      	uxtb	r2, r3
   117dc:	f64b 431e 	movw	r3, #48158	; 0xbc1e
   117e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e4:	781b      	ldrb	r3, [r3, #0]
   117e6:	2b00      	cmp	r3, #0
   117e8:	d001      	beq.n	117ee <to_autopilot_from_last_radio+0x72>
   117ea:	2302      	movs	r3, #2
   117ec:	e000      	b.n	117f0 <to_autopilot_from_last_radio+0x74>
   117ee:	2300      	movs	r3, #0
   117f0:	4313      	orrs	r3, r2
   117f2:	b2db      	uxtb	r3, r3
   117f4:	b2da      	uxtb	r2, r3
   117f6:	f64b 3374 	movw	r3, #47988	; 0xbb74
   117fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fe:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   11800:	f64b 3352 	movw	r3, #47954	; 0xbb52
   11804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11808:	781b      	ldrb	r3, [r3, #0]
   1180a:	2b00      	cmp	r3, #0
   1180c:	d012      	beq.n	11834 <to_autopilot_from_last_radio+0xb8>
      to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   1180e:	f64b 3374 	movw	r3, #47988	; 0xbb74
   11812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11816:	7cdb      	ldrb	r3, [r3, #19]
   11818:	f043 0304 	orr.w	r3, r3, #4
   1181c:	b2da      	uxtb	r2, r3
   1181e:	f64b 3374 	movw	r3, #47988	; 0xbb74
   11822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11826:	74da      	strb	r2, [r3, #19]
      last_radio_contains_avg_channels = FALSE;
   11828:	f64b 3352 	movw	r3, #47954	; 0xbb52
   1182c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11830:	2200      	movs	r2, #0
   11832:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   11834:	f64b 4320 	movw	r3, #48160	; 0xbc20
   11838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1183c:	781a      	ldrb	r2, [r3, #0]
   1183e:	f64b 3374 	movw	r3, #47988	; 0xbb74
   11842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11846:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   11848:	f64b 3390 	movw	r3, #48016	; 0xbb90
   1184c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11850:	881b      	ldrh	r3, [r3, #0]
   11852:	4618      	mov	r0, r3
   11854:	f001 f8b0 	bl	129b8 <__aeabi_i2d>
   11858:	4602      	mov	r2, r0
   1185a:	460b      	mov	r3, r1
   1185c:	4610      	mov	r0, r2
   1185e:	4619      	mov	r1, r3
   11860:	a31b      	add	r3, pc, #108	; (adr r3, 118d0 <to_autopilot_from_last_radio+0x154>)
   11862:	e9d3 2300 	ldrd	r2, r3, [r3]
   11866:	f001 f90d 	bl	12a84 <__aeabi_dmul>
   1186a:	4602      	mov	r2, r0
   1186c:	460b      	mov	r3, r1
   1186e:	4610      	mov	r0, r2
   11870:	4619      	mov	r1, r3
   11872:	f04f 0200 	mov.w	r2, #0
   11876:	f04f 0300 	mov.w	r3, #0
   1187a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1187e:	f001 fa2b 	bl	12cd8 <__aeabi_ddiv>
   11882:	4602      	mov	r2, r0
   11884:	460b      	mov	r3, r1
   11886:	4610      	mov	r0, r2
   11888:	4619      	mov	r1, r3
   1188a:	a313      	add	r3, pc, #76	; (adr r3, 118d8 <to_autopilot_from_last_radio+0x15c>)
   1188c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11890:	f000 ff46 	bl	12720 <__adddf3>
   11894:	4602      	mov	r2, r0
   11896:	460b      	mov	r3, r1
   11898:	4610      	mov	r0, r2
   1189a:	4619      	mov	r1, r3
   1189c:	f04f 0200 	mov.w	r2, #0
   118a0:	f04f 0300 	mov.w	r3, #0
   118a4:	f2c4 0324 	movt	r3, #16420	; 0x4024
   118a8:	f001 f8ec 	bl	12a84 <__aeabi_dmul>
   118ac:	4602      	mov	r2, r0
   118ae:	460b      	mov	r3, r1
   118b0:	4610      	mov	r0, r2
   118b2:	4619      	mov	r1, r3
   118b4:	f001 fba8 	bl	13008 <__aeabi_d2uiz>
   118b8:	4603      	mov	r3, r0
   118ba:	b2da      	uxtb	r2, r3
   118bc:	f64b 3374 	movw	r3, #47988	; 0xbb74
   118c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   118c6:	3708      	adds	r7, #8
   118c8:	46bd      	mov	sp, r7
   118ca:	bd80      	pop	{r7, pc}
   118cc:	f3af 8000 	nop.w
   118d0:	1eb851ec 	.word	0x1eb851ec
   118d4:	3f91eb85 	.word	0x3f91eb85
   118d8:	020c49ba 	.word	0x020c49ba
   118dc:	3fb6872b 	.word	0x3fb6872b

000118e0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   118e0:	b580      	push	{r7, lr}
   118e2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   118e4:	f64b 338b 	movw	r3, #48011	; 0xbb8b
   118e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ec:	2200      	movs	r2, #0
   118ee:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   118f0:	f7ff ff44 	bl	1177c <to_autopilot_from_last_radio>
      spi_reset();
   118f4:	f7ff fe80 	bl	115f8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   118f8:	bd80      	pop	{r7, pc}
   118fa:	bf00      	nop

000118fc <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   118fc:	b580      	push	{r7, lr}
   118fe:	af00      	add	r7, sp, #0
  uart_init_tx();
   11900:	f000 fb16 	bl	11f30 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   11904:	f643 105c 	movw	r0, #14684	; 0x395c
   11908:	f2c0 0001 	movt	r0, #1
   1190c:	f000 fbee 	bl	120ec <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   11910:	f7ff fab2 	bl	10e78 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   11914:	2003      	movs	r0, #3
   11916:	f64b 3190 	movw	r1, #48016	; 0xbb90
   1191a:	f2c2 0104 	movt	r1, #8196	; 0x2004
   1191e:	f7ff fa97 	bl	10e50 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   11922:	2006      	movs	r0, #6
   11924:	f64b 31d4 	movw	r1, #48084	; 0xbbd4
   11928:	f2c2 0104 	movt	r1, #8196	; 0x2004
   1192c:	f7ff fa90 	bl	10e50 <fbw_adc_buf_channel>
#endif
  timer_init();
   11930:	f7ff fece 	bl	116d0 <timer_init>
  servo_init();
   11934:	f000 f8a8 	bl	11a88 <servo_init>
  ppm_init();
   11938:	f7ff fee2 	bl	11700 <ppm_init>
  fbw_spi_init();
   1193c:	f7ff fe92 	bl	11664 <fbw_spi_init>
  //sei(); //FN
}
   11940:	bd80      	pop	{r7, pc}
   11942:	bf00      	nop

00011944 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   11944:	b580      	push	{r7, lr}
   11946:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   11948:	f64b 3353 	movw	r3, #47955	; 0xbb53
   1194c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11950:	2200      	movs	r2, #0
   11952:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   11954:	f64b 431f 	movw	r3, #48159	; 0xbc1f
   11958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1195c:	781b      	ldrb	r3, [r3, #0]
   1195e:	3301      	adds	r3, #1
   11960:	b2da      	uxtb	r2, r3
   11962:	f64b 431f 	movw	r3, #48159	; 0xbc1f
   11966:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1196a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1196c:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11974:	2201      	movs	r2, #1
   11976:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   11978:	f64b 431e 	movw	r3, #48158	; 0xbc1e
   1197c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11980:	2200      	movs	r2, #0
   11982:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   11984:	f64b 431a 	movw	r3, #48154	; 0xbc1a
   11988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198c:	2200      	movs	r2, #0
   1198e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   11990:	f7ff fb3a 	bl	11008 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   11994:	f64b 332c 	movw	r3, #47916	; 0xbb2c
   11998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199c:	891b      	ldrh	r3, [r3, #8]
   1199e:	b21b      	sxth	r3, r3
   119a0:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   119a4:	bfb4      	ite	lt
   119a6:	2300      	movlt	r3, #0
   119a8:	2301      	movge	r3, #1
   119aa:	b2db      	uxtb	r3, r3
   119ac:	461a      	mov	r2, r3
   119ae:	f64b 4318 	movw	r3, #48152	; 0xbc18
   119b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b6:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   119b8:	f64b 4318 	movw	r3, #48152	; 0xbc18
   119bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c0:	781b      	ldrb	r3, [r3, #0]
   119c2:	2b00      	cmp	r3, #0
   119c4:	d105      	bne.n	119d2 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   119c6:	f64b 302c 	movw	r0, #47916	; 0xbb2c
   119ca:	f2c2 0004 	movt	r0, #8196	; 0x2004
   119ce:	f000 f939 	bl	11c44 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   119d2:	f64b 4318 	movw	r3, #48152	; 0xbc18
   119d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119da:	2201      	movs	r2, #1
   119dc:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   119de:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   119e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e6:	2200      	movs	r2, #0
   119e8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   119ea:	f64b 431e 	movw	r3, #48158	; 0xbc1e
   119ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f2:	2201      	movs	r2, #1
   119f4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   119f6:	bd80      	pop	{r7, pc}

000119f8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   119f8:	b580      	push	{r7, lr}
   119fa:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   119fc:	f64b 4318 	movw	r3, #48152	; 0xbc18
   11a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a04:	781b      	ldrb	r3, [r3, #0]
   11a06:	2b00      	cmp	r3, #0
   11a08:	d106      	bne.n	11a18 <check_failsafe_task+0x20>
   11a0a:	f64b 431c 	movw	r3, #48156	; 0xbc1c
   11a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a12:	781b      	ldrb	r3, [r3, #0]
   11a14:	2b00      	cmp	r3, #0
   11a16:	d00d      	beq.n	11a34 <check_failsafe_task+0x3c>
   11a18:	f64b 4318 	movw	r3, #48152	; 0xbc18
   11a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a20:	781b      	ldrb	r3, [r3, #0]
   11a22:	2b01      	cmp	r3, #1
   11a24:	d10c      	bne.n	11a40 <check_failsafe_task+0x48>
   11a26:	f64b 431d 	movw	r3, #48157	; 0xbc1d
   11a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a2e:	781b      	ldrb	r3, [r3, #0]
   11a30:	2b00      	cmp	r3, #0
   11a32:	d105      	bne.n	11a40 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   11a34:	f643 1048 	movw	r0, #14664	; 0x3948
   11a38:	f2c0 0001 	movt	r0, #1
   11a3c:	f000 f902 	bl	11c44 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   11a40:	bd80      	pop	{r7, pc}
   11a42:	bf00      	nop

00011a44 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   11a44:	b580      	push	{r7, lr}
   11a46:	af00      	add	r7, sp, #0
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         
        // if (mega128_receive_valid)
         { 
             time_since_last_mega128 = 0;
   11a48:	f64b 4319 	movw	r3, #48153	; 0xbc19
   11a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a50:	2200      	movs	r2, #0
   11a52:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   11a54:	f64b 431d 	movw	r3, #48157	; 0xbc1d
   11a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5c:	2201      	movs	r2, #1
   11a5e:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   11a60:	f64b 4318 	movw	r3, #48152	; 0xbc18
   11a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	2b01      	cmp	r3, #1
   11a6c:	d105      	bne.n	11a7a <check_mega128_values_task+0x36>
                 servo_set(from_mega128.channels);
   11a6e:	f64b 305c 	movw	r0, #47964	; 0xbb5c
   11a72:	f2c2 0004 	movt	r0, #8196	; 0x2004
   11a76:	f000 f8e5 	bl	11c44 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   11a7a:	f64b 431d 	movw	r3, #48157	; 0xbc1d
   11a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a82:	2200      	movs	r2, #0
   11a84:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   11a86:	bd80      	pop	{r7, pc}

00011a88 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   11a88:	b480      	push	{r7}
   11a8a:	b083      	sub	sp, #12
   11a8c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   11a8e:	f248 0311 	movw	r3, #32785	; 0x8011
   11a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a96:	f248 0211 	movw	r2, #32785	; 0x8011
   11a9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11a9e:	7812      	ldrb	r2, [r2, #0]
   11aa0:	b2d2      	uxtb	r2, r2
   11aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11aa6:	b2d2      	uxtb	r2, r2
   11aa8:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   11aaa:	f248 0317 	movw	r3, #32791	; 0x8017
   11aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ab2:	f248 0217 	movw	r2, #32791	; 0x8017
   11ab6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11aba:	7812      	ldrb	r2, [r2, #0]
   11abc:	b2d2      	uxtb	r2, r2
   11abe:	f042 0202 	orr.w	r2, r2, #2
   11ac2:	b2d2      	uxtb	r2, r2
   11ac4:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11ac6:	f248 0312 	movw	r3, #32786	; 0x8012
   11aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ace:	f248 0212 	movw	r2, #32786	; 0x8012
   11ad2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11ad6:	7812      	ldrb	r2, [r2, #0]
   11ad8:	b2d2      	uxtb	r2, r2
   11ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11ade:	b2d2      	uxtb	r2, r2
   11ae0:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   11ae2:	f248 0318 	movw	r3, #32792	; 0x8018
   11ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aea:	f248 0218 	movw	r2, #32792	; 0x8018
   11aee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11af2:	7812      	ldrb	r2, [r2, #0]
   11af4:	b2d2      	uxtb	r2, r2
   11af6:	f022 0202 	bic.w	r2, r2, #2
   11afa:	b2d2      	uxtb	r2, r2
   11afc:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11afe:	2300      	movs	r3, #0
   11b00:	71fb      	strb	r3, [r7, #7]
   11b02:	e00b      	b.n	11b1c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   11b04:	79fa      	ldrb	r2, [r7, #7]
   11b06:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   11b12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   11b16:	79fb      	ldrb	r3, [r7, #7]
   11b18:	3301      	adds	r3, #1
   11b1a:	71fb      	strb	r3, [r7, #7]
   11b1c:	79fb      	ldrb	r3, [r7, #7]
   11b1e:	2b09      	cmp	r3, #9
   11b20:	d9f0      	bls.n	11b04 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   11b22:	f248 032a 	movw	r3, #32810	; 0x802a
   11b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11b2e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   11b30:	f248 032f 	movw	r3, #32815	; 0x802f
   11b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b38:	f248 022f 	movw	r2, #32815	; 0x802f
   11b3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11b40:	7812      	ldrb	r2, [r2, #0]
   11b42:	b2d2      	uxtb	r2, r2
   11b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11b48:	b2d2      	uxtb	r2, r2
   11b4a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   11b4c:	f248 0336 	movw	r3, #32822	; 0x8036
   11b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b54:	2210      	movs	r2, #16
   11b56:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   11b58:	f248 0312 	movw	r3, #32786	; 0x8012
   11b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b60:	f248 0212 	movw	r2, #32786	; 0x8012
   11b64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11b68:	7812      	ldrb	r2, [r2, #0]
   11b6a:	b2d2      	uxtb	r2, r2
   11b6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11b70:	b2d2      	uxtb	r2, r2
   11b72:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   11b74:	f248 0337 	movw	r3, #32823	; 0x8037
   11b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7c:	f248 0237 	movw	r2, #32823	; 0x8037
   11b80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11b84:	7812      	ldrb	r2, [r2, #0]
   11b86:	b2d2      	uxtb	r2, r2
   11b88:	f042 0210 	orr.w	r2, r2, #16
   11b8c:	b2d2      	uxtb	r2, r2
   11b8e:	701a      	strb	r2, [r3, #0]
}
   11b90:	370c      	adds	r7, #12
   11b92:	46bd      	mov	sp, r7
   11b94:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b98:	4770      	bx	lr
   11b9a:	bf00      	nop

00011b9c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   11b9c:	b480      	push	{r7}
   11b9e:	b083      	sub	sp, #12
   11ba0:	af00      	add	r7, sp, #0
   11ba2:	4602      	mov	r2, r0
   11ba4:	460b      	mov	r3, r1
   11ba6:	71fa      	strb	r2, [r7, #7]
   11ba8:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   11baa:	79f9      	ldrb	r1, [r7, #7]
   11bac:	88bb      	ldrh	r3, [r7, #4]
   11bae:	011b      	lsls	r3, r3, #4
   11bb0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11bb4:	d308      	bcc.n	11bc8 <servo_set_one+0x2c>
   11bb6:	88bb      	ldrh	r3, [r7, #4]
   11bb8:	011b      	lsls	r3, r3, #4
   11bba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11bbe:	bf28      	it	cs
   11bc0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11bc4:	b29a      	uxth	r2, r3
   11bc6:	e001      	b.n	11bcc <servo_set_one+0x30>
   11bc8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11bcc:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   11bd8:	370c      	adds	r7, #12
   11bda:	46bd      	mov	sp, r7
   11bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11be0:	4770      	bx	lr
   11be2:	bf00      	nop

00011be4 <servo_transmit>:

void 
servo_transmit(void) {
   11be4:	b580      	push	{r7, lr}
   11be6:	b082      	sub	sp, #8
   11be8:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   11bea:	2000      	movs	r0, #0
   11bec:	f000 f9e6 	bl	11fbc <uart_transmit>
   11bf0:	2000      	movs	r0, #0
   11bf2:	f000 f9e3 	bl	11fbc <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11bf6:	2300      	movs	r3, #0
   11bf8:	71fb      	strb	r3, [r7, #7]
   11bfa:	e01a      	b.n	11c32 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   11bfc:	79fa      	ldrb	r2, [r7, #7]
   11bfe:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11c0a:	0a1b      	lsrs	r3, r3, #8
   11c0c:	b29b      	uxth	r3, r3
   11c0e:	b2db      	uxtb	r3, r3
   11c10:	4618      	mov	r0, r3
   11c12:	f000 f9d3 	bl	11fbc <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   11c16:	79fa      	ldrb	r2, [r7, #7]
   11c18:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11c24:	b2db      	uxtb	r3, r3
   11c26:	4618      	mov	r0, r3
   11c28:	f000 f9c8 	bl	11fbc <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   11c2c:	79fb      	ldrb	r3, [r7, #7]
   11c2e:	3301      	adds	r3, #1
   11c30:	71fb      	strb	r3, [r7, #7]
   11c32:	79fb      	ldrb	r3, [r7, #7]
   11c34:	2b09      	cmp	r3, #9
   11c36:	d9e1      	bls.n	11bfc <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   11c38:	200a      	movs	r0, #10
   11c3a:	f000 f9bf 	bl	11fbc <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   11c3e:	3708      	adds	r7, #8
   11c40:	46bd      	mov	sp, r7
   11c42:	bd80      	pop	{r7, pc}

00011c44 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   11c44:	b5b0      	push	{r4, r5, r7, lr}
   11c46:	b084      	sub	sp, #16
   11c48:	af00      	add	r7, sp, #0
   11c4a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   11c4c:	687b      	ldr	r3, [r7, #4]
   11c4e:	330a      	adds	r3, #10
   11c50:	881b      	ldrh	r3, [r3, #0]
   11c52:	b21b      	sxth	r3, r3
   11c54:	005b      	lsls	r3, r3, #1
   11c56:	4618      	mov	r0, r3
   11c58:	f000 feae 	bl	129b8 <__aeabi_i2d>
   11c5c:	4602      	mov	r2, r0
   11c5e:	460b      	mov	r3, r1
   11c60:	4610      	mov	r0, r2
   11c62:	4619      	mov	r1, r3
   11c64:	a3a6      	add	r3, pc, #664	; (adr r3, 11f00 <servo_set+0x2bc>)
   11c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c6a:	f000 ff0b 	bl	12a84 <__aeabi_dmul>
   11c6e:	4602      	mov	r2, r0
   11c70:	460b      	mov	r3, r1
   11c72:	4610      	mov	r0, r2
   11c74:	4619      	mov	r1, r3
   11c76:	f001 f99f 	bl	12fb8 <__aeabi_d2iz>
   11c7a:	4603      	mov	r3, r0
   11c7c:	b29b      	uxth	r3, r3
   11c7e:	b29b      	uxth	r3, r3
   11c80:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11c84:	81fb      	strh	r3, [r7, #14]
   11c86:	89fb      	ldrh	r3, [r7, #14]
   11c88:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11c8c:	d307      	bcc.n	11c9e <servo_set+0x5a>
   11c8e:	89fb      	ldrh	r3, [r7, #14]
   11c90:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11c94:	bf28      	it	cs
   11c96:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11c9a:	b29a      	uxth	r2, r3
   11c9c:	e001      	b.n	11ca2 <servo_set+0x5e>
   11c9e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11ca2:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11caa:	80da      	strh	r2, [r3, #6]
   11cac:	687b      	ldr	r3, [r7, #4]
   11cae:	881b      	ldrh	r3, [r3, #0]
   11cb0:	b21b      	sxth	r3, r3
   11cb2:	005b      	lsls	r3, r3, #1
   11cb4:	4618      	mov	r0, r3
   11cb6:	f000 fe7f 	bl	129b8 <__aeabi_i2d>
   11cba:	4602      	mov	r2, r0
   11cbc:	460b      	mov	r3, r1
   11cbe:	4610      	mov	r0, r2
   11cc0:	4619      	mov	r1, r3
   11cc2:	a38f      	add	r3, pc, #572	; (adr r3, 11f00 <servo_set+0x2bc>)
   11cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cc8:	f000 fedc 	bl	12a84 <__aeabi_dmul>
   11ccc:	4602      	mov	r2, r0
   11cce:	460b      	mov	r3, r1
   11cd0:	4610      	mov	r0, r2
   11cd2:	4619      	mov	r1, r3
   11cd4:	f001 f970 	bl	12fb8 <__aeabi_d2iz>
   11cd8:	4603      	mov	r3, r0
   11cda:	b29b      	uxth	r3, r3
   11cdc:	b29b      	uxth	r3, r3
   11cde:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   11ce2:	81fb      	strh	r3, [r7, #14]
   11ce4:	89fb      	ldrh	r3, [r7, #14]
   11ce6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11cea:	d307      	bcc.n	11cfc <servo_set+0xb8>
   11cec:	89fb      	ldrh	r3, [r7, #14]
   11cee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11cf2:	bf28      	it	cs
   11cf4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11cf8:	b29a      	uxth	r2, r3
   11cfa:	e001      	b.n	11d00 <servo_set+0xbc>
   11cfc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d00:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d08:	825a      	strh	r2, [r3, #18]
   11d0a:	687b      	ldr	r3, [r7, #4]
   11d0c:	3304      	adds	r3, #4
   11d0e:	881b      	ldrh	r3, [r3, #0]
   11d10:	b21b      	sxth	r3, r3
   11d12:	4618      	mov	r0, r3
   11d14:	f000 fe50 	bl	129b8 <__aeabi_i2d>
   11d18:	4602      	mov	r2, r0
   11d1a:	460b      	mov	r3, r1
   11d1c:	4610      	mov	r0, r2
   11d1e:	4619      	mov	r1, r3
   11d20:	a379      	add	r3, pc, #484	; (adr r3, 11f08 <servo_set+0x2c4>)
   11d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d26:	f000 fead 	bl	12a84 <__aeabi_dmul>
   11d2a:	4602      	mov	r2, r0
   11d2c:	460b      	mov	r3, r1
   11d2e:	4610      	mov	r0, r2
   11d30:	4619      	mov	r1, r3
   11d32:	f001 f941 	bl	12fb8 <__aeabi_d2iz>
   11d36:	4603      	mov	r3, r0
   11d38:	b29b      	uxth	r3, r3
   11d3a:	b29b      	uxth	r3, r3
   11d3c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   11d40:	3320      	adds	r3, #32
   11d42:	81fb      	strh	r3, [r7, #14]
   11d44:	89fb      	ldrh	r3, [r7, #14]
   11d46:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11d4a:	d307      	bcc.n	11d5c <servo_set+0x118>
   11d4c:	89fb      	ldrh	r3, [r7, #14]
   11d4e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11d52:	bf28      	it	cs
   11d54:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11d58:	b29a      	uxth	r2, r3
   11d5a:	e001      	b.n	11d60 <servo_set+0x11c>
   11d5c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11d60:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d68:	819a      	strh	r2, [r3, #12]
   11d6a:	687b      	ldr	r3, [r7, #4]
   11d6c:	885b      	ldrh	r3, [r3, #2]
   11d6e:	81bb      	strh	r3, [r7, #12]
   11d70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d74:	2b00      	cmp	r3, #0
   11d76:	dd06      	ble.n	11d86 <servo_set+0x142>
   11d78:	f04f 0400 	mov.w	r4, #0
   11d7c:	f04f 0500 	mov.w	r5, #0
   11d80:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11d84:	e002      	b.n	11d8c <servo_set+0x148>
   11d86:	a562      	add	r5, pc, #392	; (adr r5, 11f10 <servo_set+0x2cc>)
   11d88:	e9d5 4500 	ldrd	r4, r5, [r5]
   11d8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11d90:	4618      	mov	r0, r3
   11d92:	f000 fe11 	bl	129b8 <__aeabi_i2d>
   11d96:	4602      	mov	r2, r0
   11d98:	460b      	mov	r3, r1
   11d9a:	4620      	mov	r0, r4
   11d9c:	4629      	mov	r1, r5
   11d9e:	f000 fe71 	bl	12a84 <__aeabi_dmul>
   11da2:	4602      	mov	r2, r0
   11da4:	460b      	mov	r3, r1
   11da6:	4610      	mov	r0, r2
   11da8:	4619      	mov	r1, r3
   11daa:	a35b      	add	r3, pc, #364	; (adr r3, 11f18 <servo_set+0x2d4>)
   11dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11db0:	f000 fe68 	bl	12a84 <__aeabi_dmul>
   11db4:	4602      	mov	r2, r0
   11db6:	460b      	mov	r3, r1
   11db8:	4610      	mov	r0, r2
   11dba:	4619      	mov	r1, r3
   11dbc:	f001 f8fc 	bl	12fb8 <__aeabi_d2iz>
   11dc0:	4603      	mov	r3, r0
   11dc2:	b29b      	uxth	r3, r3
   11dc4:	b29b      	uxth	r3, r3
   11dc6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   11dca:	81fb      	strh	r3, [r7, #14]
   11dcc:	89fb      	ldrh	r3, [r7, #14]
   11dce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11dd2:	d307      	bcc.n	11de4 <servo_set+0x1a0>
   11dd4:	89fb      	ldrh	r3, [r7, #14]
   11dd6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11dda:	bf28      	it	cs
   11ddc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11de0:	b29a      	uxth	r2, r3
   11de2:	e001      	b.n	11de8 <servo_set+0x1a4>
   11de4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11de8:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11df0:	801a      	strh	r2, [r3, #0]
   11df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11df6:	2b00      	cmp	r3, #0
   11df8:	dd03      	ble.n	11e02 <servo_set+0x1be>
   11dfa:	a545      	add	r5, pc, #276	; (adr r5, 11f10 <servo_set+0x2cc>)
   11dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
   11e00:	e005      	b.n	11e0e <servo_set+0x1ca>
   11e02:	f04f 0400 	mov.w	r4, #0
   11e06:	f04f 0500 	mov.w	r5, #0
   11e0a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   11e0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   11e12:	4618      	mov	r0, r3
   11e14:	f000 fdd0 	bl	129b8 <__aeabi_i2d>
   11e18:	4602      	mov	r2, r0
   11e1a:	460b      	mov	r3, r1
   11e1c:	4620      	mov	r0, r4
   11e1e:	4629      	mov	r1, r5
   11e20:	f000 fe30 	bl	12a84 <__aeabi_dmul>
   11e24:	4602      	mov	r2, r0
   11e26:	460b      	mov	r3, r1
   11e28:	4610      	mov	r0, r2
   11e2a:	4619      	mov	r1, r3
   11e2c:	a33c      	add	r3, pc, #240	; (adr r3, 11f20 <servo_set+0x2dc>)
   11e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e32:	f000 fe27 	bl	12a84 <__aeabi_dmul>
   11e36:	4602      	mov	r2, r0
   11e38:	460b      	mov	r3, r1
   11e3a:	4610      	mov	r0, r2
   11e3c:	4619      	mov	r1, r3
   11e3e:	f001 f8bb 	bl	12fb8 <__aeabi_d2iz>
   11e42:	4603      	mov	r3, r0
   11e44:	b29b      	uxth	r3, r3
   11e46:	b29b      	uxth	r3, r3
   11e48:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   11e4c:	3320      	adds	r3, #32
   11e4e:	81fb      	strh	r3, [r7, #14]
   11e50:	89fb      	ldrh	r3, [r7, #14]
   11e52:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11e56:	d307      	bcc.n	11e68 <servo_set+0x224>
   11e58:	89fb      	ldrh	r3, [r7, #14]
   11e5a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11e5e:	bf28      	it	cs
   11e60:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11e64:	b29a      	uxth	r2, r3
   11e66:	e001      	b.n	11e6c <servo_set+0x228>
   11e68:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11e6c:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e74:	809a      	strh	r2, [r3, #4]
   11e76:	687b      	ldr	r3, [r7, #4]
   11e78:	3306      	adds	r3, #6
   11e7a:	881b      	ldrh	r3, [r3, #0]
   11e7c:	b21b      	sxth	r3, r3
   11e7e:	4618      	mov	r0, r3
   11e80:	f000 fd9a 	bl	129b8 <__aeabi_i2d>
   11e84:	4604      	mov	r4, r0
   11e86:	460d      	mov	r5, r1
   11e88:	687b      	ldr	r3, [r7, #4]
   11e8a:	3302      	adds	r3, #2
   11e8c:	881b      	ldrh	r3, [r3, #0]
   11e8e:	b21b      	sxth	r3, r3
   11e90:	4618      	mov	r0, r3
   11e92:	f000 fd91 	bl	129b8 <__aeabi_i2d>
   11e96:	4602      	mov	r2, r0
   11e98:	460b      	mov	r3, r1
   11e9a:	4620      	mov	r0, r4
   11e9c:	4629      	mov	r1, r5
   11e9e:	f000 fc3f 	bl	12720 <__adddf3>
   11ea2:	4602      	mov	r2, r0
   11ea4:	460b      	mov	r3, r1
   11ea6:	4610      	mov	r0, r2
   11ea8:	4619      	mov	r1, r3
   11eaa:	a31f      	add	r3, pc, #124	; (adr r3, 11f28 <servo_set+0x2e4>)
   11eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11eb0:	f000 fde8 	bl	12a84 <__aeabi_dmul>
   11eb4:	4602      	mov	r2, r0
   11eb6:	460b      	mov	r3, r1
   11eb8:	4610      	mov	r0, r2
   11eba:	4619      	mov	r1, r3
   11ebc:	f001 f87c 	bl	12fb8 <__aeabi_d2iz>
   11ec0:	4603      	mov	r3, r0
   11ec2:	b29b      	uxth	r3, r3
   11ec4:	b29b      	uxth	r3, r3
   11ec6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   11eca:	3320      	adds	r3, #32
   11ecc:	81fb      	strh	r3, [r7, #14]
   11ece:	89fb      	ldrh	r3, [r7, #14]
   11ed0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   11ed4:	d307      	bcc.n	11ee6 <servo_set+0x2a2>
   11ed6:	89fb      	ldrh	r3, [r7, #14]
   11ed8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   11edc:	bf28      	it	cs
   11ede:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   11ee2:	b29a      	uxth	r2, r3
   11ee4:	e001      	b.n	11eea <servo_set+0x2a6>
   11ee6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   11eea:	f64b 4324 	movw	r3, #48164	; 0xbc24
   11eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ef2:	81da      	strh	r2, [r3, #14]
}
   11ef4:	3710      	adds	r7, #16
   11ef6:	46bd      	mov	sp, r7
   11ef8:	bdb0      	pop	{r4, r5, r7, pc}
   11efa:	bf00      	nop
   11efc:	f3af 8000 	nop.w
   11f00:	aaaa9ef0 	.word	0xaaaa9ef0
   11f04:	3feaaaaa 	.word	0x3feaaaaa
   11f08:	fc96473e 	.word	0xfc96473e
   11f0c:	3fdfc962 	.word	0x3fdfc962
   11f10:	51eb851f 	.word	0x51eb851f
   11f14:	3fe51eb8 	.word	0x3fe51eb8
   11f18:	9999999a 	.word	0x9999999a
   11f1c:	bfe19999 	.word	0xbfe19999
   11f20:	aaaa9ef0 	.word	0xaaaa9ef0
   11f24:	bfe0aaaa 	.word	0xbfe0aaaa
   11f28:	eeeed77a 	.word	0xeeeed77a
   11f2c:	bfdeeeee 	.word	0xbfdeeeee

00011f30 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   11f30:	b480      	push	{r7}
   11f32:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   11f34:	f248 0320 	movw	r3, #32800	; 0x8020
   11f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3c:	2200      	movs	r2, #0
   11f3e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   11f40:	f248 0309 	movw	r3, #32777	; 0x8009
   11f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f48:	2219      	movs	r2, #25
   11f4a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   11f4c:	f248 030b 	movw	r3, #32779	; 0x800b
   11f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f54:	2200      	movs	r2, #0
   11f56:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   11f58:	f248 030a 	movw	r3, #32778	; 0x800a
   11f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f60:	2208      	movs	r2, #8
   11f62:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   11f64:	f248 0320 	movw	r3, #32800	; 0x8020
   11f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f6c:	2286      	movs	r2, #134	; 0x86
   11f6e:	701a      	strb	r2, [r3, #0]
}
   11f70:	46bd      	mov	sp, r7
   11f72:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f76:	4770      	bx	lr

00011f78 <uart_init_rx>:

void uart_init_rx() {
   11f78:	b480      	push	{r7}
   11f7a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   11f7c:	f248 030a 	movw	r3, #32778	; 0x800a
   11f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f84:	f248 020a 	movw	r2, #32778	; 0x800a
   11f88:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11f8c:	7812      	ldrb	r2, [r2, #0]
   11f8e:	b2d2      	uxtb	r2, r2
   11f90:	f042 0210 	orr.w	r2, r2, #16
   11f94:	b2d2      	uxtb	r2, r2
   11f96:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   11f98:	f248 030a 	movw	r3, #32778	; 0x800a
   11f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa0:	f248 020a 	movw	r2, #32778	; 0x800a
   11fa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11fa8:	7812      	ldrb	r2, [r2, #0]
   11faa:	b2d2      	uxtb	r2, r2
   11fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11fb0:	b2d2      	uxtb	r2, r2
   11fb2:	701a      	strb	r2, [r3, #0]
}
   11fb4:	46bd      	mov	sp, r7
   11fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   11fba:	4770      	bx	lr

00011fbc <uart_transmit>:

void uart_transmit( unsigned char data ) {
   11fbc:	b480      	push	{r7}
   11fbe:	b083      	sub	sp, #12
   11fc0:	af00      	add	r7, sp, #0
   11fc2:	4603      	mov	r3, r0
   11fc4:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   11fc6:	f248 030a 	movw	r3, #32778	; 0x800a
   11fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fce:	781b      	ldrb	r3, [r3, #0]
   11fd0:	b2db      	uxtb	r3, r3
   11fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11fd6:	2b00      	cmp	r3, #0
   11fd8:	d028      	beq.n	1202c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   11fda:	f64b 4339 	movw	r3, #48185	; 0xbc39
   11fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fe2:	781b      	ldrb	r3, [r3, #0]
   11fe4:	b2db      	uxtb	r3, r3
   11fe6:	461a      	mov	r2, r3
   11fe8:	f64b 4338 	movw	r3, #48184	; 0xbc38
   11fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ff0:	781b      	ldrb	r3, [r3, #0]
   11ff2:	3301      	adds	r3, #1
   11ff4:	429a      	cmp	r2, r3
   11ff6:	d100      	bne.n	11ffa <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   11ff8:	e02c      	b.n	12054 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   11ffa:	f64b 4338 	movw	r3, #48184	; 0xbc38
   11ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12002:	781b      	ldrb	r3, [r3, #0]
   12004:	461a      	mov	r2, r3
   12006:	f64b 433c 	movw	r3, #48188	; 0xbc3c
   1200a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1200e:	79f9      	ldrb	r1, [r7, #7]
   12010:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   12012:	f64b 4338 	movw	r3, #48184	; 0xbc38
   12016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1201a:	781b      	ldrb	r3, [r3, #0]
   1201c:	3301      	adds	r3, #1
   1201e:	b2da      	uxtb	r2, r3
   12020:	f64b 4338 	movw	r3, #48184	; 0xbc38
   12024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12028:	701a      	strb	r2, [r3, #0]
   1202a:	e013      	b.n	12054 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   1202c:	f248 030c 	movw	r3, #32780	; 0x800c
   12030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12034:	79fa      	ldrb	r2, [r7, #7]
   12036:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   12038:	f248 030a 	movw	r3, #32778	; 0x800a
   1203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12040:	f248 020a 	movw	r2, #32778	; 0x800a
   12044:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12048:	7812      	ldrb	r2, [r2, #0]
   1204a:	b2d2      	uxtb	r2, r2
   1204c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12050:	b2d2      	uxtb	r2, r2
   12052:	701a      	strb	r2, [r3, #0]
  }
}
   12054:	370c      	adds	r7, #12
   12056:	46bd      	mov	sp, r7
   12058:	f85d 7b04 	ldr.w	r7, [sp], #4
   1205c:	4770      	bx	lr
   1205e:	bf00      	nop

00012060 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   12060:	b590      	push	{r4, r7, lr}
   12062:	b089      	sub	sp, #36	; 0x24
   12064:	af00      	add	r7, sp, #0
   12066:	4603      	mov	r3, r0
   12068:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1206a:	f643 139c 	movw	r3, #14748	; 0x399c
   1206e:	f2c0 0301 	movt	r3, #1
   12072:	f107 040c 	add.w	r4, r7, #12
   12076:	6818      	ldr	r0, [r3, #0]
   12078:	6859      	ldr	r1, [r3, #4]
   1207a:	689a      	ldr	r2, [r3, #8]
   1207c:	68db      	ldr	r3, [r3, #12]
   1207e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   12080:	79fb      	ldrb	r3, [r7, #7]
   12082:	091b      	lsrs	r3, r3, #4
   12084:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   12086:	79fb      	ldrb	r3, [r7, #7]
   12088:	f003 030f 	and.w	r3, r3, #15
   1208c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   1208e:	230f      	movs	r3, #15
   12090:	77fb      	strb	r3, [r7, #31]
        low = 15;
   12092:	230f      	movs	r3, #15
   12094:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   12096:	7ffb      	ldrb	r3, [r7, #31]
   12098:	f107 0220 	add.w	r2, r7, #32
   1209c:	4413      	add	r3, r2
   1209e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   120a2:	4618      	mov	r0, r3
   120a4:	f7ff ff8a 	bl	11fbc <uart_transmit>
  uart_transmit(hex[low]);
   120a8:	7fbb      	ldrb	r3, [r7, #30]
   120aa:	f107 0220 	add.w	r2, r7, #32
   120ae:	4413      	add	r3, r2
   120b0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   120b4:	4618      	mov	r0, r3
   120b6:	f7ff ff81 	bl	11fbc <uart_transmit>
} 
   120ba:	3724      	adds	r7, #36	; 0x24
   120bc:	46bd      	mov	sp, r7
   120be:	bd90      	pop	{r4, r7, pc}

000120c0 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   120c0:	b580      	push	{r7, lr}
   120c2:	b084      	sub	sp, #16
   120c4:	af00      	add	r7, sp, #0
   120c6:	4603      	mov	r3, r0
   120c8:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   120ca:	88fb      	ldrh	r3, [r7, #6]
   120cc:	0a1b      	lsrs	r3, r3, #8
   120ce:	b29b      	uxth	r3, r3
   120d0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   120d2:	88fb      	ldrh	r3, [r7, #6]
   120d4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   120d6:	7bfb      	ldrb	r3, [r7, #15]
   120d8:	4618      	mov	r0, r3
   120da:	f7ff ffc1 	bl	12060 <uart_print_hex>
  uart_print_hex(low);
   120de:	7bbb      	ldrb	r3, [r7, #14]
   120e0:	4618      	mov	r0, r3
   120e2:	f7ff ffbd 	bl	12060 <uart_print_hex>
}
   120e6:	3710      	adds	r7, #16
   120e8:	46bd      	mov	sp, r7
   120ea:	bd80      	pop	{r7, pc}

000120ec <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   120ec:	b580      	push	{r7, lr}
   120ee:	b084      	sub	sp, #16
   120f0:	af00      	add	r7, sp, #0
   120f2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   120f4:	2300      	movs	r3, #0
   120f6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   120f8:	e009      	b.n	1210e <uart_print_string+0x22>
    uart_transmit(s[i]);
   120fa:	7bfb      	ldrb	r3, [r7, #15]
   120fc:	687a      	ldr	r2, [r7, #4]
   120fe:	4413      	add	r3, r2
   12100:	781b      	ldrb	r3, [r3, #0]
   12102:	4618      	mov	r0, r3
   12104:	f7ff ff5a 	bl	11fbc <uart_transmit>
    i++;
   12108:	7bfb      	ldrb	r3, [r7, #15]
   1210a:	3301      	adds	r3, #1
   1210c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1210e:	7bfb      	ldrb	r3, [r7, #15]
   12110:	687a      	ldr	r2, [r7, #4]
   12112:	4413      	add	r3, r2
   12114:	781b      	ldrb	r3, [r3, #0]
   12116:	2b00      	cmp	r3, #0
   12118:	d1ef      	bne.n	120fa <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1211a:	3710      	adds	r7, #16
   1211c:	46bd      	mov	sp, r7
   1211e:	bd80      	pop	{r7, pc}

00012120 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   12120:	b480      	push	{r7}
   12122:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   12124:	f64b 4338 	movw	r3, #48184	; 0xbc38
   12128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1212c:	781a      	ldrb	r2, [r3, #0]
   1212e:	f64b 4339 	movw	r3, #48185	; 0xbc39
   12132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12136:	781b      	ldrb	r3, [r3, #0]
   12138:	b2db      	uxtb	r3, r3
   1213a:	429a      	cmp	r2, r3
   1213c:	d10e      	bne.n	1215c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1213e:	f248 030a 	movw	r3, #32778	; 0x800a
   12142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12146:	f248 020a 	movw	r2, #32778	; 0x800a
   1214a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1214e:	7812      	ldrb	r2, [r2, #0]
   12150:	b2d2      	uxtb	r2, r2
   12152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   12156:	b2d2      	uxtb	r2, r2
   12158:	701a      	strb	r2, [r3, #0]
   1215a:	e01d      	b.n	12198 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1215c:	f248 030c 	movw	r3, #32780	; 0x800c
   12160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12164:	f64b 4239 	movw	r2, #48185	; 0xbc39
   12168:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1216c:	7812      	ldrb	r2, [r2, #0]
   1216e:	b2d2      	uxtb	r2, r2
   12170:	4611      	mov	r1, r2
   12172:	f64b 423c 	movw	r2, #48188	; 0xbc3c
   12176:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1217a:	5c52      	ldrb	r2, [r2, r1]
   1217c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1217e:	f64b 4339 	movw	r3, #48185	; 0xbc39
   12182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12186:	781b      	ldrb	r3, [r3, #0]
   12188:	b2db      	uxtb	r3, r3
   1218a:	3301      	adds	r3, #1
   1218c:	b2da      	uxtb	r2, r3
   1218e:	f64b 4339 	movw	r3, #48185	; 0xbc39
   12192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12196:	701a      	strb	r2, [r3, #0]
  }
}
   12198:	46bd      	mov	sp, r7
   1219a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1219e:	4770      	bx	lr

000121a0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   121a0:	b580      	push	{r7, lr}
   121a2:	b082      	sub	sp, #8
   121a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   121a6:	2010      	movs	r0, #16
   121a8:	2101      	movs	r1, #1
   121aa:	f7ee fe09 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   121ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   121b2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   121b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   121ba:	2201      	movs	r2, #1
   121bc:	f7ef f910 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   121c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   121c4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   121c6:	2310      	movs	r3, #16
   121c8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   121ca:	2303      	movs	r3, #3
   121cc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   121ce:	1d3b      	adds	r3, r7, #4
   121d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   121d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   121d8:	4619      	mov	r1, r3
   121da:	f7ee ffc5 	bl	1168 <GPIO_Init>
}
   121de:	3708      	adds	r7, #8
   121e0:	46bd      	mov	sp, r7
   121e2:	bd80      	pop	{r7, pc}

000121e4 <init_button>:

void init_button(void)
{
   121e4:	b580      	push	{r7, lr}
   121e6:	b082      	sub	sp, #8
   121e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   121ea:	2004      	movs	r0, #4
   121ec:	2101      	movs	r1, #1
   121ee:	f7ee fde7 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   121f2:	2301      	movs	r3, #1
   121f4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   121f6:	2304      	movs	r3, #4
   121f8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   121fa:	2303      	movs	r3, #3
   121fc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   121fe:	1d3b      	adds	r3, r7, #4
   12200:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12204:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12208:	4619      	mov	r1, r3
   1220a:	f7ee ffad 	bl	1168 <GPIO_Init>
}
   1220e:	3708      	adds	r7, #8
   12210:	46bd      	mov	sp, r7
   12212:	bd80      	pop	{r7, pc}

00012214 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   12214:	b580      	push	{r7, lr}
   12216:	b084      	sub	sp, #16
   12218:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1221a:	2001      	movs	r0, #1
   1221c:	2101      	movs	r1, #1
   1221e:	f7ee fdcf 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   12222:	2000      	movs	r0, #0
   12224:	2100      	movs	r1, #0
   12226:	f7ef f9d3 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1222a:	2301      	movs	r3, #1
   1222c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1222e:	2300      	movs	r3, #0
   12230:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   12232:	2308      	movs	r3, #8
   12234:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   12236:	2301      	movs	r3, #1
   12238:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1223a:	f107 0308 	add.w	r3, r7, #8
   1223e:	4618      	mov	r0, r3
   12240:	f7ef fecc 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   12244:	2306      	movs	r3, #6
   12246:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   12248:	230f      	movs	r3, #15
   1224a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1224c:	230f      	movs	r3, #15
   1224e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12250:	2301      	movs	r3, #1
   12252:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12254:	1d3b      	adds	r3, r7, #4
   12256:	4618      	mov	r0, r3
   12258:	f7ef fffa 	bl	2250 <NVIC_Init>
}
   1225c:	3710      	adds	r7, #16
   1225e:	46bd      	mov	sp, r7
   12260:	bd80      	pop	{r7, pc}
   12262:	bf00      	nop

00012264 <init_rs232>:

void init_rs232(void)
{
   12264:	b580      	push	{r7, lr}
   12266:	b086      	sub	sp, #24
   12268:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1226a:	2005      	movs	r0, #5
   1226c:	2101      	movs	r1, #1
   1226e:	f7ee fda7 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   12272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   12276:	2101      	movs	r1, #1
   12278:	f7ee fdca 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1227c:	2308      	movs	r3, #8
   1227e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   12280:	2304      	movs	r3, #4
   12282:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   12284:	1d3b      	adds	r3, r7, #4
   12286:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1228a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1228e:	4619      	mov	r1, r3
   12290:	f7ee ff6a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   12294:	2304      	movs	r3, #4
   12296:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   12298:	2303      	movs	r3, #3
   1229a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1229c:	2318      	movs	r3, #24
   1229e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   122a0:	1d3b      	adds	r3, r7, #4
   122a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   122a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   122aa:	4619      	mov	r1, r3
   122ac:	f7ee ff5c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   122b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   122b4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   122b6:	2300      	movs	r3, #0
   122b8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   122ba:	2300      	movs	r3, #0
   122bc:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   122be:	2300      	movs	r3, #0
   122c0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   122c2:	2300      	movs	r3, #0
   122c4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   122c6:	230c      	movs	r3, #12
   122c8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   122ca:	f107 0308 	add.w	r3, r7, #8
   122ce:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122d2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122d6:	4619      	mov	r1, r3
   122d8:	f7ef fa2e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   122dc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122e4:	2101      	movs	r1, #1
   122e6:	f7ef fb45 	bl	1974 <USART_Cmd>
}
   122ea:	3718      	adds	r7, #24
   122ec:	46bd      	mov	sp, r7
   122ee:	bd80      	pop	{r7, pc}

000122f0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   122f0:	b580      	push	{r7, lr}
   122f2:	b082      	sub	sp, #8
   122f4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   122f6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   122fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
   122fe:	f240 7127 	movw	r1, #1831	; 0x727
   12302:	2200      	movs	r2, #0
   12304:	f7ef fb56 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   12308:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1230c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12310:	f240 5125 	movw	r1, #1317	; 0x525
   12314:	2201      	movs	r2, #1
   12316:	f7ef fb4d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1231a:	2326      	movs	r3, #38	; 0x26
   1231c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1231e:	2300      	movs	r3, #0
   12320:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   12322:	2301      	movs	r3, #1
   12324:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   12326:	1d3b      	adds	r3, r7, #4
   12328:	4618      	mov	r0, r3
   1232a:	f7ef ff91 	bl	2250 <NVIC_Init>
}
   1232e:	3708      	adds	r7, #8
   12330:	46bd      	mov	sp, r7
   12332:	bd80      	pop	{r7, pc}

00012334 <enable_rs232>:

void enable_rs232(void)
{
   12334:	b580      	push	{r7, lr}
   12336:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   12338:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1233c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   12340:	2101      	movs	r1, #1
   12342:	f7ef fb17 	bl	1974 <USART_Cmd>
}
   12346:	bd80      	pop	{r7, pc}

00012348 <send_byte>:


void send_byte(uint8_t b)
{
   12348:	b580      	push	{r7, lr}
   1234a:	b082      	sub	sp, #8
   1234c:	af00      	add	r7, sp, #0
   1234e:	4603      	mov	r3, r0
   12350:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   12352:	bf00      	nop
   12354:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12358:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1235c:	2180      	movs	r1, #128	; 0x80
   1235e:	f7ef fd75 	bl	1e4c <USART_GetFlagStatus>
   12362:	4603      	mov	r3, r0
   12364:	2b00      	cmp	r3, #0
   12366:	d0f5      	beq.n	12354 <send_byte+0xc>

    GPIOC->ODR ^= 0x00001000;
   12368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1236c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   12370:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12374:	f2c4 0201 	movt	r2, #16385	; 0x4001
   12378:	68d2      	ldr	r2, [r2, #12]
   1237a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1237e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   12380:	79fb      	ldrb	r3, [r7, #7]
   12382:	b29b      	uxth	r3, r3
   12384:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   12388:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1238c:	4619      	mov	r1, r3
   1238e:	f7ef fc11 	bl	1bb4 <USART_SendData>
}
   12392:	3708      	adds	r7, #8
   12394:	46bd      	mov	sp, r7
   12396:	bd80      	pop	{r7, pc}

00012398 <send_num>:


void send_num(uint8_t b)
{
   12398:	b580      	push	{r7, lr}
   1239a:	b082      	sub	sp, #8
   1239c:	af00      	add	r7, sp, #0
   1239e:	4603      	mov	r3, r0
   123a0:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   123a2:	79fb      	ldrb	r3, [r7, #7]
   123a4:	3330      	adds	r3, #48	; 0x30
   123a6:	b2db      	uxtb	r3, r3
   123a8:	4618      	mov	r0, r3
   123aa:	f7ff ffcd 	bl	12348 <send_byte>
}
   123ae:	3708      	adds	r7, #8
   123b0:	46bd      	mov	sp, r7
   123b2:	bd80      	pop	{r7, pc}

000123b4 <vPrintString>:


void vPrintString( const char * string )
{
   123b4:	b580      	push	{r7, lr}
   123b6:	b084      	sub	sp, #16
   123b8:	af00      	add	r7, sp, #0
   123ba:	6078      	str	r0, [r7, #4]
    int i = 0;
   123bc:	2300      	movs	r3, #0
   123be:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   123c0:	e009      	b.n	123d6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   123c2:	68fb      	ldr	r3, [r7, #12]
   123c4:	687a      	ldr	r2, [r7, #4]
   123c6:	4413      	add	r3, r2
   123c8:	781b      	ldrb	r3, [r3, #0]
   123ca:	4618      	mov	r0, r3
   123cc:	f7ff ffbc 	bl	12348 <send_byte>
        i++;
   123d0:	68fb      	ldr	r3, [r7, #12]
   123d2:	3301      	adds	r3, #1
   123d4:	60fb      	str	r3, [r7, #12]


void vPrintString( const char * string )
{
    int i = 0;
    while(string[i] != '\0')
   123d6:	68fb      	ldr	r3, [r7, #12]
   123d8:	687a      	ldr	r2, [r7, #4]
   123da:	4413      	add	r3, r2
   123dc:	781b      	ldrb	r3, [r3, #0]
   123de:	2b00      	cmp	r3, #0
   123e0:	d1ef      	bne.n	123c2 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   123e2:	3710      	adds	r7, #16
   123e4:	46bd      	mov	sp, r7
   123e6:	bd80      	pop	{r7, pc}

000123e8 <vPrintNumber>:

void vPrintNumber( const long c_num )
{
   123e8:	b580      	push	{r7, lr}
   123ea:	b08e      	sub	sp, #56	; 0x38
   123ec:	af00      	add	r7, sp, #0
   123ee:	6078      	str	r0, [r7, #4]
    char time[33], tmp;
    unsigned int i, count = 0;
   123f0:	2300      	movs	r3, #0
   123f2:	633b      	str	r3, [r7, #48]	; 0x30
    long num = c_num;
   123f4:	687b      	ldr	r3, [r7, #4]
   123f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(num == 0)
   123f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   123fa:	2b00      	cmp	r3, #0
   123fc:	d106      	bne.n	1240c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   123fe:	f643 10ac 	movw	r0, #14764	; 0x39ac
   12402:	f2c0 0001 	movt	r0, #1
   12406:	f7ff ffd5 	bl	123b4 <vPrintString>
   1240a:	e064      	b.n	124d6 <vPrintNumber+0xee>
    }
    else
    {
        // transform long into char * 
        while( num   )
   1240c:	e024      	b.n	12458 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1240e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12410:	f246 6367 	movw	r3, #26215	; 0x6667
   12414:	f2c6 6366 	movt	r3, #26214	; 0x6666
   12418:	fb83 2301 	smull	r2, r3, r3, r1
   1241c:	109a      	asrs	r2, r3, #2
   1241e:	17cb      	asrs	r3, r1, #31
   12420:	1ad2      	subs	r2, r2, r3
   12422:	4613      	mov	r3, r2
   12424:	009b      	lsls	r3, r3, #2
   12426:	4413      	add	r3, r2
   12428:	005b      	lsls	r3, r3, #1
   1242a:	1aca      	subs	r2, r1, r3
   1242c:	b2d3      	uxtb	r3, r2
   1242e:	3330      	adds	r3, #48	; 0x30
   12430:	b2da      	uxtb	r2, r3
   12432:	f107 0108 	add.w	r1, r7, #8
   12436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12438:	440b      	add	r3, r1
   1243a:	701a      	strb	r2, [r3, #0]
            count ++;
   1243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1243e:	3301      	adds	r3, #1
   12440:	633b      	str	r3, [r7, #48]	; 0x30
            num /= 10;
   12442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12444:	f246 6367 	movw	r3, #26215	; 0x6667
   12448:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1244c:	fb83 1302 	smull	r1, r3, r3, r2
   12450:	1099      	asrs	r1, r3, #2
   12452:	17d3      	asrs	r3, r2, #31
   12454:	1acb      	subs	r3, r1, r3
   12456:	62fb      	str	r3, [r7, #44]	; 0x2c
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num   )
   12458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1245a:	2b00      	cmp	r3, #0
   1245c:	d1d7      	bne.n	1240e <vPrintNumber+0x26>
        {
            time[count] = num%10 +'0';
            count ++;
            num /= 10;
        }
        time[count] = '\0';
   1245e:	f107 0208 	add.w	r2, r7, #8
   12462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12464:	4413      	add	r3, r2
   12466:	2200      	movs	r2, #0
   12468:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i  )
   1246a:	2300      	movs	r3, #0
   1246c:	637b      	str	r3, [r7, #52]	; 0x34
   1246e:	e022      	b.n	124b6 <vPrintNumber+0xce>
        {
            tmp = time[i];
   12470:	f107 0208 	add.w	r2, r7, #8
   12474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12476:	4413      	add	r3, r2
   12478:	781b      	ldrb	r3, [r3, #0]
   1247a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            time[i] = time[count-1-i];
   1247e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12482:	1ad3      	subs	r3, r2, r3
   12484:	3b01      	subs	r3, #1
   12486:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1248a:	4413      	add	r3, r2
   1248c:	f813 2c30 	ldrb.w	r2, [r3, #-48]
   12490:	f107 0108 	add.w	r1, r7, #8
   12494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12496:	440b      	add	r3, r1
   12498:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   1249a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1249e:	1ad3      	subs	r3, r2, r3
   124a0:	3b01      	subs	r3, #1
   124a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
   124a6:	440b      	add	r3, r1
   124a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   124ac:	f803 2c30 	strb.w	r2, [r3, #-48]
            num /= 10;
        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i  )
   124b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   124b2:	3301      	adds	r3, #1
   124b4:	637b      	str	r3, [r7, #52]	; 0x34
   124b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   124b8:	085a      	lsrs	r2, r3, #1
   124ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   124bc:	429a      	cmp	r2, r3
   124be:	d8d7      	bhi.n	12470 <vPrintNumber+0x88>
        {
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;
        }
        vPrintString(time);
   124c0:	f107 0308 	add.w	r3, r7, #8
   124c4:	4618      	mov	r0, r3
   124c6:	f7ff ff75 	bl	123b4 <vPrintString>
        vPrintString("\n\r");
   124ca:	f643 10b0 	movw	r0, #14768	; 0x39b0
   124ce:	f2c0 0001 	movt	r0, #1
   124d2:	f7ff ff6f 	bl	123b4 <vPrintString>
    }
}
   124d6:	3738      	adds	r7, #56	; 0x38
   124d8:	46bd      	mov	sp, r7
   124da:	bd80      	pop	{r7, pc}

000124dc <vParametersInit>:

portBASE_TYPE miss[NUMBEROFTASK];


void vParametersInit()
{
   124dc:	b480      	push	{r7}
   124de:	b083      	sub	sp, #12
   124e0:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   124e2:	2300      	movs	r3, #0
   124e4:	607b      	str	r3, [r7, #4]
   124e6:	e03c      	b.n	12562 <vParametersInit+0x86>
    {
        parameters[i].xMyId = i;
   124e8:	f64b 523c 	movw	r2, #48444	; 0xbd3c
   124ec:	f2c2 0204 	movt	r2, #8196	; 0x2004
   124f0:	6879      	ldr	r1, [r7, #4]
   124f2:	460b      	mov	r3, r1
   124f4:	005b      	lsls	r3, r3, #1
   124f6:	440b      	add	r3, r1
   124f8:	009b      	lsls	r3, r3, #2
   124fa:	4413      	add	r3, r2
   124fc:	687a      	ldr	r2, [r7, #4]
   124fe:	601a      	str	r2, [r3, #0]
        parameters[i].xMyFun = xTaskTable[i];
   12500:	f240 03c4 	movw	r3, #196	; 0xc4
   12504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12508:	687a      	ldr	r2, [r7, #4]
   1250a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1250e:	f64b 523c 	movw	r2, #48444	; 0xbd3c
   12512:	f2c2 0204 	movt	r2, #8196	; 0x2004
   12516:	6879      	ldr	r1, [r7, #4]
   12518:	460b      	mov	r3, r1
   1251a:	005b      	lsls	r3, r3, #1
   1251c:	440b      	add	r3, r1
   1251e:	009b      	lsls	r3, r3, #2
   12520:	4413      	add	r3, r2
   12522:	3304      	adds	r3, #4
   12524:	6018      	str	r0, [r3, #0]
        parameters[i].xPeriod = xPeriodTable[i];
   12526:	f240 035c 	movw	r3, #92	; 0x5c
   1252a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1252e:	687a      	ldr	r2, [r7, #4]
   12530:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   12534:	f64b 523c 	movw	r2, #48444	; 0xbd3c
   12538:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1253c:	6879      	ldr	r1, [r7, #4]
   1253e:	460b      	mov	r3, r1
   12540:	005b      	lsls	r3, r3, #1
   12542:	440b      	add	r3, r1
   12544:	009b      	lsls	r3, r3, #2
   12546:	4413      	add	r3, r2
   12548:	3308      	adds	r3, #8
   1254a:	6018      	str	r0, [r3, #0]
        #ifdef configUSE_LSF_SCHEDULING
	    parameters[i].WCET = WCET[i];
        #endif
        miss[i] = 0;
   1254c:	f64b 630c 	movw	r3, #48652	; 0xbe0c
   12550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12554:	687a      	ldr	r2, [r7, #4]
   12556:	2100      	movs	r1, #0
   12558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vParametersInit()
{
    portBASE_TYPE i;
    for( i = 0; i < NUMBEROFTASK; ++ i )
   1255c:	687b      	ldr	r3, [r7, #4]
   1255e:	3301      	adds	r3, #1
   12560:	607b      	str	r3, [r7, #4]
   12562:	687b      	ldr	r3, [r7, #4]
   12564:	2b0c      	cmp	r3, #12
   12566:	ddbf      	ble.n	124e8 <vParametersInit+0xc>
        #ifdef configUSE_LSF_SCHEDULING
	    parameters[i].WCET = WCET[i];
        #endif
        miss[i] = 0;
    }
}
   12568:	370c      	adds	r7, #12
   1256a:	46bd      	mov	sp, r7
   1256c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12570:	4770      	bx	lr
   12572:	bf00      	nop

00012574 <vTimeTask>:

void vTimeTask( void * pvParameter )
{
   12574:	b580      	push	{r7, lr}
   12576:	b08a      	sub	sp, #40	; 0x28
   12578:	af00      	add	r7, sp, #0
   1257a:	6078      	str	r0, [r7, #4]
    struct parameter *xMyParameter = (struct parameter *)pvParameter;
   1257c:	687b      	ldr	r3, [r7, #4]
   1257e:	61bb      	str	r3, [r7, #24]
    portBASE_TYPE xMyId = xMyParameter->xMyId;
   12580:	69bb      	ldr	r3, [r7, #24]
   12582:	681b      	ldr	r3, [r3, #0]
   12584:	617b      	str	r3, [r7, #20]
    pvTaskFunType xMyFun = xMyParameter->xMyFun;
   12586:	69bb      	ldr	r3, [r7, #24]
   12588:	685b      	ldr	r3, [r3, #4]
   1258a:	613b      	str	r3, [r7, #16]
    portTickType xMyPeriod = xMyParameter->xPeriod;
   1258c:	69bb      	ldr	r3, [r7, #24]
   1258e:	689b      	ldr	r3, [r3, #8]
   12590:	60fb      	str	r3, [r7, #12]

    portBASE_TYPE i;
    portTickType xCurrentTime;
    
    // used for periodic task
    portTickType xLastExecutionTime = 0; 
   12592:	2300      	movs	r3, #0
   12594:	60bb      	str	r3, [r7, #8]

    portTickType xReadyTime = 0;
   12596:	2300      	movs	r3, #0
   12598:	623b      	str	r3, [r7, #32]
    portTickType xDeadline = xMyPeriod ;
   1259a:	68fb      	ldr	r3, [r7, #12]
   1259c:	61fb      	str	r3, [r7, #28]
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();
#endif

        #ifdef NONPREEMPTION
        vPrintNumber(xMyId);
   1259e:	6978      	ldr	r0, [r7, #20]
   125a0:	f7ff ff22 	bl	123e8 <vPrintNumber>
        vPrintNumber( xReadyTime );
   125a4:	6a3b      	ldr	r3, [r7, #32]
   125a6:	4618      	mov	r0, r3
   125a8:	f7ff ff1e 	bl	123e8 <vPrintNumber>
        vPrintNumber( xTaskGetTickCount() );
   125ac:	f7f1 fb62 	bl	3c74 <xTaskGetTickCount>
   125b0:	4603      	mov	r3, r0
   125b2:	4618      	mov	r0, r3
   125b4:	f7ff ff18 	bl	123e8 <vPrintNumber>
        #endif

        for( i = 0; i < 20; ++ i )
   125b8:	2300      	movs	r3, #0
   125ba:	627b      	str	r3, [r7, #36]	; 0x24
   125bc:	e004      	b.n	125c8 <vTimeTask+0x54>
        {
            xMyFun();
   125be:	693b      	ldr	r3, [r7, #16]
   125c0:	4798      	blx	r3
        vPrintNumber(xMyId);
        vPrintNumber( xReadyTime );
        vPrintNumber( xTaskGetTickCount() );
        #endif

        for( i = 0; i < 20; ++ i )
   125c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125c4:	3301      	adds	r3, #1
   125c6:	627b      	str	r3, [r7, #36]	; 0x24
   125c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125ca:	2b13      	cmp	r3, #19
   125cc:	ddf7      	ble.n	125be <vTimeTask+0x4a>
        {
            xMyFun();
        }

        if(xTaskGetTickCount() > xDeadline)
   125ce:	f7f1 fb51 	bl	3c74 <xTaskGetTickCount>
   125d2:	4602      	mov	r2, r0
   125d4:	69fb      	ldr	r3, [r7, #28]
   125d6:	429a      	cmp	r2, r3
   125d8:	d914      	bls.n	12604 <vTimeTask+0x90>
        {
            //vPrintNumber((xMyId+10)*2);
            vPrintString("miss deadline\n\r");
   125da:	f643 10b4 	movw	r0, #14772	; 0x39b4
   125de:	f2c0 0001 	movt	r0, #1
   125e2:	f7ff fee7 	bl	123b4 <vPrintString>
            miss[xMyId] ++;
   125e6:	f64b 630c 	movw	r3, #48652	; 0xbe0c
   125ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ee:	697a      	ldr	r2, [r7, #20]
   125f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   125f4:	1c59      	adds	r1, r3, #1
   125f6:	f64b 630c 	movw	r3, #48652	; 0xbe0c
   125fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fe:	697a      	ldr	r2, [r7, #20]
   12600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        xReadyTime += xMyPeriod;
   12604:	6a3a      	ldr	r2, [r7, #32]
   12606:	68fb      	ldr	r3, [r7, #12]
   12608:	4413      	add	r3, r2
   1260a:	623b      	str	r3, [r7, #32]
        xDeadline += xMyPeriod;
   1260c:	69fa      	ldr	r2, [r7, #28]
   1260e:	68fb      	ldr	r3, [r7, #12]
   12610:	4413      	add	r3, r2
   12612:	61fb      	str	r3, [r7, #28]
        vPrintNumber( xDeadline );
        vPrintNumber( xTaskGetTickCount() );
        xTaskResumeAll();
#endif
        #ifdef NONPREEMPTION
        vPrintNumber(xTaskGetTickCount());
   12614:	f7f1 fb2e 	bl	3c74 <xTaskGetTickCount>
   12618:	4603      	mov	r3, r0
   1261a:	4618      	mov	r0, r3
   1261c:	f7ff fee4 	bl	123e8 <vPrintNumber>
        vPrintNumber( xDeadline );
   12620:	69fb      	ldr	r3, [r7, #28]
   12622:	4618      	mov	r0, r3
   12624:	f7ff fee0 	bl	123e8 <vPrintNumber>
        vPrintNumber( (xMyId + 10)* 3 );
   12628:	697b      	ldr	r3, [r7, #20]
   1262a:	f103 020a 	add.w	r2, r3, #10
   1262e:	4613      	mov	r3, r2
   12630:	005b      	lsls	r3, r3, #1
   12632:	4413      	add	r3, r2
   12634:	4618      	mov	r0, r3
   12636:	f7ff fed7 	bl	123e8 <vPrintNumber>
#endif

#if defined configUSE_LSF_SCHEDULING
        vSetTaskRemainTime( xMyWCET );
#endif
        vTaskDelayUntil( &xLastExecutionTime, xMyPeriod / portTICK_RATE_MS );
   1263a:	f107 0308 	add.w	r3, r7, #8
   1263e:	4618      	mov	r0, r3
   12640:	68f9      	ldr	r1, [r7, #12]
   12642:	f7f0 ffc3 	bl	35cc <vTaskDelayUntil>
    }
   12646:	e7aa      	b.n	1259e <vTimeTask+0x2a>

00012648 <main>:
}


int main()
{
   12648:	b590      	push	{r4, r7, lr}
   1264a:	b087      	sub	sp, #28
   1264c:	af04      	add	r7, sp, #16

    int i;
	init_led();
   1264e:	f7ff fda7 	bl	121a0 <init_led>
	init_rs232();
   12652:	f7ff fe07 	bl	12264 <init_rs232>
	enable_rs232_interrupts();
   12656:	f7ff fe4b 	bl	122f0 <enable_rs232_interrupts>
	enable_rs232();
   1265a:	f7ff fe6b 	bl	12334 <enable_rs232>

    vParametersInit();
   1265e:	f7ff ff3d 	bl	124dc <vParametersInit>
    vPapabenchInit();
   12662:	f7f0 fa1d 	bl	2aa0 <vPapabenchInit>


    for( i = 0; i < NUMBEROFTASK; ++ i )
   12666:	2300      	movs	r3, #0
   12668:	607b      	str	r3, [r7, #4]
   1266a:	e031      	b.n	126d0 <main+0x88>
#ifdef configUSE_EDF_SCHEDULING
        xTaskCreateForEDF(vTimeTask, pcNameOfTask[i],  256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i], parameters[i].xPeriod);
#elif defined configUSE_LSF_SCHEDULING
        xTaskCreateForLSF(vTimeTask, pcNameOfTask[i], 256, (void *) & parameters[i], xTaskPrio[i], &xTaskOfHandle[i], parameters[i].xPeriod, parameters[i].WCET);
#else
        xTaskCreate( vTimeTask, pcNameOfTask[i], 256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i] );
   1266c:	f240 0390 	movw	r3, #144	; 0x90
   12670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12674:	687a      	ldr	r2, [r7, #4]
   12676:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1267a:	687a      	ldr	r2, [r7, #4]
   1267c:	4613      	mov	r3, r2
   1267e:	005b      	lsls	r3, r3, #1
   12680:	4413      	add	r3, r2
   12682:	009b      	lsls	r3, r3, #2
   12684:	f64b 523c 	movw	r2, #48444	; 0xbd3c
   12688:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1268c:	189c      	adds	r4, r3, r2
   1268e:	f240 0328 	movw	r3, #40	; 0x28
   12692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12696:	687a      	ldr	r2, [r7, #4]
   12698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1269c:	461a      	mov	r2, r3
   1269e:	687b      	ldr	r3, [r7, #4]
   126a0:	0098      	lsls	r0, r3, #2
   126a2:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
   126a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126aa:	4403      	add	r3, r0
   126ac:	9200      	str	r2, [sp, #0]
   126ae:	9301      	str	r3, [sp, #4]
   126b0:	2300      	movs	r3, #0
   126b2:	9302      	str	r3, [sp, #8]
   126b4:	2300      	movs	r3, #0
   126b6:	9303      	str	r3, [sp, #12]
   126b8:	f242 5075 	movw	r0, #9589	; 0x2575
   126bc:	f2c0 0001 	movt	r0, #1
   126c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   126c4:	4623      	mov	r3, r4
   126c6:	f7f0 fe57 	bl	3378 <xTaskGenericCreate>

    vParametersInit();
    vPapabenchInit();


    for( i = 0; i < NUMBEROFTASK; ++ i )
   126ca:	687b      	ldr	r3, [r7, #4]
   126cc:	3301      	adds	r3, #1
   126ce:	607b      	str	r3, [r7, #4]
   126d0:	687b      	ldr	r3, [r7, #4]
   126d2:	2b0c      	cmp	r3, #12
   126d4:	ddca      	ble.n	1266c <main+0x24>
        xTaskCreate( vTimeTask, pcNameOfTask[i], 256, (void *) &parameters[i], xTaskPrio[i], &xTaskOfHandle[i] );
#endif
    }

	/* Start running the tasks. */
	vTaskStartScheduler();
   126d6:	f7f1 f9cd 	bl	3a74 <vTaskStartScheduler>

	return 0;
   126da:	2300      	movs	r3, #0
}
   126dc:	4618      	mov	r0, r3
   126de:	370c      	adds	r7, #12
   126e0:	46bd      	mov	sp, r7
   126e2:	bd90      	pop	{r4, r7, pc}

000126e4 <myTraceCreate>:

void myTraceCreate      (){
   126e4:	b480      	push	{r7}
   126e6:	af00      	add	r7, sp, #0
}
   126e8:	46bd      	mov	sp, r7
   126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   126ee:	4770      	bx	lr

000126f0 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   126f0:	b480      	push	{r7}
   126f2:	af00      	add	r7, sp, #0
}
   126f4:	46bd      	mov	sp, r7
   126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   126fa:	4770      	bx	lr

000126fc <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   126fc:	b480      	push	{r7}
   126fe:	af00      	add	r7, sp, #0
}
   12700:	46bd      	mov	sp, r7
   12702:	f85d 7b04 	ldr.w	r7, [sp], #4
   12706:	4770      	bx	lr

00012708 <vApplicationTickHook>:

void vApplicationTickHook()
{
   12708:	b480      	push	{r7}
   1270a:	af00      	add	r7, sp, #0

}
   1270c:	46bd      	mov	sp, r7
   1270e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12712:	4770      	bx	lr

00012714 <__aeabi_drsub>:
   12714:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12718:	e002      	b.n	12720 <__adddf3>
   1271a:	bf00      	nop

0001271c <__aeabi_dsub>:
   1271c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00012720 <__adddf3>:
   12720:	b530      	push	{r4, r5, lr}
   12722:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12726:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1272a:	ea94 0f05 	teq	r4, r5
   1272e:	bf08      	it	eq
   12730:	ea90 0f02 	teqeq	r0, r2
   12734:	bf1f      	itttt	ne
   12736:	ea54 0c00 	orrsne.w	ip, r4, r0
   1273a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1273e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   12742:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12746:	f000 80e2 	beq.w	1290e <__adddf3+0x1ee>
   1274a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1274e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   12752:	bfb8      	it	lt
   12754:	426d      	neglt	r5, r5
   12756:	dd0c      	ble.n	12772 <__adddf3+0x52>
   12758:	442c      	add	r4, r5
   1275a:	ea80 0202 	eor.w	r2, r0, r2
   1275e:	ea81 0303 	eor.w	r3, r1, r3
   12762:	ea82 0000 	eor.w	r0, r2, r0
   12766:	ea83 0101 	eor.w	r1, r3, r1
   1276a:	ea80 0202 	eor.w	r2, r0, r2
   1276e:	ea81 0303 	eor.w	r3, r1, r3
   12772:	2d36      	cmp	r5, #54	; 0x36
   12774:	bf88      	it	hi
   12776:	bd30      	pophi	{r4, r5, pc}
   12778:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1277c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12780:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   12784:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   12788:	d002      	beq.n	12790 <__adddf3+0x70>
   1278a:	4240      	negs	r0, r0
   1278c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12790:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   12794:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12798:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1279c:	d002      	beq.n	127a4 <__adddf3+0x84>
   1279e:	4252      	negs	r2, r2
   127a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   127a4:	ea94 0f05 	teq	r4, r5
   127a8:	f000 80a7 	beq.w	128fa <__adddf3+0x1da>
   127ac:	f1a4 0401 	sub.w	r4, r4, #1
   127b0:	f1d5 0e20 	rsbs	lr, r5, #32
   127b4:	db0d      	blt.n	127d2 <__adddf3+0xb2>
   127b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   127ba:	fa22 f205 	lsr.w	r2, r2, r5
   127be:	1880      	adds	r0, r0, r2
   127c0:	f141 0100 	adc.w	r1, r1, #0
   127c4:	fa03 f20e 	lsl.w	r2, r3, lr
   127c8:	1880      	adds	r0, r0, r2
   127ca:	fa43 f305 	asr.w	r3, r3, r5
   127ce:	4159      	adcs	r1, r3
   127d0:	e00e      	b.n	127f0 <__adddf3+0xd0>
   127d2:	f1a5 0520 	sub.w	r5, r5, #32
   127d6:	f10e 0e20 	add.w	lr, lr, #32
   127da:	2a01      	cmp	r2, #1
   127dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   127e0:	bf28      	it	cs
   127e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   127e6:	fa43 f305 	asr.w	r3, r3, r5
   127ea:	18c0      	adds	r0, r0, r3
   127ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   127f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   127f4:	d507      	bpl.n	12806 <__adddf3+0xe6>
   127f6:	f04f 0e00 	mov.w	lr, #0
   127fa:	f1dc 0c00 	rsbs	ip, ip, #0
   127fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   12802:	eb6e 0101 	sbc.w	r1, lr, r1
   12806:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1280a:	d31b      	bcc.n	12844 <__adddf3+0x124>
   1280c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   12810:	d30c      	bcc.n	1282c <__adddf3+0x10c>
   12812:	0849      	lsrs	r1, r1, #1
   12814:	ea5f 0030 	movs.w	r0, r0, rrx
   12818:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1281c:	f104 0401 	add.w	r4, r4, #1
   12820:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12824:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12828:	f080 809a 	bcs.w	12960 <__adddf3+0x240>
   1282c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12830:	bf08      	it	eq
   12832:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12836:	f150 0000 	adcs.w	r0, r0, #0
   1283a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1283e:	ea41 0105 	orr.w	r1, r1, r5
   12842:	bd30      	pop	{r4, r5, pc}
   12844:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   12848:	4140      	adcs	r0, r0
   1284a:	eb41 0101 	adc.w	r1, r1, r1
   1284e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12852:	f1a4 0401 	sub.w	r4, r4, #1
   12856:	d1e9      	bne.n	1282c <__adddf3+0x10c>
   12858:	f091 0f00 	teq	r1, #0
   1285c:	bf04      	itt	eq
   1285e:	4601      	moveq	r1, r0
   12860:	2000      	moveq	r0, #0
   12862:	fab1 f381 	clz	r3, r1
   12866:	bf08      	it	eq
   12868:	3320      	addeq	r3, #32
   1286a:	f1a3 030b 	sub.w	r3, r3, #11
   1286e:	f1b3 0220 	subs.w	r2, r3, #32
   12872:	da0c      	bge.n	1288e <__adddf3+0x16e>
   12874:	320c      	adds	r2, #12
   12876:	dd08      	ble.n	1288a <__adddf3+0x16a>
   12878:	f102 0c14 	add.w	ip, r2, #20
   1287c:	f1c2 020c 	rsb	r2, r2, #12
   12880:	fa01 f00c 	lsl.w	r0, r1, ip
   12884:	fa21 f102 	lsr.w	r1, r1, r2
   12888:	e00c      	b.n	128a4 <__adddf3+0x184>
   1288a:	f102 0214 	add.w	r2, r2, #20
   1288e:	bfd8      	it	le
   12890:	f1c2 0c20 	rsble	ip, r2, #32
   12894:	fa01 f102 	lsl.w	r1, r1, r2
   12898:	fa20 fc0c 	lsr.w	ip, r0, ip
   1289c:	bfdc      	itt	le
   1289e:	ea41 010c 	orrle.w	r1, r1, ip
   128a2:	4090      	lslle	r0, r2
   128a4:	1ae4      	subs	r4, r4, r3
   128a6:	bfa2      	ittt	ge
   128a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   128ac:	4329      	orrge	r1, r5
   128ae:	bd30      	popge	{r4, r5, pc}
   128b0:	ea6f 0404 	mvn.w	r4, r4
   128b4:	3c1f      	subs	r4, #31
   128b6:	da1c      	bge.n	128f2 <__adddf3+0x1d2>
   128b8:	340c      	adds	r4, #12
   128ba:	dc0e      	bgt.n	128da <__adddf3+0x1ba>
   128bc:	f104 0414 	add.w	r4, r4, #20
   128c0:	f1c4 0220 	rsb	r2, r4, #32
   128c4:	fa20 f004 	lsr.w	r0, r0, r4
   128c8:	fa01 f302 	lsl.w	r3, r1, r2
   128cc:	ea40 0003 	orr.w	r0, r0, r3
   128d0:	fa21 f304 	lsr.w	r3, r1, r4
   128d4:	ea45 0103 	orr.w	r1, r5, r3
   128d8:	bd30      	pop	{r4, r5, pc}
   128da:	f1c4 040c 	rsb	r4, r4, #12
   128de:	f1c4 0220 	rsb	r2, r4, #32
   128e2:	fa20 f002 	lsr.w	r0, r0, r2
   128e6:	fa01 f304 	lsl.w	r3, r1, r4
   128ea:	ea40 0003 	orr.w	r0, r0, r3
   128ee:	4629      	mov	r1, r5
   128f0:	bd30      	pop	{r4, r5, pc}
   128f2:	fa21 f004 	lsr.w	r0, r1, r4
   128f6:	4629      	mov	r1, r5
   128f8:	bd30      	pop	{r4, r5, pc}
   128fa:	f094 0f00 	teq	r4, #0
   128fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   12902:	bf06      	itte	eq
   12904:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12908:	3401      	addeq	r4, #1
   1290a:	3d01      	subne	r5, #1
   1290c:	e74e      	b.n	127ac <__adddf3+0x8c>
   1290e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12912:	bf18      	it	ne
   12914:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12918:	d029      	beq.n	1296e <__adddf3+0x24e>
   1291a:	ea94 0f05 	teq	r4, r5
   1291e:	bf08      	it	eq
   12920:	ea90 0f02 	teqeq	r0, r2
   12924:	d005      	beq.n	12932 <__adddf3+0x212>
   12926:	ea54 0c00 	orrs.w	ip, r4, r0
   1292a:	bf04      	itt	eq
   1292c:	4619      	moveq	r1, r3
   1292e:	4610      	moveq	r0, r2
   12930:	bd30      	pop	{r4, r5, pc}
   12932:	ea91 0f03 	teq	r1, r3
   12936:	bf1e      	ittt	ne
   12938:	2100      	movne	r1, #0
   1293a:	2000      	movne	r0, #0
   1293c:	bd30      	popne	{r4, r5, pc}
   1293e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   12942:	d105      	bne.n	12950 <__adddf3+0x230>
   12944:	0040      	lsls	r0, r0, #1
   12946:	4149      	adcs	r1, r1
   12948:	bf28      	it	cs
   1294a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1294e:	bd30      	pop	{r4, r5, pc}
   12950:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   12954:	bf3c      	itt	cc
   12956:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1295a:	bd30      	popcc	{r4, r5, pc}
   1295c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12960:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   12964:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12968:	f04f 0000 	mov.w	r0, #0
   1296c:	bd30      	pop	{r4, r5, pc}
   1296e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12972:	bf1a      	itte	ne
   12974:	4619      	movne	r1, r3
   12976:	4610      	movne	r0, r2
   12978:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1297c:	bf1c      	itt	ne
   1297e:	460b      	movne	r3, r1
   12980:	4602      	movne	r2, r0
   12982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12986:	bf06      	itte	eq
   12988:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1298c:	ea91 0f03 	teqeq	r1, r3
   12990:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   12994:	bd30      	pop	{r4, r5, pc}
   12996:	bf00      	nop

00012998 <__aeabi_ui2d>:
   12998:	f090 0f00 	teq	r0, #0
   1299c:	bf04      	itt	eq
   1299e:	2100      	moveq	r1, #0
   129a0:	4770      	bxeq	lr
   129a2:	b530      	push	{r4, r5, lr}
   129a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129ac:	f04f 0500 	mov.w	r5, #0
   129b0:	f04f 0100 	mov.w	r1, #0
   129b4:	e750      	b.n	12858 <__adddf3+0x138>
   129b6:	bf00      	nop

000129b8 <__aeabi_i2d>:
   129b8:	f090 0f00 	teq	r0, #0
   129bc:	bf04      	itt	eq
   129be:	2100      	moveq	r1, #0
   129c0:	4770      	bxeq	lr
   129c2:	b530      	push	{r4, r5, lr}
   129c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   129c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   129cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   129d0:	bf48      	it	mi
   129d2:	4240      	negmi	r0, r0
   129d4:	f04f 0100 	mov.w	r1, #0
   129d8:	e73e      	b.n	12858 <__adddf3+0x138>
   129da:	bf00      	nop

000129dc <__aeabi_f2d>:
   129dc:	0042      	lsls	r2, r0, #1
   129de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   129e2:	ea4f 0131 	mov.w	r1, r1, rrx
   129e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   129ea:	bf1f      	itttt	ne
   129ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   129f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   129f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   129f8:	4770      	bxne	lr
   129fa:	f092 0f00 	teq	r2, #0
   129fe:	bf14      	ite	ne
   12a00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12a04:	4770      	bxeq	lr
   12a06:	b530      	push	{r4, r5, lr}
   12a08:	f44f 7460 	mov.w	r4, #896	; 0x380
   12a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12a10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12a14:	e720      	b.n	12858 <__adddf3+0x138>
   12a16:	bf00      	nop

00012a18 <__aeabi_ul2d>:
   12a18:	ea50 0201 	orrs.w	r2, r0, r1
   12a1c:	bf08      	it	eq
   12a1e:	4770      	bxeq	lr
   12a20:	b530      	push	{r4, r5, lr}
   12a22:	f04f 0500 	mov.w	r5, #0
   12a26:	e00a      	b.n	12a3e <__aeabi_l2d+0x16>

00012a28 <__aeabi_l2d>:
   12a28:	ea50 0201 	orrs.w	r2, r0, r1
   12a2c:	bf08      	it	eq
   12a2e:	4770      	bxeq	lr
   12a30:	b530      	push	{r4, r5, lr}
   12a32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12a36:	d502      	bpl.n	12a3e <__aeabi_l2d+0x16>
   12a38:	4240      	negs	r0, r0
   12a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12a3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12a42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12a46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   12a4a:	f43f aedc 	beq.w	12806 <__adddf3+0xe6>
   12a4e:	f04f 0203 	mov.w	r2, #3
   12a52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a56:	bf18      	it	ne
   12a58:	3203      	addne	r2, #3
   12a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12a5e:	bf18      	it	ne
   12a60:	3203      	addne	r2, #3
   12a62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   12a66:	f1c2 0320 	rsb	r3, r2, #32
   12a6a:	fa00 fc03 	lsl.w	ip, r0, r3
   12a6e:	fa20 f002 	lsr.w	r0, r0, r2
   12a72:	fa01 fe03 	lsl.w	lr, r1, r3
   12a76:	ea40 000e 	orr.w	r0, r0, lr
   12a7a:	fa21 f102 	lsr.w	r1, r1, r2
   12a7e:	4414      	add	r4, r2
   12a80:	e6c1      	b.n	12806 <__adddf3+0xe6>
   12a82:	bf00      	nop

00012a84 <__aeabi_dmul>:
   12a84:	b570      	push	{r4, r5, r6, lr}
   12a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12a92:	bf1d      	ittte	ne
   12a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12a98:	ea94 0f0c 	teqne	r4, ip
   12a9c:	ea95 0f0c 	teqne	r5, ip
   12aa0:	f000 f8de 	bleq	12c60 <__aeabi_dmul+0x1dc>
   12aa4:	442c      	add	r4, r5
   12aa6:	ea81 0603 	eor.w	r6, r1, r3
   12aaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12aae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12ab2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12ab6:	bf18      	it	ne
   12ab8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12ac4:	d038      	beq.n	12b38 <__aeabi_dmul+0xb4>
   12ac6:	fba0 ce02 	umull	ip, lr, r0, r2
   12aca:	f04f 0500 	mov.w	r5, #0
   12ace:	fbe1 e502 	umlal	lr, r5, r1, r2
   12ad2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12ad6:	fbe0 e503 	umlal	lr, r5, r0, r3
   12ada:	f04f 0600 	mov.w	r6, #0
   12ade:	fbe1 5603 	umlal	r5, r6, r1, r3
   12ae2:	f09c 0f00 	teq	ip, #0
   12ae6:	bf18      	it	ne
   12ae8:	f04e 0e01 	orrne.w	lr, lr, #1
   12aec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12af0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12af4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12af8:	d204      	bcs.n	12b04 <__aeabi_dmul+0x80>
   12afa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12afe:	416d      	adcs	r5, r5
   12b00:	eb46 0606 	adc.w	r6, r6, r6
   12b04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12b08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12b0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12b10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12b14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12b18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12b1c:	bf88      	it	hi
   12b1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12b22:	d81e      	bhi.n	12b62 <__aeabi_dmul+0xde>
   12b24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12b28:	bf08      	it	eq
   12b2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12b2e:	f150 0000 	adcs.w	r0, r0, #0
   12b32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12b36:	bd70      	pop	{r4, r5, r6, pc}
   12b38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12b3c:	ea46 0101 	orr.w	r1, r6, r1
   12b40:	ea40 0002 	orr.w	r0, r0, r2
   12b44:	ea81 0103 	eor.w	r1, r1, r3
   12b48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12b4c:	bfc2      	ittt	gt
   12b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   12b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12b56:	bd70      	popgt	{r4, r5, r6, pc}
   12b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12b5c:	f04f 0e00 	mov.w	lr, #0
   12b60:	3c01      	subs	r4, #1
   12b62:	f300 80ab 	bgt.w	12cbc <__aeabi_dmul+0x238>
   12b66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12b6a:	bfde      	ittt	le
   12b6c:	2000      	movle	r0, #0
   12b6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12b72:	bd70      	pople	{r4, r5, r6, pc}
   12b74:	f1c4 0400 	rsb	r4, r4, #0
   12b78:	3c20      	subs	r4, #32
   12b7a:	da35      	bge.n	12be8 <__aeabi_dmul+0x164>
   12b7c:	340c      	adds	r4, #12
   12b7e:	dc1b      	bgt.n	12bb8 <__aeabi_dmul+0x134>
   12b80:	f104 0414 	add.w	r4, r4, #20
   12b84:	f1c4 0520 	rsb	r5, r4, #32
   12b88:	fa00 f305 	lsl.w	r3, r0, r5
   12b8c:	fa20 f004 	lsr.w	r0, r0, r4
   12b90:	fa01 f205 	lsl.w	r2, r1, r5
   12b94:	ea40 0002 	orr.w	r0, r0, r2
   12b98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12ba0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12ba4:	fa21 f604 	lsr.w	r6, r1, r4
   12ba8:	eb42 0106 	adc.w	r1, r2, r6
   12bac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bb0:	bf08      	it	eq
   12bb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bb6:	bd70      	pop	{r4, r5, r6, pc}
   12bb8:	f1c4 040c 	rsb	r4, r4, #12
   12bbc:	f1c4 0520 	rsb	r5, r4, #32
   12bc0:	fa00 f304 	lsl.w	r3, r0, r4
   12bc4:	fa20 f005 	lsr.w	r0, r0, r5
   12bc8:	fa01 f204 	lsl.w	r2, r1, r4
   12bcc:	ea40 0002 	orr.w	r0, r0, r2
   12bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12bd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12bd8:	f141 0100 	adc.w	r1, r1, #0
   12bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12be0:	bf08      	it	eq
   12be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12be6:	bd70      	pop	{r4, r5, r6, pc}
   12be8:	f1c4 0520 	rsb	r5, r4, #32
   12bec:	fa00 f205 	lsl.w	r2, r0, r5
   12bf0:	ea4e 0e02 	orr.w	lr, lr, r2
   12bf4:	fa20 f304 	lsr.w	r3, r0, r4
   12bf8:	fa01 f205 	lsl.w	r2, r1, r5
   12bfc:	ea43 0302 	orr.w	r3, r3, r2
   12c00:	fa21 f004 	lsr.w	r0, r1, r4
   12c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c08:	fa21 f204 	lsr.w	r2, r1, r4
   12c0c:	ea20 0002 	bic.w	r0, r0, r2
   12c10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12c18:	bf08      	it	eq
   12c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12c1e:	bd70      	pop	{r4, r5, r6, pc}
   12c20:	f094 0f00 	teq	r4, #0
   12c24:	d10f      	bne.n	12c46 <__aeabi_dmul+0x1c2>
   12c26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12c2a:	0040      	lsls	r0, r0, #1
   12c2c:	eb41 0101 	adc.w	r1, r1, r1
   12c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12c34:	bf08      	it	eq
   12c36:	3c01      	subeq	r4, #1
   12c38:	d0f7      	beq.n	12c2a <__aeabi_dmul+0x1a6>
   12c3a:	ea41 0106 	orr.w	r1, r1, r6
   12c3e:	f095 0f00 	teq	r5, #0
   12c42:	bf18      	it	ne
   12c44:	4770      	bxne	lr
   12c46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12c4a:	0052      	lsls	r2, r2, #1
   12c4c:	eb43 0303 	adc.w	r3, r3, r3
   12c50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12c54:	bf08      	it	eq
   12c56:	3d01      	subeq	r5, #1
   12c58:	d0f7      	beq.n	12c4a <__aeabi_dmul+0x1c6>
   12c5a:	ea43 0306 	orr.w	r3, r3, r6
   12c5e:	4770      	bx	lr
   12c60:	ea94 0f0c 	teq	r4, ip
   12c64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12c68:	bf18      	it	ne
   12c6a:	ea95 0f0c 	teqne	r5, ip
   12c6e:	d00c      	beq.n	12c8a <__aeabi_dmul+0x206>
   12c70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c74:	bf18      	it	ne
   12c76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c7a:	d1d1      	bne.n	12c20 <__aeabi_dmul+0x19c>
   12c7c:	ea81 0103 	eor.w	r1, r1, r3
   12c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c84:	f04f 0000 	mov.w	r0, #0
   12c88:	bd70      	pop	{r4, r5, r6, pc}
   12c8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c8e:	bf06      	itte	eq
   12c90:	4610      	moveq	r0, r2
   12c92:	4619      	moveq	r1, r3
   12c94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c98:	d019      	beq.n	12cce <__aeabi_dmul+0x24a>
   12c9a:	ea94 0f0c 	teq	r4, ip
   12c9e:	d102      	bne.n	12ca6 <__aeabi_dmul+0x222>
   12ca0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12ca4:	d113      	bne.n	12cce <__aeabi_dmul+0x24a>
   12ca6:	ea95 0f0c 	teq	r5, ip
   12caa:	d105      	bne.n	12cb8 <__aeabi_dmul+0x234>
   12cac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12cb0:	bf1c      	itt	ne
   12cb2:	4610      	movne	r0, r2
   12cb4:	4619      	movne	r1, r3
   12cb6:	d10a      	bne.n	12cce <__aeabi_dmul+0x24a>
   12cb8:	ea81 0103 	eor.w	r1, r1, r3
   12cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12cc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12cc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12cc8:	f04f 0000 	mov.w	r0, #0
   12ccc:	bd70      	pop	{r4, r5, r6, pc}
   12cce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12cd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12cd6:	bd70      	pop	{r4, r5, r6, pc}

00012cd8 <__aeabi_ddiv>:
   12cd8:	b570      	push	{r4, r5, r6, lr}
   12cda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12cde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12ce2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12ce6:	bf1d      	ittte	ne
   12ce8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12cec:	ea94 0f0c 	teqne	r4, ip
   12cf0:	ea95 0f0c 	teqne	r5, ip
   12cf4:	f000 f8a7 	bleq	12e46 <__aeabi_ddiv+0x16e>
   12cf8:	eba4 0405 	sub.w	r4, r4, r5
   12cfc:	ea81 0e03 	eor.w	lr, r1, r3
   12d00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12d04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12d08:	f000 8088 	beq.w	12e1c <__aeabi_ddiv+0x144>
   12d0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12d10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12d14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12d18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12d1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12d20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12d24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12d28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12d2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12d30:	429d      	cmp	r5, r3
   12d32:	bf08      	it	eq
   12d34:	4296      	cmpeq	r6, r2
   12d36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12d3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12d3e:	d202      	bcs.n	12d46 <__aeabi_ddiv+0x6e>
   12d40:	085b      	lsrs	r3, r3, #1
   12d42:	ea4f 0232 	mov.w	r2, r2, rrx
   12d46:	1ab6      	subs	r6, r6, r2
   12d48:	eb65 0503 	sbc.w	r5, r5, r3
   12d4c:	085b      	lsrs	r3, r3, #1
   12d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12d56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   12d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d62:	bf22      	ittt	cs
   12d64:	1ab6      	subcs	r6, r6, r2
   12d66:	4675      	movcs	r5, lr
   12d68:	ea40 000c 	orrcs.w	r0, r0, ip
   12d6c:	085b      	lsrs	r3, r3, #1
   12d6e:	ea4f 0232 	mov.w	r2, r2, rrx
   12d72:	ebb6 0e02 	subs.w	lr, r6, r2
   12d76:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d7a:	bf22      	ittt	cs
   12d7c:	1ab6      	subcs	r6, r6, r2
   12d7e:	4675      	movcs	r5, lr
   12d80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12d84:	085b      	lsrs	r3, r3, #1
   12d86:	ea4f 0232 	mov.w	r2, r2, rrx
   12d8a:	ebb6 0e02 	subs.w	lr, r6, r2
   12d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d92:	bf22      	ittt	cs
   12d94:	1ab6      	subcs	r6, r6, r2
   12d96:	4675      	movcs	r5, lr
   12d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12d9c:	085b      	lsrs	r3, r3, #1
   12d9e:	ea4f 0232 	mov.w	r2, r2, rrx
   12da2:	ebb6 0e02 	subs.w	lr, r6, r2
   12da6:	eb75 0e03 	sbcs.w	lr, r5, r3
   12daa:	bf22      	ittt	cs
   12dac:	1ab6      	subcs	r6, r6, r2
   12dae:	4675      	movcs	r5, lr
   12db0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12db4:	ea55 0e06 	orrs.w	lr, r5, r6
   12db8:	d018      	beq.n	12dec <__aeabi_ddiv+0x114>
   12dba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12dbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12dc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12dc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12dca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12dce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12dd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12dd6:	d1c0      	bne.n	12d5a <__aeabi_ddiv+0x82>
   12dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12ddc:	d10b      	bne.n	12df6 <__aeabi_ddiv+0x11e>
   12dde:	ea41 0100 	orr.w	r1, r1, r0
   12de2:	f04f 0000 	mov.w	r0, #0
   12de6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12dea:	e7b6      	b.n	12d5a <__aeabi_ddiv+0x82>
   12dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12df0:	bf04      	itt	eq
   12df2:	4301      	orreq	r1, r0
   12df4:	2000      	moveq	r0, #0
   12df6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12dfa:	bf88      	it	hi
   12dfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12e00:	f63f aeaf 	bhi.w	12b62 <__aeabi_dmul+0xde>
   12e04:	ebb5 0c03 	subs.w	ip, r5, r3
   12e08:	bf04      	itt	eq
   12e0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   12e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12e12:	f150 0000 	adcs.w	r0, r0, #0
   12e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12e1a:	bd70      	pop	{r4, r5, r6, pc}
   12e1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12e20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12e24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12e28:	bfc2      	ittt	gt
   12e2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12e2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12e32:	bd70      	popgt	{r4, r5, r6, pc}
   12e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12e38:	f04f 0e00 	mov.w	lr, #0
   12e3c:	3c01      	subs	r4, #1
   12e3e:	e690      	b.n	12b62 <__aeabi_dmul+0xde>
   12e40:	ea45 0e06 	orr.w	lr, r5, r6
   12e44:	e68d      	b.n	12b62 <__aeabi_dmul+0xde>
   12e46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12e4a:	ea94 0f0c 	teq	r4, ip
   12e4e:	bf08      	it	eq
   12e50:	ea95 0f0c 	teqeq	r5, ip
   12e54:	f43f af3b 	beq.w	12cce <__aeabi_dmul+0x24a>
   12e58:	ea94 0f0c 	teq	r4, ip
   12e5c:	d10a      	bne.n	12e74 <__aeabi_ddiv+0x19c>
   12e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12e62:	f47f af34 	bne.w	12cce <__aeabi_dmul+0x24a>
   12e66:	ea95 0f0c 	teq	r5, ip
   12e6a:	f47f af25 	bne.w	12cb8 <__aeabi_dmul+0x234>
   12e6e:	4610      	mov	r0, r2
   12e70:	4619      	mov	r1, r3
   12e72:	e72c      	b.n	12cce <__aeabi_dmul+0x24a>
   12e74:	ea95 0f0c 	teq	r5, ip
   12e78:	d106      	bne.n	12e88 <__aeabi_ddiv+0x1b0>
   12e7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12e7e:	f43f aefd 	beq.w	12c7c <__aeabi_dmul+0x1f8>
   12e82:	4610      	mov	r0, r2
   12e84:	4619      	mov	r1, r3
   12e86:	e722      	b.n	12cce <__aeabi_dmul+0x24a>
   12e88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e8c:	bf18      	it	ne
   12e8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e92:	f47f aec5 	bne.w	12c20 <__aeabi_dmul+0x19c>
   12e96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12e9a:	f47f af0d 	bne.w	12cb8 <__aeabi_dmul+0x234>
   12e9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12ea2:	f47f aeeb 	bne.w	12c7c <__aeabi_dmul+0x1f8>
   12ea6:	e712      	b.n	12cce <__aeabi_dmul+0x24a>

00012ea8 <__gedf2>:
   12ea8:	f04f 3cff 	mov.w	ip, #4294967295
   12eac:	e006      	b.n	12ebc <__cmpdf2+0x4>
   12eae:	bf00      	nop

00012eb0 <__ledf2>:
   12eb0:	f04f 0c01 	mov.w	ip, #1
   12eb4:	e002      	b.n	12ebc <__cmpdf2+0x4>
   12eb6:	bf00      	nop

00012eb8 <__cmpdf2>:
   12eb8:	f04f 0c01 	mov.w	ip, #1
   12ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
   12ec0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12ec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12ec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12ecc:	bf18      	it	ne
   12ece:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   12ed2:	d01b      	beq.n	12f0c <__cmpdf2+0x54>
   12ed4:	b001      	add	sp, #4
   12ed6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   12eda:	bf0c      	ite	eq
   12edc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   12ee0:	ea91 0f03 	teqne	r1, r3
   12ee4:	bf02      	ittt	eq
   12ee6:	ea90 0f02 	teqeq	r0, r2
   12eea:	2000      	moveq	r0, #0
   12eec:	4770      	bxeq	lr
   12eee:	f110 0f00 	cmn.w	r0, #0
   12ef2:	ea91 0f03 	teq	r1, r3
   12ef6:	bf58      	it	pl
   12ef8:	4299      	cmppl	r1, r3
   12efa:	bf08      	it	eq
   12efc:	4290      	cmpeq	r0, r2
   12efe:	bf2c      	ite	cs
   12f00:	17d8      	asrcs	r0, r3, #31
   12f02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   12f06:	f040 0001 	orr.w	r0, r0, #1
   12f0a:	4770      	bx	lr
   12f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   12f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f14:	d102      	bne.n	12f1c <__cmpdf2+0x64>
   12f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   12f1a:	d107      	bne.n	12f2c <__cmpdf2+0x74>
   12f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12f24:	d1d6      	bne.n	12ed4 <__cmpdf2+0x1c>
   12f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   12f2a:	d0d3      	beq.n	12ed4 <__cmpdf2+0x1c>
   12f2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   12f30:	4770      	bx	lr
   12f32:	bf00      	nop

00012f34 <__aeabi_cdrcmple>:
   12f34:	4684      	mov	ip, r0
   12f36:	4610      	mov	r0, r2
   12f38:	4662      	mov	r2, ip
   12f3a:	468c      	mov	ip, r1
   12f3c:	4619      	mov	r1, r3
   12f3e:	4663      	mov	r3, ip
   12f40:	e000      	b.n	12f44 <__aeabi_cdcmpeq>
   12f42:	bf00      	nop

00012f44 <__aeabi_cdcmpeq>:
   12f44:	b501      	push	{r0, lr}
   12f46:	f7ff ffb7 	bl	12eb8 <__cmpdf2>
   12f4a:	2800      	cmp	r0, #0
   12f4c:	bf48      	it	mi
   12f4e:	f110 0f00 	cmnmi.w	r0, #0
   12f52:	bd01      	pop	{r0, pc}

00012f54 <__aeabi_dcmpeq>:
   12f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f58:	f7ff fff4 	bl	12f44 <__aeabi_cdcmpeq>
   12f5c:	bf0c      	ite	eq
   12f5e:	2001      	moveq	r0, #1
   12f60:	2000      	movne	r0, #0
   12f62:	f85d fb08 	ldr.w	pc, [sp], #8
   12f66:	bf00      	nop

00012f68 <__aeabi_dcmplt>:
   12f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f6c:	f7ff ffea 	bl	12f44 <__aeabi_cdcmpeq>
   12f70:	bf34      	ite	cc
   12f72:	2001      	movcc	r0, #1
   12f74:	2000      	movcs	r0, #0
   12f76:	f85d fb08 	ldr.w	pc, [sp], #8
   12f7a:	bf00      	nop

00012f7c <__aeabi_dcmple>:
   12f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f80:	f7ff ffe0 	bl	12f44 <__aeabi_cdcmpeq>
   12f84:	bf94      	ite	ls
   12f86:	2001      	movls	r0, #1
   12f88:	2000      	movhi	r0, #0
   12f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   12f8e:	bf00      	nop

00012f90 <__aeabi_dcmpge>:
   12f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   12f94:	f7ff ffce 	bl	12f34 <__aeabi_cdrcmple>
   12f98:	bf94      	ite	ls
   12f9a:	2001      	movls	r0, #1
   12f9c:	2000      	movhi	r0, #0
   12f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   12fa2:	bf00      	nop

00012fa4 <__aeabi_dcmpgt>:
   12fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   12fa8:	f7ff ffc4 	bl	12f34 <__aeabi_cdrcmple>
   12fac:	bf34      	ite	cc
   12fae:	2001      	movcc	r0, #1
   12fb0:	2000      	movcs	r0, #0
   12fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   12fb6:	bf00      	nop

00012fb8 <__aeabi_d2iz>:
   12fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12fc0:	d215      	bcs.n	12fee <__aeabi_d2iz+0x36>
   12fc2:	d511      	bpl.n	12fe8 <__aeabi_d2iz+0x30>
   12fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12fcc:	d912      	bls.n	12ff4 <__aeabi_d2iz+0x3c>
   12fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12fda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12fde:	fa23 f002 	lsr.w	r0, r3, r2
   12fe2:	bf18      	it	ne
   12fe4:	4240      	negne	r0, r0
   12fe6:	4770      	bx	lr
   12fe8:	f04f 0000 	mov.w	r0, #0
   12fec:	4770      	bx	lr
   12fee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12ff2:	d105      	bne.n	13000 <__aeabi_d2iz+0x48>
   12ff4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   12ff8:	bf08      	it	eq
   12ffa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12ffe:	4770      	bx	lr
   13000:	f04f 0000 	mov.w	r0, #0
   13004:	4770      	bx	lr
   13006:	bf00      	nop

00013008 <__aeabi_d2uiz>:
   13008:	004a      	lsls	r2, r1, #1
   1300a:	d211      	bcs.n	13030 <__aeabi_d2uiz+0x28>
   1300c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13010:	d211      	bcs.n	13036 <__aeabi_d2uiz+0x2e>
   13012:	d50d      	bpl.n	13030 <__aeabi_d2uiz+0x28>
   13014:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13018:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1301c:	d40e      	bmi.n	1303c <__aeabi_d2uiz+0x34>
   1301e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13026:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1302a:	fa23 f002 	lsr.w	r0, r3, r2
   1302e:	4770      	bx	lr
   13030:	f04f 0000 	mov.w	r0, #0
   13034:	4770      	bx	lr
   13036:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1303a:	d102      	bne.n	13042 <__aeabi_d2uiz+0x3a>
   1303c:	f04f 30ff 	mov.w	r0, #4294967295
   13040:	4770      	bx	lr
   13042:	f04f 0000 	mov.w	r0, #0
   13046:	4770      	bx	lr

00013048 <__aeabi_d2f>:
   13048:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1304c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   13050:	bf24      	itt	cs
   13052:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13056:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1305a:	d90d      	bls.n	13078 <__aeabi_d2f+0x30>
   1305c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13060:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13064:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13068:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1306c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   13070:	bf08      	it	eq
   13072:	f020 0001 	biceq.w	r0, r0, #1
   13076:	4770      	bx	lr
   13078:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1307c:	d121      	bne.n	130c2 <__aeabi_d2f+0x7a>
   1307e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   13082:	bfbc      	itt	lt
   13084:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   13088:	4770      	bxlt	lr
   1308a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1308e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   13092:	f1c2 0218 	rsb	r2, r2, #24
   13096:	f1c2 0c20 	rsb	ip, r2, #32
   1309a:	fa10 f30c 	lsls.w	r3, r0, ip
   1309e:	fa20 f002 	lsr.w	r0, r0, r2
   130a2:	bf18      	it	ne
   130a4:	f040 0001 	orrne.w	r0, r0, #1
   130a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   130ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   130b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   130b4:	ea40 000c 	orr.w	r0, r0, ip
   130b8:	fa23 f302 	lsr.w	r3, r3, r2
   130bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   130c0:	e7cc      	b.n	1305c <__aeabi_d2f+0x14>
   130c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   130c6:	d107      	bne.n	130d8 <__aeabi_d2f+0x90>
   130c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   130cc:	bf1e      	ittt	ne
   130ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   130d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   130d6:	4770      	bxne	lr
   130d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   130dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   130e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   130e4:	4770      	bx	lr
   130e6:	bf00      	nop

000130e8 <__aeabi_frsub>:
   130e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   130ec:	e002      	b.n	130f4 <__addsf3>
   130ee:	bf00      	nop

000130f0 <__aeabi_fsub>:
   130f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000130f4 <__addsf3>:
   130f4:	0042      	lsls	r2, r0, #1
   130f6:	bf1f      	itttt	ne
   130f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   130fc:	ea92 0f03 	teqne	r2, r3
   13100:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13104:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13108:	d06a      	beq.n	131e0 <__addsf3+0xec>
   1310a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1310e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   13112:	bfc1      	itttt	gt
   13114:	18d2      	addgt	r2, r2, r3
   13116:	4041      	eorgt	r1, r0
   13118:	4048      	eorgt	r0, r1
   1311a:	4041      	eorgt	r1, r0
   1311c:	bfb8      	it	lt
   1311e:	425b      	neglt	r3, r3
   13120:	2b19      	cmp	r3, #25
   13122:	bf88      	it	hi
   13124:	4770      	bxhi	lr
   13126:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1312a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1312e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13132:	bf18      	it	ne
   13134:	4240      	negne	r0, r0
   13136:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1313a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1313e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   13142:	bf18      	it	ne
   13144:	4249      	negne	r1, r1
   13146:	ea92 0f03 	teq	r2, r3
   1314a:	d03f      	beq.n	131cc <__addsf3+0xd8>
   1314c:	f1a2 0201 	sub.w	r2, r2, #1
   13150:	fa41 fc03 	asr.w	ip, r1, r3
   13154:	eb10 000c 	adds.w	r0, r0, ip
   13158:	f1c3 0320 	rsb	r3, r3, #32
   1315c:	fa01 f103 	lsl.w	r1, r1, r3
   13160:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13164:	d502      	bpl.n	1316c <__addsf3+0x78>
   13166:	4249      	negs	r1, r1
   13168:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1316c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13170:	d313      	bcc.n	1319a <__addsf3+0xa6>
   13172:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13176:	d306      	bcc.n	13186 <__addsf3+0x92>
   13178:	0840      	lsrs	r0, r0, #1
   1317a:	ea4f 0131 	mov.w	r1, r1, rrx
   1317e:	f102 0201 	add.w	r2, r2, #1
   13182:	2afe      	cmp	r2, #254	; 0xfe
   13184:	d251      	bcs.n	1322a <__addsf3+0x136>
   13186:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1318a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1318e:	bf08      	it	eq
   13190:	f020 0001 	biceq.w	r0, r0, #1
   13194:	ea40 0003 	orr.w	r0, r0, r3
   13198:	4770      	bx	lr
   1319a:	0049      	lsls	r1, r1, #1
   1319c:	eb40 0000 	adc.w	r0, r0, r0
   131a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   131a4:	f1a2 0201 	sub.w	r2, r2, #1
   131a8:	d1ed      	bne.n	13186 <__addsf3+0x92>
   131aa:	fab0 fc80 	clz	ip, r0
   131ae:	f1ac 0c08 	sub.w	ip, ip, #8
   131b2:	ebb2 020c 	subs.w	r2, r2, ip
   131b6:	fa00 f00c 	lsl.w	r0, r0, ip
   131ba:	bfaa      	itet	ge
   131bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   131c0:	4252      	neglt	r2, r2
   131c2:	4318      	orrge	r0, r3
   131c4:	bfbc      	itt	lt
   131c6:	40d0      	lsrlt	r0, r2
   131c8:	4318      	orrlt	r0, r3
   131ca:	4770      	bx	lr
   131cc:	f092 0f00 	teq	r2, #0
   131d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   131d4:	bf06      	itte	eq
   131d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   131da:	3201      	addeq	r2, #1
   131dc:	3b01      	subne	r3, #1
   131de:	e7b5      	b.n	1314c <__addsf3+0x58>
   131e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   131e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   131e8:	bf18      	it	ne
   131ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   131ee:	d021      	beq.n	13234 <__addsf3+0x140>
   131f0:	ea92 0f03 	teq	r2, r3
   131f4:	d004      	beq.n	13200 <__addsf3+0x10c>
   131f6:	f092 0f00 	teq	r2, #0
   131fa:	bf08      	it	eq
   131fc:	4608      	moveq	r0, r1
   131fe:	4770      	bx	lr
   13200:	ea90 0f01 	teq	r0, r1
   13204:	bf1c      	itt	ne
   13206:	2000      	movne	r0, #0
   13208:	4770      	bxne	lr
   1320a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1320e:	d104      	bne.n	1321a <__addsf3+0x126>
   13210:	0040      	lsls	r0, r0, #1
   13212:	bf28      	it	cs
   13214:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13218:	4770      	bx	lr
   1321a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1321e:	bf3c      	itt	cc
   13220:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13224:	4770      	bxcc	lr
   13226:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1322a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1322e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13232:	4770      	bx	lr
   13234:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13238:	bf16      	itet	ne
   1323a:	4608      	movne	r0, r1
   1323c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13240:	4601      	movne	r1, r0
   13242:	0242      	lsls	r2, r0, #9
   13244:	bf06      	itte	eq
   13246:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1324a:	ea90 0f01 	teqeq	r0, r1
   1324e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   13252:	4770      	bx	lr

00013254 <__aeabi_ui2f>:
   13254:	f04f 0300 	mov.w	r3, #0
   13258:	e004      	b.n	13264 <__aeabi_i2f+0x8>
   1325a:	bf00      	nop

0001325c <__aeabi_i2f>:
   1325c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13260:	bf48      	it	mi
   13262:	4240      	negmi	r0, r0
   13264:	ea5f 0c00 	movs.w	ip, r0
   13268:	bf08      	it	eq
   1326a:	4770      	bxeq	lr
   1326c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13270:	4601      	mov	r1, r0
   13272:	f04f 0000 	mov.w	r0, #0
   13276:	e01c      	b.n	132b2 <__aeabi_l2f+0x2a>

00013278 <__aeabi_ul2f>:
   13278:	ea50 0201 	orrs.w	r2, r0, r1
   1327c:	bf08      	it	eq
   1327e:	4770      	bxeq	lr
   13280:	f04f 0300 	mov.w	r3, #0
   13284:	e00a      	b.n	1329c <__aeabi_l2f+0x14>
   13286:	bf00      	nop

00013288 <__aeabi_l2f>:
   13288:	ea50 0201 	orrs.w	r2, r0, r1
   1328c:	bf08      	it	eq
   1328e:	4770      	bxeq	lr
   13290:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13294:	d502      	bpl.n	1329c <__aeabi_l2f+0x14>
   13296:	4240      	negs	r0, r0
   13298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1329c:	ea5f 0c01 	movs.w	ip, r1
   132a0:	bf02      	ittt	eq
   132a2:	4684      	moveq	ip, r0
   132a4:	4601      	moveq	r1, r0
   132a6:	2000      	moveq	r0, #0
   132a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   132ac:	bf08      	it	eq
   132ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   132b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   132b6:	fabc f28c 	clz	r2, ip
   132ba:	3a08      	subs	r2, #8
   132bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   132c0:	db10      	blt.n	132e4 <__aeabi_l2f+0x5c>
   132c2:	fa01 fc02 	lsl.w	ip, r1, r2
   132c6:	4463      	add	r3, ip
   132c8:	fa00 fc02 	lsl.w	ip, r0, r2
   132cc:	f1c2 0220 	rsb	r2, r2, #32
   132d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   132d4:	fa20 f202 	lsr.w	r2, r0, r2
   132d8:	eb43 0002 	adc.w	r0, r3, r2
   132dc:	bf08      	it	eq
   132de:	f020 0001 	biceq.w	r0, r0, #1
   132e2:	4770      	bx	lr
   132e4:	f102 0220 	add.w	r2, r2, #32
   132e8:	fa01 fc02 	lsl.w	ip, r1, r2
   132ec:	f1c2 0220 	rsb	r2, r2, #32
   132f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   132f4:	fa21 f202 	lsr.w	r2, r1, r2
   132f8:	eb43 0002 	adc.w	r0, r3, r2
   132fc:	bf08      	it	eq
   132fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13302:	4770      	bx	lr

00013304 <__aeabi_fmul>:
   13304:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13308:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1330c:	bf1e      	ittt	ne
   1330e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13312:	ea92 0f0c 	teqne	r2, ip
   13316:	ea93 0f0c 	teqne	r3, ip
   1331a:	d06f      	beq.n	133fc <__aeabi_fmul+0xf8>
   1331c:	441a      	add	r2, r3
   1331e:	ea80 0c01 	eor.w	ip, r0, r1
   13322:	0240      	lsls	r0, r0, #9
   13324:	bf18      	it	ne
   13326:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1332a:	d01e      	beq.n	1336a <__aeabi_fmul+0x66>
   1332c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13330:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13334:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13338:	fba0 3101 	umull	r3, r1, r0, r1
   1333c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13340:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13344:	bf3e      	ittt	cc
   13346:	0049      	lslcc	r1, r1, #1
   13348:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1334c:	005b      	lslcc	r3, r3, #1
   1334e:	ea40 0001 	orr.w	r0, r0, r1
   13352:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13356:	2afd      	cmp	r2, #253	; 0xfd
   13358:	d81d      	bhi.n	13396 <__aeabi_fmul+0x92>
   1335a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1335e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13362:	bf08      	it	eq
   13364:	f020 0001 	biceq.w	r0, r0, #1
   13368:	4770      	bx	lr
   1336a:	f090 0f00 	teq	r0, #0
   1336e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13372:	bf08      	it	eq
   13374:	0249      	lsleq	r1, r1, #9
   13376:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1337a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1337e:	3a7f      	subs	r2, #127	; 0x7f
   13380:	bfc2      	ittt	gt
   13382:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13386:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1338a:	4770      	bxgt	lr
   1338c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13390:	f04f 0300 	mov.w	r3, #0
   13394:	3a01      	subs	r2, #1
   13396:	dc5d      	bgt.n	13454 <__aeabi_fmul+0x150>
   13398:	f112 0f19 	cmn.w	r2, #25
   1339c:	bfdc      	itt	le
   1339e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   133a2:	4770      	bxle	lr
   133a4:	f1c2 0200 	rsb	r2, r2, #0
   133a8:	0041      	lsls	r1, r0, #1
   133aa:	fa21 f102 	lsr.w	r1, r1, r2
   133ae:	f1c2 0220 	rsb	r2, r2, #32
   133b2:	fa00 fc02 	lsl.w	ip, r0, r2
   133b6:	ea5f 0031 	movs.w	r0, r1, rrx
   133ba:	f140 0000 	adc.w	r0, r0, #0
   133be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   133c2:	bf08      	it	eq
   133c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   133c8:	4770      	bx	lr
   133ca:	f092 0f00 	teq	r2, #0
   133ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   133d2:	bf02      	ittt	eq
   133d4:	0040      	lsleq	r0, r0, #1
   133d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   133da:	3a01      	subeq	r2, #1
   133dc:	d0f9      	beq.n	133d2 <__aeabi_fmul+0xce>
   133de:	ea40 000c 	orr.w	r0, r0, ip
   133e2:	f093 0f00 	teq	r3, #0
   133e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   133ea:	bf02      	ittt	eq
   133ec:	0049      	lsleq	r1, r1, #1
   133ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   133f2:	3b01      	subeq	r3, #1
   133f4:	d0f9      	beq.n	133ea <__aeabi_fmul+0xe6>
   133f6:	ea41 010c 	orr.w	r1, r1, ip
   133fa:	e78f      	b.n	1331c <__aeabi_fmul+0x18>
   133fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13400:	ea92 0f0c 	teq	r2, ip
   13404:	bf18      	it	ne
   13406:	ea93 0f0c 	teqne	r3, ip
   1340a:	d00a      	beq.n	13422 <__aeabi_fmul+0x11e>
   1340c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13410:	bf18      	it	ne
   13412:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13416:	d1d8      	bne.n	133ca <__aeabi_fmul+0xc6>
   13418:	ea80 0001 	eor.w	r0, r0, r1
   1341c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13420:	4770      	bx	lr
   13422:	f090 0f00 	teq	r0, #0
   13426:	bf17      	itett	ne
   13428:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1342c:	4608      	moveq	r0, r1
   1342e:	f091 0f00 	teqne	r1, #0
   13432:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13436:	d014      	beq.n	13462 <__aeabi_fmul+0x15e>
   13438:	ea92 0f0c 	teq	r2, ip
   1343c:	d101      	bne.n	13442 <__aeabi_fmul+0x13e>
   1343e:	0242      	lsls	r2, r0, #9
   13440:	d10f      	bne.n	13462 <__aeabi_fmul+0x15e>
   13442:	ea93 0f0c 	teq	r3, ip
   13446:	d103      	bne.n	13450 <__aeabi_fmul+0x14c>
   13448:	024b      	lsls	r3, r1, #9
   1344a:	bf18      	it	ne
   1344c:	4608      	movne	r0, r1
   1344e:	d108      	bne.n	13462 <__aeabi_fmul+0x15e>
   13450:	ea80 0001 	eor.w	r0, r0, r1
   13454:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13458:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1345c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13460:	4770      	bx	lr
   13462:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13466:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1346a:	4770      	bx	lr

0001346c <__aeabi_fdiv>:
   1346c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13470:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13474:	bf1e      	ittt	ne
   13476:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1347a:	ea92 0f0c 	teqne	r2, ip
   1347e:	ea93 0f0c 	teqne	r3, ip
   13482:	d069      	beq.n	13558 <__aeabi_fdiv+0xec>
   13484:	eba2 0203 	sub.w	r2, r2, r3
   13488:	ea80 0c01 	eor.w	ip, r0, r1
   1348c:	0249      	lsls	r1, r1, #9
   1348e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   13492:	d037      	beq.n	13504 <__aeabi_fdiv+0x98>
   13494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13498:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1349c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   134a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   134a4:	428b      	cmp	r3, r1
   134a6:	bf38      	it	cc
   134a8:	005b      	lslcc	r3, r3, #1
   134aa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   134ae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   134b2:	428b      	cmp	r3, r1
   134b4:	bf24      	itt	cs
   134b6:	1a5b      	subcs	r3, r3, r1
   134b8:	ea40 000c 	orrcs.w	r0, r0, ip
   134bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   134c0:	bf24      	itt	cs
   134c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   134c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   134ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   134ce:	bf24      	itt	cs
   134d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   134d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   134d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   134dc:	bf24      	itt	cs
   134de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   134e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   134e6:	011b      	lsls	r3, r3, #4
   134e8:	bf18      	it	ne
   134ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   134ee:	d1e0      	bne.n	134b2 <__aeabi_fdiv+0x46>
   134f0:	2afd      	cmp	r2, #253	; 0xfd
   134f2:	f63f af50 	bhi.w	13396 <__aeabi_fmul+0x92>
   134f6:	428b      	cmp	r3, r1
   134f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   134fc:	bf08      	it	eq
   134fe:	f020 0001 	biceq.w	r0, r0, #1
   13502:	4770      	bx	lr
   13504:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13508:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1350c:	327f      	adds	r2, #127	; 0x7f
   1350e:	bfc2      	ittt	gt
   13510:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13514:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13518:	4770      	bxgt	lr
   1351a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1351e:	f04f 0300 	mov.w	r3, #0
   13522:	3a01      	subs	r2, #1
   13524:	e737      	b.n	13396 <__aeabi_fmul+0x92>
   13526:	f092 0f00 	teq	r2, #0
   1352a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1352e:	bf02      	ittt	eq
   13530:	0040      	lsleq	r0, r0, #1
   13532:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13536:	3a01      	subeq	r2, #1
   13538:	d0f9      	beq.n	1352e <__aeabi_fdiv+0xc2>
   1353a:	ea40 000c 	orr.w	r0, r0, ip
   1353e:	f093 0f00 	teq	r3, #0
   13542:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13546:	bf02      	ittt	eq
   13548:	0049      	lsleq	r1, r1, #1
   1354a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1354e:	3b01      	subeq	r3, #1
   13550:	d0f9      	beq.n	13546 <__aeabi_fdiv+0xda>
   13552:	ea41 010c 	orr.w	r1, r1, ip
   13556:	e795      	b.n	13484 <__aeabi_fdiv+0x18>
   13558:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1355c:	ea92 0f0c 	teq	r2, ip
   13560:	d108      	bne.n	13574 <__aeabi_fdiv+0x108>
   13562:	0242      	lsls	r2, r0, #9
   13564:	f47f af7d 	bne.w	13462 <__aeabi_fmul+0x15e>
   13568:	ea93 0f0c 	teq	r3, ip
   1356c:	f47f af70 	bne.w	13450 <__aeabi_fmul+0x14c>
   13570:	4608      	mov	r0, r1
   13572:	e776      	b.n	13462 <__aeabi_fmul+0x15e>
   13574:	ea93 0f0c 	teq	r3, ip
   13578:	d104      	bne.n	13584 <__aeabi_fdiv+0x118>
   1357a:	024b      	lsls	r3, r1, #9
   1357c:	f43f af4c 	beq.w	13418 <__aeabi_fmul+0x114>
   13580:	4608      	mov	r0, r1
   13582:	e76e      	b.n	13462 <__aeabi_fmul+0x15e>
   13584:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13588:	bf18      	it	ne
   1358a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1358e:	d1ca      	bne.n	13526 <__aeabi_fdiv+0xba>
   13590:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13594:	f47f af5c 	bne.w	13450 <__aeabi_fmul+0x14c>
   13598:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1359c:	f47f af3c 	bne.w	13418 <__aeabi_fmul+0x114>
   135a0:	e75f      	b.n	13462 <__aeabi_fmul+0x15e>
   135a2:	bf00      	nop

000135a4 <__gesf2>:
   135a4:	f04f 3cff 	mov.w	ip, #4294967295
   135a8:	e006      	b.n	135b8 <__cmpsf2+0x4>
   135aa:	bf00      	nop

000135ac <__lesf2>:
   135ac:	f04f 0c01 	mov.w	ip, #1
   135b0:	e002      	b.n	135b8 <__cmpsf2+0x4>
   135b2:	bf00      	nop

000135b4 <__cmpsf2>:
   135b4:	f04f 0c01 	mov.w	ip, #1
   135b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   135bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   135c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   135c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135c8:	bf18      	it	ne
   135ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   135ce:	d011      	beq.n	135f4 <__cmpsf2+0x40>
   135d0:	b001      	add	sp, #4
   135d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   135d6:	bf18      	it	ne
   135d8:	ea90 0f01 	teqne	r0, r1
   135dc:	bf58      	it	pl
   135de:	ebb2 0003 	subspl.w	r0, r2, r3
   135e2:	bf88      	it	hi
   135e4:	17c8      	asrhi	r0, r1, #31
   135e6:	bf38      	it	cc
   135e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   135ec:	bf18      	it	ne
   135ee:	f040 0001 	orrne.w	r0, r0, #1
   135f2:	4770      	bx	lr
   135f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135f8:	d102      	bne.n	13600 <__cmpsf2+0x4c>
   135fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   135fe:	d105      	bne.n	1360c <__cmpsf2+0x58>
   13600:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   13604:	d1e4      	bne.n	135d0 <__cmpsf2+0x1c>
   13606:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1360a:	d0e1      	beq.n	135d0 <__cmpsf2+0x1c>
   1360c:	f85d 0b04 	ldr.w	r0, [sp], #4
   13610:	4770      	bx	lr
   13612:	bf00      	nop

00013614 <__aeabi_cfrcmple>:
   13614:	4684      	mov	ip, r0
   13616:	4608      	mov	r0, r1
   13618:	4661      	mov	r1, ip
   1361a:	e7ff      	b.n	1361c <__aeabi_cfcmpeq>

0001361c <__aeabi_cfcmpeq>:
   1361c:	b50f      	push	{r0, r1, r2, r3, lr}
   1361e:	f7ff ffc9 	bl	135b4 <__cmpsf2>
   13622:	2800      	cmp	r0, #0
   13624:	bf48      	it	mi
   13626:	f110 0f00 	cmnmi.w	r0, #0
   1362a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001362c <__aeabi_fcmpeq>:
   1362c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13630:	f7ff fff4 	bl	1361c <__aeabi_cfcmpeq>
   13634:	bf0c      	ite	eq
   13636:	2001      	moveq	r0, #1
   13638:	2000      	movne	r0, #0
   1363a:	f85d fb08 	ldr.w	pc, [sp], #8
   1363e:	bf00      	nop

00013640 <__aeabi_fcmplt>:
   13640:	f84d ed08 	str.w	lr, [sp, #-8]!
   13644:	f7ff ffea 	bl	1361c <__aeabi_cfcmpeq>
   13648:	bf34      	ite	cc
   1364a:	2001      	movcc	r0, #1
   1364c:	2000      	movcs	r0, #0
   1364e:	f85d fb08 	ldr.w	pc, [sp], #8
   13652:	bf00      	nop

00013654 <__aeabi_fcmple>:
   13654:	f84d ed08 	str.w	lr, [sp, #-8]!
   13658:	f7ff ffe0 	bl	1361c <__aeabi_cfcmpeq>
   1365c:	bf94      	ite	ls
   1365e:	2001      	movls	r0, #1
   13660:	2000      	movhi	r0, #0
   13662:	f85d fb08 	ldr.w	pc, [sp], #8
   13666:	bf00      	nop

00013668 <__aeabi_fcmpge>:
   13668:	f84d ed08 	str.w	lr, [sp, #-8]!
   1366c:	f7ff ffd2 	bl	13614 <__aeabi_cfrcmple>
   13670:	bf94      	ite	ls
   13672:	2001      	movls	r0, #1
   13674:	2000      	movhi	r0, #0
   13676:	f85d fb08 	ldr.w	pc, [sp], #8
   1367a:	bf00      	nop

0001367c <__aeabi_fcmpgt>:
   1367c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13680:	f7ff ffc8 	bl	13614 <__aeabi_cfrcmple>
   13684:	bf34      	ite	cc
   13686:	2001      	movcc	r0, #1
   13688:	2000      	movcs	r0, #0
   1368a:	f85d fb08 	ldr.w	pc, [sp], #8
   1368e:	bf00      	nop

00013690 <__aeabi_f2iz>:
   13690:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13694:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13698:	d30f      	bcc.n	136ba <__aeabi_f2iz+0x2a>
   1369a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1369e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   136a2:	d90d      	bls.n	136c0 <__aeabi_f2iz+0x30>
   136a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   136a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   136ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   136b0:	fa23 f002 	lsr.w	r0, r3, r2
   136b4:	bf18      	it	ne
   136b6:	4240      	negne	r0, r0
   136b8:	4770      	bx	lr
   136ba:	f04f 0000 	mov.w	r0, #0
   136be:	4770      	bx	lr
   136c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   136c4:	d101      	bne.n	136ca <__aeabi_f2iz+0x3a>
   136c6:	0242      	lsls	r2, r0, #9
   136c8:	d105      	bne.n	136d6 <__aeabi_f2iz+0x46>
   136ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   136ce:	bf08      	it	eq
   136d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   136d4:	4770      	bx	lr
   136d6:	f04f 0000 	mov.w	r0, #0
   136da:	4770      	bx	lr

000136dc <memcpy>:
   136dc:	2a0f      	cmp	r2, #15
   136de:	b4f0      	push	{r4, r5, r6, r7}
   136e0:	d945      	bls.n	1376e <memcpy+0x92>
   136e2:	ea40 0301 	orr.w	r3, r0, r1
   136e6:	079b      	lsls	r3, r3, #30
   136e8:	d145      	bne.n	13776 <memcpy+0x9a>
   136ea:	f1a2 0710 	sub.w	r7, r2, #16
   136ee:	460c      	mov	r4, r1
   136f0:	4603      	mov	r3, r0
   136f2:	093f      	lsrs	r7, r7, #4
   136f4:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   136f8:	3610      	adds	r6, #16
   136fa:	6825      	ldr	r5, [r4, #0]
   136fc:	3310      	adds	r3, #16
   136fe:	3410      	adds	r4, #16
   13700:	f843 5c10 	str.w	r5, [r3, #-16]
   13704:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   13708:	f843 5c0c 	str.w	r5, [r3, #-12]
   1370c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   13710:	f843 5c08 	str.w	r5, [r3, #-8]
   13714:	f854 5c04 	ldr.w	r5, [r4, #-4]
   13718:	f843 5c04 	str.w	r5, [r3, #-4]
   1371c:	42b3      	cmp	r3, r6
   1371e:	d1ec      	bne.n	136fa <memcpy+0x1e>
   13720:	1c7b      	adds	r3, r7, #1
   13722:	f002 0c0f 	and.w	ip, r2, #15
   13726:	f1bc 0f03 	cmp.w	ip, #3
   1372a:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1372e:	4419      	add	r1, r3
   13730:	4403      	add	r3, r0
   13732:	d922      	bls.n	1377a <memcpy+0x9e>
   13734:	460e      	mov	r6, r1
   13736:	461d      	mov	r5, r3
   13738:	4664      	mov	r4, ip
   1373a:	f856 7b04 	ldr.w	r7, [r6], #4
   1373e:	3c04      	subs	r4, #4
   13740:	2c03      	cmp	r4, #3
   13742:	f845 7b04 	str.w	r7, [r5], #4
   13746:	d8f8      	bhi.n	1373a <memcpy+0x5e>
   13748:	f1ac 0404 	sub.w	r4, ip, #4
   1374c:	f002 0203 	and.w	r2, r2, #3
   13750:	f024 0403 	bic.w	r4, r4, #3
   13754:	3404      	adds	r4, #4
   13756:	4423      	add	r3, r4
   13758:	4421      	add	r1, r4
   1375a:	b132      	cbz	r2, 1376a <memcpy+0x8e>
   1375c:	440a      	add	r2, r1
   1375e:	f811 4b01 	ldrb.w	r4, [r1], #1
   13762:	4291      	cmp	r1, r2
   13764:	f803 4b01 	strb.w	r4, [r3], #1
   13768:	d1f9      	bne.n	1375e <memcpy+0x82>
   1376a:	bcf0      	pop	{r4, r5, r6, r7}
   1376c:	4770      	bx	lr
   1376e:	4603      	mov	r3, r0
   13770:	2a00      	cmp	r2, #0
   13772:	d1f3      	bne.n	1375c <memcpy+0x80>
   13774:	e7f9      	b.n	1376a <memcpy+0x8e>
   13776:	4603      	mov	r3, r0
   13778:	e7f0      	b.n	1375c <memcpy+0x80>
   1377a:	4662      	mov	r2, ip
   1377c:	2a00      	cmp	r2, #0
   1377e:	d1ed      	bne.n	1375c <memcpy+0x80>
   13780:	e7f3      	b.n	1376a <memcpy+0x8e>
   13782:	bf00      	nop

00013784 <memset>:
   13784:	0783      	lsls	r3, r0, #30
   13786:	b4f0      	push	{r4, r5, r6, r7}
   13788:	d048      	beq.n	1381c <memset+0x98>
   1378a:	1e54      	subs	r4, r2, #1
   1378c:	2a00      	cmp	r2, #0
   1378e:	d043      	beq.n	13818 <memset+0x94>
   13790:	b2cd      	uxtb	r5, r1
   13792:	4603      	mov	r3, r0
   13794:	e002      	b.n	1379c <memset+0x18>
   13796:	2c00      	cmp	r4, #0
   13798:	d03e      	beq.n	13818 <memset+0x94>
   1379a:	4614      	mov	r4, r2
   1379c:	f803 5b01 	strb.w	r5, [r3], #1
   137a0:	f013 0f03 	tst.w	r3, #3
   137a4:	f104 32ff 	add.w	r2, r4, #4294967295
   137a8:	d1f5      	bne.n	13796 <memset+0x12>
   137aa:	2c03      	cmp	r4, #3
   137ac:	d92d      	bls.n	1380a <memset+0x86>
   137ae:	b2cd      	uxtb	r5, r1
   137b0:	2c0f      	cmp	r4, #15
   137b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   137b6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   137ba:	d918      	bls.n	137ee <memset+0x6a>
   137bc:	f1a4 0710 	sub.w	r7, r4, #16
   137c0:	f103 0610 	add.w	r6, r3, #16
   137c4:	461a      	mov	r2, r3
   137c6:	093f      	lsrs	r7, r7, #4
   137c8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   137cc:	6015      	str	r5, [r2, #0]
   137ce:	3210      	adds	r2, #16
   137d0:	f842 5c0c 	str.w	r5, [r2, #-12]
   137d4:	f842 5c08 	str.w	r5, [r2, #-8]
   137d8:	f842 5c04 	str.w	r5, [r2, #-4]
   137dc:	42b2      	cmp	r2, r6
   137de:	d1f5      	bne.n	137cc <memset+0x48>
   137e0:	f004 040f 	and.w	r4, r4, #15
   137e4:	3701      	adds	r7, #1
   137e6:	2c03      	cmp	r4, #3
   137e8:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   137ec:	d90d      	bls.n	1380a <memset+0x86>
   137ee:	461e      	mov	r6, r3
   137f0:	4622      	mov	r2, r4
   137f2:	3a04      	subs	r2, #4
   137f4:	f846 5b04 	str.w	r5, [r6], #4
   137f8:	2a03      	cmp	r2, #3
   137fa:	d8fa      	bhi.n	137f2 <memset+0x6e>
   137fc:	1f22      	subs	r2, r4, #4
   137fe:	f004 0403 	and.w	r4, r4, #3
   13802:	f022 0203 	bic.w	r2, r2, #3
   13806:	3204      	adds	r2, #4
   13808:	4413      	add	r3, r2
   1380a:	b12c      	cbz	r4, 13818 <memset+0x94>
   1380c:	b2c9      	uxtb	r1, r1
   1380e:	441c      	add	r4, r3
   13810:	f803 1b01 	strb.w	r1, [r3], #1
   13814:	42a3      	cmp	r3, r4
   13816:	d1fb      	bne.n	13810 <memset+0x8c>
   13818:	bcf0      	pop	{r4, r5, r6, r7}
   1381a:	4770      	bx	lr
   1381c:	4614      	mov	r4, r2
   1381e:	4603      	mov	r3, r0
   13820:	e7c3      	b.n	137aa <memset+0x26>
   13822:	bf00      	nop

00013824 <strncpy>:
   13824:	ea40 0301 	orr.w	r3, r0, r1
   13828:	079b      	lsls	r3, r3, #30
   1382a:	b470      	push	{r4, r5, r6}
   1382c:	d12b      	bne.n	13886 <strncpy+0x62>
   1382e:	2a03      	cmp	r2, #3
   13830:	bf84      	itt	hi
   13832:	460b      	movhi	r3, r1
   13834:	4605      	movhi	r5, r0
   13836:	d926      	bls.n	13886 <strncpy+0x62>
   13838:	4619      	mov	r1, r3
   1383a:	f853 4b04 	ldr.w	r4, [r3], #4
   1383e:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   13842:	ea26 0604 	bic.w	r6, r6, r4
   13846:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1384a:	d105      	bne.n	13858 <strncpy+0x34>
   1384c:	3a04      	subs	r2, #4
   1384e:	f845 4b04 	str.w	r4, [r5], #4
   13852:	2a03      	cmp	r2, #3
   13854:	4619      	mov	r1, r3
   13856:	d8ef      	bhi.n	13838 <strncpy+0x14>
   13858:	b19a      	cbz	r2, 13882 <strncpy+0x5e>
   1385a:	780c      	ldrb	r4, [r1, #0]
   1385c:	3a01      	subs	r2, #1
   1385e:	1c6b      	adds	r3, r5, #1
   13860:	702c      	strb	r4, [r5, #0]
   13862:	b13c      	cbz	r4, 13874 <strncpy+0x50>
   13864:	b16a      	cbz	r2, 13882 <strncpy+0x5e>
   13866:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1386a:	3a01      	subs	r2, #1
   1386c:	f803 4b01 	strb.w	r4, [r3], #1
   13870:	2c00      	cmp	r4, #0
   13872:	d1f7      	bne.n	13864 <strncpy+0x40>
   13874:	b12a      	cbz	r2, 13882 <strncpy+0x5e>
   13876:	441a      	add	r2, r3
   13878:	2100      	movs	r1, #0
   1387a:	f803 1b01 	strb.w	r1, [r3], #1
   1387e:	4293      	cmp	r3, r2
   13880:	d1fb      	bne.n	1387a <strncpy+0x56>
   13882:	bc70      	pop	{r4, r5, r6}
   13884:	4770      	bx	lr
   13886:	4605      	mov	r5, r0
   13888:	e7e6      	b.n	13858 <strncpy+0x34>
   1388a:	bf00      	nop

0001388c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   1388c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1388e:	e003      	b.n	13898 <LoopCopyDataInit>

00013890 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   13890:	4b0a      	ldr	r3, [pc, #40]	; (138bc <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   13892:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   13894:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   13896:	3104      	adds	r1, #4

00013898 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   13898:	4809      	ldr	r0, [pc, #36]	; (138c0 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1389a:	4b0a      	ldr	r3, [pc, #40]	; (138c4 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   1389c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   1389e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   138a0:	d3f6      	bcc.n	13890 <CopyDataInit>
	ldr	r2, =_sbss
   138a2:	4a09      	ldr	r2, [pc, #36]	; (138c8 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   138a4:	e002      	b.n	138ac <LoopFillZerobss>

000138a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   138a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
   138a8:	f842 3b04 	str.w	r3, [r2], #4

000138ac <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138ac:	4b07      	ldr	r3, [pc, #28]	; (138cc <LoopFillZerobss+0x20>)
	cmp	r2, r3
   138ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
   138b0:	d3f9      	bcc.n	138a6 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   138b2:	f7ec fd43 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   138b6:	f7fe fec7 	bl	12648 <main>
	bx	lr    
   138ba:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   138bc:	000139c4 	.word	0x000139c4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   138c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   138c4:	200001a0 	.word	0x200001a0
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   138c8:	200001a0 	.word	0x200001a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   138cc:	2004be40 	.word	0x2004be40

000138d0 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   138d0:	e7fe      	b.n	138d0 <ADC1_2_IRQHandler>
   138d2:	0000      	movs	r0, r0
   138d4:	00000031 	.word	0x00000031
   138d8:	00000032 	.word	0x00000032
   138dc:	00000033 	.word	0x00000033
   138e0:	00000034 	.word	0x00000034
   138e4:	00000035 	.word	0x00000035
   138e8:	00000036 	.word	0x00000036
   138ec:	00000037 	.word	0x00000037
   138f0:	00000038 	.word	0x00000038
   138f4:	00000039 	.word	0x00000039
   138f8:	00003031 	.word	0x00003031
   138fc:	00003131 	.word	0x00003131
   13900:	00003231 	.word	0x00003231
   13904:	00003331 	.word	0x00003331
   13908:	454c4449 	.word	0x454c4449
   1390c:	00000000 	.word	0x00000000

00013910 <ulKernelPriority>:
   13910:	0000007f                                ....

00013914 <heapSTRUCT_SIZE>:
   13914:	00010010                                         ..

00013916 <version>:
   13916:	3d5a0001                                         ..

00013918 <utm_east0>:
   13918:	00093d5a                                Z=..

0001391c <utm_north0>:
   1391c:	005875e6                                .uX.

00013920 <climb_pgain>:
   13920:	bcf5c28f                                ....

00013924 <climb_igain>:
   13924:	3dcccccd                                ...=

00013928 <level_gaz>:
   13928:	3e9eb852                                R..>

0001392c <nav_east0>:
   1392c:	00093d5a                                Z=..

00013930 <nav_north0>:
   13930:	005875e6                                .uX.

00013934 <nb_waypoint>:
   13934:	00000007 33323130 37363534 42413938     ....0123456789AB
   13944:	46454443                                CDEF

00013948 <failsafe>:
	...
   1395c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   1396c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   1397c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   1398c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   1399c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   139ac:	000d0a30 00000d0a 7373696d 61656420     0.......miss dea
   139bc:	6e696c64 000d0a65                       dline...
